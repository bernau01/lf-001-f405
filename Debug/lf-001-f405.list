
lf-001-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  080110f0  080110f0  000210f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801197c  0801197c  000304fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801197c  0801197c  0002197c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011984  08011984  000304fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011984  08011984  00021984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011988  08011988  00021988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004fc  20000000  0801198c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304fc  2**0
                  CONTENTS
 10 .bss          00001044  200004fc  200004fc  000304fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001540  20001540  000304fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f8dd  00000000  00000000  0003052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b11  00000000  00000000  0004fe09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  00054920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001830  00000000  00000000  00056340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000415bc  00000000  00000000  00057b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023a56  00000000  00000000  0009912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130b05  00000000  00000000  000bcb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ed687  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f0c  00000000  00000000  001ed6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004fc 	.word	0x200004fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080110d4 	.word	0x080110d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000500 	.word	0x20000500
 80001cc:	080110d4 	.word	0x080110d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa0:	4a7e      	ldr	r2, [pc, #504]	; (800119c <MX_ADC1_Init+0x210>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fb0:	4b79      	ldr	r3, [pc, #484]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b78      	ldr	r3, [pc, #480]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b74      	ldr	r3, [pc, #464]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fcc:	4a74      	ldr	r2, [pc, #464]	; (80011a0 <MX_ADC1_Init+0x214>)
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000fd6:	4b70      	ldr	r3, [pc, #448]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd8:	220e      	movs	r2, #14
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	486b      	ldr	r0, [pc, #428]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fec:	f008 f8d2 	bl	8009194 <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f001 f9a0 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001002:	2303      	movs	r3, #3
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4863      	ldr	r0, [pc, #396]	; (8001198 <MX_ADC1_Init+0x20c>)
 800100c:	f008 fb44 	bl	8009698 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001016:	f001 f990 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	485c      	ldr	r0, [pc, #368]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001028:	f008 fb36 	bl	8009698 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001032:	f001 f982 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001036:	230e      	movs	r3, #14
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800103a:	2303      	movs	r3, #3
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4855      	ldr	r0, [pc, #340]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001044:	f008 fb28 	bl	8009698 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800104e:	f001 f974 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001052:	230b      	movs	r3, #11
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001056:	2304      	movs	r3, #4
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	484e      	ldr	r0, [pc, #312]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001060:	f008 fb1a 	bl	8009698 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800106a:	f001 f966 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800106e:	2307      	movs	r3, #7
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001072:	2305      	movs	r3, #5
 8001074:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <MX_ADC1_Init+0x20c>)
 800107c:	f008 fb0c 	bl	8009698 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001086:	f001 f958 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800108a:	230c      	movs	r3, #12
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800108e:	2306      	movs	r3, #6
 8001090:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4840      	ldr	r0, [pc, #256]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001098:	f008 fafe 	bl	8009698 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010a2:	f001 f94a 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010a6:	2306      	movs	r3, #6
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4838      	ldr	r0, [pc, #224]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010b8:	f008 faee 	bl	8009698 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010c2:	f001 f93a 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010c6:	230d      	movs	r3, #13
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010ce:	2303      	movs	r3, #3
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4830      	ldr	r0, [pc, #192]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010d8:	f008 fade 	bl	8009698 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80010e2:	f001 f92a 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80010ea:	2309      	movs	r3, #9
 80010ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010f4:	f008 fad0 	bl	8009698 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80010fe:	f001 f91c 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001106:	230a      	movs	r3, #10
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001110:	f008 fac2 	bl	8009698 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 800111a:	f001 f90e 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800111e:	2304      	movs	r3, #4
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001122:	230b      	movs	r3, #11
 8001124:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <MX_ADC1_Init+0x20c>)
 800112c:	f008 fab4 	bl	8009698 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8001136:	f001 f900 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800113a:	2301      	movs	r3, #1
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800113e:	230c      	movs	r3, #12
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001148:	f008 faa6 	bl	8009698 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001152:	f001 f8f2 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001156:	2303      	movs	r3, #3
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800115a:	230d      	movs	r3, #13
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001164:	f008 fa98 	bl	8009698 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800116e:	f001 f8e4 	bl	800233a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001172:	2302      	movs	r3, #2
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001176:	230e      	movs	r3, #14
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001180:	f008 fa8a 	bl	8009698 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 800118a:	f001 f8d6 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000518 	.word	0x20000518
 800119c:	40012000 	.word	0x40012000
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <HAL_ADC_MspInit+0x11c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d178      	bne.n	80012b8 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4826      	ldr	r0, [pc, #152]	; (80012c8 <HAL_ADC_MspInit+0x124>)
 800122e:	f009 f979 	bl	800a524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4821      	ldr	r0, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x128>)
 8001246:	f009 f96d 	bl	800a524 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_ADC_MspInit+0x130>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001268:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001278:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800128e:	f008 fdd9 	bl	8009e44 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001298:	f001 f84f 	bl	800233a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2012      	movs	r0, #18
 80012ae:	f008 fd8e 	bl	8009dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012b2:	2012      	movs	r0, #18
 80012b4:	f008 fda7 	bl	8009e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40012000 	.word	0x40012000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	20000560 	.word	0x20000560
 80012d4:	40026410 	.word	0x40026410

080012d8 <DISP_ClearBuff>:
#include "stdlib.h"
#include "memory.h"

uint8_t disp_buff[OLED_HEIGHT/8][OLED_WIDTH];

void DISP_ClearBuff() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	memset(disp_buff, 0x00, OLED_WIDTH*OLED_HEIGHT/8);
 80012dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e0:	2100      	movs	r1, #0
 80012e2:	4802      	ldr	r0, [pc, #8]	; (80012ec <DISP_ClearBuff+0x14>)
 80012e4:	f00d f822 	bl	800e32c <memset>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200005c0 	.word	0x200005c0

080012f0 <DISP_DrawPixel>:

void DISP_DrawPixel(uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	73bb      	strb	r3, [r7, #14]

	switch(color) {
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d03a      	beq.n	800138c <DISP_DrawPixel+0x9c>
 8001316:	2b02      	cmp	r3, #2
 8001318:	dc39      	bgt.n	800138e <DISP_DrawPixel+0x9e>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <DISP_DrawPixel+0x34>
 800131e:	2b01      	cmp	r3, #1
 8001320:	d019      	beq.n	8001356 <DISP_DrawPixel+0x66>
		disp_buff[page][x] &=~(1<<seg);
		break;
	case DISP_COLOR_TRANS:
		break;
	}
}
 8001322:	e034      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] |= (1<<seg);
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	491c      	ldr	r1, [pc, #112]	; (800139c <DISP_DrawPixel+0xac>)
 800132a:	01d2      	lsls	r2, r2, #7
 800132c:	440a      	add	r2, r1
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b259      	sxtb	r1, r3
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b2c8      	uxtb	r0, r1
 8001348:	4914      	ldr	r1, [pc, #80]	; (800139c <DISP_DrawPixel+0xac>)
 800134a:	01d2      	lsls	r2, r2, #7
 800134c:	440a      	add	r2, r1
 800134e:	4413      	add	r3, r2
 8001350:	4602      	mov	r2, r0
 8001352:	701a      	strb	r2, [r3, #0]
		break;
 8001354:	e01b      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] &=~(1<<seg);
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4910      	ldr	r1, [pc, #64]	; (800139c <DISP_DrawPixel+0xac>)
 800135c:	01d2      	lsls	r2, r2, #7
 800135e:	440a      	add	r2, r1
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	b25b      	sxtb	r3, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4013      	ands	r3, r2
 8001376:	b259      	sxtb	r1, r3
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	b2c8      	uxtb	r0, r1
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <DISP_DrawPixel+0xac>)
 8001380:	01d2      	lsls	r2, r2, #7
 8001382:	440a      	add	r2, r1
 8001384:	4413      	add	r3, r2
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
		break;
 800138a:	e000      	b.n	800138e <DISP_DrawPixel+0x9e>
		break;
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	200005c0 	.word	0x200005c0

080013a0 <DISP_DrawChar>:

uint8_t DISP_DrawChar(char c, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	713b      	strb	r3, [r7, #4]
	uint8_t page = (y/8)%(OLED_HEIGHT/8);
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	73bb      	strb	r3, [r7, #14]

	for(int i=0; i<5; i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e08d      	b.n	80014f4 <DISP_DrawChar+0x154>
		if(x+i >= OLED_WIDTH) return 1;
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	dd01      	ble.n	80013e6 <DISP_DrawChar+0x46>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e08b      	b.n	80014fe <DISP_DrawChar+0x15e>
		uint8_t bit_char[2];
		bit_char[0] = Font5x7[((uint8_t)c - 0x20)*5 + i] << seg;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f1a3 0220 	sub.w	r2, r3, #32
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a44      	ldr	r2, [pc, #272]	; (8001508 <DISP_DrawChar+0x168>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	461a      	mov	r2, r3
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	733b      	strb	r3, [r7, #12]
		bit_char[1] = Font5x7[((uint8_t)c - 0x20)*5 + i] >> (8-seg);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f1a3 0220 	sub.w	r2, r3, #32
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	441a      	add	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4413      	add	r3, r2
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <DISP_DrawChar+0x168>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	461a      	mov	r2, r3
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	f1c3 0308 	rsb	r3, r3, #8
 8001422:	fa42 f303 	asr.w	r3, r2, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	737b      	strb	r3, [r7, #13]

		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e050      	b.n	80014d2 <DISP_DrawChar+0x132>
			switch(color) {
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d049      	beq.n	80014ca <DISP_DrawChar+0x12a>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc48      	bgt.n	80014cc <DISP_DrawChar+0x12c>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <DISP_DrawChar+0xa4>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d01f      	beq.n	8001482 <DISP_DrawChar+0xe2>
 8001442:	e043      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_WHITE:
				disp_buff[page+j][x+i] |= bit_char[j];
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	441a      	add	r2, r3
 800144a:	79b9      	ldrb	r1, [r7, #6]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	440b      	add	r3, r1
 8001450:	492e      	ldr	r1, [pc, #184]	; (800150c <DISP_DrawChar+0x16c>)
 8001452:	01d2      	lsls	r2, r2, #7
 8001454:	440a      	add	r2, r1
 8001456:	4413      	add	r3, r2
 8001458:	7818      	ldrb	r0, [r3, #0]
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	441a      	add	r2, r3
 800146a:	79bc      	ldrb	r4, [r7, #6]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4423      	add	r3, r4
 8001470:	4301      	orrs	r1, r0
 8001472:	b2c8      	uxtb	r0, r1
 8001474:	4925      	ldr	r1, [pc, #148]	; (800150c <DISP_DrawChar+0x16c>)
 8001476:	01d2      	lsls	r2, r2, #7
 8001478:	440a      	add	r2, r1
 800147a:	4413      	add	r3, r2
 800147c:	4602      	mov	r2, r0
 800147e:	701a      	strb	r2, [r3, #0]
				break;
 8001480:	e024      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_BLACK:
				disp_buff[page+j][x+i] &=~bit_char[j];
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	441a      	add	r2, r3
 8001488:	79b9      	ldrb	r1, [r7, #6]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	440b      	add	r3, r1
 800148e:	491f      	ldr	r1, [pc, #124]	; (800150c <DISP_DrawChar+0x16c>)
 8001490:	01d2      	lsls	r2, r2, #7
 8001492:	440a      	add	r2, r1
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25a      	sxtb	r2, r3
 800149a:	f107 010c 	add.w	r1, r7, #12
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	440b      	add	r3, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	b258      	sxtb	r0, r3
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	441a      	add	r2, r3
 80014b4:	79b9      	ldrb	r1, [r7, #6]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	440b      	add	r3, r1
 80014ba:	b2c0      	uxtb	r0, r0
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <DISP_DrawChar+0x16c>)
 80014be:	01d2      	lsls	r2, r2, #7
 80014c0:	440a      	add	r2, r1
 80014c2:	4413      	add	r3, r2
 80014c4:	4602      	mov	r2, r0
 80014c6:	701a      	strb	r2, [r3, #0]
				break;
 80014c8:	e000      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_TRANS:
				break;
 80014ca:	bf00      	nop
		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3301      	adds	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <DISP_DrawChar+0x13c>
 80014d8:	2202      	movs	r2, #2
 80014da:	e000      	b.n	80014de <DISP_DrawChar+0x13e>
 80014dc:	2201      	movs	r2, #1
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dd04      	ble.n	80014ee <DISP_DrawChar+0x14e>
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	dda0      	ble.n	8001430 <DISP_DrawChar+0x90>
	for(int i=0; i<5; i++) {
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	f77f af6e 	ble.w	80013d8 <DISP_DrawChar+0x38>
			}
		}
	}
	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc90      	pop	{r4, r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	200005c0 	.word	0x200005c0

08001510 <DISP_DrawText>:

void DISP_DrawText(char* text, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4603      	mov	r3, r0
 8001520:	70fb      	strb	r3, [r7, #3]
 8001522:	460b      	mov	r3, r1
 8001524:	70bb      	strb	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	707b      	strb	r3, [r7, #1]
	uint8_t char_num = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
	while(*text)
 800152e:	e015      	b.n	800155c <DISP_DrawText+0x4c>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	73fa      	strb	r2, [r7, #15]
 800153e:	461a      	mov	r2, r3
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	4413      	add	r3, r2
 800154c:	b2d9      	uxtb	r1, r3
 800154e:	787b      	ldrb	r3, [r7, #1]
 8001550:	78ba      	ldrb	r2, [r7, #2]
 8001552:	f7ff ff25 	bl	80013a0 <DISP_DrawChar>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <DISP_DrawText+0x56>
	while(*text)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e5      	bne.n	8001530 <DISP_DrawText+0x20>
}
 8001564:	e000      	b.n	8001568 <DISP_DrawText+0x58>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001566:	bf00      	nop
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <DISP_DrawLineSimple>:

void DISP_DrawLineSimple(	uint8_t x1,
							uint8_t y1,
							uint8_t x2,
							uint8_t y2,
							DISP_Color_Typedef color) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	4603      	mov	r3, r0
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	460b      	mov	r3, r1
 8001588:	717b      	strb	r3, [r7, #5]
 800158a:	4613      	mov	r3, r2
 800158c:	713b      	strb	r3, [r7, #4]
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 800158e:	793a      	ldrb	r2, [r7, #4]
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d104      	bne.n	80015a0 <DISP_DrawLineSimple+0x30>
 8001596:	797a      	ldrb	r2, [r7, #5]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	429a      	cmp	r2, r3
 800159c:	f000 8086 	beq.w	80016ac <DISP_DrawLineSimple+0x13c>

	if(x2-x1 >= y2-y1) {
 80015a0:	797a      	ldrb	r2, [r7, #5]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	7939      	ldrb	r1, [r7, #4]
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	1acb      	subs	r3, r1, r3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db3e      	blt.n	800162e <DISP_DrawLineSimple+0xbe>
		float m = (float)(y2-y1)/(x2-x1);
 80015b0:	793a      	ldrb	r2, [r7, #4]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015be:	797a      	ldrb	r2, [r7, #5]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]
		for(int i=0; i<=x2-x1; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e022      	b.n	8001620 <DISP_DrawLineSimple+0xb0>
			DISP_DrawPixel(x1+i, (m*i)+y1, color);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4413      	add	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	ee07 2a90 	vmov	s15, r2
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f6:	79ba      	ldrb	r2, [r7, #6]
 80015f8:	ee07 2a90 	vmov	s15, r2
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001608:	edc7 7a00 	vstr	s15, [r7]
 800160c:	783a      	ldrb	r2, [r7, #0]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe6b 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=x2-x1; i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	797a      	ldrb	r2, [r7, #5]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	ddd6      	ble.n	80015da <DISP_DrawLineSimple+0x6a>
 800162c:	e03f      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
		}
	} else {
		float m = (float)(x2-x1)/(y2-y1);
 800162e:	797a      	ldrb	r2, [r7, #5]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163c:	793a      	ldrb	r2, [r7, #4]
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164e:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0; i<=y2-y1; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e022      	b.n	800169e <DISP_DrawLineSimple+0x12e>
			DISP_DrawPixel((m*i)+x1, i+y1, color);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	edd7 7a03 	vldr	s15, [r7, #12]
 8001666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	edc7 7a00 	vstr	s15, [r7]
 8001680:	783b      	ldrb	r3, [r7, #0]
 8001682:	b2d8      	uxtb	r0, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	4413      	add	r3, r2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fe2c 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=y2-y1; i++) {
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	793a      	ldrb	r2, [r7, #4]
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	ddd6      	ble.n	8001658 <DISP_DrawLineSimple+0xe8>
 80016aa:	e000      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 80016ac:	bf00      	nop
		}
	}
}
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <DISP_DrawRect>:

void DISP_DrawRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	4603      	mov	r3, r0
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	460b      	mov	r3, r1
 80016cc:	717b      	strb	r3, [r7, #5]
 80016ce:	4613      	mov	r3, r2
 80016d0:	713b      	strb	r3, [r7, #4]
	DISP_DrawLineSimple(x1, y1, x2, y1, color);
 80016d2:	79bc      	ldrb	r4, [r7, #6]
 80016d4:	797a      	ldrb	r2, [r7, #5]
 80016d6:	79b9      	ldrb	r1, [r7, #6]
 80016d8:	79f8      	ldrb	r0, [r7, #7]
 80016da:	7e3b      	ldrb	r3, [r7, #24]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4623      	mov	r3, r4
 80016e0:	f7ff ff46 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y1, x1, y2, color);
 80016e4:	793c      	ldrb	r4, [r7, #4]
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	79b9      	ldrb	r1, [r7, #6]
 80016ea:	79f8      	ldrb	r0, [r7, #7]
 80016ec:	7e3b      	ldrb	r3, [r7, #24]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4623      	mov	r3, r4
 80016f2:	f7ff ff3d 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x2, y1, x2, y2, color);
 80016f6:	793c      	ldrb	r4, [r7, #4]
 80016f8:	797a      	ldrb	r2, [r7, #5]
 80016fa:	79b9      	ldrb	r1, [r7, #6]
 80016fc:	7978      	ldrb	r0, [r7, #5]
 80016fe:	7e3b      	ldrb	r3, [r7, #24]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4623      	mov	r3, r4
 8001704:	f7ff ff34 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y2, x2, y2, color);
 8001708:	793c      	ldrb	r4, [r7, #4]
 800170a:	797a      	ldrb	r2, [r7, #5]
 800170c:	7939      	ldrb	r1, [r7, #4]
 800170e:	79f8      	ldrb	r0, [r7, #7]
 8001710:	7e3b      	ldrb	r3, [r7, #24]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	f7ff ff2b 	bl	8001570 <DISP_DrawLineSimple>
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
	...

08001724 <DISP_FillRect>:

void DISP_FillRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 8001724:	b490      	push	{r4, r7}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	4603      	mov	r3, r0
 8001738:	71bb      	strb	r3, [r7, #6]
 800173a:	460b      	mov	r3, r1
 800173c:	717b      	strb	r3, [r7, #5]
 800173e:	4613      	mov	r3, r2
 8001740:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	73bb      	strb	r3, [r7, #14]
	uint8_t seg1 = y1%8;
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	737b      	strb	r3, [r7, #13]
	uint8_t page2 = y2/8;
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	733b      	strb	r3, [r7, #12]
	uint8_t seg2 = y2%8;
 8001756:	793b      	ldrb	r3, [r7, #4]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	72fb      	strb	r3, [r7, #11]

	for(int i=page1; i<=page2; i++) {
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e074      	b.n	800184e <DISP_FillRect+0x12a>
		for(int j=x1; j<=x2; j++) {
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e06a      	b.n	8001840 <DISP_FillRect+0x11c>
			uint8_t bit;

			if(i==page1 && i!=page2) {
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d109      	bne.n	8001786 <DISP_FillRect+0x62>
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	429a      	cmp	r2, r3
 8001778:	d005      	beq.n	8001786 <DISP_FillRect+0x62>
				bit = (0xFF << seg1);
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e022      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(page1==page2) {
 8001786:	7bba      	ldrb	r2, [r7, #14]
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d110      	bne.n	80017b0 <DISP_FillRect+0x8c>
				bit = (0xFF >> (7-seg2)) - (0xFF >> (8-seg1));
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	f1c3 0307 	rsb	r3, r3, #7
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	fa42 f303 	asr.w	r3, r2, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7b7b      	ldrb	r3, [r7, #13]
 800179e:	f1c3 0308 	rsb	r3, r3, #8
 80017a2:	21ff      	movs	r1, #255	; 0xff
 80017a4:	fa41 f303 	asr.w	r3, r1, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e00d      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(i==page2) {
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <DISP_FillRect+0xa4>
				bit = (0xFF >> (7-seg2));
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	fa42 f303 	asr.w	r3, r2, r3
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e001      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else {
				bit = 0xFF;
 80017c8:	23ff      	movs	r3, #255	; 0xff
 80017ca:	73fb      	strb	r3, [r7, #15]
			}

			switch(color) {
 80017cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d031      	beq.n	8001838 <DISP_FillRect+0x114>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	dc30      	bgt.n	800183a <DISP_FillRect+0x116>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <DISP_FillRect+0xbe>
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d013      	beq.n	8001808 <DISP_FillRect+0xe4>
 80017e0:	e02b      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_WHITE:
				disp_buff[i][j] |= bit;
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <DISP_FillRect+0x140>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	441a      	add	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b2d9      	uxtb	r1, r3
 80017f6:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <DISP_FillRect+0x140>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	01db      	lsls	r3, r3, #7
 80017fc:	441a      	add	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4413      	add	r3, r2
 8001802:	460a      	mov	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
				break;
 8001806:	e018      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_BLACK:
				disp_buff[i][j] &=~bit;
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <DISP_FillRect+0x140>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	441a      	add	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25a      	sxtb	r2, r3
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	43db      	mvns	r3, r3
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4013      	ands	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <DISP_FillRect+0x140>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	01db      	lsls	r3, r3, #7
 800182c:	441a      	add	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
				break;
 8001836:	e000      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_TRANS:
				break;
 8001838:	bf00      	nop
		for(int j=x1; j<=x2; j++) {
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	dd90      	ble.n	800176a <DISP_FillRect+0x46>
	for(int i=page1; i<=page2; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	7b3b      	ldrb	r3, [r7, #12]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	dd86      	ble.n	8001764 <DISP_FillRect+0x40>
			}
		}
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bc90      	pop	{r4, r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200005c0 	.word	0x200005c0

08001868 <DISP_CountCharString>:

uint8_t DISP_CountCharString(char* str) {
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int ct;
	for(ct=0; str[ct]!=0; ct++);
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e002      	b.n	800187c <DISP_CountCharString+0x14>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f6      	bne.n	8001876 <DISP_CountCharString+0xe>
	return ct;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b2db      	uxtb	r3, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DISP_DisplayText>:

void DISP_DisplayText(DISP_Text_Typedef *s, char* text) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	uint8_t len_char = DISP_CountCharString(text);
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	f7ff ffe0 	bl	8001868 <DISP_CountCharString>
 80018a8:	4603      	mov	r3, r0
 80018aa:	72fb      	strb	r3, [r7, #11]
	uint8_t len_bit = len_char*6-1;
 80018ac:	7afb      	ldrb	r3, [r7, #11]
 80018ae:	461a      	mov	r2, r3
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	72bb      	strb	r3, [r7, #10]
	uint8_t x, y;
	uint8_t fx2, fy2;

	if(s->size_x == 0)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78db      	ldrb	r3, [r3, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <DISP_DisplayText+0x3c>
		fx2 = s->origin_x+len_bit+1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	757b      	strb	r3, [r7, #21]
 80018d2:	e005      	b.n	80018e0 <DISP_DisplayText+0x48>
	else
		fx2 = s->origin_x+s->size_x;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	78db      	ldrb	r3, [r3, #3]
 80018dc:	4413      	add	r3, r2
 80018de:	757b      	strb	r3, [r7, #21]

	if(s->size_y < 8)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d804      	bhi.n	80018f2 <DISP_DisplayText+0x5a>
		fy2 = s->origin_y+8;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	3308      	adds	r3, #8
 80018ee:	753b      	strb	r3, [r7, #20]
 80018f0:	e005      	b.n	80018fe <DISP_DisplayText+0x66>
	else
		fy2 = s->origin_y+s->size_y;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785a      	ldrb	r2, [r3, #1]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	753b      	strb	r3, [r7, #20]

	DISP_FillRect(
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7818      	ldrb	r0, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			fx2,
			fy2,
			(s->color==DISP_COLOR_BLACK)?DISP_COLOR_WHITE:DISP_COLOR_BLACK);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	789b      	ldrb	r3, [r3, #2]
	DISP_FillRect(
 800190a:	2b01      	cmp	r3, #1
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461c      	mov	r4, r3
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	7d7a      	ldrb	r2, [r7, #21]
 800191a:	9400      	str	r4, [sp, #0]
 800191c:	f7ff ff02 	bl	8001724 <DISP_FillRect>

	switch(s->align_x) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d010      	beq.n	800194a <DISP_DisplayText+0xb2>
 8001928:	2b02      	cmp	r3, #2
 800192a:	dc20      	bgt.n	800196e <DISP_DisplayText+0xd6>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <DISP_DisplayText+0x9e>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d005      	beq.n	8001940 <DISP_DisplayText+0xa8>
 8001934:	e01b      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_LEFT:
		x = s->origin_x + 1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
		break;
 800193e:	e016      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_RIGHT:
		x = fx2 - len_bit;
 8001940:	7d7a      	ldrb	r2, [r7, #21]
 8001942:	7abb      	ldrb	r3, [r7, #10]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	75fb      	strb	r3, [r7, #23]
		break;
 8001948:	e011      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_CENTER:
		x = s->origin_x+((fx2-s->origin_x)/2)-(len_bit/2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	7d7b      	ldrb	r3, [r7, #21]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	7809      	ldrb	r1, [r1, #0]
 8001954:	1a5b      	subs	r3, r3, r1
 8001956:	0fd9      	lsrs	r1, r3, #31
 8001958:	440b      	add	r3, r1
 800195a:	105b      	asrs	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	75fb      	strb	r3, [r7, #23]
		break;
 800196c:	bf00      	nop
	}

	switch(s->align_y) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	799b      	ldrb	r3, [r3, #6]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d00f      	beq.n	8001996 <DISP_DisplayText+0xfe>
 8001976:	2b02      	cmp	r3, #2
 8001978:	dc1c      	bgt.n	80019b4 <DISP_DisplayText+0x11c>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <DISP_DisplayText+0xec>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d005      	beq.n	800198e <DISP_DisplayText+0xf6>
 8001982:	e017      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_LEFT:
		y = s->origin_y + 1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	3301      	adds	r3, #1
 800198a:	75bb      	strb	r3, [r7, #22]
		break;
 800198c:	e012      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_RIGHT:
		y = fy2 - 7;
 800198e:	7d3b      	ldrb	r3, [r7, #20]
 8001990:	3b07      	subs	r3, #7
 8001992:	75bb      	strb	r3, [r7, #22]
		break;
 8001994:	e00e      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_CENTER:
		y = s->origin_y+((fy2-s->origin_y)/2)-3;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	785a      	ldrb	r2, [r3, #1]
 800199a:	7d3b      	ldrb	r3, [r7, #20]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	7849      	ldrb	r1, [r1, #1]
 80019a0:	1a5b      	subs	r3, r3, r1
 80019a2:	0fd9      	lsrs	r1, r3, #31
 80019a4:	440b      	add	r3, r1
 80019a6:	105b      	asrs	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b03      	subs	r3, #3
 80019b0:	75bb      	strb	r3, [r7, #22]
		break;
 80019b2:	bf00      	nop
	}

	DISP_DrawText(text, x, y, s->color);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	7dba      	ldrb	r2, [r7, #22]
 80019ba:	7df9      	ldrb	r1, [r7, #23]
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f7ff fda7 	bl	8001510 <DISP_DrawText>

	uint8_t page1 = s->origin_y/8;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	727b      	strb	r3, [r7, #9]
	uint8_t page2 = fy2/8;
 80019ca:	7d3b      	ldrb	r3, [r7, #20]
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	723b      	strb	r3, [r7, #8]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e024      	b.n	8001a20 <DISP_DisplayText+0x188>
		OLED_SetPageAddr(i);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 feee 	bl	80027bc <OLED_SetPageAddr>
		OLED_SetColumn(s->origin_x);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fefe 	bl	80027e6 <OLED_SetColumn>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e00c      	b.n	8001a0c <DISP_DisplayText+0x174>
			OLED_Data(disp_buff[i][j]);
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <DISP_DisplayText+0x1a0>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	441a      	add	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fec3 	bl	800278c <OLED_Data>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	7d7b      	ldrb	r3, [r7, #21]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dc02      	bgt.n	8001a1a <DISP_DisplayText+0x182>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b7f      	cmp	r3, #127	; 0x7f
 8001a18:	ddeb      	ble.n	80019f2 <DISP_DisplayText+0x15a>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	7a3b      	ldrb	r3, [r7, #8]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dc02      	bgt.n	8001a2e <DISP_DisplayText+0x196>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	ddd3      	ble.n	80019d6 <DISP_DisplayText+0x13e>
		}
	}

}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200005c0 	.word	0x200005c0

08001a3c <DISP_OLEDUpdate>:

void DISP_OLEDUpdate(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71bb      	strb	r3, [r7, #6]
 8001a52:	460b      	mov	r3, r1
 8001a54:	717b      	strb	r3, [r7, #5]
 8001a56:	4613      	mov	r3, r2
 8001a58:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	73fb      	strb	r3, [r7, #15]
	uint8_t page2 = y2/8;
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	73bb      	strb	r3, [r7, #14]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e022      	b.n	8001ab2 <DISP_OLEDUpdate+0x76>
		OLED_SetPageAddr(i);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fea3 	bl	80027bc <OLED_SetPageAddr>
		OLED_SetColumn(x1);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 feb4 	bl	80027e6 <OLED_SetColumn>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e00c      	b.n	8001a9e <DISP_OLEDUpdate+0x62>
			OLED_Data(disp_buff[i][j]);
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <DISP_OLEDUpdate+0x8c>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	441a      	add	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fe7a 	bl	800278c <OLED_Data>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dc02      	bgt.n	8001aac <DISP_OLEDUpdate+0x70>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aaa:	ddeb      	ble.n	8001a84 <DISP_OLEDUpdate+0x48>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dc02      	bgt.n	8001ac0 <DISP_OLEDUpdate+0x84>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b07      	cmp	r3, #7
 8001abe:	ddd5      	ble.n	8001a6c <DISP_OLEDUpdate+0x30>
		}
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	200005c0 	.word	0x200005c0

08001acc <DISP_FillRect2>:

void DISP_FillRect2(DISP_Shape_Typedef* s) {
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
	DISP_FillRect(
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7818      	ldrb	r0, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			s->origin_x+s->size_x,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	78db      	ldrb	r3, [r3, #3]
	DISP_FillRect(
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2dc      	uxtb	r4, r3
			s->origin_y+s->size_y,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	785a      	ldrb	r2, [r3, #1]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791b      	ldrb	r3, [r3, #4]
	DISP_FillRect(
 8001af0:	4413      	add	r3, r2
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	4622      	mov	r2, r4
 8001afe:	f7ff fe11 	bl	8001724 <DISP_FillRect>
			s->color);
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
	...

08001b0c <DISP_Test>:
			s->origin_y,
			s->origin_x+s->size_x,
			s->origin_y+s->size_y);
}

void DISP_Test() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
	DISP_DrawText ("OK! Rownle. Now, I", 0, 0, DISP_COLOR_WHITE);
 8001b12:	2300      	movs	r3, #0
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	483e      	ldr	r0, [pc, #248]	; (8001c14 <DISP_Test+0x108>)
 8001b1a:	f7ff fcf9 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("want to eat your", 0, 8, DISP_COLOR_WHITE);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2208      	movs	r2, #8
 8001b22:	2100      	movs	r1, #0
 8001b24:	483c      	ldr	r0, [pc, #240]	; (8001c18 <DISP_Test+0x10c>)
 8001b26:	f7ff fcf3 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("brain!", 0, 16, DISP_COLOR_WHITE);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	2100      	movs	r1, #0
 8001b30:	483a      	ldr	r0, [pc, #232]	; (8001c1c <DISP_Test+0x110>)
 8001b32:	f7ff fced 	bl	8001510 <DISP_DrawText>
	DISP_DrawRect(62, 30, 122, 62, DISP_COLOR_WHITE);
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	233e      	movs	r3, #62	; 0x3e
 8001b3c:	227a      	movs	r2, #122	; 0x7a
 8001b3e:	211e      	movs	r1, #30
 8001b40:	203e      	movs	r0, #62	; 0x3e
 8001b42:	f7ff fdb7 	bl	80016b4 <DISP_DrawRect>
	DISP_FillRect(64, 32, 120, 60, DISP_COLOR_WHITE);
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	233c      	movs	r3, #60	; 0x3c
 8001b4c:	2278      	movs	r2, #120	; 0x78
 8001b4e:	2120      	movs	r1, #32
 8001b50:	2040      	movs	r0, #64	; 0x40
 8001b52:	f7ff fde7 	bl	8001724 <DISP_FillRect>
	DISP_DrawText ("HOW?", 81, 42, DISP_COLOR_BLACK);
 8001b56:	2301      	movs	r3, #1
 8001b58:	222a      	movs	r2, #42	; 0x2a
 8001b5a:	2151      	movs	r1, #81	; 0x51
 8001b5c:	4830      	ldr	r0, [pc, #192]	; (8001c20 <DISP_Test+0x114>)
 8001b5e:	f7ff fcd7 	bl	8001510 <DISP_DrawText>
	for(int i=0; i<8; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e01d      	b.n	8001ba4 <DISP_Test+0x98>
		OLED_SetPageAddr(i);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fe25 	bl	80027bc <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 fe37 	bl	80027e6 <OLED_SetColumn>
		for(int j=0; j<128; j++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	e00c      	b.n	8001b98 <DISP_Test+0x8c>
			OLED_Data(disp_buff[i][j]);
 8001b7e:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <DISP_Test+0x118>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	441a      	add	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fdfd 	bl	800278c <OLED_Data>
		for(int j=0; j<128; j++) {
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	ddef      	ble.n	8001b7e <DISP_Test+0x72>
	for(int i=0; i<8; i++) {
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	ddde      	ble.n	8001b68 <DISP_Test+0x5c>
		}
	}
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e022      	b.n	8001bf6 <DISP_Test+0xea>
		OLED_SetPageAddr(i+4);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fdff 	bl	80027bc <OLED_SetPageAddr>
		OLED_SetColumn(2);
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f000 fe11 	bl	80027e6 <OLED_SetColumn>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e00f      	b.n	8001bea <DISP_Test+0xde>
			OLED_Data(itsr_logo[j+i*ITSR_ARRAY_WIDTH]);
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <DISP_Test+0x11c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fdd4 	bl	800278c <OLED_Data>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b27      	cmp	r3, #39	; 0x27
 8001bee:	ddec      	ble.n	8001bca <DISP_Test+0xbe>
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	ddd9      	ble.n	8001bb0 <DISP_Test+0xa4>
		}
	}

	HAL_Delay(500);
 8001bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c00:	f007 faa4 	bl	800914c <HAL_Delay>
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c04:	f000 fe09 	bl	800281a <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c08:	f7ff fb66 	bl	80012d8 <DISP_ClearBuff>
//		sprintf(tbuff, "%i", b);
//		DISP_DisplayText(&fix2, tbuff);
//		b++;
//		HAL_Delay(100);
//	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	080110f0 	.word	0x080110f0
 8001c18:	08011104 	.word	0x08011104
 8001c1c:	08011118 	.word	0x08011118
 8001c20:	08011120 	.word	0x08011120
 8001c24:	200005c0 	.word	0x200005c0
 8001c28:	200001e8 	.word	0x200001e8

08001c2c <DISP_ClearAll>:

void DISP_ClearAll() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c30:	f000 fdf3 	bl	800281a <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c34:	f7ff fb50 	bl	80012d8 <DISP_ClearBuff>
	OLED_Command(OLED_DISP_ON);
 8001c38:	20af      	movs	r0, #175	; 0xaf
 8001c3a:	f000 fd7b 	bl	8002734 <OLED_Command>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2038      	movs	r0, #56	; 0x38
 8001c6c:	f008 f8af 	bl	8009dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c70:	2038      	movs	r0, #56	; 0x38
 8001c72:	f008 f8c8 	bl	8009e06 <HAL_NVIC_EnableIRQ>

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <EEP_Init>:

uint32_t last_tick = 0;

uint16_t last_mem;

void EEP_Init(I2C_HandleTypeDef* hi2c) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	eep_hi2c = hi2c;
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <EEP_Init+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200009c0 	.word	0x200009c0

08001ca4 <EEP_WritePage>:

void EEP_WritePage(uint16_t page_addr, uint8_t* data) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <EEP_WritePage+0x40>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	89fa      	ldrh	r2, [r7, #14]
 8001cbc:	2364      	movs	r3, #100	; 0x64
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21a0      	movs	r1, #160	; 0xa0
 8001ccc:	f008 ff3c 	bl	800ab48 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001cd0:	f007 fa30 	bl	8009134 <HAL_GetTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <EEP_WritePage+0x44>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200009c0 	.word	0x200009c0
 8001ce8:	200009c4 	.word	0x200009c4

08001cec <EEP_WriteMem>:

void EEP_WriteMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	80fb      	strh	r3, [r7, #6]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <EEP_WriteMem+0x40>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	9102      	str	r1, [sp, #8]
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	21a0      	movs	r1, #160	; 0xa0
 8001d14:	f008 ff18 	bl	800ab48 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001d18:	f007 fa0c 	bl	8009134 <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <EEP_WriteMem+0x44>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200009c0 	.word	0x200009c0
 8001d30:	200009c4 	.word	0x200009c4

08001d34 <EEP_ReadPage>:

void EEP_ReadPage(uint16_t page_addr, uint8_t* data) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	019b      	lsls	r3, r3, #6
 8001d44:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <EEP_ReadPage+0x40>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	89fa      	ldrh	r2, [r7, #14]
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	21a0      	movs	r1, #160	; 0xa0
 8001d5c:	f008 ffee 	bl	800ad3c <HAL_I2C_Mem_Read>
	last_mem = mem_addr+PAGE_SIZE;
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	3340      	adds	r3, #64	; 0x40
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <EEP_ReadPage+0x44>)
 8001d68:	801a      	strh	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200009c0 	.word	0x200009c0
 8001d78:	200009c8 	.word	0x200009c8

08001d7c <EEP_ReadMem>:

void EEP_ReadMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	80fb      	strh	r3, [r7, #6]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <EEP_ReadMem+0x44>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	2164      	movs	r1, #100	; 0x64
 8001d98:	9102      	str	r1, [sp, #8]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2302      	movs	r3, #2
 8001da2:	21a0      	movs	r1, #160	; 0xa0
 8001da4:	f008 ffca 	bl	800ad3c <HAL_I2C_Mem_Read>
	last_mem = mem_addr+size;
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <EEP_ReadMem+0x48>)
 8001db4:	801a      	strh	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200009c0 	.word	0x200009c0
 8001dc4:	200009c8 	.word	0x200009c8

08001dc8 <EEP_ReadyToWrite>:

uint8_t EEP_ReadyToWrite() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_tick > 5) return 1; else return 0;
 8001dcc:	f007 f9b2 	bl	8009134 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <EEP_ReadyToWrite+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d901      	bls.n	8001de0 <EEP_ReadyToWrite+0x18>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <EEP_ReadyToWrite+0x1a>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200009c4 	.word	0x200009c4

08001dec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a3e      	ldr	r2, [pc, #248]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SEN_EN_Pin|LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e78:	482a      	ldr	r0, [pc, #168]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001e7a:	f008 fd07 	bl	800a88c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e84:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001e86:	f008 fd01 	bl	800a88c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW_RG_Pin|SW_UP_Pin;
 8001e8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4821      	ldr	r0, [pc, #132]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ea0:	f008 fb40 	bl	800a524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SEN_EN_Pin;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SEN_EN_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ebe:	f008 fb31 	bl	800a524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ec8:	2311      	movs	r3, #17
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4813      	ldr	r0, [pc, #76]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001edc:	f008 fb22 	bl	800a524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW_HM_Pin|SW_OK_Pin|SW_BK_Pin|SW_DW_Pin
 8001ee0:	f24e 0330 	movw	r3, #57392	; 0xe030
 8001ee4:	617b      	str	r3, [r7, #20]
                          |SW_LF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001ef6:	f008 fb15 	bl	800a524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001f14:	f008 fb06 	bl	800a524 <HAL_GPIO_Init>

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020400 	.word	0x40020400

08001f2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <MX_I2C1_Init+0x58>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <MX_I2C1_Init+0x5c>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f6c:	f008 fca8 	bl	800a8c0 <HAL_I2C_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001f76:	f000 f9e0 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200009cc 	.word	0x200009cc
 8001f84:	40005400 	.word	0x40005400
 8001f88:	00061a80 	.word	0x00061a80

08001f8c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <MX_I2C2_Init+0x58>)
 8001f9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fca:	f008 fc79 	bl	800a8c0 <HAL_I2C_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fd4:	f000 f9b1 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000a20 	.word	0x20000a20
 8001fe0:	40005800 	.word	0x40005800
 8001fe4:	000186a0 	.word	0x000186a0

08001fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_I2C_MspInit+0xec>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12d      	bne.n	8002066 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202c:	2312      	movs	r3, #18
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002038:	2304      	movs	r3, #4
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4826      	ldr	r0, [pc, #152]	; (80020dc <HAL_I2C_MspInit+0xf4>)
 8002044:	f008 fa6e 	bl	800a524 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002064:	e031      	b.n	80020ca <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_I2C_MspInit+0xf8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d12c      	bne.n	80020ca <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800208c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002092:	2312      	movs	r3, #18
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800209e:	2304      	movs	r3, #4
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <HAL_I2C_MspInit+0xf4>)
 80020aa:	f008 fa3b 	bl	800a524 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	bf00      	nop
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40005400 	.word	0x40005400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40005800 	.word	0x40005800

080020e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e8:	f006 ffbe 	bl	8009068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ec:	f000 f868 	bl	80021c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f0:	f7ff fe7c 	bl	8001dec <MX_GPIO_Init>
  MX_DMA_Init();
 80020f4:	f7ff fda6 	bl	8001c44 <MX_DMA_Init>
  MX_ADC1_Init();
 80020f8:	f7fe ff48 	bl	8000f8c <MX_ADC1_Init>
  MX_I2C1_Init();
 80020fc:	f7ff ff16 	bl	8001f2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002100:	f7ff ff44 	bl	8001f8c <MX_I2C2_Init>
  MX_TIM1_Init();
 8002104:	f003 fb76 	bl	80057f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002108:	f003 fc2c 	bl	8005964 <MX_TIM2_Init>
  MX_TIM3_Init();
 800210c:	f003 fc7e 	bl	8005a0c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002110:	f003 fcf6 	bl	8005b00 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002114:	f006 ff04 	bl	8008f20 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8002118:	f006 fe90 	bl	8008e3c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800211c:	f003 fd44 	bl	8005ba8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  EEP_Init(&hi2c2);
 8002120:	481e      	ldr	r0, [pc, #120]	; (800219c <main+0xb8>)
 8002122:	f7ff fdaf 	bl	8001c84 <EEP_Init>
  SEN_Init(&hadc1);
 8002126:	481e      	ldr	r0, [pc, #120]	; (80021a0 <main+0xbc>)
 8002128:	f002 fa18 	bl	800455c <SEN_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800212c:	213c      	movs	r1, #60	; 0x3c
 800212e:	481d      	ldr	r0, [pc, #116]	; (80021a4 <main+0xc0>)
 8002130:	f00a fbb6 	bl	800c8a0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002134:	213c      	movs	r1, #60	; 0x3c
 8002136:	481c      	ldr	r0, [pc, #112]	; (80021a8 <main+0xc4>)
 8002138:	f00a fbb2 	bl	800c8a0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800213c:	2100      	movs	r1, #0
 800213e:	481b      	ldr	r0, [pc, #108]	; (80021ac <main+0xc8>)
 8002140:	f00a fa40 	bl	800c5c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002144:	2104      	movs	r1, #4
 8002146:	4819      	ldr	r0, [pc, #100]	; (80021ac <main+0xc8>)
 8002148:	f00a fa3c 	bl	800c5c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800214c:	2108      	movs	r1, #8
 800214e:	4817      	ldr	r0, [pc, #92]	; (80021ac <main+0xc8>)
 8002150:	f00a fa38 	bl	800c5c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002154:	210c      	movs	r1, #12
 8002156:	4815      	ldr	r0, [pc, #84]	; (80021ac <main+0xc8>)
 8002158:	f00a fa34 	bl	800c5c4 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 800215c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002160:	f006 fff4 	bl	800914c <HAL_Delay>
  Run_Init();
 8002164:	f001 fb64 	bl	8003830 <Run_Init>
  OLED_Init(&hi2c1);
 8002168:	4811      	ldr	r0, [pc, #68]	; (80021b0 <main+0xcc>)
 800216a:	f000 fb7b 	bl	8002864 <OLED_Init>
  DISP_Test();
 800216e:	f7ff fccd 	bl	8001b0c <DISP_Test>
  HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002178:	480e      	ldr	r0, [pc, #56]	; (80021b4 <main+0xd0>)
 800217a:	f008 fb87 	bl	800a88c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <main+0xd4>)
 8002186:	f008 fb81 	bl	800a88c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 800218a:	480c      	ldr	r0, [pc, #48]	; (80021bc <main+0xd8>)
 800218c:	f00a f95a 	bl	800c444 <HAL_TIM_Base_Start_IT>
  UI_Init();
 8002190:	f006 fdc8 	bl	8008d24 <UI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//	  OLED_Test();
	  UI_Main();
 8002194:	f006 fdd4 	bl	8008d40 <UI_Main>
 8002198:	e7fc      	b.n	8002194 <main+0xb0>
 800219a:	bf00      	nop
 800219c:	20000a20 	.word	0x20000a20
 80021a0:	20000518 	.word	0x20000518
 80021a4:	20000dc8 	.word	0x20000dc8
 80021a8:	20000e58 	.word	0x20000e58
 80021ac:	20000e10 	.word	0x20000e10
 80021b0:	200009cc 	.word	0x200009cc
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020400 	.word	0x40020400
 80021bc:	20000ea0 	.word	0x20000ea0

080021c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b094      	sub	sp, #80	; 0x50
 80021c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c6:	f107 0320 	add.w	r3, r7, #32
 80021ca:	2230      	movs	r2, #48	; 0x30
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00c f8ac 	bl	800e32c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <SystemClock_Config+0xcc>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	4a27      	ldr	r2, [pc, #156]	; (800228c <SystemClock_Config+0xcc>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6413      	str	r3, [r2, #64]	; 0x40
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <SystemClock_Config+0xcc>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <SystemClock_Config+0xd0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a21      	ldr	r2, [pc, #132]	; (8002290 <SystemClock_Config+0xd0>)
 800220a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <SystemClock_Config+0xd0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800221c:	2301      	movs	r3, #1
 800221e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002226:	2302      	movs	r3, #2
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800222a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002230:	2308      	movs	r3, #8
 8002232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002234:	23a8      	movs	r3, #168	; 0xa8
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002238:	2302      	movs	r3, #2
 800223a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800223c:	2307      	movs	r3, #7
 800223e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002240:	f107 0320 	add.w	r3, r7, #32
 8002244:	4618      	mov	r0, r3
 8002246:	f009 fc17 	bl	800ba78 <HAL_RCC_OscConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002250:	f000 f873 	bl	800233a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002254:	230f      	movs	r3, #15
 8002256:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002258:	2302      	movs	r3, #2
 800225a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002260:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002266:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800226a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2105      	movs	r1, #5
 8002272:	4618      	mov	r0, r3
 8002274:	f009 fe78 	bl	800bf68 <HAL_RCC_ClockConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800227e:	f000 f85c 	bl	800233a <Error_Handler>
  }
}
 8002282:	bf00      	nop
 8002284:	3750      	adds	r7, #80	; 0x50
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000

08002294 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

float coy = 50;;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1a      	ldr	r2, [pc, #104]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d12d      	bne.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x6e>
		//1ms
		static int counter = 0;
		counter++;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022ae:	6013      	str	r3, [r2, #0]
//			HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
//		kp = plan.kpid[0];
//		ki = plan.kpid[1];
//		kd = plan.kpid[2];
//		Run_LineTracing(coy, 0.001, 0);
		if(counter >= 10) {
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	dd0d      	ble.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x40>
			Run_MotorRoutine(0.01);
 80022b8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002314 <HAL_TIM_PeriodElapsedCallback+0x80>
 80022bc:	f001 fb24 	bl	8003908 <Run_MotorRoutine>
			main_flag |= MAIN_FLAG_DISP;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022cc:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
		}
		Plan_Main(0.001);
 80022d4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800231c <HAL_TIM_PeriodElapsedCallback+0x88>
 80022d8:	f001 f8fa 	bl	80034d0 <Plan_Main>
		Run_MotorRoutine2(0.001);
 80022dc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800231c <HAL_TIM_PeriodElapsedCallback+0x88>
 80022e0:	f001 fb76 	bl	80039d0 <Run_MotorRoutine2>
//			// 10ms
//			Run_MotorRoutine(0.01);
//			counter = 0;
//		}
		if((sensor_flag & 2) != 2) {
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d108      	bne.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x6e>
			SEN_StartReadSensor();
 80022f0:	f002 f9c6 	bl	8004680 <SEN_StartReadSensor>
			sensor_flag |= 2;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002300:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40001000 	.word	0x40001000
 8002310:	20000a78 	.word	0x20000a78
 8002314:	3c23d70a 	.word	0x3c23d70a
 8002318:	20000a74 	.word	0x20000a74
 800231c:	3a83126f 	.word	0x3a83126f
 8002320:	20000cbd 	.word	0x20000cbd

08002324 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	SEN_CallbackRoutine(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f002 f9b7 	bl	80046a0 <SEN_CallbackRoutine>
//	HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_RESET);
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800233e:	b672      	cpsid	i
}
 8002340:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002342:	e7fe      	b.n	8002342 <Error_Handler+0x8>

08002344 <Motor_SetPWM>:

void Motor_Init(Motor_typedef* hmot) {

}

void Motor_SetPWM(Motor_typedef* hmot, float value) {
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	ed87 0a00 	vstr	s0, [r7]
	if(value > 99) value = 99;
 8002350:	edd7 7a00 	vldr	s15, [r7]
 8002354:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002390 <Motor_SetPWM+0x4c>
 8002358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	dd02      	ble.n	8002368 <Motor_SetPWM+0x24>
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <Motor_SetPWM+0x50>)
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	e00a      	b.n	800237e <Motor_SetPWM+0x3a>
	else if(value < -99) value = -99;
 8002368:	edd7 7a00 	vldr	s15, [r7]
 800236c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002398 <Motor_SetPWM+0x54>
 8002370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	d501      	bpl.n	800237e <Motor_SetPWM+0x3a>
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <Motor_SetPWM+0x58>)
 800237c:	603b      	str	r3, [r7, #0]
	hmot->pwm = value;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	621a      	str	r2, [r3, #32]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	42c60000 	.word	0x42c60000
 8002394:	42c60000 	.word	0x42c60000
 8002398:	c2c60000 	.word	0xc2c60000
 800239c:	c2c60000 	.word	0xc2c60000

080023a0 <Motor_SetVel>:

void Motor_SetVel(Motor_typedef* hmot, float value) {
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	ed87 0a00 	vstr	s0, [r7]
	value *= hmot->vel_factor;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80023b2:	ed97 7a00 	vldr	s14, [r7]
 80023b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ba:	edc7 7a00 	vstr	s15, [r7]
	hmot->vel_sp = value;
 80023be:	edd7 7a00 	vldr	s15, [r7]
 80023c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c6:	ee17 3a90 	vmov	r3, s15
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <Motor_SetPoint>:
		Motor_SetVel(hmot, value);
		break;
	}
}

void Motor_SetPoint(Motor_typedef* hmot, float value) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	ed87 0a00 	vstr	s0, [r7]
	switch(hmot->mode) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <Motor_SetPoint+0x1a>
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d006      	beq.n	8002402 <Motor_SetPoint+0x26>
		break;
	case MOTOR_MODE_CLOSE:
		Motor_SetVel(hmot, value);
		break;
	}
}
 80023f4:	e00b      	b.n	800240e <Motor_SetPoint+0x32>
		Motor_SetPWM(hmot, value);
 80023f6:	ed97 0a00 	vldr	s0, [r7]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffa2 	bl	8002344 <Motor_SetPWM>
		break;
 8002400:	e005      	b.n	800240e <Motor_SetPoint+0x32>
		Motor_SetVel(hmot, value);
 8002402:	ed97 0a00 	vldr	s0, [r7]
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffca 	bl	80023a0 <Motor_SetVel>
		break;
 800240c:	bf00      	nop
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <Motor_ApplyPWM>:

void Motor_ApplyPWM(Motor_typedef* hmot) {
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
	int16_t tim_period = (hmot->pwm*hmot->pwm_factor)*hmot->pwm_htim->Init.Period;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	ed93 7a08 	vldr	s14, [r3, #32]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800242a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002444:	ee17 3a90 	vmov	r3, s15
 8002448:	81fb      	strh	r3, [r7, #14]
	uint8_t pwm_sign = tim_period < 0;
 800244a:	89fb      	ldrh	r3, [r7, #14]
 800244c:	0bdb      	lsrs	r3, r3, #15
 800244e:	b2db      	uxtb	r3, r3
 8002450:	737b      	strb	r3, [r7, #13]
//	uint8_t dir_sign = hmot->dir < 0;

	if(pwm_sign) tim_period*=-1;
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <Motor_ApplyPWM+0x4a>
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	425b      	negs	r3, r3
 800245c:	b29b      	uxth	r3, r3
 800245e:	81fb      	strh	r3, [r7, #14]
	if(tim_period > hmot->pwm_htim->Init.Period) {
 8002460:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	429a      	cmp	r2, r3
 800246c:	d903      	bls.n	8002476 <Motor_ApplyPWM+0x60>
		tim_period = (hmot->pwm_htim->Init.Period);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	81fb      	strh	r3, [r7, #14]
	}

	if(pwm_sign) {
 8002476:	7b7b      	ldrb	r3, [r7, #13]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d04a      	beq.n	8002512 <Motor_ApplyPWM+0xfc>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, 0);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	891b      	ldrh	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <Motor_ApplyPWM+0x7a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
 800248e:	e018      	b.n	80024c2 <Motor_ApplyPWM+0xac>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	891b      	ldrh	r3, [r3, #8]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d105      	bne.n	80024a4 <Motor_ApplyPWM+0x8e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	6393      	str	r3, [r2, #56]	; 0x38
 80024a2:	e00e      	b.n	80024c2 <Motor_ApplyPWM+0xac>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	891b      	ldrh	r3, [r3, #8]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d105      	bne.n	80024b8 <Motor_ApplyPWM+0xa2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024b6:	e004      	b.n	80024c2 <Motor_ApplyPWM+0xac>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2300      	movs	r3, #0
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	895b      	ldrh	r3, [r3, #10]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <Motor_ApplyPWM+0xc2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
	}
}
 80024d6:	e067      	b.n	80025a8 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	895b      	ldrh	r3, [r3, #10]
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d106      	bne.n	80024ee <Motor_ApplyPWM+0xd8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ea:	6393      	str	r3, [r2, #56]	; 0x38
 80024ec:	e05c      	b.n	80025a8 <Motor_ApplyPWM+0x192>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	895b      	ldrh	r3, [r3, #10]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d106      	bne.n	8002504 <Motor_ApplyPWM+0xee>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002500:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002502:	e051      	b.n	80025a8 <Motor_ApplyPWM+0x192>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800250e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002510:	e04a      	b.n	80025a8 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	891b      	ldrh	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <Motor_ApplyPWM+0x112>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002524:	635a      	str	r2, [r3, #52]	; 0x34
 8002526:	e01b      	b.n	8002560 <Motor_ApplyPWM+0x14a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	891b      	ldrh	r3, [r3, #8]
 800252c:	2b04      	cmp	r3, #4
 800252e:	d106      	bne.n	800253e <Motor_ApplyPWM+0x128>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800253a:	6393      	str	r3, [r2, #56]	; 0x38
 800253c:	e010      	b.n	8002560 <Motor_ApplyPWM+0x14a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	891b      	ldrh	r3, [r3, #8]
 8002542:	2b08      	cmp	r3, #8
 8002544:	d106      	bne.n	8002554 <Motor_ApplyPWM+0x13e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002550:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002552:	e005      	b.n	8002560 <Motor_ApplyPWM+0x14a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800255e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	895b      	ldrh	r3, [r3, #10]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <Motor_ApplyPWM+0x15e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002572:	e019      	b.n	80025a8 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	895b      	ldrh	r3, [r3, #10]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d105      	bne.n	8002588 <Motor_ApplyPWM+0x172>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002586:	e00f      	b.n	80025a8 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	895b      	ldrh	r3, [r3, #10]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d105      	bne.n	800259c <Motor_ApplyPWM+0x186>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800259a:	e005      	b.n	80025a8 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2300      	movs	r3, #0
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80025a6:	e7ff      	b.n	80025a8 <Motor_ApplyPWM+0x192>
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <Motor_EnocderRoutine>:

void Motor_EnocderRoutine(Motor_typedef* hmot, float period) {
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	ed87 0a00 	vstr	s0, [r7]
	int16_t tim_cnt_now = (int16_t)__HAL_TIM_GET_COUNTER(hmot->enc_htim) * hmot->dir;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	fb12 f303 	smulbb	r3, r2, r3
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	81fb      	strh	r3, [r7, #14]
	hmot->enc_vel =  (int16_t)(tim_cnt_now - hmot->enc_last_cnt);
 80025da:	89fa      	ldrh	r2, [r7, #14]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	61da      	str	r2, [r3, #28]
	hmot->enc_last_cnt = tim_cnt_now;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	89fa      	ldrh	r2, [r7, #14]
 80025f4:	829a      	strh	r2, [r3, #20]
	hmot->enc_cnt += hmot->enc_vel;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	441a      	add	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <Motor_ControlRoutine>:

void Motor_ControlRoutine(Motor_typedef* hmot, float __period) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	ed87 0a00 	vstr	s0, [r7]
	float error, mv;
	switch(hmot->mode) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d079      	beq.n	8002718 <Motor_ControlRoutine+0x108>
 8002624:	2b01      	cmp	r3, #1
 8002626:	d17a      	bne.n	800271e <Motor_ControlRoutine+0x10e>
	case MOTOR_MODE_CLOSE:
		error = hmot->vel_sp - hmot->enc_vel;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263e:	edc7 7a03 	vstr	s15, [r7, #12]
		if(hmot->vel_sp == 0) hmot->sum_error=0;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <Motor_ControlRoutine+0x44>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c
		if((hmot->vel_sp > 0 && hmot->pwm < 0)||(hmot->vel_sp < 0 && hmot->pwm > 0)) hmot->sum_error=0;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	dd07      	ble.n	800266e <Motor_ControlRoutine+0x5e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	edd3 7a08 	vldr	s15, [r3, #32]
 8002664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	d40c      	bmi.n	8002688 <Motor_ControlRoutine+0x78>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	da0b      	bge.n	8002690 <Motor_ControlRoutine+0x80>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	edd3 7a08 	vldr	s15, [r3, #32]
 800267e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	dd03      	ble.n	8002690 <Motor_ControlRoutine+0x80>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c
		mv = (hmot->kp * error) + (hmot->ki*hmot->sum_error*__period);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002696:	edd7 7a03 	vldr	s15, [r7, #12]
 800269a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026ae:	edd7 7a00 	vldr	s15, [r7]
 80026b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ba:	edc7 7a02 	vstr	s15, [r7, #8]
		if(mv>90) {
 80026be:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002730 <Motor_ControlRoutine+0x120>
 80026c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ce:	dd13      	ble.n	80026f8 <Motor_ControlRoutine+0xe8>
			hmot->sum_error*=0.9;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd ff37 	bl	8000548 <__aeabi_f2d>
 80026da:	a313      	add	r3, pc, #76	; (adr r3, 8002728 <Motor_ControlRoutine+0x118>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd ff8a 	bl	80005f8 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7fe fa7c 	bl	8000be8 <__aeabi_d2f>
 80026f0:	4602      	mov	r2, r0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80026f6:	e009      	b.n	800270c <Motor_ControlRoutine+0xfc>
		}
		else {
			hmot->sum_error += error;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80026fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
		hmot->pwm = mv;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	621a      	str	r2, [r3, #32]
		hmot->last_error = error;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	639a      	str	r2, [r3, #56]	; 0x38

//		hmot->filter = hmot->filter*(1-hmot->filter_alpha) + hmot->pwm*hmot->filter_alpha;
//		hmot->pwm = hmot->filter;

	case MOTOR_MODE_OPEN:
		Motor_ApplyPWM(hmot);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fe7c 	bl	8002416 <Motor_ApplyPWM>
	}
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	cccccccd 	.word	0xcccccccd
 800272c:	3feccccc 	.word	0x3feccccc
 8002730:	42b40000 	.word	0x42b40000

08002734 <OLED_Command>:
#include "oled.h"

I2C_HandleTypeDef* oled_hi2c;

void OLED_Command(uint8_t byte)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af04      	add	r7, sp, #16
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x00, 1, &byte, 1, 10);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <OLED_Command+0x2c>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	230a      	movs	r3, #10
 8002744:	9302      	str	r3, [sp, #8]
 8002746:	2301      	movs	r3, #1
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	1dfb      	adds	r3, r7, #7
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2301      	movs	r3, #1
 8002750:	2200      	movs	r2, #0
 8002752:	2178      	movs	r1, #120	; 0x78
 8002754:	f008 f9f8 	bl	800ab48 <HAL_I2C_Mem_Write>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000a7c 	.word	0x20000a7c

08002764 <OLED_DoubleCommand>:

void OLED_DoubleCommand(uint8_t byte1, uint8_t byte2)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	460a      	mov	r2, r1
 800276e:	71fb      	strb	r3, [r7, #7]
 8002770:	4613      	mov	r3, r2
 8002772:	71bb      	strb	r3, [r7, #6]
	OLED_Command(byte1);
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ffdc 	bl	8002734 <OLED_Command>
	OLED_Command(byte2);
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ffd8 	bl	8002734 <OLED_Command>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <OLED_Data>:

void OLED_Data(uint8_t byte)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af04      	add	r7, sp, #16
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x40, 1, &byte, 1, 10);
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <OLED_Data+0x2c>)
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	230a      	movs	r3, #10
 800279c:	9302      	str	r3, [sp, #8]
 800279e:	2301      	movs	r3, #1
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2301      	movs	r3, #1
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	2178      	movs	r1, #120	; 0x78
 80027ac:	f008 f9cc 	bl	800ab48 <HAL_I2C_Mem_Write>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000a7c 	.word	0x20000a7c

080027bc <OLED_SetPageAddr>:

void OLED_Inverse(uint8_t mode) {
	OLED_Command(0xA6 + (mode>=1));
}

void OLED_SetPageAddr(uint8_t addr) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
	OLED_Command(OLED_PAGE_ADDR | (addr & 0x07));
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80027d4:	b25b      	sxtb	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ffab 	bl	8002734 <OLED_Command>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <OLED_SetColumn>:

void OLED_SetColumn(uint8_t col) {
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
	col += OLED_X_OFFSET;
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	3302      	adds	r3, #2
 80027f4:	71fb      	strb	r3, [r7, #7]
	OLED_DoubleCommand(0x00 | (col & 0x0F), 0x10 | (col >> 4));
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f7ff ffa9 	bl	8002764 <OLED_DoubleCommand>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <OLED_ClearRAM>:
			HAL_Delay(10);
		}
	}
}

void OLED_ClearRAM() {
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
	for(int j=0; j<8; j++) {
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	e016      	b.n	8002854 <OLED_ClearRAM+0x3a>
		OLED_SetPageAddr(j);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ffc6 	bl	80027bc <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8002830:	2000      	movs	r0, #0
 8002832:	f7ff ffd8 	bl	80027e6 <OLED_SetColumn>
			for(int i=0; i<OLED_WIDTH; i++) {
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	e005      	b.n	8002848 <OLED_ClearRAM+0x2e>
				OLED_Data(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff ffa5 	bl	800278c <OLED_Data>
			for(int i=0; i<OLED_WIDTH; i++) {
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b7f      	cmp	r3, #127	; 0x7f
 800284c:	ddf6      	ble.n	800283c <OLED_ClearRAM+0x22>
	for(int j=0; j<8; j++) {
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3301      	adds	r3, #1
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b07      	cmp	r3, #7
 8002858:	dde5      	ble.n	8002826 <OLED_ClearRAM+0xc>
			}
		}
}
 800285a:	bf00      	nop
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <OLED_Init>:
//		OLED_MultipleData(&ed, 130);
//	}
//}

void OLED_Init(I2C_HandleTypeDef* hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	oled_hi2c = hi2c;
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <OLED_Init+0x6c>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]

	OLED_Command(OLED_DISP_OFF);
 8002872:	20ae      	movs	r0, #174	; 0xae
 8002874:	f7ff ff5e 	bl	8002734 <OLED_Command>
	OLED_DoubleCommand(OLED_MUX, 0x3F);
 8002878:	213f      	movs	r1, #63	; 0x3f
 800287a:	20a8      	movs	r0, #168	; 0xa8
 800287c:	f7ff ff72 	bl	8002764 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_OFFSET, 0x00);
 8002880:	2100      	movs	r1, #0
 8002882:	20d3      	movs	r0, #211	; 0xd3
 8002884:	f7ff ff6e 	bl	8002764 <OLED_DoubleCommand>
	OLED_Command(OLED_START_LINE);
 8002888:	2040      	movs	r0, #64	; 0x40
 800288a:	f7ff ff53 	bl	8002734 <OLED_Command>
	OLED_Command(OLED_SEG_RMAP | 0x01);
 800288e:	20a1      	movs	r0, #161	; 0xa1
 8002890:	f7ff ff50 	bl	8002734 <OLED_Command>
	OLED_Command(OLED_SCAN_DIR | 0x08);
 8002894:	20c8      	movs	r0, #200	; 0xc8
 8002896:	f7ff ff4d 	bl	8002734 <OLED_Command>
	OLED_DoubleCommand(OLED_COM_PADS,OLED_COM_PADS_MODE|0x10);
 800289a:	2112      	movs	r1, #18
 800289c:	20da      	movs	r0, #218	; 0xda
 800289e:	f7ff ff61 	bl	8002764 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_CONTRAST, 0x60);
 80028a2:	2160      	movs	r1, #96	; 0x60
 80028a4:	2081      	movs	r0, #129	; 0x81
 80028a6:	f7ff ff5d 	bl	8002764 <OLED_DoubleCommand>
	OLED_Command(OLED_FORCE_ON);
 80028aa:	20a4      	movs	r0, #164	; 0xa4
 80028ac:	f7ff ff42 	bl	8002734 <OLED_Command>
	OLED_Command(OLED_DISP_RV | 0x00);
 80028b0:	20a6      	movs	r0, #166	; 0xa6
 80028b2:	f7ff ff3f 	bl	8002734 <OLED_Command>
	OLED_DoubleCommand(OLED_CLK_OSC, 0xF0);
 80028b6:	21f0      	movs	r1, #240	; 0xf0
 80028b8:	20d5      	movs	r0, #213	; 0xd5
 80028ba:	f7ff ff53 	bl	8002764 <OLED_DoubleCommand>
//	OLED_Command(OLED_VPP_8V0);
	OLED_ClearRAM();
 80028be:	f7ff ffac 	bl	800281a <OLED_ClearRAM>
	OLED_Command(OLED_DISP_ON);
 80028c2:	20af      	movs	r0, #175	; 0xaf
 80028c4:	f7ff ff36 	bl	8002734 <OLED_Command>
//	OLED_Load();
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000a7c 	.word	0x20000a7c

080028d4 <Plan_SetCounter>:
uint8_t counter_status = 0;
uint8_t action_status = 0;
//uint8_t acc_status = 0;
uint8_t speed_now;

void Plan_SetCounter() {
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
	plan_last_counter = plan_counter;
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <Plan_SetCounter+0x18>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <Plan_SetCounter+0x1c>)
 80028de:	6013      	str	r3, [r2, #0]
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000a80 	.word	0x20000a80
 80028f0:	20000a84 	.word	0x20000a84

080028f4 <Plan_CheckCounterValue>:

uint8_t Plan_CheckCounterValue(uint32_t value) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	return (plan_counter - plan_last_counter) >= value*DELAY_FACTOR;
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <Plan_CheckCounterValue+0x34>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <Plan_CheckCounterValue+0x38>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	1ad1      	subs	r1, r2, r3
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4299      	cmp	r1, r3
 8002912:	bf2c      	ite	cs
 8002914:	2301      	movcs	r3, #1
 8002916:	2300      	movcc	r3, #0
 8002918:	b2db      	uxtb	r3, r3
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000a80 	.word	0x20000a80
 800292c:	20000a84 	.word	0x20000a84

08002930 <Plan_CheckSensor>:

uint32_t Plan_CounterValue() {
	return (plan_counter - plan_last_counter);
}

uint8_t Plan_CheckSensor(uint8_t s, uint8_t align) {
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	460a      	mov	r2, r1
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
	if(s == 0) return 1;
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <Plan_CheckSensor+0x1a>
 8002946:	2301      	movs	r3, #1
 8002948:	e02c      	b.n	80029a4 <Plan_CheckSensor+0x74>
	else {
		s-=1;
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	3b01      	subs	r3, #1
 800294e:	71fb      	strb	r3, [r7, #7]
		switch(align) {
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d002      	beq.n	800295c <Plan_CheckSensor+0x2c>
 8002956:	2b02      	cmp	r3, #2
 8002958:	d009      	beq.n	800296e <Plan_CheckSensor+0x3e>
 800295a:	e019      	b.n	8002990 <Plan_CheckSensor+0x60>
		case RIGHT_ALIGN_SEN:
			return sensor_disp_status[RIGHT_SENSOR(s)] > 0;
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <Plan_CheckSensor+0x80>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf14      	ite	ne
 8002966:	2301      	movne	r3, #1
 8002968:	2300      	moveq	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e01a      	b.n	80029a4 <Plan_CheckSensor+0x74>
		case LR_ALIGN_SEN:
			return (sensor_disp_status[RIGHT_SENSOR(s)] > 0) || (sensor_disp_status[LEFT_SENSOR(s)] > 0);
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <Plan_CheckSensor+0x80>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d106      	bne.n	8002986 <Plan_CheckSensor+0x56>
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f1c3 030d 	rsb	r3, r3, #13
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <Plan_CheckSensor+0x80>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <Plan_CheckSensor+0x5a>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <Plan_CheckSensor+0x5c>
 800298a:	2300      	movs	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e009      	b.n	80029a4 <Plan_CheckSensor+0x74>
		case LEFT_ALIGN_SEN:
		default:
			return sensor_disp_status[LEFT_SENSOR(s)] > 0;
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f1c3 030d 	rsb	r3, r3, #13
 8002996:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <Plan_CheckSensor+0x80>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
		}
	}
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	20000b90 	.word	0x20000b90
 80029b4:	00000000 	.word	0x00000000

080029b8 <Plan_Left>:

uint8_t Plan_Left(Action_typedef a) {
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 0) {
 80029c4:	797b      	ldrb	r3, [r7, #5]
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ffb1 	bl	8002930 <Plan_CheckSensor>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00c      	beq.n	80029ee <Plan_Left+0x36>
 80029d4:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <Plan_Left+0x128>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <Plan_Left+0x36>
			Plan_SetCounter();
 80029dc:	f7ff ff7a 	bl	80028d4 <Plan_SetCounter>
			plan_last_enc = MOTOR_R.enc_cnt;
 80029e0:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <Plan_Left+0x12c>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	4a40      	ldr	r2, [pc, #256]	; (8002ae8 <Plan_Left+0x130>)
 80029e6:	6013      	str	r3, [r2, #0]
			counter_status = 1;
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <Plan_Left+0x128>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 80029ee:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <Plan_Left+0x128>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d16a      	bne.n	8002acc <Plan_Left+0x114>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 80029f6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <Plan_Left+0x134>)
 80029fe:	7ddb      	ldrb	r3, [r3, #23]
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fd8d 	bl	8000524 <__aeabi_i2d>
 8002a0a:	a333      	add	r3, pc, #204	; (adr r3, 8002ad8 <Plan_Left+0x120>)
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f7fd fdf2 	bl	80005f8 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f7fe f8e4 	bl	8000be8 <__aeabi_d2f>
 8002a20:	4604      	mov	r4, r0
 8002a22:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <Plan_Left+0x134>)
 8002a2a:	7ddb      	ldrb	r3, [r3, #23]
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd77 	bl	8000524 <__aeabi_i2d>
 8002a36:	a328      	add	r3, pc, #160	; (adr r3, 8002ad8 <Plan_Left+0x120>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd fddc 	bl	80005f8 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f7fe f8ce 	bl	8000be8 <__aeabi_d2f>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	ee00 3a90 	vmov	s1, r3
 8002a52:	ee00 4a10 	vmov	s0, r4
 8002a56:	f001 fd67 	bl	8004528 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002a5a:	79bb      	ldrb	r3, [r7, #6]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d01f      	beq.n	8002aa0 <Plan_Left+0xe8>
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	dc31      	bgt.n	8002ac8 <Plan_Left+0x110>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <Plan_Left+0xb6>
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d009      	beq.n	8002a80 <Plan_Left+0xc8>
 8002a6c:	e02c      	b.n	8002ac8 <Plan_Left+0x110>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff3f 	bl	80028f4 <Plan_CheckCounterValue>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <Plan_Left+0x106>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e026      	b.n	8002ace <Plan_Left+0x116>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff36 	bl	80028f4 <Plan_CheckCounterValue>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d019      	beq.n	8002ac2 <Plan_Left+0x10a>
				if(Plan_CheckSensor(5, LEFT_ALIGN_SEN)) return 2;
 8002a8e:	2100      	movs	r1, #0
 8002a90:	2005      	movs	r0, #5
 8002a92:	f7ff ff4d 	bl	8002930 <Plan_CheckSensor>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <Plan_Left+0x10a>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e016      	b.n	8002ace <Plan_Left+0x116>
			break;
		case 2:
			if(MOTOR_R.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <Plan_Left+0x12c>)
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <Plan_Left+0x130>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1ad2      	subs	r2, r2, r3
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	4619      	mov	r1, r3
 8002aae:	460b      	mov	r3, r1
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	dd05      	ble.n	8002ac6 <Plan_Left+0x10e>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e007      	b.n	8002ace <Plan_Left+0x116>
			break;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <Plan_Left+0x110>
			break;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <Plan_Left+0x110>
			break;
 8002ac6:	bf00      	nop
		}
		return 1;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <Plan_Left+0x116>
	}
	return 0;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	9999999a 	.word	0x9999999a
 8002adc:	3fb99999 	.word	0x3fb99999
 8002ae0:	20000a8c 	.word	0x20000a8c
 8002ae4:	20000a90 	.word	0x20000a90
 8002ae8:	20000a88 	.word	0x20000a88
 8002aec:	20000d54 	.word	0x20000d54

08002af0 <Plan_Right>:

uint8_t Plan_Right(Action_typedef a) {
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 0) {
 8002afc:	797b      	ldrb	r3, [r7, #5]
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff15 	bl	8002930 <Plan_CheckSensor>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00c      	beq.n	8002b26 <Plan_Right+0x36>
 8002b0c:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <Plan_Right+0x128>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <Plan_Right+0x36>
			Plan_SetCounter();
 8002b14:	f7ff fede 	bl	80028d4 <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002b18:	4b40      	ldr	r3, [pc, #256]	; (8002c1c <Plan_Right+0x12c>)
 8002b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1c:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <Plan_Right+0x130>)
 8002b1e:	6013      	str	r3, [r2, #0]
			counter_status = 1;
 8002b20:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <Plan_Right+0x128>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002b26:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <Plan_Right+0x128>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d16a      	bne.n	8002c04 <Plan_Right+0x114>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8002b2e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <Plan_Right+0x134>)
 8002b36:	7ddb      	ldrb	r3, [r3, #23]
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fcf1 	bl	8000524 <__aeabi_i2d>
 8002b42:	a333      	add	r3, pc, #204	; (adr r3, 8002c10 <Plan_Right+0x120>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd fd56 	bl	80005f8 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f848 	bl	8000be8 <__aeabi_d2f>
 8002b58:	4604      	mov	r4, r0
 8002b5a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <Plan_Right+0x134>)
 8002b62:	7ddb      	ldrb	r3, [r3, #23]
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fcdb 	bl	8000524 <__aeabi_i2d>
 8002b6e:	a328      	add	r3, pc, #160	; (adr r3, 8002c10 <Plan_Right+0x120>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fd40 	bl	80005f8 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7fe f832 	bl	8000be8 <__aeabi_d2f>
 8002b84:	4603      	mov	r3, r0
 8002b86:	ee00 3a90 	vmov	s1, r3
 8002b8a:	ee00 4a10 	vmov	s0, r4
 8002b8e:	f001 fccb 	bl	8004528 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d01f      	beq.n	8002bd8 <Plan_Right+0xe8>
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	dc31      	bgt.n	8002c00 <Plan_Right+0x110>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <Plan_Right+0xb6>
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d009      	beq.n	8002bb8 <Plan_Right+0xc8>
 8002ba4:	e02c      	b.n	8002c00 <Plan_Right+0x110>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fea3 	bl	80028f4 <Plan_CheckCounterValue>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <Plan_Right+0x106>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e026      	b.n	8002c06 <Plan_Right+0x116>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fe9a 	bl	80028f4 <Plan_CheckCounterValue>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d019      	beq.n	8002bfa <Plan_Right+0x10a>
				if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN)) return 2;
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	2005      	movs	r0, #5
 8002bca:	f7ff feb1 	bl	8002930 <Plan_CheckSensor>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <Plan_Right+0x10a>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e016      	b.n	8002c06 <Plan_Right+0x116>
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <Plan_Right+0x12c>)
 8002bda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <Plan_Right+0x130>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	1ad2      	subs	r2, r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4619      	mov	r1, r3
 8002be6:	460b      	mov	r3, r1
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	dd05      	ble.n	8002bfe <Plan_Right+0x10e>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e007      	b.n	8002c06 <Plan_Right+0x116>
			break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <Plan_Right+0x110>
			break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <Plan_Right+0x110>
			break;
 8002bfe:	bf00      	nop
		}
		return 1;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <Plan_Right+0x116>
	}
	return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd90      	pop	{r4, r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	9999999a 	.word	0x9999999a
 8002c14:	3fb99999 	.word	0x3fb99999
 8002c18:	20000a8c 	.word	0x20000a8c
 8002c1c:	20000a90 	.word	0x20000a90
 8002c20:	20000a88 	.word	0x20000a88
 8002c24:	20000d54 	.word	0x20000d54

08002c28 <Plan_Forward>:

uint8_t Plan_Forward(Action_typedef a, uint8_t _speed) {
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	1d3c      	adds	r4, r7, #4
 8002c30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c34:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002c36:	797b      	ldrb	r3, [r7, #5]
 8002c38:	2102      	movs	r1, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fe78 	bl	8002930 <Plan_CheckSensor>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d011      	beq.n	8002c6a <Plan_Forward+0x42>
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <Plan_Forward+0x100>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <Plan_Forward+0x42>
			Plan_SetCounter();
 8002c4e:	f7ff fe41 	bl	80028d4 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <Plan_Forward+0x104>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c5c:	ee17 2a90 	vmov	r2, s15
 8002c60:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <Plan_Forward+0x108>)
 8002c62:	601a      	str	r2, [r3, #0]
			counter_status = 1;
 8002c64:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <Plan_Forward+0x100>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002c6a:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <Plan_Forward+0x100>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d154      	bne.n	8002d1c <Plan_Forward+0xf4>
		Run_SetMotorSpeed(_speed, _speed);
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	ee07 3a10 	vmov	s14, r3
 8002c82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002c86:	eef0 0a47 	vmov.f32	s1, s14
 8002c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8e:	f001 fc4b 	bl	8004528 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002c92:	79bb      	ldrb	r3, [r7, #6]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d01f      	beq.n	8002cd8 <Plan_Forward+0xb0>
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	dc3d      	bgt.n	8002d18 <Plan_Forward+0xf0>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <Plan_Forward+0x7e>
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d009      	beq.n	8002cb8 <Plan_Forward+0x90>
 8002ca4:	e038      	b.n	8002d18 <Plan_Forward+0xf0>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fe23 	bl	80028f4 <Plan_CheckCounterValue>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02e      	beq.n	8002d12 <Plan_Forward+0xea>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e032      	b.n	8002d1e <Plan_Forward+0xf6>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fe1a 	bl	80028f4 <Plan_CheckCounterValue>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d027      	beq.n	8002d16 <Plan_Forward+0xee>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	2007      	movs	r0, #7
 8002cca:	f7ff fe31 	bl	8002930 <Plan_CheckSensor>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <Plan_Forward+0xee>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e022      	b.n	8002d1e <Plan_Forward+0xf6>
			break;
		case 2:
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <Plan_Forward+0x104>)
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <Plan_Forward+0x108>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0a:	dc00      	bgt.n	8002d0e <Plan_Forward+0xe6>
			break;
 8002d0c:	e004      	b.n	8002d18 <Plan_Forward+0xf0>
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e005      	b.n	8002d1e <Plan_Forward+0xf6>
			break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <Plan_Forward+0xf0>
			break;
 8002d16:	bf00      	nop
		}
		return 1;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <Plan_Forward+0xf6>
	}
	return 0;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000a8c 	.word	0x20000a8c
 8002d2c:	20000b20 	.word	0x20000b20
 8002d30:	20000a88 	.word	0x20000a88

08002d34 <Plan_Backward>:

uint8_t Plan_Backward(Action_typedef a, uint8_t _speed) {
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	1d3c      	adds	r4, r7, #4
 8002d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d40:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002d42:	797b      	ldrb	r3, [r7, #5]
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fdf2 	bl	8002930 <Plan_CheckSensor>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d011      	beq.n	8002d76 <Plan_Backward+0x42>
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <Plan_Backward+0x104>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <Plan_Backward+0x42>
			Plan_SetCounter();
 8002d5a:	f7ff fdbb 	bl	80028d4 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002d5e:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <Plan_Backward+0x108>)
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d68:	ee17 2a90 	vmov	r2, s15
 8002d6c:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <Plan_Backward+0x10c>)
 8002d6e:	601a      	str	r2, [r3, #0]
			counter_status = 1;
 8002d70:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <Plan_Backward+0x104>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <Plan_Backward+0x104>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d156      	bne.n	8002e2c <Plan_Backward+0xf8>
		Run_SetMotorSpeed(-_speed, -_speed);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	425b      	negs	r3, r3
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	425b      	negs	r3, r3
 8002d8e:	ee07 3a10 	vmov	s14, r3
 8002d92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d96:	eef0 0a47 	vmov.f32	s1, s14
 8002d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9e:	f001 fbc3 	bl	8004528 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002da2:	79bb      	ldrb	r3, [r7, #6]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d01f      	beq.n	8002de8 <Plan_Backward+0xb4>
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	dc3d      	bgt.n	8002e28 <Plan_Backward+0xf4>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <Plan_Backward+0x82>
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d009      	beq.n	8002dc8 <Plan_Backward+0x94>
 8002db4:	e038      	b.n	8002e28 <Plan_Backward+0xf4>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fd9b 	bl	80028f4 <Plan_CheckCounterValue>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d02e      	beq.n	8002e22 <Plan_Backward+0xee>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e032      	b.n	8002e2e <Plan_Backward+0xfa>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fd92 	bl	80028f4 <Plan_CheckCounterValue>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d027      	beq.n	8002e26 <Plan_Backward+0xf2>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	2007      	movs	r0, #7
 8002dda:	f7ff fda9 	bl	8002930 <Plan_CheckSensor>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <Plan_Backward+0xf2>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e022      	b.n	8002e2e <Plan_Backward+0xfa>
			break;
		case 2:
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <Plan_Backward+0x10c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <Plan_Backward+0x108>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1a:	dc00      	bgt.n	8002e1e <Plan_Backward+0xea>
			break;
 8002e1c:	e004      	b.n	8002e28 <Plan_Backward+0xf4>
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e005      	b.n	8002e2e <Plan_Backward+0xfa>
			break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <Plan_Backward+0xf4>
			break;
 8002e26:	bf00      	nop
		}
		return 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <Plan_Backward+0xfa>
	}
	return 0;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000a8c 	.word	0x20000a8c
 8002e3c:	20000b20 	.word	0x20000b20
 8002e40:	20000a88 	.word	0x20000a88

08002e44 <Plan_Idle>:

uint8_t Plan_Idle(Action_typedef a) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002e50:	797b      	ldrb	r3, [r7, #5]
 8002e52:	2102      	movs	r1, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fd6b 	bl	8002930 <Plan_CheckSensor>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d011      	beq.n	8002e84 <Plan_Idle+0x40>
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <Plan_Idle+0x7c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <Plan_Idle+0x40>
			Plan_SetCounter();
 8002e68:	f7ff fd34 	bl	80028d4 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <Plan_Idle+0x80>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e76:	ee17 2a90 	vmov	r2, s15
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <Plan_Idle+0x84>)
 8002e7c:	601a      	str	r2, [r3, #0]
			counter_status = 1;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <Plan_Idle+0x7c>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <Plan_Idle+0x7c>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d114      	bne.n	8002eb6 <Plan_Idle+0x72>
		Run_SetMotorSpeed(0, 0);
 8002e8c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002ecc <Plan_Idle+0x88>
 8002e90:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002ecc <Plan_Idle+0x88>
 8002e94:	f001 fb48 	bl	8004528 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002e98:	79bb      	ldrb	r3, [r7, #6]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <Plan_Idle+0x6e>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fd27 	bl	80028f4 <Plan_CheckCounterValue>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <Plan_Idle+0x6c>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e003      	b.n	8002eb8 <Plan_Idle+0x74>
			break;
 8002eb0:	bf00      	nop
//			break;
//		case 2:
//			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
//			break;
		}
		return 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <Plan_Idle+0x74>
	}
	return 0;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000a8c 	.word	0x20000a8c
 8002ec4:	20000b20 	.word	0x20000b20
 8002ec8:	20000a88 	.word	0x20000a88
 8002ecc:	00000000 	.word	0x00000000

08002ed0 <Plan_Follow>:

uint8_t Plan_Follow(Action_typedef a) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <Plan_Follow+0xa0>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10d      	bne.n	8002f00 <Plan_Follow+0x30>
		Plan_SetCounter();
 8002ee4:	f7ff fcf6 	bl	80028d4 <Plan_SetCounter>
		robot_enc_pos = MOTOR_L.enc_cnt;
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <Plan_Follow+0xa4>)
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	ee07 3a90 	vmov	s15, r3
 8002ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <Plan_Follow+0xa8>)
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
		counter_status = 1;
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <Plan_Follow+0xa0>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
	}
	switch(a.act_mode) {
 8002f00:	79bb      	ldrb	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <Plan_Follow+0x3c>
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d00c      	beq.n	8002f24 <Plan_Follow+0x54>
 8002f0a:	e028      	b.n	8002f5e <Plan_Follow+0x8e>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fcf0 	bl	80028f4 <Plan_CheckCounterValue>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d023      	beq.n	8002f62 <Plan_Follow+0x92>
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <Plan_Follow+0x92>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e020      	b.n	8002f66 <Plan_Follow+0x96>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <Plan_Follow+0xa8>)
 8002f26:	ed93 7a00 	vldr	s14, [r3]
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <Plan_Follow+0xac>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f56:	dc00      	bgt.n	8002f5a <Plan_Follow+0x8a>
		break;
 8002f58:	e004      	b.n	8002f64 <Plan_Follow+0x94>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e003      	b.n	8002f66 <Plan_Follow+0x96>
	default: return 2;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e001      	b.n	8002f66 <Plan_Follow+0x96>
		break;
 8002f62:	bf00      	nop
	}
	return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000a8c 	.word	0x20000a8c
 8002f74:	20000a90 	.word	0x20000a90
 8002f78:	20000b20 	.word	0x20000b20
 8002f7c:	20000a88 	.word	0x20000a88

08002f80 <Plan_FollowLeft>:

uint8_t Plan_FollowLeft(Action_typedef a) {
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002f8c:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <Plan_FollowLeft+0x148>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10d      	bne.n	8002fb0 <Plan_FollowLeft+0x30>
		Plan_SetCounter();
 8002f94:	f7ff fc9e 	bl	80028d4 <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <Plan_FollowLeft+0x14c>)
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fa2:	ee17 2a90 	vmov	r2, s15
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <Plan_FollowLeft+0x150>)
 8002fa8:	601a      	str	r2, [r3, #0]
		counter_status = 1;
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <Plan_FollowLeft+0x148>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 1) {
 8002fb0:	797b      	ldrb	r3, [r7, #5]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fcbb 	bl	8002930 <Plan_CheckSensor>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <Plan_FollowLeft+0x4e>
 8002fc0:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <Plan_FollowLeft+0x148>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d102      	bne.n	8002fce <Plan_FollowLeft+0x4e>
		counter_status = 2;
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <Plan_FollowLeft+0x148>)
 8002fca:	2202      	movs	r2, #2
 8002fcc:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <Plan_FollowLeft+0x148>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d13d      	bne.n	8003052 <Plan_FollowLeft+0xd2>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002fd6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <Plan_FollowLeft+0x154>)
 8002fde:	7ddb      	ldrb	r3, [r3, #23]
 8002fe0:	fb02 f303 	mul.w	r3, r2, r3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fa9d 	bl	8000524 <__aeabi_i2d>
 8002fea:	a335      	add	r3, pc, #212	; (adr r3, 80030c0 <Plan_FollowLeft+0x140>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f7fd fb02 	bl	80005f8 <__aeabi_dmul>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f7fd fdf4 	bl	8000be8 <__aeabi_d2f>
 8003000:	4604      	mov	r4, r0
 8003002:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003006:	461a      	mov	r2, r3
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <Plan_FollowLeft+0x154>)
 800300a:	7ddb      	ldrb	r3, [r3, #23]
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fa87 	bl	8000524 <__aeabi_i2d>
 8003016:	a32a      	add	r3, pc, #168	; (adr r3, 80030c0 <Plan_FollowLeft+0x140>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd faec 	bl	80005f8 <__aeabi_dmul>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	f7fd fdde 	bl	8000be8 <__aeabi_d2f>
 800302c:	4603      	mov	r3, r0
 800302e:	ee00 3a90 	vmov	s1, r3
 8003032:	ee00 4a10 	vmov	s0, r4
 8003036:	f001 fa77 	bl	8004528 <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, LEFT_ALIGN_SEN) > 0) {
 800303a:	2100      	movs	r1, #0
 800303c:	2005      	movs	r0, #5
 800303e:	f7ff fc77 	bl	8002930 <Plan_CheckSensor>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <Plan_FollowLeft+0xce>
			counter_status = 1;
 8003048:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <Plan_FollowLeft+0x148>)
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800304e:	2301      	movs	r3, #1
 8003050:	e032      	b.n	80030b8 <Plan_FollowLeft+0x138>
	}
	switch(a.act_mode) {
 8003052:	79bb      	ldrb	r3, [r7, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <Plan_FollowLeft+0xde>
 8003058:	2b02      	cmp	r3, #2
 800305a:	d00c      	beq.n	8003076 <Plan_FollowLeft+0xf6>
 800305c:	e028      	b.n	80030b0 <Plan_FollowLeft+0x130>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fc47 	bl	80028f4 <Plan_CheckCounterValue>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d023      	beq.n	80030b4 <Plan_FollowLeft+0x134>
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d020      	beq.n	80030b4 <Plan_FollowLeft+0x134>
 8003072:	2302      	movs	r3, #2
 8003074:	e020      	b.n	80030b8 <Plan_FollowLeft+0x138>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <Plan_FollowLeft+0x14c>)
 8003078:	ed93 7a00 	vldr	s14, [r3]
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <Plan_FollowLeft+0x150>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	461a      	mov	r2, r3
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a8:	dc00      	bgt.n	80030ac <Plan_FollowLeft+0x12c>
		break;
 80030aa:	e004      	b.n	80030b6 <Plan_FollowLeft+0x136>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80030ac:	2302      	movs	r3, #2
 80030ae:	e003      	b.n	80030b8 <Plan_FollowLeft+0x138>
	default: return 2;
 80030b0:	2302      	movs	r3, #2
 80030b2:	e001      	b.n	80030b8 <Plan_FollowLeft+0x138>
		break;
 80030b4:	bf00      	nop
	}
	return 0;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd90      	pop	{r4, r7, pc}
 80030c0:	9999999a 	.word	0x9999999a
 80030c4:	3fb99999 	.word	0x3fb99999
 80030c8:	20000a8c 	.word	0x20000a8c
 80030cc:	20000b20 	.word	0x20000b20
 80030d0:	20000a88 	.word	0x20000a88
 80030d4:	20000d54 	.word	0x20000d54

080030d8 <Plan_FollowRight>:

uint8_t Plan_FollowRight(Action_typedef a) {
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 80030e4:	4b4e      	ldr	r3, [pc, #312]	; (8003220 <Plan_FollowRight+0x148>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10d      	bne.n	8003108 <Plan_FollowRight+0x30>
		Plan_SetCounter();
 80030ec:	f7ff fbf2 	bl	80028d4 <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 80030f0:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <Plan_FollowRight+0x14c>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030fa:	ee17 2a90 	vmov	r2, s15
 80030fe:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <Plan_FollowRight+0x150>)
 8003100:	601a      	str	r2, [r3, #0]
		counter_status = 1;
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <Plan_FollowRight+0x148>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 1) {
 8003108:	797b      	ldrb	r3, [r7, #5]
 800310a:	2101      	movs	r1, #1
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fc0f 	bl	8002930 <Plan_CheckSensor>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <Plan_FollowRight+0x4e>
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <Plan_FollowRight+0x148>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d102      	bne.n	8003126 <Plan_FollowRight+0x4e>
		counter_status = 2;
 8003120:	4b3f      	ldr	r3, [pc, #252]	; (8003220 <Plan_FollowRight+0x148>)
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8003126:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <Plan_FollowRight+0x148>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d13d      	bne.n	80031aa <Plan_FollowRight+0xd2>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 800312e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003132:	461a      	mov	r2, r3
 8003134:	4b3d      	ldr	r3, [pc, #244]	; (800322c <Plan_FollowRight+0x154>)
 8003136:	7ddb      	ldrb	r3, [r3, #23]
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f9f1 	bl	8000524 <__aeabi_i2d>
 8003142:	a335      	add	r3, pc, #212	; (adr r3, 8003218 <Plan_FollowRight+0x140>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd fa56 	bl	80005f8 <__aeabi_dmul>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7fd fd48 	bl	8000be8 <__aeabi_d2f>
 8003158:	4604      	mov	r4, r0
 800315a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800315e:	461a      	mov	r2, r3
 8003160:	4b32      	ldr	r3, [pc, #200]	; (800322c <Plan_FollowRight+0x154>)
 8003162:	7ddb      	ldrb	r3, [r3, #23]
 8003164:	fb02 f303 	mul.w	r3, r2, r3
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f9db 	bl	8000524 <__aeabi_i2d>
 800316e:	a32a      	add	r3, pc, #168	; (adr r3, 8003218 <Plan_FollowRight+0x140>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f7fd fa40 	bl	80005f8 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	f7fd fd32 	bl	8000be8 <__aeabi_d2f>
 8003184:	4603      	mov	r3, r0
 8003186:	ee00 3a90 	vmov	s1, r3
 800318a:	ee00 4a10 	vmov	s0, r4
 800318e:	f001 f9cb 	bl	8004528 <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN) > 0) {
 8003192:	2101      	movs	r1, #1
 8003194:	2005      	movs	r0, #5
 8003196:	f7ff fbcb 	bl	8002930 <Plan_CheckSensor>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <Plan_FollowRight+0xce>
			counter_status = 1;
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <Plan_FollowRight+0x148>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e032      	b.n	8003210 <Plan_FollowRight+0x138>
	}
	switch(a.act_mode) {
 80031aa:	79bb      	ldrb	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <Plan_FollowRight+0xde>
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d00c      	beq.n	80031ce <Plan_FollowRight+0xf6>
 80031b4:	e028      	b.n	8003208 <Plan_FollowRight+0x130>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fb9b 	bl	80028f4 <Plan_CheckCounterValue>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d023      	beq.n	800320c <Plan_FollowRight+0x134>
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <Plan_FollowRight+0x134>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e020      	b.n	8003210 <Plan_FollowRight+0x138>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <Plan_FollowRight+0x14c>)
 80031d0:	ed93 7a00 	vldr	s14, [r3]
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <Plan_FollowRight+0x150>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	dc00      	bgt.n	8003204 <Plan_FollowRight+0x12c>
		break;
 8003202:	e004      	b.n	800320e <Plan_FollowRight+0x136>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003204:	2302      	movs	r3, #2
 8003206:	e003      	b.n	8003210 <Plan_FollowRight+0x138>
	default: return 2;
 8003208:	2302      	movs	r3, #2
 800320a:	e001      	b.n	8003210 <Plan_FollowRight+0x138>
		break;
 800320c:	bf00      	nop
	}
	return 0;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}
 8003218:	9999999a 	.word	0x9999999a
 800321c:	3fb99999 	.word	0x3fb99999
 8003220:	20000a8c 	.word	0x20000a8c
 8003224:	20000b20 	.word	0x20000b20
 8003228:	20000a88 	.word	0x20000a88
 800322c:	20000d54 	.word	0x20000d54

08003230 <Plan_Invert>:


uint8_t Plan_Invert(Action_typedef a) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN)) {
 800323c:	797b      	ldrb	r3, [r7, #5]
 800323e:	2102      	movs	r1, #2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fb75 	bl	8002930 <Plan_CheckSensor>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <Plan_Invert+0x24>
		SEN_Invert();
 800324c:	f001 fc20 	bl	8004a90 <SEN_Invert>
		return 2;
 8003250:	2302      	movs	r3, #2
 8003252:	e000      	b.n	8003256 <Plan_Invert+0x26>
	}
	return 0;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <Plan_NextPlan>:

uint8_t Plan_NextPlan(Action_typedef a) {
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 800326a:	2302      	movs	r3, #2
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <Plan_Null>:


uint8_t Plan_Null(Action_typedef a) {
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 8003284:	2302      	movs	r3, #2
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <Plan_Jump>:

uint8_t Plan_Jump(Action_typedef a) {
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(a.act_value > 0) num_index = a.act_value-1;
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <Plan_Jump+0x1c>
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <Plan_Jump+0x2c>)
 80032ae:	701a      	strb	r2, [r3, #0]
	return 2;
 80032b0:	2302      	movs	r3, #2
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000ccd 	.word	0x20000ccd

080032c4 <Plan_ActionInit>:

uint8_t Plan_ActionInit(Action_typedef a, float period, uint8_t sp) {
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	f107 040c 	add.w	r4, r7, #12
 80032ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80032d6:	71fb      	strb	r3, [r7, #7]
	static uint8_t stat = 0;
	uint8_t _speed = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]
	if(counter_status == 0) {
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <Plan_ActionInit+0xb0>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <Plan_ActionInit+0x2a>
		Plan_SetCounter();
 80032e4:	f7ff faf6 	bl	80028d4 <Plan_SetCounter>
		counter_status = 1;
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <Plan_ActionInit+0xb0>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
	}

	if(Plan_CheckCounterValue(a.wait_time) && stat == 0) {
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff faff 	bl	80028f4 <Plan_CheckCounterValue>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <Plan_ActionInit+0x50>
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <Plan_ActionInit+0xb4>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <Plan_ActionInit+0x50>
		counter_status = 0;
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <Plan_ActionInit+0xb0>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
		stat = 1;
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <Plan_ActionInit+0xb4>)
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
		return 0;
 8003310:	2300      	movs	r3, #0
 8003312:	e02a      	b.n	800336a <Plan_ActionInit+0xa6>
	}

	if(stat == 0) return 0;
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <Plan_ActionInit+0xb4>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <Plan_ActionInit+0x5c>
 800331c:	2300      	movs	r3, #0
 800331e:	e024      	b.n	800336a <Plan_ActionInit+0xa6>

	if(Plan_CheckCounterValue(a.boost_time) && stat == 1) {
 8003320:	7d3b      	ldrb	r3, [r7, #20]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fae6 	bl	80028f4 <Plan_CheckCounterValue>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <Plan_ActionInit+0x82>
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <Plan_ActionInit+0xb4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <Plan_ActionInit+0x82>
		counter_status = 0;
 8003336:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <Plan_ActionInit+0xb0>)
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
//		acc_status = 0;
		stat = 0;
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <Plan_ActionInit+0xb4>)
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
		return 3;
 8003342:	2303      	movs	r3, #3
 8003344:	e011      	b.n	800336a <Plan_ActionInit+0xa6>
//			_speed = (a.boost_speed-sp)*(float)(Plan_CounterValue()/(float)plan.acc);
//			_speed += sp;
//		}
//	}
//	else if(acc_status == 2) {
		_speed = a.boost_speed;
 8003346:	7d7b      	ldrb	r3, [r7, #21]
 8003348:	77fb      	strb	r3, [r7, #31]
//	}
	Run_LineTracing(_speed, period, plan.status_pid);
 800334a:	7ffb      	ldrb	r3, [r7, #31]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <Plan_ActionInit+0xb8>)
 8003356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800335a:	4618      	mov	r0, r3
 800335c:	edd7 0a02 	vldr	s1, [r7, #8]
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	f001 f8ae 	bl	80044c4 <Run_LineTracing>
//	Run_LineTracing(a.boost_speed, period, 0);
	return 1;
 8003368:	2301      	movs	r3, #1
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd90      	pop	{r4, r7, pc}
 8003372:	bf00      	nop
 8003374:	20000a8c 	.word	0x20000a8c
 8003378:	20000a8f 	.word	0x20000a8f
 800337c:	20000d54 	.word	0x20000d54

08003380 <Plan_Stop>:
	}
	return 0;
}


uint8_t Plan_Stop() {
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
	Run_SetMotorSpeed(0, 0);
 8003384:	eddf 0a14 	vldr	s1, [pc, #80]	; 80033d8 <Plan_Stop+0x58>
 8003388:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80033d8 <Plan_Stop+0x58>
 800338c:	f001 f8cc 	bl	8004528 <Run_SetMotorSpeed>
	SEN_BlackLine();
 8003390:	f001 fb66 	bl	8004a60 <SEN_BlackLine>
	num_checkpoint = 0;
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <Plan_Stop+0x5c>)
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
	num_index = plan.checkpoint[num_checkpoint];
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <Plan_Stop+0x5c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <Plan_Stop+0x60>)
 80033a2:	4413      	add	r3, r2
 80033a4:	789a      	ldrb	r2, [r3, #2]
 80033a6:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <Plan_Stop+0x64>)
 80033a8:	701a      	strb	r2, [r3, #0]
	main_flag &=~ MAIN_FLAG_RUN;
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <Plan_Stop+0x68>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <Plan_Stop+0x68>)
 80033b6:	701a      	strb	r2, [r3, #0]
	run_counter++;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <Plan_Stop+0x6c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <Plan_Stop+0x6c>)
 80033c2:	701a      	strb	r2, [r3, #0]
	if(run_counter > 30) {
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <Plan_Stop+0x6c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b1e      	cmp	r3, #30
 80033ca:	d901      	bls.n	80033d0 <Plan_Stop+0x50>
		HAL_NVIC_SystemReset();
 80033cc:	f006 fd29 	bl	8009e22 <HAL_NVIC_SystemReset>
	}
	return 1;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	00000000 	.word	0x00000000
 80033dc:	20000ccc 	.word	0x20000ccc
 80033e0:	20000d54 	.word	0x20000d54
 80033e4:	20000ccd 	.word	0x20000ccd
 80033e8:	20000a74 	.word	0x20000a74
 80033ec:	20000a75 	.word	0x20000a75

080033f0 <Plan_Start>:

void Plan_Start() {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	num_index = plan.checkpoint[num_checkpoint];
 80033f4:	4b17      	ldr	r3, [pc, #92]	; (8003454 <Plan_Start+0x64>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <Plan_Start+0x68>)
 80033fc:	4413      	add	r3, r2
 80033fe:	789a      	ldrb	r2, [r3, #2]
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <Plan_Start+0x6c>)
 8003402:	701a      	strb	r2, [r3, #0]
	GetActionSequenceInit(num_index);
 8003404:	4b15      	ldr	r3, [pc, #84]	; (800345c <Plan_Start+0x6c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f002 f831 	bl	8005470 <GetActionSequenceInit>
	action_status = 0;
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <Plan_Start+0x70>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
	plan_counter = 0;
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <Plan_Start+0x74>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
	plan_last_counter = 0;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <Plan_Start+0x78>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
	kp = plan.kpid[0];
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <Plan_Start+0x68>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4a11      	ldr	r2, [pc, #68]	; (800346c <Plan_Start+0x7c>)
 8003426:	6013      	str	r3, [r2, #0]
	ki = plan.kpid[1];
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <Plan_Start+0x68>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4a10      	ldr	r2, [pc, #64]	; (8003470 <Plan_Start+0x80>)
 800342e:	6013      	str	r3, [r2, #0]
	kd = plan.kpid[2];
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <Plan_Start+0x68>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <Plan_Start+0x84>)
 8003436:	6013      	str	r3, [r2, #0]
	speed_now = plan.speed;
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <Plan_Start+0x68>)
 800343a:	7d9a      	ldrb	r2, [r3, #22]
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <Plan_Start+0x88>)
 800343e:	701a      	strb	r2, [r3, #0]
	main_flag |= MAIN_FLAG_RUN;
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <Plan_Start+0x8c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <Plan_Start+0x8c>)
 800344c:	701a      	strb	r2, [r3, #0]
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000ccc 	.word	0x20000ccc
 8003458:	20000d54 	.word	0x20000d54
 800345c:	20000ccd 	.word	0x20000ccd
 8003460:	20000a8d 	.word	0x20000a8d
 8003464:	20000a80 	.word	0x20000a80
 8003468:	20000a84 	.word	0x20000a84
 800346c:	20000b28 	.word	0x20000b28
 8003470:	20000b2c 	.word	0x20000b2c
 8003474:	20000b30 	.word	0x20000b30
 8003478:	20000a8e 	.word	0x20000a8e
 800347c:	20000a74 	.word	0x20000a74

08003480 <Plan_UIRoutine>:

void Plan_UIRoutine() {
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
	if(main_flag & MAIN_FLAG_RUN) {
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <Plan_UIRoutine+0x48>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <Plan_UIRoutine+0x40>
		if(main_flag & MAIN_FLAG_NEXT) {
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <Plan_UIRoutine+0x48>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <Plan_UIRoutine+0x3c>
			GetAction(num_index);
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <Plan_UIRoutine+0x4c>)
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	463b      	mov	r3, r7
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fb76 	bl	8004b98 <GetAction>
			main_flag &= ~MAIN_FLAG_NEXT;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <Plan_UIRoutine+0x48>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f023 0302 	bic.w	r3, r3, #2
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <Plan_UIRoutine+0x48>)
 80034b8:	701a      	strb	r2, [r3, #0]
		}
		else {
			GetActionSequenceRoutine();
		}
	}
}
 80034ba:	e001      	b.n	80034c0 <Plan_UIRoutine+0x40>
			GetActionSequenceRoutine();
 80034bc:	f001 ff4c 	bl	8005358 <GetActionSequenceRoutine>
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000a74 	.word	0x20000a74
 80034cc:	20000ccd 	.word	0x20000ccd

080034d0 <Plan_Main>:

void Plan_Main(float period) {
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(main_flag & MAIN_FLAG_RUN) {
 80034da:	4bb0      	ldr	r3, [pc, #704]	; (800379c <Plan_Main+0x2cc>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8193 	beq.w	800380e <Plan_Main+0x33e>
		if(main_flag & MAIN_FLAG_NEXT) {
 80034e8:	4bac      	ldr	r3, [pc, #688]	; (800379c <Plan_Main+0x2cc>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 8187 	bne.w	8003804 <Plan_Main+0x334>
//			Run_LineTracing(speed_now, period, plan.status_pid);
		}
		else {
			uint8_t retval;
			speed_now = (plan_active.unit_speed==0)?plan.speed:plan_active.unit_speed;
 80034f6:	4baa      	ldr	r3, [pc, #680]	; (80037a0 <Plan_Main+0x2d0>)
 80034f8:	7a9b      	ldrb	r3, [r3, #10]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <Plan_Main+0x34>
 80034fe:	4ba9      	ldr	r3, [pc, #676]	; (80037a4 <Plan_Main+0x2d4>)
 8003500:	7d9b      	ldrb	r3, [r3, #22]
 8003502:	e001      	b.n	8003508 <Plan_Main+0x38>
 8003504:	4ba6      	ldr	r3, [pc, #664]	; (80037a0 <Plan_Main+0x2d0>)
 8003506:	7a9b      	ldrb	r3, [r3, #10]
 8003508:	4aa7      	ldr	r2, [pc, #668]	; (80037a8 <Plan_Main+0x2d8>)
 800350a:	7013      	strb	r3, [r2, #0]
			if(action_status == 0) {
 800350c:	4ba7      	ldr	r3, [pc, #668]	; (80037ac <Plan_Main+0x2dc>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d111      	bne.n	8003538 <Plan_Main+0x68>
				switch(GET_LINE_COLOR_STAT(plan_active.status)) {
 8003514:	4ba2      	ldr	r3, [pc, #648]	; (80037a0 <Plan_Main+0x2d0>)
 8003516:	7adb      	ldrb	r3, [r3, #11]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d002      	beq.n	8003526 <Plan_Main+0x56>
 8003520:	2b02      	cmp	r3, #2
 8003522:	d003      	beq.n	800352c <Plan_Main+0x5c>
 8003524:	e005      	b.n	8003532 <Plan_Main+0x62>
				case LINE_COLOR_STAT_BLACK: SEN_BlackLine(); break;
 8003526:	f001 fa9b 	bl	8004a60 <SEN_BlackLine>
 800352a:	e002      	b.n	8003532 <Plan_Main+0x62>
				case LINE_COLOR_STAT_WHITE: SEN_WhiteLine(); break;
 800352c:	f001 faa4 	bl	8004a78 <SEN_WhiteLine>
 8003530:	bf00      	nop
				}
				action_status = 1;
 8003532:	4b9e      	ldr	r3, [pc, #632]	; (80037ac <Plan_Main+0x2dc>)
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
			}

			if(action_status <= 1 && 				 \
 8003538:	4b9c      	ldr	r3, [pc, #624]	; (80037ac <Plan_Main+0x2dc>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d81d      	bhi.n	800357c <Plan_Main+0xac>
					(plan_active.act != PLAN_STOP && \
 8003540:	4b97      	ldr	r3, [pc, #604]	; (80037a0 <Plan_Main+0x2d0>)
 8003542:	781b      	ldrb	r3, [r3, #0]
			if(action_status <= 1 && 				 \
 8003544:	2b00      	cmp	r3, #0
 8003546:	d019      	beq.n	800357c <Plan_Main+0xac>
					 plan_active.act != PLAN_NULL && \
 8003548:	4b95      	ldr	r3, [pc, #596]	; (80037a0 <Plan_Main+0x2d0>)
 800354a:	781b      	ldrb	r3, [r3, #0]
					(plan_active.act != PLAN_STOP && \
 800354c:	2b09      	cmp	r3, #9
 800354e:	d015      	beq.n	800357c <Plan_Main+0xac>
					 plan_active.act != PLAN_JUMP)) {
 8003550:	4b93      	ldr	r3, [pc, #588]	; (80037a0 <Plan_Main+0x2d0>)
 8003552:	781b      	ldrb	r3, [r3, #0]
					 plan_active.act != PLAN_NULL && \
 8003554:	2b0b      	cmp	r3, #11
 8003556:	d011      	beq.n	800357c <Plan_Main+0xac>
				retval = Plan_ActionInit(plan_active, period, speed_now);
 8003558:	4b93      	ldr	r3, [pc, #588]	; (80037a8 <Plan_Main+0x2d8>)
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	4b90      	ldr	r3, [pc, #576]	; (80037a0 <Plan_Main+0x2d0>)
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	4608      	mov	r0, r1
 8003562:	685c      	ldr	r4, [r3, #4]
 8003564:	4621      	mov	r1, r4
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	461c      	mov	r4, r3
 800356a:	4613      	mov	r3, r2
 800356c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003570:	4622      	mov	r2, r4
 8003572:	f7ff fea7 	bl	80032c4 <Plan_ActionInit>
 8003576:	4603      	mov	r3, r0
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e0de      	b.n	800373a <Plan_Main+0x26a>
			}
			else {
				switch(plan_active.act) {
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <Plan_Main+0x2d0>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b0c      	cmp	r3, #12
 8003582:	f200 80d8 	bhi.w	8003736 <Plan_Main+0x266>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <Plan_Main+0xbc>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	080035c1 	.word	0x080035c1
 8003590:	080035cb 	.word	0x080035cb
 8003594:	080035e9 	.word	0x080035e9
 8003598:	08003607 	.word	0x08003607
 800359c:	08003627 	.word	0x08003627
 80035a0:	08003645 	.word	0x08003645
 80035a4:	08003663 	.word	0x08003663
 80035a8:	08003681 	.word	0x08003681
 80035ac:	0800369f 	.word	0x0800369f
 80035b0:	080036bd 	.word	0x080036bd
 80035b4:	080036db 	.word	0x080036db
 80035b8:	080036fb 	.word	0x080036fb
 80035bc:	08003719 	.word	0x08003719
				case PLAN_STOP: 	retval = Plan_Stop(); 					break;
 80035c0:	f7ff fede 	bl	8003380 <Plan_Stop>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e0b7      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_LEFT: 	retval = Plan_Left(plan_active); 		break;
 80035ca:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <Plan_Main+0x2d0>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4611      	mov	r1, r2
 80035d0:	6858      	ldr	r0, [r3, #4]
 80035d2:	4602      	mov	r2, r0
 80035d4:	6898      	ldr	r0, [r3, #8]
 80035d6:	4603      	mov	r3, r0
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	f7ff f9eb 	bl	80029b8 <Plan_Left>
 80035e2:	4603      	mov	r3, r0
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e0a8      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_RIGHT: 	retval = Plan_Right(plan_active); 		break;
 80035e8:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <Plan_Main+0x2d0>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4611      	mov	r1, r2
 80035ee:	6858      	ldr	r0, [r3, #4]
 80035f0:	4602      	mov	r2, r0
 80035f2:	6898      	ldr	r0, [r3, #8]
 80035f4:	4603      	mov	r3, r0
 80035f6:	4608      	mov	r0, r1
 80035f8:	4611      	mov	r1, r2
 80035fa:	461a      	mov	r2, r3
 80035fc:	f7ff fa78 	bl	8002af0 <Plan_Right>
 8003600:	4603      	mov	r3, r0
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e099      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_FORWARD: 	retval = Plan_Forward(plan_active, speed_now); 	break;
 8003606:	4b68      	ldr	r3, [pc, #416]	; (80037a8 <Plan_Main+0x2d8>)
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	4b65      	ldr	r3, [pc, #404]	; (80037a0 <Plan_Main+0x2d0>)
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	4608      	mov	r0, r1
 8003610:	685c      	ldr	r4, [r3, #4]
 8003612:	4621      	mov	r1, r4
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	461c      	mov	r4, r3
 8003618:	4613      	mov	r3, r2
 800361a:	4622      	mov	r2, r4
 800361c:	f7ff fb04 	bl	8002c28 <Plan_Forward>
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e089      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_FOLLOW: 	retval = Plan_Follow(plan_active); 		break;
 8003626:	4b5e      	ldr	r3, [pc, #376]	; (80037a0 <Plan_Main+0x2d0>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4611      	mov	r1, r2
 800362c:	6858      	ldr	r0, [r3, #4]
 800362e:	4602      	mov	r2, r0
 8003630:	6898      	ldr	r0, [r3, #8]
 8003632:	4603      	mov	r3, r0
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	f7ff fc49 	bl	8002ed0 <Plan_Follow>
 800363e:	4603      	mov	r3, r0
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	e07a      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_FOLLOW_L: retval = Plan_FollowLeft(plan_active); 	break;
 8003644:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <Plan_Main+0x2d0>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4611      	mov	r1, r2
 800364a:	6858      	ldr	r0, [r3, #4]
 800364c:	4602      	mov	r2, r0
 800364e:	6898      	ldr	r0, [r3, #8]
 8003650:	4603      	mov	r3, r0
 8003652:	4608      	mov	r0, r1
 8003654:	4611      	mov	r1, r2
 8003656:	461a      	mov	r2, r3
 8003658:	f7ff fc92 	bl	8002f80 <Plan_FollowLeft>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e06b      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_FOLLOW_R: retval = Plan_FollowRight(plan_active); break;
 8003662:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <Plan_Main+0x2d0>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4611      	mov	r1, r2
 8003668:	6858      	ldr	r0, [r3, #4]
 800366a:	4602      	mov	r2, r0
 800366c:	6898      	ldr	r0, [r3, #8]
 800366e:	4603      	mov	r3, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	f7ff fd2f 	bl	80030d8 <Plan_FollowRight>
 800367a:	4603      	mov	r3, r0
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	e05c      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_INVERT: 	retval = Plan_Invert(plan_active); 		break;
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <Plan_Main+0x2d0>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4611      	mov	r1, r2
 8003686:	6858      	ldr	r0, [r3, #4]
 8003688:	4602      	mov	r2, r0
 800368a:	6898      	ldr	r0, [r3, #8]
 800368c:	4603      	mov	r3, r0
 800368e:	4608      	mov	r0, r1
 8003690:	4611      	mov	r1, r2
 8003692:	461a      	mov	r2, r3
 8003694:	f7ff fdcc 	bl	8003230 <Plan_Invert>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e04d      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_NEXT: 	retval = Plan_NextPlan(plan_active); 	break;
 800369e:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <Plan_Main+0x2d0>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4611      	mov	r1, r2
 80036a4:	6858      	ldr	r0, [r3, #4]
 80036a6:	4602      	mov	r2, r0
 80036a8:	6898      	ldr	r0, [r3, #8]
 80036aa:	4603      	mov	r3, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	f7ff fdd4 	bl	800325e <Plan_NextPlan>
 80036b6:	4603      	mov	r3, r0
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e03e      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_NULL: 	retval = Plan_Null(plan_active); 		break;
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <Plan_Main+0x2d0>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4611      	mov	r1, r2
 80036c2:	6858      	ldr	r0, [r3, #4]
 80036c4:	4602      	mov	r2, r0
 80036c6:	6898      	ldr	r0, [r3, #8]
 80036c8:	4603      	mov	r3, r0
 80036ca:	4608      	mov	r0, r1
 80036cc:	4611      	mov	r1, r2
 80036ce:	461a      	mov	r2, r3
 80036d0:	f7ff fdd2 	bl	8003278 <Plan_Null>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e02f      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_BACKWARD:	retval = Plan_Backward(plan_active, speed_now);	break;
 80036da:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <Plan_Main+0x2d8>)
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <Plan_Main+0x2d0>)
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	4608      	mov	r0, r1
 80036e4:	685c      	ldr	r4, [r3, #4]
 80036e6:	4621      	mov	r1, r4
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	461c      	mov	r4, r3
 80036ec:	4613      	mov	r3, r2
 80036ee:	4622      	mov	r2, r4
 80036f0:	f7ff fb20 	bl	8002d34 <Plan_Backward>
 80036f4:	4603      	mov	r3, r0
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	e01f      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_JUMP: 	retval = Plan_Jump(plan_active); 		break;
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <Plan_Main+0x2d0>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4611      	mov	r1, r2
 8003700:	6858      	ldr	r0, [r3, #4]
 8003702:	4602      	mov	r2, r0
 8003704:	6898      	ldr	r0, [r3, #8]
 8003706:	4603      	mov	r3, r0
 8003708:	4608      	mov	r0, r1
 800370a:	4611      	mov	r1, r2
 800370c:	461a      	mov	r2, r3
 800370e:	f7ff fdc1 	bl	8003294 <Plan_Jump>
 8003712:	4603      	mov	r3, r0
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	e010      	b.n	800373a <Plan_Main+0x26a>
				case PLAN_IDLE: 	retval = Plan_Idle(plan_active); 		break;
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <Plan_Main+0x2d0>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4611      	mov	r1, r2
 800371e:	6858      	ldr	r0, [r3, #4]
 8003720:	4602      	mov	r2, r0
 8003722:	6898      	ldr	r0, [r3, #8]
 8003724:	4603      	mov	r3, r0
 8003726:	4608      	mov	r0, r1
 8003728:	4611      	mov	r1, r2
 800372a:	461a      	mov	r2, r3
 800372c:	f7ff fb8a 	bl	8002e44 <Plan_Idle>
 8003730:	4603      	mov	r3, r0
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	e001      	b.n	800373a <Plan_Main+0x26a>
				default: retval = 2;
 8003736:	2302      	movs	r3, #2
 8003738:	73fb      	strb	r3, [r7, #15]
				}
			}
			if(retval == 0) {
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d110      	bne.n	8003762 <Plan_Main+0x292>
				Run_LineTracing(speed_now, period, plan.status_pid);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <Plan_Main+0x2d8>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <Plan_Main+0x2d4>)
 800374e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003752:	4618      	mov	r0, r3
 8003754:	edd7 0a01 	vldr	s1, [r7, #4]
 8003758:	eeb0 0a67 	vmov.f32	s0, s15
 800375c:	f000 feb2 	bl	80044c4 <Run_LineTracing>
 8003760:	e050      	b.n	8003804 <Plan_Main+0x334>
			}
			else if(retval == 2){
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d144      	bne.n	80037f2 <Plan_Main+0x322>
				counter_status = 0;
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <Plan_Main+0x2e0>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
				action_status = 0;
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <Plan_Main+0x2dc>)
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
				speed_now = plan.speed;
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <Plan_Main+0x2d4>)
 8003776:	7d9a      	ldrb	r2, [r3, #22]
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <Plan_Main+0x2d8>)
 800377a:	701a      	strb	r2, [r3, #0]
				num_index++;
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <Plan_Main+0x2e4>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	b2da      	uxtb	r2, r3
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <Plan_Main+0x2e4>)
 8003786:	701a      	strb	r2, [r3, #0]
				if(num_index == plan.num_action) {
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <Plan_Main+0x2d4>)
 800378a:	785a      	ldrb	r2, [r3, #1]
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <Plan_Main+0x2e4>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d111      	bne.n	80037b8 <Plan_Main+0x2e8>
					Plan_Stop();
 8003794:	f7ff fdf4 	bl	8003380 <Plan_Stop>
					return;
 8003798:	e039      	b.n	800380e <Plan_Main+0x33e>
 800379a:	bf00      	nop
 800379c:	20000a74 	.word	0x20000a74
 80037a0:	20000d44 	.word	0x20000d44
 80037a4:	20000d54 	.word	0x20000d54
 80037a8:	20000a8e 	.word	0x20000a8e
 80037ac:	20000a8d 	.word	0x20000a8d
 80037b0:	20000a8c 	.word	0x20000a8c
 80037b4:	20000ccd 	.word	0x20000ccd
				}
				if(num_index >= plan.checkpoint[num_checkpoint+1]) {
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <Plan_Main+0x344>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	4a16      	ldr	r2, [pc, #88]	; (8003818 <Plan_Main+0x348>)
 80037c0:	4413      	add	r3, r2
 80037c2:	789a      	ldrb	r2, [r3, #2]
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <Plan_Main+0x34c>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d805      	bhi.n	80037d8 <Plan_Main+0x308>
					num_checkpoint++;
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <Plan_Main+0x344>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <Plan_Main+0x344>)
 80037d6:	701a      	strb	r2, [r3, #0]
				}
				if(!GetActionSequence())
 80037d8:	f001 fd6e 	bl	80052b8 <GetActionSequence>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d110      	bne.n	8003804 <Plan_Main+0x334>
					main_flag |= MAIN_FLAG_NEXT;
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <Plan_Main+0x350>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	f043 0302 	orr.w	r3, r3, #2
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <Plan_Main+0x350>)
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e008      	b.n	8003804 <Plan_Main+0x334>
			}
			else if(retval == 3){
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d105      	bne.n	8003804 <Plan_Main+0x334>
				counter_status = 0;
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <Plan_Main+0x354>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
				action_status = 2;
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <Plan_Main+0x358>)
 8003800:	2202      	movs	r2, #2
 8003802:	701a      	strb	r2, [r3, #0]
			}
		}
		plan_counter++;
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <Plan_Main+0x35c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <Plan_Main+0x35c>)
 800380c:	6013      	str	r3, [r2, #0]
	}
}
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bd90      	pop	{r4, r7, pc}
 8003814:	20000ccc 	.word	0x20000ccc
 8003818:	20000d54 	.word	0x20000d54
 800381c:	20000ccd 	.word	0x20000ccd
 8003820:	20000a74 	.word	0x20000a74
 8003824:	20000a8c 	.word	0x20000a8c
 8003828:	20000a8d 	.word	0x20000a8d
 800382c:	20000a80 	.word	0x20000a80

08003830 <Run_Init>:
Motor_typedef motor[2];

float robot_enc_pos = 0;
float robot_enc_yawpos = 0;

void Run_Init() {
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
	memset(motor, 0, sizeof(motor[0])*2);
 8003834:	2290      	movs	r2, #144	; 0x90
 8003836:	2100      	movs	r1, #0
 8003838:	482a      	ldr	r0, [pc, #168]	; (80038e4 <Run_Init+0xb4>)
 800383a:	f00a fd77 	bl	800e32c <memset>

	motor[0].mode = MOTOR_MODE_OPEN;
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <Run_Init+0xb4>)
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
	motor[0].pwm_htim = &htim3;
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <Run_Init+0xb4>)
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <Run_Init+0xb8>)
 8003848:	605a      	str	r2, [r3, #4]
	motor[0].ch1 = TIM_CHANNEL_1;
 800384a:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <Run_Init+0xb4>)
 800384c:	2200      	movs	r2, #0
 800384e:	811a      	strh	r2, [r3, #8]
	motor[0].ch2 = TIM_CHANNEL_2;
 8003850:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <Run_Init+0xb4>)
 8003852:	2204      	movs	r2, #4
 8003854:	815a      	strh	r2, [r3, #10]
	motor[0].enc_htim = &htim2;
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <Run_Init+0xb4>)
 8003858:	4a24      	ldr	r2, [pc, #144]	; (80038ec <Run_Init+0xbc>)
 800385a:	611a      	str	r2, [r3, #16]
	motor[0].dir = 1;
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <Run_Init+0xb4>)
 800385e:	2201      	movs	r2, #1
 8003860:	731a      	strb	r2, [r3, #12]
	motor[0].pwm_factor = 0.009975;
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <Run_Init+0xb4>)
 8003864:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <Run_Init+0xc0>)
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
	motor[0].vel_factor = 0.625;
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <Run_Init+0xb4>)
 800386a:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <Run_Init+0xc4>)
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
	motor[0].kp = 2;
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <Run_Init+0xb4>)
 8003870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
	motor[0].ki = 15;
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <Run_Init+0xb4>)
 8003878:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <Run_Init+0xc8>)
 800387a:	635a      	str	r2, [r3, #52]	; 0x34
	motor[0].filter_alpha = 0.5;
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <Run_Init+0xb4>)
 800387e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003882:	645a      	str	r2, [r3, #68]	; 0x44

	motor[1].mode = motor[0].mode;
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <Run_Init+0xb4>)
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <Run_Init+0xb4>)
 800388a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	motor[1].pwm_htim = &htim3;
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <Run_Init+0xb4>)
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <Run_Init+0xb8>)
 8003892:	64da      	str	r2, [r3, #76]	; 0x4c
	motor[1].ch1 = TIM_CHANNEL_4;
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <Run_Init+0xb4>)
 8003896:	220c      	movs	r2, #12
 8003898:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	motor[1].ch2 = TIM_CHANNEL_3;
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <Run_Init+0xb4>)
 800389e:	2208      	movs	r2, #8
 80038a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	motor[1].enc_htim = &htim4;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <Run_Init+0xb4>)
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <Run_Init+0xcc>)
 80038a8:	659a      	str	r2, [r3, #88]	; 0x58
	motor[1].dir = -1;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <Run_Init+0xb4>)
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	motor[1].pwm_factor = 0.01;
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <Run_Init+0xb4>)
 80038b4:	4a12      	ldr	r2, [pc, #72]	; (8003900 <Run_Init+0xd0>)
 80038b6:	66da      	str	r2, [r3, #108]	; 0x6c
	motor[1].vel_factor = 0.625;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <Run_Init+0xb4>)
 80038ba:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <Run_Init+0xc4>)
 80038bc:	675a      	str	r2, [r3, #116]	; 0x74
	motor[1].kp = motor[0].kp;
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <Run_Init+0xb4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a08      	ldr	r2, [pc, #32]	; (80038e4 <Run_Init+0xb4>)
 80038c4:	6793      	str	r3, [r2, #120]	; 0x78
	motor[1].ki = motor[0].ki;
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <Run_Init+0xb4>)
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <Run_Init+0xb4>)
 80038cc:	67d3      	str	r3, [r2, #124]	; 0x7c
	motor[1].filter_alpha = motor[0].filter_alpha;
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <Run_Init+0xb4>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <Run_Init+0xb4>)
 80038d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	robot_enc_pos = 0;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <Run_Init+0xd4>)
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000a90 	.word	0x20000a90
 80038e8:	20000e10 	.word	0x20000e10
 80038ec:	20000dc8 	.word	0x20000dc8
 80038f0:	3c236e2f 	.word	0x3c236e2f
 80038f4:	3f200000 	.word	0x3f200000
 80038f8:	41700000 	.word	0x41700000
 80038fc:	20000e58 	.word	0x20000e58
 8003900:	3c23d70a 	.word	0x3c23d70a
 8003904:	20000b20 	.word	0x20000b20

08003908 <Run_MotorRoutine>:

void Run_MotorRoutine(float period) {
 8003908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_EnocderRoutine(&motor[0], period);
 8003914:	ed97 0a01 	vldr	s0, [r7, #4]
 8003918:	4828      	ldr	r0, [pc, #160]	; (80039bc <Run_MotorRoutine+0xb4>)
 800391a:	f7fe fe4b 	bl	80025b4 <Motor_EnocderRoutine>
	Motor_EnocderRoutine(&motor[1], period);
 800391e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003922:	4827      	ldr	r0, [pc, #156]	; (80039c0 <Run_MotorRoutine+0xb8>)
 8003924:	f7fe fe46 	bl	80025b4 <Motor_EnocderRoutine>
	robot_enc_pos += (motor[0].enc_vel*0.5) + (motor[1].enc_vel*0.5);
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <Run_MotorRoutine+0xbc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fe0b 	bl	8000548 <__aeabi_f2d>
 8003932:	4604      	mov	r4, r0
 8003934:	460d      	mov	r5, r1
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <Run_MotorRoutine+0xb4>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fdf2 	bl	8000524 <__aeabi_i2d>
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <Run_MotorRoutine+0xc0>)
 8003946:	f7fc fe57 	bl	80005f8 <__aeabi_dmul>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4690      	mov	r8, r2
 8003950:	4699      	mov	r9, r3
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <Run_MotorRoutine+0xb4>)
 8003954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fde4 	bl	8000524 <__aeabi_i2d>
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <Run_MotorRoutine+0xc0>)
 8003962:	f7fc fe49 	bl	80005f8 <__aeabi_dmul>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4640      	mov	r0, r8
 800396c:	4649      	mov	r1, r9
 800396e:	f7fc fc8d 	bl	800028c <__adddf3>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4620      	mov	r0, r4
 8003978:	4629      	mov	r1, r5
 800397a:	f7fc fc87 	bl	800028c <__adddf3>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4610      	mov	r0, r2
 8003984:	4619      	mov	r1, r3
 8003986:	f7fd f92f 	bl	8000be8 <__aeabi_d2f>
 800398a:	4603      	mov	r3, r0
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <Run_MotorRoutine+0xbc>)
 800398e:	6013      	str	r3, [r2, #0]
	robot_enc_yawpos += (motor[1].enc_vel - motor[0].enc_vel);
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <Run_MotorRoutine+0xb4>)
 8003992:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <Run_MotorRoutine+0xb4>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <Run_MotorRoutine+0xc4>)
 80039a4:	edd3 7a00 	vldr	s15, [r3]
 80039a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <Run_MotorRoutine+0xc4>)
 80039ae:	edc3 7a00 	vstr	s15, [r3]
//	Motor_ControlRoutine(&motor[0], period);
//	Motor_ControlRoutine(&motor[1], period);
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039bc:	20000a90 	.word	0x20000a90
 80039c0:	20000ad8 	.word	0x20000ad8
 80039c4:	20000b20 	.word	0x20000b20
 80039c8:	3fe00000 	.word	0x3fe00000
 80039cc:	20000b24 	.word	0x20000b24

080039d0 <Run_MotorRoutine2>:

void Run_MotorRoutine2(float _period) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	ed87 0a01 	vstr	s0, [r7, #4]
//	Motor_EnocderRoutine(&motor[0], period);
//	Motor_EnocderRoutine(&motor[1], period);
	Motor_ControlRoutine(&motor[0], _period);
 80039da:	ed97 0a01 	vldr	s0, [r7, #4]
 80039de:	4806      	ldr	r0, [pc, #24]	; (80039f8 <Run_MotorRoutine2+0x28>)
 80039e0:	f7fe fe16 	bl	8002610 <Motor_ControlRoutine>
	Motor_ControlRoutine(&motor[1], _period);
 80039e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80039e8:	4804      	ldr	r0, [pc, #16]	; (80039fc <Run_MotorRoutine2+0x2c>)
 80039ea:	f7fe fe11 	bl	8002610 <Motor_ControlRoutine>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000a90 	.word	0x20000a90
 80039fc:	20000ad8 	.word	0x20000ad8

08003a00 <Run_YawSpeed>:
float kp;
float ki;
float kd;
uint16_t sum_error;

float Run_YawSpeed(float period, float _speed, uint8_t flag) {
 8003a00:	b5b0      	push	{r4, r5, r7, lr}
 8003a02:	b08c      	sub	sp, #48	; 0x30
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
	static int16_t last_error = 0;
	int16_t error = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t pr_sensor_bin = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	83fb      	strh	r3, [r7, #30]
	uint16_t mask = (1<<SENSOR_NUM)-1;
 8003a1a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003a1e:	83bb      	strh	r3, [r7, #28]
	if((flag&0x01)==0x01) {
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <Run_YawSpeed+0x44>
		pr_sensor_bin = (~sensor_binary) & mask;
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <Run_YawSpeed+0x40>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b21b      	sxth	r3, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	b21a      	sxth	r2, r3
 8003a34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	83fb      	strh	r3, [r7, #30]
 8003a3e:	e006      	b.n	8003a4e <Run_YawSpeed+0x4e>
 8003a40:	20000b9e 	.word	0x20000b9e
	}
	else {
		pr_sensor_bin = sensor_binary & mask;
 8003a44:	4bcc      	ldr	r3, [pc, #816]	; (8003d78 <Run_YawSpeed+0x378>)
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	8bbb      	ldrh	r3, [r7, #28]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	83fb      	strh	r3, [r7, #30]
	}

	switch(sensor_binary) {
 8003a4e:	4bca      	ldr	r3, [pc, #808]	; (8003d78 <Run_YawSpeed+0x378>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	f643 6201 	movw	r2, #15873	; 0x3e01
 8003a56:	4293      	cmp	r3, r2
 8003a58:	f000 83d1 	beq.w	80041fe <Run_YawSpeed+0x7fe>
 8003a5c:	f643 6201 	movw	r2, #15873	; 0x3e01
 8003a60:	4293      	cmp	r3, r2
 8003a62:	f300 8467 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003a66:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8003a6a:	f000 839b 	beq.w	80041a4 <Run_YawSpeed+0x7a4>
 8003a6e:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8003a72:	f300 845f 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003a76:	f643 4203 	movw	r2, #15363	; 0x3c03
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	f000 83c7 	beq.w	800420e <Run_YawSpeed+0x80e>
 8003a80:	f643 4203 	movw	r2, #15363	; 0x3c03
 8003a84:	4293      	cmp	r3, r2
 8003a86:	f300 8455 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003a8a:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8003a8e:	f000 838c 	beq.w	80041aa <Run_YawSpeed+0x7aa>
 8003a92:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8003a96:	f300 844d 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003a9a:	f643 32e0 	movw	r2, #15328	; 0x3be0
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	f000 83f8 	beq.w	8004294 <Run_YawSpeed+0x894>
 8003aa4:	f643 32e0 	movw	r2, #15328	; 0x3be0
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	f300 8443 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003aae:	f5b3 5f6f 	cmp.w	r3, #15296	; 0x3bc0
 8003ab2:	f000 83f8 	beq.w	80042a6 <Run_YawSpeed+0x8a6>
 8003ab6:	f5b3 5f6f 	cmp.w	r3, #15296	; 0x3bc0
 8003aba:	f300 843b 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003abe:	f643 12f0 	movw	r2, #14832	; 0x39f0
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f000 83d5 	beq.w	8004272 <Run_YawSpeed+0x872>
 8003ac8:	f643 12f0 	movw	r2, #14832	; 0x39f0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	f300 8431 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003ad2:	f643 12e0 	movw	r2, #14816	; 0x39e0
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	f000 83d3 	beq.w	8004282 <Run_YawSpeed+0x882>
 8003adc:	f643 12e0 	movw	r2, #14816	; 0x39e0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f300 8427 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003ae6:	f643 02f0 	movw	r2, #14576	; 0x38f0
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f000 83b9 	beq.w	8004262 <Run_YawSpeed+0x862>
 8003af0:	f643 02f0 	movw	r2, #14576	; 0x38f0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	f300 841d 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003afa:	f643 0207 	movw	r2, #14343	; 0x3807
 8003afe:	4293      	cmp	r3, r2
 8003b00:	f000 838f 	beq.w	8004222 <Run_YawSpeed+0x822>
 8003b04:	f643 0207 	movw	r2, #14343	; 0x3807
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	f300 8413 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003b0e:	f643 0201 	movw	r2, #14337	; 0x3801
 8003b12:	4293      	cmp	r3, r2
 8003b14:	f000 8377 	beq.w	8004206 <Run_YawSpeed+0x806>
 8003b18:	f643 0201 	movw	r2, #14337	; 0x3801
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	f300 8409 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003b22:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003b26:	f000 8343 	beq.w	80041b0 <Run_YawSpeed+0x7b0>
 8003b2a:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003b2e:	f300 8401 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003b32:	f243 32e0 	movw	r2, #13280	; 0x33e0
 8003b36:	4293      	cmp	r3, r2
 8003b38:	f000 83af 	beq.w	800429a <Run_YawSpeed+0x89a>
 8003b3c:	f243 32e0 	movw	r2, #13280	; 0x33e0
 8003b40:	4293      	cmp	r3, r2
 8003b42:	f300 83f7 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003b46:	f5b3 5f4f 	cmp.w	r3, #13248	; 0x33c0
 8003b4a:	f000 83af 	beq.w	80042ac <Run_YawSpeed+0x8ac>
 8003b4e:	f5b3 5f4f 	cmp.w	r3, #13248	; 0x33c0
 8003b52:	f300 83ef 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003b56:	f243 12f0 	movw	r2, #12784	; 0x31f0
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	f000 838d 	beq.w	800427a <Run_YawSpeed+0x87a>
 8003b60:	f243 12f0 	movw	r2, #12784	; 0x31f0
 8003b64:	4293      	cmp	r3, r2
 8003b66:	f300 83e5 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003b6a:	f243 12e0 	movw	r2, #12768	; 0x31e0
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	f000 838a 	beq.w	8004288 <Run_YawSpeed+0x888>
 8003b74:	f243 12e0 	movw	r2, #12768	; 0x31e0
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	f300 83db 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003b7e:	f243 02f0 	movw	r2, #12528	; 0x30f0
 8003b82:	4293      	cmp	r3, r2
 8003b84:	f000 835c 	beq.w	8004240 <Run_YawSpeed+0x840>
 8003b88:	f243 02f0 	movw	r2, #12528	; 0x30f0
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	f300 83d1 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003b92:	f243 020f 	movw	r2, #12303	; 0x300f
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f000 834a 	beq.w	8004230 <Run_YawSpeed+0x830>
 8003b9c:	f243 020f 	movw	r2, #12303	; 0x300f
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	f300 83c7 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003ba6:	f243 0203 	movw	r2, #12291	; 0x3003
 8003baa:	4293      	cmp	r3, r2
 8003bac:	f000 8336 	beq.w	800421c <Run_YawSpeed+0x81c>
 8003bb0:	f243 0203 	movw	r2, #12291	; 0x3003
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	f300 83bd 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003bba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bbe:	f000 82fa 	beq.w	80041b6 <Run_YawSpeed+0x7b6>
 8003bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bc6:	f300 83b5 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003bca:	f5b3 5f1f 	cmp.w	r3, #10176	; 0x27c0
 8003bce:	f000 8373 	beq.w	80042b8 <Run_YawSpeed+0x8b8>
 8003bd2:	f5b3 5f1f 	cmp.w	r3, #10176	; 0x27c0
 8003bd6:	f300 83ad 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003bda:	f5b3 5f1e 	cmp.w	r3, #10112	; 0x2780
 8003bde:	f000 836e 	beq.w	80042be <Run_YawSpeed+0x8be>
 8003be2:	f5b3 5f1e 	cmp.w	r3, #10112	; 0x2780
 8003be6:	f300 83a5 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003bea:	f242 32e0 	movw	r2, #9184	; 0x23e0
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	f000 8356 	beq.w	80042a0 <Run_YawSpeed+0x8a0>
 8003bf4:	f242 32e0 	movw	r2, #9184	; 0x23e0
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	f300 839b 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003bfe:	f242 32c3 	movw	r2, #9155	; 0x23c3
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f000 832a 	beq.w	800425c <Run_YawSpeed+0x85c>
 8003c08:	f242 32c3 	movw	r2, #9155	; 0x23c3
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	f300 8391 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003c12:	f5b3 5f0f 	cmp.w	r3, #9152	; 0x23c0
 8003c16:	f000 834c 	beq.w	80042b2 <Run_YawSpeed+0x8b2>
 8003c1a:	f5b3 5f0f 	cmp.w	r3, #9152	; 0x23c0
 8003c1e:	f300 8389 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003c22:	f242 12f0 	movw	r2, #8688	; 0x21f0
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f000 830e 	beq.w	8004248 <Run_YawSpeed+0x848>
 8003c2c:	f242 12f0 	movw	r2, #8688	; 0x21f0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	f300 837f 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003c36:	f242 12e1 	movw	r2, #8673	; 0x21e1
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	f000 8308 	beq.w	8004250 <Run_YawSpeed+0x850>
 8003c40:	f242 12e1 	movw	r2, #8673	; 0x21e1
 8003c44:	4293      	cmp	r3, r2
 8003c46:	f300 8375 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003c4a:	f242 12e0 	movw	r2, #8672	; 0x21e0
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f000 831d 	beq.w	800428e <Run_YawSpeed+0x88e>
 8003c54:	f242 12e0 	movw	r2, #8672	; 0x21e0
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	f300 836b 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003c5e:	f242 02f0 	movw	r2, #8432	; 0x20f0
 8003c62:	4293      	cmp	r3, r2
 8003c64:	f000 8301 	beq.w	800426a <Run_YawSpeed+0x86a>
 8003c68:	f242 02f0 	movw	r2, #8432	; 0x20f0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	f300 8361 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003c72:	f242 021f 	movw	r2, #8223	; 0x201f
 8003c76:	4293      	cmp	r3, r2
 8003c78:	f300 835c 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003c7c:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 8003c80:	4293      	cmp	r3, r2
 8003c82:	f280 8088 	bge.w	8003d96 <Run_YawSpeed+0x396>
 8003c86:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 8003c8a:	f000 8285 	beq.w	8004198 <Run_YawSpeed+0x798>
 8003c8e:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 8003c92:	f300 834f 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003c96:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003c9a:	f000 8280 	beq.w	800419e <Run_YawSpeed+0x79e>
 8003c9e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003ca2:	f300 8347 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003ca6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003caa:	4293      	cmp	r3, r2
 8003cac:	f000 829b 	beq.w	80041e6 <Run_YawSpeed+0x7e6>
 8003cb0:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	f300 833d 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003cba:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8003cbe:	f000 8298 	beq.w	80041f2 <Run_YawSpeed+0x7f2>
 8003cc2:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8003cc6:	f300 8335 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003cca:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003cce:	f000 825d 	beq.w	800418c <Run_YawSpeed+0x78c>
 8003cd2:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003cd6:	f300 832d 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003cda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cde:	f000 8258 	beq.w	8004192 <Run_YawSpeed+0x792>
 8003ce2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ce6:	f300 8325 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003cea:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	f000 826f 	beq.w	80041d2 <Run_YawSpeed+0x7d2>
 8003cf4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	f300 831b 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003cfe:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003d02:	f000 826d 	beq.w	80041e0 <Run_YawSpeed+0x7e0>
 8003d06:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003d0a:	f300 8313 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d0e:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003d12:	f000 826b 	beq.w	80041ec <Run_YawSpeed+0x7ec>
 8003d16:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003d1a:	f300 830b 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d1e:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003d22:	f000 822d 	beq.w	8004180 <Run_YawSpeed+0x780>
 8003d26:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003d2a:	f300 8303 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d2e:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003d32:	f000 8228 	beq.w	8004186 <Run_YawSpeed+0x786>
 8003d36:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003d3a:	f300 82fb 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d3e:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8003d42:	f300 82f7 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d46:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8003d4a:	da7d      	bge.n	8003e48 <Run_YawSpeed+0x448>
 8003d4c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8003d50:	f300 82f0 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d54:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003d58:	f280 80f8 	bge.w	8003f4c <Run_YawSpeed+0x54c>
 8003d5c:	2bf9      	cmp	r3, #249	; 0xf9
 8003d5e:	f300 82e9 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d62:	2bf0      	cmp	r3, #240	; 0xf0
 8003d64:	f280 812c 	bge.w	8003fc0 <Run_YawSpeed+0x5c0>
 8003d68:	2b7c      	cmp	r3, #124	; 0x7c
 8003d6a:	f000 81ec 	beq.w	8004146 <Run_YawSpeed+0x746>
 8003d6e:	2b7c      	cmp	r3, #124	; 0x7c
 8003d70:	f300 82e0 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d74:	e002      	b.n	8003d7c <Run_YawSpeed+0x37c>
 8003d76:	bf00      	nop
 8003d78:	20000b9e 	.word	0x20000b9e
 8003d7c:	2b79      	cmp	r3, #121	; 0x79
 8003d7e:	f000 82d5 	beq.w	800432c <Run_YawSpeed+0x92c>
 8003d82:	2b79      	cmp	r3, #121	; 0x79
 8003d84:	f300 82d6 	bgt.w	8004334 <Run_YawSpeed+0x934>
 8003d88:	2b3e      	cmp	r3, #62	; 0x3e
 8003d8a:	f300 81b9 	bgt.w	8004100 <Run_YawSpeed+0x700>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f300 8132 	bgt.w	8003ff8 <Run_YawSpeed+0x5f8>
 8003d94:	e2ce      	b.n	8004334 <Run_YawSpeed+0x934>
 8003d96:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8003d9a:	3b18      	subs	r3, #24
 8003d9c:	2b27      	cmp	r3, #39	; 0x27
 8003d9e:	f200 82c9 	bhi.w	8004334 <Run_YawSpeed+0x934>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <Run_YawSpeed+0x3a8>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	080041f9 	.word	0x080041f9
 8003dac:	08004335 	.word	0x08004335
 8003db0:	08004335 	.word	0x08004335
 8003db4:	08004335 	.word	0x08004335
 8003db8:	08004335 	.word	0x08004335
 8003dbc:	08004335 	.word	0x08004335
 8003dc0:	08004335 	.word	0x08004335
 8003dc4:	08004335 	.word	0x08004335
 8003dc8:	080041bd 	.word	0x080041bd
 8003dcc:	08004217 	.word	0x08004217
 8003dd0:	08004335 	.word	0x08004335
 8003dd4:	08004335 	.word	0x08004335
 8003dd8:	08004335 	.word	0x08004335
 8003ddc:	08004335 	.word	0x08004335
 8003de0:	08004335 	.word	0x08004335
 8003de4:	08004229 	.word	0x08004229
 8003de8:	08004335 	.word	0x08004335
 8003dec:	08004335 	.word	0x08004335
 8003df0:	08004335 	.word	0x08004335
 8003df4:	08004335 	.word	0x08004335
 8003df8:	08004335 	.word	0x08004335
 8003dfc:	08004335 	.word	0x08004335
 8003e00:	08004335 	.word	0x08004335
 8003e04:	08004335 	.word	0x08004335
 8003e08:	08004335 	.word	0x08004335
 8003e0c:	08004335 	.word	0x08004335
 8003e10:	08004335 	.word	0x08004335
 8003e14:	08004335 	.word	0x08004335
 8003e18:	08004335 	.word	0x08004335
 8003e1c:	08004335 	.word	0x08004335
 8003e20:	08004335 	.word	0x08004335
 8003e24:	08004335 	.word	0x08004335
 8003e28:	08004335 	.word	0x08004335
 8003e2c:	08004335 	.word	0x08004335
 8003e30:	08004335 	.word	0x08004335
 8003e34:	08004335 	.word	0x08004335
 8003e38:	08004335 	.word	0x08004335
 8003e3c:	08004335 	.word	0x08004335
 8003e40:	08004335 	.word	0x08004335
 8003e44:	08004239 	.word	0x08004239
 8003e48:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8003e4c:	2b3c      	cmp	r3, #60	; 0x3c
 8003e4e:	f200 8271 	bhi.w	8004334 <Run_YawSpeed+0x934>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <Run_YawSpeed+0x458>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	0800417b 	.word	0x0800417b
 8003e5c:	080042d1 	.word	0x080042d1
 8003e60:	08004335 	.word	0x08004335
 8003e64:	080042cb 	.word	0x080042cb
 8003e68:	08004335 	.word	0x08004335
 8003e6c:	08004335 	.word	0x08004335
 8003e70:	08004335 	.word	0x08004335
 8003e74:	080042c5 	.word	0x080042c5
 8003e78:	08004335 	.word	0x08004335
 8003e7c:	08004335 	.word	0x08004335
 8003e80:	08004335 	.word	0x08004335
 8003e84:	08004335 	.word	0x08004335
 8003e88:	08004335 	.word	0x08004335
 8003e8c:	08004335 	.word	0x08004335
 8003e90:	08004335 	.word	0x08004335
 8003e94:	08004335 	.word	0x08004335
 8003e98:	08004335 	.word	0x08004335
 8003e9c:	08004335 	.word	0x08004335
 8003ea0:	08004335 	.word	0x08004335
 8003ea4:	08004335 	.word	0x08004335
 8003ea8:	08004335 	.word	0x08004335
 8003eac:	08004335 	.word	0x08004335
 8003eb0:	08004335 	.word	0x08004335
 8003eb4:	08004335 	.word	0x08004335
 8003eb8:	08004335 	.word	0x08004335
 8003ebc:	08004335 	.word	0x08004335
 8003ec0:	08004335 	.word	0x08004335
 8003ec4:	08004335 	.word	0x08004335
 8003ec8:	08004335 	.word	0x08004335
 8003ecc:	08004335 	.word	0x08004335
 8003ed0:	08004335 	.word	0x08004335
 8003ed4:	08004335 	.word	0x08004335
 8003ed8:	08004175 	.word	0x08004175
 8003edc:	08004257 	.word	0x08004257
 8003ee0:	08004335 	.word	0x08004335
 8003ee4:	080042dd 	.word	0x080042dd
 8003ee8:	08004335 	.word	0x08004335
 8003eec:	08004335 	.word	0x08004335
 8003ef0:	08004335 	.word	0x08004335
 8003ef4:	080042d7 	.word	0x080042d7
 8003ef8:	08004335 	.word	0x08004335
 8003efc:	08004335 	.word	0x08004335
 8003f00:	08004335 	.word	0x08004335
 8003f04:	08004335 	.word	0x08004335
 8003f08:	08004335 	.word	0x08004335
 8003f0c:	08004335 	.word	0x08004335
 8003f10:	08004335 	.word	0x08004335
 8003f14:	08004335 	.word	0x08004335
 8003f18:	080041db 	.word	0x080041db
 8003f1c:	08004335 	.word	0x08004335
 8003f20:	08004335 	.word	0x08004335
 8003f24:	08004335 	.word	0x08004335
 8003f28:	08004335 	.word	0x08004335
 8003f2c:	08004335 	.word	0x08004335
 8003f30:	08004335 	.word	0x08004335
 8003f34:	08004335 	.word	0x08004335
 8003f38:	08004335 	.word	0x08004335
 8003f3c:	08004335 	.word	0x08004335
 8003f40:	08004335 	.word	0x08004335
 8003f44:	08004335 	.word	0x08004335
 8003f48:	080041cb 	.word	0x080041cb
 8003f4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f50:	2b18      	cmp	r3, #24
 8003f52:	f200 81ef 	bhi.w	8004334 <Run_YawSpeed+0x934>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <Run_YawSpeed+0x55c>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	0800416f 	.word	0x0800416f
 8003f60:	080042ef 	.word	0x080042ef
 8003f64:	08004335 	.word	0x08004335
 8003f68:	080042e9 	.word	0x080042e9
 8003f6c:	08004335 	.word	0x08004335
 8003f70:	08004335 	.word	0x08004335
 8003f74:	08004335 	.word	0x08004335
 8003f78:	080042e3 	.word	0x080042e3
 8003f7c:	08004335 	.word	0x08004335
 8003f80:	08004335 	.word	0x08004335
 8003f84:	08004335 	.word	0x08004335
 8003f88:	08004335 	.word	0x08004335
 8003f8c:	08004335 	.word	0x08004335
 8003f90:	08004335 	.word	0x08004335
 8003f94:	08004335 	.word	0x08004335
 8003f98:	08004335 	.word	0x08004335
 8003f9c:	08004167 	.word	0x08004167
 8003fa0:	08004305 	.word	0x08004305
 8003fa4:	08004335 	.word	0x08004335
 8003fa8:	080042fd 	.word	0x080042fd
 8003fac:	08004335 	.word	0x08004335
 8003fb0:	08004335 	.word	0x08004335
 8003fb4:	08004335 	.word	0x08004335
 8003fb8:	080042f5 	.word	0x080042f5
 8003fbc:	080041c3 	.word	0x080041c3
 8003fc0:	3bf0      	subs	r3, #240	; 0xf0
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	f200 81b6 	bhi.w	8004334 <Run_YawSpeed+0x934>
 8003fc8:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <Run_YawSpeed+0x5d0>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	0800415f 	.word	0x0800415f
 8003fd4:	0800431d 	.word	0x0800431d
 8003fd8:	08004335 	.word	0x08004335
 8003fdc:	08004315 	.word	0x08004315
 8003fe0:	08004335 	.word	0x08004335
 8003fe4:	08004335 	.word	0x08004335
 8003fe8:	08004335 	.word	0x08004335
 8003fec:	0800430d 	.word	0x0800430d
 8003ff0:	08004157 	.word	0x08004157
 8003ff4:	08004325 	.word	0x08004325
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	2b3d      	cmp	r3, #61	; 0x3d
 8003ffc:	f200 819a 	bhi.w	8004334 <Run_YawSpeed+0x934>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <Run_YawSpeed+0x608>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004107 	.word	0x08004107
 800400c:	08004335 	.word	0x08004335
 8004010:	0800410f 	.word	0x0800410f
 8004014:	08004335 	.word	0x08004335
 8004018:	08004335 	.word	0x08004335
 800401c:	08004335 	.word	0x08004335
 8004020:	08004117 	.word	0x08004117
 8004024:	08004335 	.word	0x08004335
 8004028:	08004335 	.word	0x08004335
 800402c:	08004335 	.word	0x08004335
 8004030:	08004335 	.word	0x08004335
 8004034:	08004335 	.word	0x08004335
 8004038:	08004335 	.word	0x08004335
 800403c:	08004335 	.word	0x08004335
 8004040:	0800411f 	.word	0x0800411f
 8004044:	08004335 	.word	0x08004335
 8004048:	08004335 	.word	0x08004335
 800404c:	08004335 	.word	0x08004335
 8004050:	08004335 	.word	0x08004335
 8004054:	08004335 	.word	0x08004335
 8004058:	08004335 	.word	0x08004335
 800405c:	08004335 	.word	0x08004335
 8004060:	08004335 	.word	0x08004335
 8004064:	08004335 	.word	0x08004335
 8004068:	08004335 	.word	0x08004335
 800406c:	08004335 	.word	0x08004335
 8004070:	08004335 	.word	0x08004335
 8004074:	08004335 	.word	0x08004335
 8004078:	08004335 	.word	0x08004335
 800407c:	0800412f 	.word	0x0800412f
 8004080:	08004127 	.word	0x08004127
 8004084:	08004335 	.word	0x08004335
 8004088:	08004335 	.word	0x08004335
 800408c:	08004335 	.word	0x08004335
 8004090:	08004335 	.word	0x08004335
 8004094:	08004335 	.word	0x08004335
 8004098:	08004335 	.word	0x08004335
 800409c:	08004335 	.word	0x08004335
 80040a0:	08004335 	.word	0x08004335
 80040a4:	08004335 	.word	0x08004335
 80040a8:	08004335 	.word	0x08004335
 80040ac:	08004335 	.word	0x08004335
 80040b0:	08004335 	.word	0x08004335
 80040b4:	08004335 	.word	0x08004335
 80040b8:	08004335 	.word	0x08004335
 80040bc:	08004335 	.word	0x08004335
 80040c0:	08004335 	.word	0x08004335
 80040c4:	08004335 	.word	0x08004335
 80040c8:	08004335 	.word	0x08004335
 80040cc:	08004335 	.word	0x08004335
 80040d0:	08004335 	.word	0x08004335
 80040d4:	08004335 	.word	0x08004335
 80040d8:	08004335 	.word	0x08004335
 80040dc:	08004335 	.word	0x08004335
 80040e0:	08004335 	.word	0x08004335
 80040e4:	08004335 	.word	0x08004335
 80040e8:	08004335 	.word	0x08004335
 80040ec:	08004335 	.word	0x08004335
 80040f0:	08004335 	.word	0x08004335
 80040f4:	0800413f 	.word	0x0800413f
 80040f8:	08004335 	.word	0x08004335
 80040fc:	08004137 	.word	0x08004137
 8004100:	2b78      	cmp	r3, #120	; 0x78
 8004102:	d024      	beq.n	800414e <Run_YawSpeed+0x74e>
 8004104:	e116      	b.n	8004334 <Run_YawSpeed+0x934>
	case B00000000000001: error = -15; break;
 8004106:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 800410a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800410c:	e115      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000000000011: error = -13; break;
 800410e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004112:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004114:	e111      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000000000111: error = -11; break;
 8004116:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 800411a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800411c:	e10d      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000000001111: error = -10; break;
 800411e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8004122:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004124:	e109      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000000011111: error = -9; break;
 8004126:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800412a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800412c:	e105      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000000011110: error = -8; break;
 800412e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8004132:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004134:	e101      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000000111110: error = -7; break;
 8004136:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 800413a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800413c:	e0fd      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000000111100: error = -6; break;
 800413e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8004142:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004144:	e0f9      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000001111100: error = -5; break;
 8004146:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800414a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800414c:	e0f5      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000001111000: error = -4; break;
 800414e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004152:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004154:	e0f1      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000011111000: error = -3; break;
 8004156:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800415a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800415c:	e0ed      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000011110000: error = -2; break;
 800415e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004162:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004164:	e0e9      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000111110000: error = -1; break;
 8004166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800416a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800416c:	e0e5      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00000111100000: error = 0; break;
 800416e:	2300      	movs	r3, #0
 8004170:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004172:	e0e2      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00001111100000: error = 1; break;
 8004174:	2301      	movs	r3, #1
 8004176:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004178:	e0df      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00001111000000: error = 2; break;
 800417a:	2302      	movs	r3, #2
 800417c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800417e:	e0dc      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00011111000000: error = 3; break;
 8004180:	2303      	movs	r3, #3
 8004182:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004184:	e0d9      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00011110000000: error = 4; break;
 8004186:	2304      	movs	r3, #4
 8004188:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800418a:	e0d6      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00111110000000: error = 5; break;
 800418c:	2305      	movs	r3, #5
 800418e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004190:	e0d3      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00111100000000: error = 6; break;
 8004192:	2306      	movs	r3, #6
 8004194:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004196:	e0d0      	b.n	800433a <Run_YawSpeed+0x93a>
	case B01111100000000: error = 7; break;
 8004198:	2307      	movs	r3, #7
 800419a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800419c:	e0cd      	b.n	800433a <Run_YawSpeed+0x93a>
	case B01111000000000: error = 8; break;
 800419e:	2308      	movs	r3, #8
 80041a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041a2:	e0ca      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11111000000000: error = 9; break;
 80041a4:	2309      	movs	r3, #9
 80041a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041a8:	e0c7      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11110000000000: error = 10; break;
 80041aa:	230a      	movs	r3, #10
 80041ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041ae:	e0c4      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11100000000000: error = 11; break;
 80041b0:	230b      	movs	r3, #11
 80041b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041b4:	e0c1      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11000000000000: error = 13; break;
 80041b6:	230d      	movs	r3, #13
 80041b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041ba:	e0be      	b.n	800433a <Run_YawSpeed+0x93a>
	case B10000000000000: error = 15; break;
 80041bc:	230f      	movs	r3, #15
 80041be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041c0:	e0bb      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00000111111000: error = -1; break;
 80041c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041c8:	e0b7      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00001111111100: error = -1; break;
 80041ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041d0:	e0b3      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00011111111110: error = -1; break;
 80041d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041d8:	e0af      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00001111110000: error = 0; break;
 80041da:	2300      	movs	r3, #0
 80041dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041de:	e0ac      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00011111111000: error = 0; break;
 80041e0:	2300      	movs	r3, #0
 80041e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041e4:	e0a9      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00111111111100: error = 0; break;
 80041e6:	2300      	movs	r3, #0
 80041e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041ea:	e0a6      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00011111100000: error = 1; break;
 80041ec:	2301      	movs	r3, #1
 80041ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041f0:	e0a3      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00111111110000: error = 1; break;
 80041f2:	2301      	movs	r3, #1
 80041f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041f6:	e0a0      	b.n	800433a <Run_YawSpeed+0x93a>
	case B01111111111000: error = 1; break;
 80041f8:	2301      	movs	r3, #1
 80041fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041fc:	e09d      	b.n	800433a <Run_YawSpeed+0x93a>

	case B11111000000001: error = -2; break;
 80041fe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004202:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004204:	e099      	b.n	800433a <Run_YawSpeed+0x93a>

	case B11100000000001: error = -1; break;
 8004206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800420a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800420c:	e095      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11110000000011: error = -1; break;
 800420e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004212:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004214:	e091      	b.n	800433a <Run_YawSpeed+0x93a>

	case B10000000000001: error = 0; break;
 8004216:	2300      	movs	r3, #0
 8004218:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800421a:	e08e      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11000000000011: error = 0; break;
 800421c:	2300      	movs	r3, #0
 800421e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004220:	e08b      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11100000000111: error = 0; break;
 8004222:	2300      	movs	r3, #0
 8004224:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004226:	e088      	b.n	800433a <Run_YawSpeed+0x93a>

	case B10000000000111: error = -1; break;
 8004228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800422c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800422e:	e084      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11000000001111: error = -1; break;
 8004230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004234:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004236:	e080      	b.n	800433a <Run_YawSpeed+0x93a>

	case B10000000011111: error = -2; break;
 8004238:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800423c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800423e:	e07c      	b.n	800433a <Run_YawSpeed+0x93a>

	case B11000011110000: error = -2; break;
 8004240:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004244:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004246:	e078      	b.n	800433a <Run_YawSpeed+0x93a>
	case B10000111110000: error = -1; break;
 8004248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800424c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800424e:	e074      	b.n	800433a <Run_YawSpeed+0x93a>
	case B10000111100001: error = 0; break;
 8004250:	2300      	movs	r3, #0
 8004252:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004254:	e071      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00001111100001: error = 1; break;
 8004256:	2301      	movs	r3, #1
 8004258:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800425a:	e06e      	b.n	800433a <Run_YawSpeed+0x93a>
	case B10001111000011: error = 2; break;
 800425c:	2302      	movs	r3, #2
 800425e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004260:	e06b      	b.n	800433a <Run_YawSpeed+0x93a>

	case B11100011110000: error = -2; break;
 8004262:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004266:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004268:	e067      	b.n	800433a <Run_YawSpeed+0x93a>
//	case B11000011110000: error = -2; break;
	case B10000011110000: error = -2; break;
 800426a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800426e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004270:	e063      	b.n	800433a <Run_YawSpeed+0x93a>

	case B11100111110000: error = -1; break;
 8004272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004276:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004278:	e05f      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11000111110000: error = -1; break;
 800427a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800427e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004280:	e05b      	b.n	800433a <Run_YawSpeed+0x93a>
//	case B10000111110000: error = -1; break;

	case B11100111100000: error = 0; break;
 8004282:	2300      	movs	r3, #0
 8004284:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004286:	e058      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11000111100000: error = 0; break;
 8004288:	2300      	movs	r3, #0
 800428a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800428c:	e055      	b.n	800433a <Run_YawSpeed+0x93a>
	case B10000111100000: error = 0; break;
 800428e:	2300      	movs	r3, #0
 8004290:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004292:	e052      	b.n	800433a <Run_YawSpeed+0x93a>

	case B11101111100000: error = 1; break;
 8004294:	2301      	movs	r3, #1
 8004296:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004298:	e04f      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11001111100000: error = 1; break;
 800429a:	2301      	movs	r3, #1
 800429c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800429e:	e04c      	b.n	800433a <Run_YawSpeed+0x93a>
	case B10001111100000: error = 1; break;
 80042a0:	2301      	movs	r3, #1
 80042a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042a4:	e049      	b.n	800433a <Run_YawSpeed+0x93a>

	case B11101111000000: error = 2; break;
 80042a6:	2302      	movs	r3, #2
 80042a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042aa:	e046      	b.n	800433a <Run_YawSpeed+0x93a>
	case B11001111000000: error = 2; break;
 80042ac:	2302      	movs	r3, #2
 80042ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042b0:	e043      	b.n	800433a <Run_YawSpeed+0x93a>
	case B10001111000000: error = 2; break;
 80042b2:	2302      	movs	r3, #2
 80042b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042b6:	e040      	b.n	800433a <Run_YawSpeed+0x93a>

	case B10011111000000: error = 3; break;
 80042b8:	2303      	movs	r3, #3
 80042ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042bc:	e03d      	b.n	800433a <Run_YawSpeed+0x93a>

	case B10011110000000: error = 4; break;
 80042be:	2304      	movs	r3, #4
 80042c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042c2:	e03a      	b.n	800433a <Run_YawSpeed+0x93a>



	case B00001111000111: error = 2; break;
 80042c4:	2302      	movs	r3, #2
 80042c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042c8:	e037      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00001111000011: error = 2; break;
 80042ca:	2302      	movs	r3, #2
 80042cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042ce:	e034      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00001111000001: error = 2; break;
 80042d0:	2302      	movs	r3, #2
 80042d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042d4:	e031      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00001111100111: error = 1; break;
 80042d6:	2301      	movs	r3, #1
 80042d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042da:	e02e      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00001111100011: error = 1; break;
 80042dc:	2301      	movs	r3, #1
 80042de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042e0:	e02b      	b.n	800433a <Run_YawSpeed+0x93a>
//	case B00001111100001: error = 1; break;

	case B00000111100111: error = 0; break;
 80042e2:	2300      	movs	r3, #0
 80042e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042e6:	e028      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000111100011: error = 0; break;
 80042e8:	2300      	movs	r3, #0
 80042ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042ec:	e025      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000111100001: error = 0; break;
 80042ee:	2300      	movs	r3, #0
 80042f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042f2:	e022      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00000111110111: error = -1; break;
 80042f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042fa:	e01e      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000111110011: error = -1; break;
 80042fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004300:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004302:	e01a      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000111110001: error = -1; break;
 8004304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004308:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800430a:	e016      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00000011110111: error = -2; break;
 800430c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004310:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004312:	e012      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000011110011: error = -2; break;
 8004314:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004318:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800431a:	e00e      	b.n	800433a <Run_YawSpeed+0x93a>
	case B00000011110001: error = -2; break;
 800431c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004320:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004322:	e00a      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00000011111001: error = -3; break;
 8004324:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004328:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800432a:	e006      	b.n	800433a <Run_YawSpeed+0x93a>

	case B00000001111001: error = -4; break;
 800432c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004330:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004332:	e002      	b.n	800433a <Run_YawSpeed+0x93a>

	default: error = last_error;
 8004334:	4b5e      	ldr	r3, [pc, #376]	; (80044b0 <Run_YawSpeed+0xab0>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	int8_t div_error = error - last_error;
 800433a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b5c      	ldr	r3, [pc, #368]	; (80044b0 <Run_YawSpeed+0xab0>)
 8004340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	76fb      	strb	r3, [r7, #27]
	sum_error += error;
 800434c:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <Run_YawSpeed+0xab4>)
 800434e:	881a      	ldrh	r2, [r3, #0]
 8004350:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004352:	4413      	add	r3, r2
 8004354:	b29a      	uxth	r2, r3
 8004356:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <Run_YawSpeed+0xab4>)
 8004358:	801a      	strh	r2, [r3, #0]
	float p, i, d;
	if(flag == 1) {
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d158      	bne.n	8004412 <Run_YawSpeed+0xa12>
		p = _speed * PID_KKP * (float)error;
 8004360:	68b8      	ldr	r0, [r7, #8]
 8004362:	f7fc f8f1 	bl	8000548 <__aeabi_f2d>
 8004366:	a34e      	add	r3, pc, #312	; (adr r3, 80044a0 <Run_YawSpeed+0xaa0>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f7fc f944 	bl	80005f8 <__aeabi_dmul>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4614      	mov	r4, r2
 8004376:	461d      	mov	r5, r3
 8004378:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004384:	ee17 0a90 	vmov	r0, s15
 8004388:	f7fc f8de 	bl	8000548 <__aeabi_f2d>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4620      	mov	r0, r4
 8004392:	4629      	mov	r1, r5
 8004394:	f7fc f930 	bl	80005f8 <__aeabi_dmul>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	f7fc fc22 	bl	8000be8 <__aeabi_d2f>
 80043a4:	4603      	mov	r3, r0
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
		i = 0;
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
		d = _speed * PID_KKD * (float)div_error / period;
 80043ae:	68b8      	ldr	r0, [r7, #8]
 80043b0:	f7fc f8ca 	bl	8000548 <__aeabi_f2d>
 80043b4:	a33c      	add	r3, pc, #240	; (adr r3, 80044a8 <Run_YawSpeed+0xaa8>)
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f7fc f91d 	bl	80005f8 <__aeabi_dmul>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4614      	mov	r4, r2
 80043c4:	461d      	mov	r5, r3
 80043c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d2:	ee17 0a90 	vmov	r0, s15
 80043d6:	f7fc f8b7 	bl	8000548 <__aeabi_f2d>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fc f909 	bl	80005f8 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4614      	mov	r4, r2
 80043ec:	461d      	mov	r5, r3
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7fc f8aa 	bl	8000548 <__aeabi_f2d>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4620      	mov	r0, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	f7fc fa26 	bl	800084c <__aeabi_ddiv>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f7fc fbee 	bl	8000be8 <__aeabi_d2f>
 800440c:	4603      	mov	r3, r0
 800440e:	623b      	str	r3, [r7, #32]
 8004410:	e02e      	b.n	8004470 <Run_YawSpeed+0xa70>
	}
	else {
		p = kp * (float)error;
 8004412:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <Run_YawSpeed+0xab8>)
 8004420:	edd3 7a00 	vldr	s15, [r3]
 8004424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004428:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		i = ki * (float)sum_error * period;
 800442c:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <Run_YawSpeed+0xab4>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004438:	4b20      	ldr	r3, [pc, #128]	; (80044bc <Run_YawSpeed+0xabc>)
 800443a:	edd3 7a00 	vldr	s15, [r3]
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	ed97 7a03 	vldr	s14, [r7, #12]
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		d = kd * (float)div_error / period;
 800444e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800445a:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <Run_YawSpeed+0xac0>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004464:	ed97 7a03 	vldr	s14, [r7, #12]
 8004468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446c:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	float mv = p + i + d;
 8004470:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004474:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004484:	edc7 7a05 	vstr	s15, [r7, #20]
	last_error = error;
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <Run_YawSpeed+0xab0>)
 800448a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800448c:	8013      	strh	r3, [r2, #0]
	return mv;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	ee07 3a90 	vmov	s15, r3
}
 8004494:	eeb0 0a67 	vmov.f32	s0, s15
 8004498:	3730      	adds	r7, #48	; 0x30
 800449a:	46bd      	mov	sp, r7
 800449c:	bdb0      	pop	{r4, r5, r7, pc}
 800449e:	bf00      	nop
 80044a0:	e83e425b 	.word	0xe83e425b
 80044a4:	3fbaacd9 	.word	0x3fbaacd9
 80044a8:	bc6a7efa 	.word	0xbc6a7efa
 80044ac:	3f989374 	.word	0x3f989374
 80044b0:	20000b36 	.word	0x20000b36
 80044b4:	20000b34 	.word	0x20000b34
 80044b8:	20000b28 	.word	0x20000b28
 80044bc:	20000b2c 	.word	0x20000b2c
 80044c0:	20000b30 	.word	0x20000b30

080044c4 <Run_LineTracing>:

void Run_LineTracing(float speed, float period, uint8_t flag) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80044ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
	float yaw_speed = Run_YawSpeed(period, speed, flag);
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	4618      	mov	r0, r3
 80044da:	edd7 0a03 	vldr	s1, [r7, #12]
 80044de:	ed97 0a02 	vldr	s0, [r7, #8]
 80044e2:	f7ff fa8d 	bl	8003a00 <Run_YawSpeed>
 80044e6:	ed87 0a05 	vstr	s0, [r7, #20]
	Motor_SetPoint(&MOTOR_R, speed-yaw_speed);
 80044ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80044ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f6:	eeb0 0a67 	vmov.f32	s0, s15
 80044fa:	4809      	ldr	r0, [pc, #36]	; (8004520 <Run_LineTracing+0x5c>)
 80044fc:	f7fd ff6e 	bl	80023dc <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed+yaw_speed);
 8004500:	ed97 7a03 	vldr	s14, [r7, #12]
 8004504:	edd7 7a05 	vldr	s15, [r7, #20]
 8004508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800450c:	eeb0 0a67 	vmov.f32	s0, s15
 8004510:	4804      	ldr	r0, [pc, #16]	; (8004524 <Run_LineTracing+0x60>)
 8004512:	f7fd ff63 	bl	80023dc <Motor_SetPoint>
}
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000a90 	.word	0x20000a90
 8004524:	20000ad8 	.word	0x20000ad8

08004528 <Run_SetMotorSpeed>:

void Run_SetMotorSpeed(float speed_l, float speed_r) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004532:	edc7 0a00 	vstr	s1, [r7]
	Motor_SetPoint(&MOTOR_R, speed_r);
 8004536:	ed97 0a00 	vldr	s0, [r7]
 800453a:	4806      	ldr	r0, [pc, #24]	; (8004554 <Run_SetMotorSpeed+0x2c>)
 800453c:	f7fd ff4e 	bl	80023dc <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed_l);
 8004540:	ed97 0a01 	vldr	s0, [r7, #4]
 8004544:	4804      	ldr	r0, [pc, #16]	; (8004558 <Run_SetMotorSpeed+0x30>)
 8004546:	f7fd ff49 	bl	80023dc <Motor_SetPoint>
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000a90 	.word	0x20000a90
 8004558:	20000ad8 	.word	0x20000ad8

0800455c <SEN_Init>:
uint16_t adc_filter_mem[SENSOR_NUM][ADC_FILTER_LEN];;
uint8_t adc_filter_pt = 0;

uint8_t sensor_flag = 0;

void SEN_Init(ADC_HandleTypeDef* hadc) {
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	sen_hadc = hadc;
 8004564:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <SEN_Init+0x3c>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6013      	str	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++)  threshold_sensor[i] = ADC_MAX/2;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e008      	b.n	8004582 <SEN_Init+0x26>
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <SEN_Init+0x40>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b0d      	cmp	r3, #13
 8004586:	ddf3      	ble.n	8004570 <SEN_Init+0x14>
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000b38 	.word	0x20000b38
 800459c:	20000b74 	.word	0x20000b74

080045a0 <SEN_Filter>:

void SEN_Filter(uint16_t* data) {
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b08d      	sub	sp, #52	; 0x34
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	uint16_t temp[SENSOR_NUM];
	for(int i=0; i<SENSOR_NUM; i++) {
 80045a8:	2300      	movs	r3, #0
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ac:	e05a      	b.n	8004664 <SEN_Filter+0xc4>
		adc_filter_mem[i][adc_filter_pt] = data[i];
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	4a2f      	ldr	r2, [pc, #188]	; (8004674 <SEN_Filter+0xd4>)
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	4614      	mov	r4, r2
 80045bc:	8818      	ldrh	r0, [r3, #0]
 80045be:	492e      	ldr	r1, [pc, #184]	; (8004678 <SEN_Filter+0xd8>)
 80045c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4423      	add	r3, r4
 80045cc:	4602      	mov	r2, r0
 80045ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if(adc_filter_pt<ADC_FILTER_LEN-1) adc_filter_pt++; else adc_filter_pt=0;
 80045d2:	4b28      	ldr	r3, [pc, #160]	; (8004674 <SEN_Filter+0xd4>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d806      	bhi.n	80045e8 <SEN_Filter+0x48>
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <SEN_Filter+0xd4>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	3301      	adds	r3, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <SEN_Filter+0xd4>)
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e002      	b.n	80045ee <SEN_Filter+0x4e>
 80045e8:	4b22      	ldr	r3, [pc, #136]	; (8004674 <SEN_Filter+0xd4>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
		memset((uint8_t*)temp, 0, SENSOR_NUM*2);
 80045ee:	f107 030c 	add.w	r3, r7, #12
 80045f2:	221c      	movs	r2, #28
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f009 fe98 	bl	800e32c <memset>
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 80045fc:	2300      	movs	r3, #0
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004600:	e01f      	b.n	8004642 <SEN_Filter+0xa2>
			temp[i] += adc_filter_mem[i][j]/ADC_FILTER_LEN;
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	3330      	adds	r3, #48	; 0x30
 8004608:	443b      	add	r3, r7
 800460a:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800460e:	481a      	ldr	r0, [pc, #104]	; (8004678 <SEN_Filter+0xd8>)
 8004610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800461c:	4413      	add	r3, r2
 800461e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004622:	4a16      	ldr	r2, [pc, #88]	; (800467c <SEN_Filter+0xdc>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	b29b      	uxth	r3, r3
 800462c:	440b      	add	r3, r1
 800462e:	b29a      	uxth	r2, r3
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	3330      	adds	r3, #48	; 0x30
 8004636:	443b      	add	r3, r7
 8004638:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	3301      	adds	r3, #1
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	2b09      	cmp	r3, #9
 8004646:	dddc      	ble.n	8004602 <SEN_Filter+0x62>
		}
		data[i] = temp[i];
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	441a      	add	r2, r3
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	3330      	adds	r3, #48	; 0x30
 8004656:	443b      	add	r3, r7
 8004658:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800465c:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	3301      	adds	r3, #1
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	2b0d      	cmp	r3, #13
 8004668:	dda1      	ble.n	80045ae <SEN_Filter+0xe>
	}
}
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	3734      	adds	r7, #52	; 0x34
 8004670:	46bd      	mov	sp, r7
 8004672:	bd90      	pop	{r4, r7, pc}
 8004674:	20000cbc 	.word	0x20000cbc
 8004678:	20000ba4 	.word	0x20000ba4
 800467c:	cccccccd 	.word	0xcccccccd

08004680 <SEN_StartReadSensor>:

void SEN_StartReadSensor() {
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(sen_hadc, adc_sensor, SENSOR_NUM);
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <SEN_StartReadSensor+0x18>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	220e      	movs	r2, #14
 800468a:	4904      	ldr	r1, [pc, #16]	; (800469c <SEN_StartReadSensor+0x1c>)
 800468c:	4618      	mov	r0, r3
 800468e:	f004 fed5 	bl	800943c <HAL_ADC_Start_DMA>
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000b38 	.word	0x20000b38
 800469c:	20000b3c 	.word	0x20000b3c

080046a0 <SEN_CallbackRoutine>:

void SEN_CallbackRoutine(ADC_HandleTypeDef* hadc) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance != sen_hadc->Instance) return;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b5b      	ldr	r3, [pc, #364]	; (800481c <SEN_CallbackRoutine+0x17c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	f040 80ad 	bne.w	8004812 <SEN_CallbackRoutine+0x172>
	SEN_Filter(adc_sensor);
 80046b8:	4859      	ldr	r0, [pc, #356]	; (8004820 <SEN_CallbackRoutine+0x180>)
 80046ba:	f7ff ff71 	bl	80045a0 <SEN_Filter>
	for(int i=0; i<SENSOR_NUM/2; i++) {
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e017      	b.n	80046f4 <SEN_CallbackRoutine+0x54>
		adc_sensor_arranged[SENSOR_NUM-i-1] = adc_sensor[i*2];
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005a      	lsls	r2, r3, #1
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f1c3 030d 	rsb	r3, r3, #13
 80046ce:	4954      	ldr	r1, [pc, #336]	; (8004820 <SEN_CallbackRoutine+0x180>)
 80046d0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80046d4:	4a53      	ldr	r2, [pc, #332]	; (8004824 <SEN_CallbackRoutine+0x184>)
 80046d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_sensor_arranged[i] = adc_sensor[i*2+1];
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	3301      	adds	r3, #1
 80046e0:	4a4f      	ldr	r2, [pc, #316]	; (8004820 <SEN_CallbackRoutine+0x180>)
 80046e2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80046e6:	4a4f      	ldr	r2, [pc, #316]	; (8004824 <SEN_CallbackRoutine+0x184>)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<SENSOR_NUM/2; i++) {
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	3301      	adds	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	dde4      	ble.n	80046c4 <SEN_CallbackRoutine+0x24>
	}
	sensor_binary = 0;
 80046fa:	4b4b      	ldr	r3, [pc, #300]	; (8004828 <SEN_CallbackRoutine+0x188>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	e06c      	b.n	80047e0 <SEN_CallbackRoutine+0x140>
		uint8_t bit = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
		if(sensor_invert == 0) {
 800470a:	4b48      	ldr	r3, [pc, #288]	; (800482c <SEN_CallbackRoutine+0x18c>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d12a      	bne.n	8004768 <SEN_CallbackRoutine+0xc8>
			if(adc_sensor_arranged[i] > threshold_sensor[i]) {
 8004712:	4a44      	ldr	r2, [pc, #272]	; (8004824 <SEN_CallbackRoutine+0x184>)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800471a:	4945      	ldr	r1, [pc, #276]	; (8004830 <SEN_CallbackRoutine+0x190>)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004722:	429a      	cmp	r2, r3
 8004724:	d91a      	bls.n	800475c <SEN_CallbackRoutine+0xbc>
				bit = 1;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (adc_sensor_arranged[i]-threshold_sensor[i])/SEN_BAR_INC + 1;
 800472a:	4a3e      	ldr	r2, [pc, #248]	; (8004824 <SEN_CallbackRoutine+0x184>)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004732:	4619      	mov	r1, r3
 8004734:	4a3e      	ldr	r2, [pc, #248]	; (8004830 <SEN_CallbackRoutine+0x190>)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800473c:	1acb      	subs	r3, r1, r3
 800473e:	4a3d      	ldr	r2, [pc, #244]	; (8004834 <SEN_CallbackRoutine+0x194>)
 8004740:	fb82 1203 	smull	r1, r2, r2, r3
 8004744:	1092      	asrs	r2, r2, #2
 8004746:	17db      	asrs	r3, r3, #31
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3301      	adds	r3, #1
 800474e:	b2d9      	uxtb	r1, r3
 8004750:	4a39      	ldr	r2, [pc, #228]	; (8004838 <SEN_CallbackRoutine+0x198>)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	460a      	mov	r2, r1
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e02f      	b.n	80047bc <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 800475c:	4a36      	ldr	r2, [pc, #216]	; (8004838 <SEN_CallbackRoutine+0x198>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4413      	add	r3, r2
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e029      	b.n	80047bc <SEN_CallbackRoutine+0x11c>
		}
		else {
			if(adc_sensor_arranged[i] < threshold_sensor[i]) {
 8004768:	4a2e      	ldr	r2, [pc, #184]	; (8004824 <SEN_CallbackRoutine+0x184>)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004770:	492f      	ldr	r1, [pc, #188]	; (8004830 <SEN_CallbackRoutine+0x190>)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004778:	429a      	cmp	r2, r3
 800477a:	d21a      	bcs.n	80047b2 <SEN_CallbackRoutine+0x112>
				bit = 1;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (threshold_sensor[i]-adc_sensor_arranged[i])/SEN_BAR_INC + 1;
 8004780:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <SEN_CallbackRoutine+0x190>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004788:	4619      	mov	r1, r3
 800478a:	4a26      	ldr	r2, [pc, #152]	; (8004824 <SEN_CallbackRoutine+0x184>)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004792:	1acb      	subs	r3, r1, r3
 8004794:	4a27      	ldr	r2, [pc, #156]	; (8004834 <SEN_CallbackRoutine+0x194>)
 8004796:	fb82 1203 	smull	r1, r2, r2, r3
 800479a:	1092      	asrs	r2, r2, #2
 800479c:	17db      	asrs	r3, r3, #31
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	b2d9      	uxtb	r1, r3
 80047a6:	4a24      	ldr	r2, [pc, #144]	; (8004838 <SEN_CallbackRoutine+0x198>)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	460a      	mov	r2, r1
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e004      	b.n	80047bc <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 80047b2:	4a21      	ldr	r2, [pc, #132]	; (8004838 <SEN_CallbackRoutine+0x198>)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4413      	add	r3, r2
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
		}

		sensor_binary |= bit << (SENSOR_NUM-i-1);
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f1c3 030d 	rsb	r3, r3, #13
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	b21a      	sxth	r2, r3
 80047ca:	4b17      	ldr	r3, [pc, #92]	; (8004828 <SEN_CallbackRoutine+0x188>)
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b21b      	sxth	r3, r3
 80047d0:	4313      	orrs	r3, r2
 80047d2:	b21b      	sxth	r3, r3
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <SEN_CallbackRoutine+0x188>)
 80047d8:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3301      	adds	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b0d      	cmp	r3, #13
 80047e4:	dd8f      	ble.n	8004706 <SEN_CallbackRoutine+0x66>
	}

	if(autocalib_status == 1) {
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <SEN_CallbackRoutine+0x19c>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d102      	bne.n	80047f4 <SEN_CallbackRoutine+0x154>
		SEN_AutoCalibrationRoutine(0);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f000 f870 	bl	80048d4 <SEN_AutoCalibrationRoutine>
	}

	sensor_flag |= 1;
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <SEN_CallbackRoutine+0x1a0>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <SEN_CallbackRoutine+0x1a0>)
 8004800:	701a      	strb	r2, [r3, #0]
	sensor_flag &=~2;
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <SEN_CallbackRoutine+0x1a0>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	f023 0302 	bic.w	r3, r3, #2
 800480a:	b2da      	uxtb	r2, r3
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <SEN_CallbackRoutine+0x1a0>)
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e000      	b.n	8004814 <SEN_CallbackRoutine+0x174>
	if(hadc->Instance != sen_hadc->Instance) return;
 8004812:	bf00      	nop
}
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000b38 	.word	0x20000b38
 8004820:	20000b3c 	.word	0x20000b3c
 8004824:	20000b58 	.word	0x20000b58
 8004828:	20000b9e 	.word	0x20000b9e
 800482c:	20000ba0 	.word	0x20000ba0
 8004830:	20000b74 	.word	0x20000b74
 8004834:	66666667 	.word	0x66666667
 8004838:	20000b90 	.word	0x20000b90
 800483c:	20000cc8 	.word	0x20000cc8
 8004840:	20000cbd 	.word	0x20000cbd

08004844 <SEN_StartAutoCalibration>:

uint16_t* calib_upper_adc;
uint16_t* calib_lower_adc;
uint8_t autocalib_status = 0;

void SEN_StartAutoCalibration() {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
	if(autocalib_status == 1) return;
 800484a:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <SEN_StartAutoCalibration+0x84>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d035      	beq.n	80048be <SEN_StartAutoCalibration+0x7a>
	calib_upper_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 8004852:	201c      	movs	r0, #28
 8004854:	f009 fd4c 	bl	800e2f0 <malloc>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <SEN_StartAutoCalibration+0x88>)
 800485e:	601a      	str	r2, [r3, #0]
	calib_lower_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 8004860:	201c      	movs	r0, #28
 8004862:	f009 fd45 	bl	800e2f0 <malloc>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <SEN_StartAutoCalibration+0x8c>)
 800486c:	601a      	str	r2, [r3, #0]
	if(calib_upper_adc || calib_lower_adc) {
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <SEN_StartAutoCalibration+0x88>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <SEN_StartAutoCalibration+0x3a>
 8004876:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <SEN_StartAutoCalibration+0x8c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01b      	beq.n	80048b6 <SEN_StartAutoCalibration+0x72>
		for(int i=0; i<SENSOR_NUM; i++) {
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	e011      	b.n	80048a8 <SEN_StartAutoCalibration+0x64>
			calib_upper_adc[i] = 0x000;
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <SEN_StartAutoCalibration+0x88>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	2200      	movs	r2, #0
 8004890:	801a      	strh	r2, [r3, #0]
			calib_lower_adc[i] = ADC_MAX;
 8004892:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <SEN_StartAutoCalibration+0x8c>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	4413      	add	r3, r2
 800489c:	f640 72ff 	movw	r2, #4095	; 0xfff
 80048a0:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<SENSOR_NUM; i++) {
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3301      	adds	r3, #1
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b0d      	cmp	r3, #13
 80048ac:	ddea      	ble.n	8004884 <SEN_StartAutoCalibration+0x40>
		}
		autocalib_status = 1;
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <SEN_StartAutoCalibration+0x84>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
 80048b4:	e004      	b.n	80048c0 <SEN_StartAutoCalibration+0x7c>
	}
	else autocalib_status = 0;
 80048b6:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <SEN_StartAutoCalibration+0x84>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e000      	b.n	80048c0 <SEN_StartAutoCalibration+0x7c>
	if(autocalib_status == 1) return;
 80048be:	bf00      	nop
}
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000cc8 	.word	0x20000cc8
 80048cc:	20000cc0 	.word	0x20000cc0
 80048d0:	20000cc4 	.word	0x20000cc4

080048d4 <SEN_AutoCalibrationRoutine>:

void SEN_AutoCalibrationRoutine(uint8_t flag) {
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<SENSOR_NUM; i++) {
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e02f      	b.n	8004944 <SEN_AutoCalibrationRoutine+0x70>
		if(calib_upper_adc[i] < adc_sensor_arranged[i])
 80048e4:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <SEN_AutoCalibrationRoutine+0x84>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4413      	add	r3, r2
 80048ee:	881a      	ldrh	r2, [r3, #0]
 80048f0:	491a      	ldr	r1, [pc, #104]	; (800495c <SEN_AutoCalibrationRoutine+0x88>)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d20a      	bcs.n	8004912 <SEN_AutoCalibrationRoutine+0x3e>
			calib_upper_adc[i] = adc_sensor_arranged[i];
 80048fc:	4b16      	ldr	r3, [pc, #88]	; (8004958 <SEN_AutoCalibrationRoutine+0x84>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4413      	add	r3, r2
 8004906:	4915      	ldr	r1, [pc, #84]	; (800495c <SEN_AutoCalibrationRoutine+0x88>)
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	e015      	b.n	800493e <SEN_AutoCalibrationRoutine+0x6a>
		else if(calib_lower_adc[i] > adc_sensor_arranged[i])
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <SEN_AutoCalibrationRoutine+0x8c>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	490f      	ldr	r1, [pc, #60]	; (800495c <SEN_AutoCalibrationRoutine+0x88>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004926:	429a      	cmp	r2, r3
 8004928:	d909      	bls.n	800493e <SEN_AutoCalibrationRoutine+0x6a>
			calib_lower_adc[i] = adc_sensor_arranged[i];
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <SEN_AutoCalibrationRoutine+0x8c>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	4909      	ldr	r1, [pc, #36]	; (800495c <SEN_AutoCalibrationRoutine+0x88>)
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800493c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b0d      	cmp	r3, #13
 8004948:	ddcc      	ble.n	80048e4 <SEN_AutoCalibrationRoutine+0x10>
	}
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000cc0 	.word	0x20000cc0
 800495c:	20000b58 	.word	0x20000b58
 8004960:	20000cc4 	.word	0x20000cc4
 8004964:	00000000 	.word	0x00000000

08004968 <SEN_EndAutoCalibration>:

void SEN_EndAutoCalibration(uint8_t flag) {
 8004968:	b5b0      	push	{r4, r5, r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
	if(autocalib_status == 0) return;
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <SEN_EndAutoCalibration+0xe8>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d060      	beq.n	8004a3c <SEN_EndAutoCalibration+0xd4>
	if(flag & 1) {
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d04d      	beq.n	8004a20 <SEN_EndAutoCalibration+0xb8>
		for(int i=0; i<SENSOR_NUM; i++) {
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e047      	b.n	8004a1a <SEN_EndAutoCalibration+0xb2>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 800498a:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <SEN_EndAutoCalibration+0xec>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	4b30      	ldr	r3, [pc, #192]	; (8004a58 <SEN_EndAutoCalibration+0xf0>)
 8004998:	6819      	ldr	r1, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d335      	bcc.n	8004a12 <SEN_EndAutoCalibration+0xaa>
			threshold_sensor[i] = TH_CALIB_FACTOR * (calib_upper_adc[i]-calib_lower_adc[i]) + calib_lower_adc[i];
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <SEN_EndAutoCalibration+0xec>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	4619      	mov	r1, r3
 80049b4:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <SEN_EndAutoCalibration+0xf0>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	1acb      	subs	r3, r1, r3
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fb fdae 	bl	8000524 <__aeabi_i2d>
 80049c8:	a31f      	add	r3, pc, #124	; (adr r3, 8004a48 <SEN_EndAutoCalibration+0xe0>)
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f7fb fe13 	bl	80005f8 <__aeabi_dmul>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4614      	mov	r4, r2
 80049d8:	461d      	mov	r5, r3
 80049da:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <SEN_EndAutoCalibration+0xf0>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fb fd9c 	bl	8000524 <__aeabi_i2d>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4620      	mov	r0, r4
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7fb fc4a 	bl	800028c <__adddf3>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	f7fc f8d2 	bl	8000ba8 <__aeabi_d2uiz>
 8004a04:	4603      	mov	r3, r0
 8004a06:	b299      	uxth	r1, r3
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <SEN_EndAutoCalibration+0xf4>)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004a10:	e000      	b.n	8004a14 <SEN_EndAutoCalibration+0xac>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 8004a12:	bf00      	nop
		for(int i=0; i<SENSOR_NUM; i++) {
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b0d      	cmp	r3, #13
 8004a1e:	ddb4      	ble.n	800498a <SEN_EndAutoCalibration+0x22>
		}
	}
	free(calib_upper_adc);
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <SEN_EndAutoCalibration+0xec>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f009 fc6b 	bl	800e300 <free>
	free(calib_lower_adc);
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <SEN_EndAutoCalibration+0xf0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f009 fc66 	bl	800e300 <free>
	autocalib_status = 0;
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <SEN_EndAutoCalibration+0xe8>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	e000      	b.n	8004a3e <SEN_EndAutoCalibration+0xd6>
	if(autocalib_status == 0) return;
 8004a3c:	bf00      	nop
}
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bdb0      	pop	{r4, r5, r7, pc}
 8004a44:	f3af 8000 	nop.w
 8004a48:	9999999a 	.word	0x9999999a
 8004a4c:	3fd99999 	.word	0x3fd99999
 8004a50:	20000cc8 	.word	0x20000cc8
 8004a54:	20000cc0 	.word	0x20000cc0
 8004a58:	20000cc4 	.word	0x20000cc4
 8004a5c:	20000b74 	.word	0x20000b74

08004a60 <SEN_BlackLine>:

void SEN_BlackLine() {
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
	sensor_invert = 0;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <SEN_BlackLine+0x14>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000ba0 	.word	0x20000ba0

08004a78 <SEN_WhiteLine>:

void SEN_WhiteLine() {
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
	sensor_invert = 1;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <SEN_WhiteLine+0x14>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	20000ba0 	.word	0x20000ba0

08004a90 <SEN_Invert>:

void SEN_Invert() {
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
	sensor_invert = !sensor_invert;
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <SEN_Invert+0x24>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <SEN_Invert+0x24>)
 8004aa6:	701a      	strb	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000ba0 	.word	0x20000ba0

08004ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	4a0f      	ldr	r2, [pc, #60]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004acc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <HAL_MspInit+0x4c>)
 8004ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_MspInit+0x4c>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b0c:	e7fe      	b.n	8004b0c <NMI_Handler+0x4>

08004b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b12:	e7fe      	b.n	8004b12 <HardFault_Handler+0x4>

08004b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b18:	e7fe      	b.n	8004b18 <MemManage_Handler+0x4>

08004b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b1e:	e7fe      	b.n	8004b1e <BusFault_Handler+0x4>

08004b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b24:	e7fe      	b.n	8004b24 <UsageFault_Handler+0x4>

08004b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b26:	b480      	push	{r7}
 8004b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b2a:	bf00      	nop
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b42:	b480      	push	{r7}
 8004b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b46:	bf00      	nop
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b54:	f004 fada 	bl	800910c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b58:	bf00      	nop
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004b60:	4802      	ldr	r0, [pc, #8]	; (8004b6c <ADC_IRQHandler+0x10>)
 8004b62:	f004 fb5a 	bl	800921a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004b66:	bf00      	nop
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000518 	.word	0x20000518

08004b70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004b74:	4802      	ldr	r0, [pc, #8]	; (8004b80 <TIM6_DAC_IRQHandler+0x10>)
 8004b76:	f007 ff21 	bl	800c9bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000ea0 	.word	0x20000ea0

08004b84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004b88:	4802      	ldr	r0, [pc, #8]	; (8004b94 <DMA2_Stream0_IRQHandler+0x10>)
 8004b8a:	f005 fa61 	bl	800a050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000560 	.word	0x20000560

08004b98 <GetAction>:

uint8_t storage_flag = 0;

Plan_typedef plan;

Action_typedef GetAction(uint8_t index) {
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <GetAction+0x78>)
 8004ba8:	fba2 1203 	umull	r1, r2, r2, r3
 8004bac:	0952      	lsrs	r2, r2, #5
 8004bae:	2164      	movs	r1, #100	; 0x64
 8004bb0:	fb01 f202 	mul.w	r2, r1, r2
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <GetAction+0x7c>)
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3340      	adds	r3, #64	; 0x40
 8004bca:	83fb      	strh	r3, [r7, #30]
	while(!EEP_ReadyToWrite());
 8004bcc:	bf00      	nop
 8004bce:	f7fd f8fb 	bl	8001dc8 <EEP_ReadyToWrite>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0fa      	beq.n	8004bce <GetAction+0x36>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8004bd8:	f107 010c 	add.w	r1, r7, #12
 8004bdc:	8bfb      	ldrh	r3, [r7, #30]
 8004bde:	2210      	movs	r2, #16
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd f8cb 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)&plan_active, buff, sizeof(Action_typedef));
 8004be6:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <GetAction+0x80>)
 8004be8:	461c      	mov	r4, r3
 8004bea:	f107 030c 	add.w	r3, r7, #12
 8004bee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return plan_active;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a07      	ldr	r2, [pc, #28]	; (8004c18 <GetAction+0x80>)
 8004bfa:	461c      	mov	r4, r3
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c00:	6020      	str	r0, [r4, #0]
 8004c02:	6061      	str	r1, [r4, #4]
 8004c04:	60a2      	str	r2, [r4, #8]
}
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	3724      	adds	r7, #36	; 0x24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	51eb851f 	.word	0x51eb851f
 8004c14:	20000cca 	.word	0x20000cca
 8004c18:	20000d44 	.word	0x20000d44

08004c1c <SetAction>:

void SetAction(Action_typedef act, uint8_t index) {
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b08b      	sub	sp, #44	; 0x2c
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	1d3c      	adds	r4, r7, #4
 8004c24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c28:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <SetAction+0x74>)
 8004c2e:	fba2 1203 	umull	r1, r2, r2, r3
 8004c32:	0952      	lsrs	r2, r2, #5
 8004c34:	2164      	movs	r1, #100	; 0x64
 8004c36:	fb01 f202 	mul.w	r2, r1, r2
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	plan_active = act;
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <SetAction+0x78>)
 8004c40:	461c      	mov	r4, r3
 8004c42:	1d3b      	adds	r3, r7, #4
 8004c44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <SetAction+0x7c>)
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3340      	adds	r3, #64	; 0x40
 8004c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&plan_active, sizeof(Action_typedef));
 8004c60:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <SetAction+0x78>)
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004c6c:	bf00      	nop
 8004c6e:	f7fd f8ab 	bl	8001dc8 <EEP_ReadyToWrite>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0fa      	beq.n	8004c6e <SetAction+0x52>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8004c78:	f107 0114 	add.w	r1, r7, #20
 8004c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c7e:	2210      	movs	r2, #16
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fd f833 	bl	8001cec <EEP_WriteMem>
}
 8004c86:	bf00      	nop
 8004c88:	372c      	adds	r7, #44	; 0x2c
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	51eb851f 	.word	0x51eb851f
 8004c94:	20000d44 	.word	0x20000d44
 8004c98:	20000cca 	.word	0x20000cca

08004c9c <Storage_ResetPlan>:

void Storage_ResetPlan() {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b0b0      	sub	sp, #192	; 0xc0
 8004ca0:	af00      	add	r7, sp, #0
	Plan_typedef temp;
	temp.id = num_plan | 0x80;
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <Storage_ResetPlan+0xd4>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	temp.speed = 40;
 8004cb0:	2328      	movs	r3, #40	; 0x28
 8004cb2:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	temp.num_action = 100;
 8004cb6:	2364      	movs	r3, #100	; 0x64
 8004cb8:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	temp.turn_speed = 10;
 8004cbc:	230a      	movs	r3, #10
 8004cbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	memset(temp.checkpoint, 0, NUM_CHECKPOINT);
 8004cc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004cc6:	3302      	adds	r3, #2
 8004cc8:	2214      	movs	r2, #20
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f009 fb2d 	bl	800e32c <memset>
	temp.kpid[0] = 4.71428;
 8004cd2:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <Storage_ResetPlan+0xd8>)
 8004cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	temp.kpid[1] = 0;
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	temp.kpid[2] = 0;
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	temp.status_pid = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
//	temp.acc = 1;

	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)&temp, sizeof(Plan_typedef));
 8004cee:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8004cf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004cf6:	2228      	movs	r2, #40	; 0x28
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f009 fb09 	bl	800e310 <memcpy>

	uint16_t page_plan = num_plan_addr/PAGE_SIZE;
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <Storage_ResetPlan+0xdc>)
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
//	uint16_t page_offset = DEF_ACTION_PER_PLAN/ACTION_PER_PAGE+1;

	while(!EEP_ReadyToWrite());
 8004d08:	bf00      	nop
 8004d0a:	f7fd f85d 	bl	8001dc8 <EEP_ReadyToWrite>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0fa      	beq.n	8004d0a <Storage_ResetPlan+0x6e>
	EEP_WritePage(page_plan, buff);
 8004d14:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d18:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fc ffc0 	bl	8001ca4 <EEP_WritePage>

	Action_typedef action_temp;
	uint8_t action_buff[PAGE_SIZE];

	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d2a:	e018      	b.n	8004d5e <Storage_ResetPlan+0xc2>

		action_temp = plan_default;
 8004d2c:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <Storage_ResetPlan+0xe0>)
 8004d2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d32:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d34:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		memcpy(action_buff, (uint8_t*)&action_temp, sizeof(Action_typedef));
 8004d38:	1d3b      	adds	r3, r7, #4
 8004d3a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d40:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		SetAction(action_temp, i);
 8004d44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004d4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d50:	f7ff ff64 	bl	8004c1c <SetAction>
	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8004d54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d58:	3301      	adds	r3, #1
 8004d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d62:	2b63      	cmp	r3, #99	; 0x63
 8004d64:	dde2      	ble.n	8004d2c <Storage_ResetPlan+0x90>
	}
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	37c0      	adds	r7, #192	; 0xc0
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000cc9 	.word	0x20000cc9
 8004d74:	4096db62 	.word	0x4096db62
 8004d78:	20000cca 	.word	0x20000cca
 8004d7c:	08011574 	.word	0x08011574

08004d80 <Storage_ResetMemory>:

void Storage_ResetMemory() {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b094      	sub	sp, #80	; 0x50
 8004d84:	af00      	add	r7, sp, #0
	uint8_t init_buff[PAGE_SIZE];
	memset(init_buff, 0, PAGE_SIZE);
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	2240      	movs	r2, #64	; 0x40
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f009 facd 	bl	800e32c <memset>
	init_buff[INIT_MEM_ID_ADDR] = INIT_MEM_ID;
 8004d92:	23ab      	movs	r3, #171	; 0xab
 8004d94:	717b      	strb	r3, [r7, #5]
	init_buff[INIT_MEM_NUM_PLAN_ADDR] = INIT_MEM_NUM_PLAN;
 8004d96:	230f      	movs	r3, #15
 8004d98:	71fb      	strb	r3, [r7, #7]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	723b      	strb	r3, [r7, #8]
	uint16_t* temp = (uint16_t*)&init_buff[PTR_MEMORY_ADDR_START];
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	3310      	adds	r3, #16
 8004da2:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8004da4:	2300      	movs	r3, #0
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da8:	e012      	b.n	8004dd0 <Storage_ResetMemory+0x50>
		temp[i] = (((i*ACTION_SIZE*(DEF_ACTION_PER_PLAN+4))/PAGE_SIZE))*PAGE_SIZE+DATA_ADDR_START;
 8004daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	0052      	lsls	r2, r2, #1
 8004db2:	441a      	add	r2, r3
 8004db4:	0092      	lsls	r2, r2, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	01db      	lsls	r3, r3, #7
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3240      	adds	r2, #64	; 0x40
 8004dc6:	b292      	uxth	r2, r2
 8004dc8:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	3301      	adds	r3, #1
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd2:	2b0e      	cmp	r3, #14
 8004dd4:	dde9      	ble.n	8004daa <Storage_ResetMemory+0x2a>
	}
	temp = (uint16_t*)&init_buff[ADC_TR_ADDR_START];
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	3320      	adds	r3, #32
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<SENSOR_NUM; i++) {
 8004ddc:	2300      	movs	r3, #0
 8004dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8004de0:	e009      	b.n	8004df6 <Storage_ResetMemory+0x76>
		temp[i] = ADC_MAX/2;
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de8:	4413      	add	r3, r2
 8004dea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004dee:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df2:	3301      	adds	r3, #1
 8004df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df8:	2b0d      	cmp	r3, #13
 8004dfa:	ddf2      	ble.n	8004de2 <Storage_ResetMemory+0x62>
	}
	while(!EEP_ReadyToWrite());
 8004dfc:	bf00      	nop
 8004dfe:	f7fc ffe3 	bl	8001dc8 <EEP_ReadyToWrite>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0fa      	beq.n	8004dfe <Storage_ResetMemory+0x7e>
	EEP_WritePage(0x0000, init_buff);
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f7fc ff49 	bl	8001ca4 <EEP_WritePage>
}
 8004e12:	bf00      	nop
 8004e14:	3750      	adds	r7, #80	; 0x50
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <Storage_Init>:

uint8_t Storage_Init() {
 8004e1c:	b5b0      	push	{r4, r5, r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8004e20:	bf00      	nop
 8004e22:	f7fc ffd1 	bl	8001dc8 <EEP_ReadyToWrite>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0fa      	beq.n	8004e22 <Storage_Init+0x6>
	EEP_ReadPage(INIT_ADDR_START/PAGE_SIZE, init_buff);
 8004e2c:	4913      	ldr	r1, [pc, #76]	; (8004e7c <Storage_Init+0x60>)
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7fc ff80 	bl	8001d34 <EEP_ReadPage>
	if(init_buff[INIT_MEM_ID_ADDR] != INIT_MEM_ID) return 0;
 8004e34:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <Storage_Init+0x60>)
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2bab      	cmp	r3, #171	; 0xab
 8004e3a:	d001      	beq.n	8004e40 <Storage_Init+0x24>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e01b      	b.n	8004e78 <Storage_Init+0x5c>
	num_plan = init_buff[INIT_MEM_LAST_PLAN_ADDR];
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <Storage_Init+0x60>)
 8004e42:	791a      	ldrb	r2, [r3, #4]
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <Storage_Init+0x64>)
 8004e46:	701a      	strb	r2, [r3, #0]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <Storage_Init+0x64>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <Storage_Init+0x60>)
 8004e52:	4413      	add	r3, r2
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <Storage_Init+0x68>)
 8004e58:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004e5a:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <Storage_Init+0x6c>)
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <Storage_Init+0x60>)
 8004e5e:	4615      	mov	r5, r2
 8004e60:	f103 0420 	add.w	r4, r3, #32
 8004e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e66:	6028      	str	r0, [r5, #0]
 8004e68:	6069      	str	r1, [r5, #4]
 8004e6a:	60aa      	str	r2, [r5, #8]
 8004e6c:	60eb      	str	r3, [r5, #12]
 8004e6e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004e70:	6128      	str	r0, [r5, #16]
 8004e72:	6169      	str	r1, [r5, #20]
 8004e74:	61aa      	str	r2, [r5, #24]
	return 1;
 8004e76:	2301      	movs	r3, #1
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e7c:	20000cd0 	.word	0x20000cd0
 8004e80:	20000cc9 	.word	0x20000cc9
 8004e84:	20000cca 	.word	0x20000cca
 8004e88:	20000b74 	.word	0x20000b74

08004e8c <Storage_PlanInit>:

uint8_t Storage_PlanInit() {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b092      	sub	sp, #72	; 0x48
 8004e90:	af00      	add	r7, sp, #0
	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <Storage_PlanInit+0x54>)
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(!EEP_ReadyToWrite());
 8004e9e:	bf00      	nop
 8004ea0:	f7fc ff92 	bl	8001dc8 <EEP_ReadyToWrite>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0fa      	beq.n	8004ea0 <Storage_PlanInit+0x14>
	EEP_ReadPage(plan_page, buff);
 8004eaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	1d3a      	adds	r2, r7, #4
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fc ff3d 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	2228      	movs	r2, #40	; 0x28
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4808      	ldr	r0, [pc, #32]	; (8004ee4 <Storage_PlanInit+0x58>)
 8004ec2:	f009 fa25 	bl	800e310 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <Storage_PlanInit+0x58>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	09db      	lsrs	r3, r3, #7
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d001      	beq.n	8004ed6 <Storage_PlanInit+0x4a>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <Storage_PlanInit+0x4c>
	return 1;
 8004ed6:	2301      	movs	r3, #1
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3748      	adds	r7, #72	; 0x48
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20000cca 	.word	0x20000cca
 8004ee4:	20000d54 	.word	0x20000d54

08004ee8 <Storage_GetADCThreshold>:

void Storage_GetADCThreshold() {
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8004eec:	bf00      	nop
 8004eee:	f7fc ff6b 	bl	8001dc8 <EEP_ReadyToWrite>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0fa      	beq.n	8004eee <Storage_GetADCThreshold+0x6>
	EEP_ReadMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004ef8:	221c      	movs	r2, #28
 8004efa:	490a      	ldr	r1, [pc, #40]	; (8004f24 <Storage_GetADCThreshold+0x3c>)
 8004efc:	2020      	movs	r0, #32
 8004efe:	f7fc ff3d 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004f02:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <Storage_GetADCThreshold+0x40>)
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <Storage_GetADCThreshold+0x44>)
 8004f06:	4615      	mov	r5, r2
 8004f08:	f103 0420 	add.w	r4, r3, #32
 8004f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f0e:	6028      	str	r0, [r5, #0]
 8004f10:	6069      	str	r1, [r5, #4]
 8004f12:	60aa      	str	r2, [r5, #8]
 8004f14:	60eb      	str	r3, [r5, #12]
 8004f16:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004f18:	6128      	str	r0, [r5, #16]
 8004f1a:	6169      	str	r1, [r5, #20]
 8004f1c:	61aa      	str	r2, [r5, #24]
}
 8004f1e:	bf00      	nop
 8004f20:	bdb0      	pop	{r4, r5, r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000cf0 	.word	0x20000cf0
 8004f28:	20000b74 	.word	0x20000b74
 8004f2c:	20000cd0 	.word	0x20000cd0

08004f30 <Storage_SetADCThreshold>:

void Storage_SetADCThreshold() {
 8004f30:	b5b0      	push	{r4, r5, r7, lr}
 8004f32:	af00      	add	r7, sp, #0
	memcpy(&init_buff[ADC_TR_ADDR_START], (uint8_t*)threshold_sensor, SENSOR_NUM*2);
 8004f34:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <Storage_SetADCThreshold+0x3c>)
 8004f36:	4a0e      	ldr	r2, [pc, #56]	; (8004f70 <Storage_SetADCThreshold+0x40>)
 8004f38:	f103 0420 	add.w	r4, r3, #32
 8004f3c:	4615      	mov	r5, r2
 8004f3e:	6828      	ldr	r0, [r5, #0]
 8004f40:	6869      	ldr	r1, [r5, #4]
 8004f42:	68aa      	ldr	r2, [r5, #8]
 8004f44:	68eb      	ldr	r3, [r5, #12]
 8004f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f48:	6928      	ldr	r0, [r5, #16]
 8004f4a:	6969      	ldr	r1, [r5, #20]
 8004f4c:	69aa      	ldr	r2, [r5, #24]
 8004f4e:	c407      	stmia	r4!, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004f50:	bf00      	nop
 8004f52:	f7fc ff39 	bl	8001dc8 <EEP_ReadyToWrite>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0fa      	beq.n	8004f52 <Storage_SetADCThreshold+0x22>
	EEP_WriteMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004f5c:	221c      	movs	r2, #28
 8004f5e:	4905      	ldr	r1, [pc, #20]	; (8004f74 <Storage_SetADCThreshold+0x44>)
 8004f60:	2020      	movs	r0, #32
 8004f62:	f7fc fec3 	bl	8001cec <EEP_WriteMem>
}
 8004f66:	bf00      	nop
 8004f68:	bdb0      	pop	{r4, r5, r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000cd0 	.word	0x20000cd0
 8004f70:	20000b74 	.word	0x20000b74
 8004f74:	20000cf0 	.word	0x20000cf0

08004f78 <Storage_GetPlan>:

uint8_t Storage_GetPlan(uint8_t n_plan) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b094      	sub	sp, #80	; 0x50
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
	num_plan = n_plan;
 8004f82:	4a22      	ldr	r2, [pc, #136]	; (800500c <Storage_GetPlan+0x94>)
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	7013      	strb	r3, [r2, #0]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = num_plan;
 8004f88:	4b20      	ldr	r3, [pc, #128]	; (800500c <Storage_GetPlan+0x94>)
 8004f8a:	781a      	ldrb	r2, [r3, #0]
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <Storage_GetPlan+0x98>)
 8004f8e:	711a      	strb	r2, [r3, #4]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004f90:	4b1e      	ldr	r3, [pc, #120]	; (800500c <Storage_GetPlan+0x94>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <Storage_GetPlan+0x98>)
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881a      	ldrh	r2, [r3, #0]
 8004f9e:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <Storage_GetPlan+0x9c>)
 8004fa0:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 8004fa2:	bf00      	nop
 8004fa4:	f7fc ff10 	bl	8001dc8 <EEP_ReadyToWrite>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0fa      	beq.n	8004fa4 <Storage_GetPlan+0x2c>
	EEP_WriteMem(INIT_MEM_LAST_PLAN_ADDR, &num_plan, 1);
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4916      	ldr	r1, [pc, #88]	; (800500c <Storage_GetPlan+0x94>)
 8004fb2:	2004      	movs	r0, #4
 8004fb4:	f7fc fe9a 	bl	8001cec <EEP_WriteMem>

	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <Storage_GetPlan+0x9c>)
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	099b      	lsrs	r3, r3, #6
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(!EEP_ReadyToWrite());
 8004fc4:	bf00      	nop
 8004fc6:	f7fc feff 	bl	8001dc8 <EEP_ReadyToWrite>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0fa      	beq.n	8004fc6 <Storage_GetPlan+0x4e>
	EEP_ReadPage(plan_page, buff);
 8004fd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f107 020c 	add.w	r2, r7, #12
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fc fea9 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8004fe2:	f107 030c 	add.w	r3, r7, #12
 8004fe6:	2228      	movs	r2, #40	; 0x28
 8004fe8:	4619      	mov	r1, r3
 8004fea:	480b      	ldr	r0, [pc, #44]	; (8005018 <Storage_GetPlan+0xa0>)
 8004fec:	f009 f990 	bl	800e310 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8004ff0:	4b09      	ldr	r3, [pc, #36]	; (8005018 <Storage_GetPlan+0xa0>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	09db      	lsrs	r3, r3, #7
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d001      	beq.n	8005000 <Storage_GetPlan+0x88>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e000      	b.n	8005002 <Storage_GetPlan+0x8a>
	return 1;
 8005000:	2301      	movs	r3, #1
}
 8005002:	4618      	mov	r0, r3
 8005004:	3750      	adds	r7, #80	; 0x50
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000cc9 	.word	0x20000cc9
 8005010:	20000cd0 	.word	0x20000cd0
 8005014:	20000cca 	.word	0x20000cca
 8005018:	20000d54 	.word	0x20000d54

0800501c <Storage_SetPlanOther>:

void Storage_SetPlanOther(Plan_typedef* ptr_plan, uint8_t n_plan) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b094      	sub	sp, #80	; 0x50
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	3308      	adds	r3, #8
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4a12      	ldr	r2, [pc, #72]	; (8005078 <Storage_SetPlanOther+0x5c>)
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t plan_page = (n_plan_addr)/PAGE_SIZE;
 8005038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	b29b      	uxth	r3, r3
 8005040:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)ptr_plan, sizeof(Plan_typedef));
 8005044:	f107 030c 	add.w	r3, r7, #12
 8005048:	2228      	movs	r2, #40	; 0x28
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4618      	mov	r0, r3
 800504e:	f009 f95f 	bl	800e310 <memcpy>
	while(!EEP_ReadyToWrite());
 8005052:	bf00      	nop
 8005054:	f7fc feb8 	bl	8001dc8 <EEP_ReadyToWrite>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0fa      	beq.n	8005054 <Storage_SetPlanOther+0x38>
	EEP_WritePage(plan_page, buff);
 800505e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005062:	b29b      	uxth	r3, r3
 8005064:	f107 020c 	add.w	r2, r7, #12
 8005068:	4611      	mov	r1, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f7fc fe1a 	bl	8001ca4 <EEP_WritePage>
}
 8005070:	bf00      	nop
 8005072:	3750      	adds	r7, #80	; 0x50
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000cd0 	.word	0x20000cd0

0800507c <Storage_SetCheckpoint>:
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
	while(!EEP_ReadyToWrite());
	EEP_ReadMem(plan_page+offset, plan.checkpoint, NUM_CHECKPOINT);
}

void Storage_SetCheckpoint() {
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.checkpoint - (uint8_t*)&plan;
 8005082:	2302      	movs	r3, #2
 8005084:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005086:	bf00      	nop
 8005088:	f7fc fe9e 	bl	8001dc8 <EEP_ReadyToWrite>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0fa      	beq.n	8005088 <Storage_SetCheckpoint+0xc>
	EEP_WriteMem(num_plan_addr+offset, plan.checkpoint, NUM_CHECKPOINT);
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	b29a      	uxth	r2, r3
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <Storage_SetCheckpoint+0x34>)
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	4413      	add	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	2214      	movs	r2, #20
 80050a0:	4904      	ldr	r1, [pc, #16]	; (80050b4 <Storage_SetCheckpoint+0x38>)
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fe22 	bl	8001cec <EEP_WriteMem>
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000cca 	.word	0x20000cca
 80050b4:	20000d56 	.word	0x20000d56

080050b8 <Storage_SetPID>:

void Storage_SetPID() {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.kpid - (uint8_t*)&plan;
 80050be:	2318      	movs	r3, #24
 80050c0:	73fb      	strb	r3, [r7, #15]
	uint8_t buff[3*sizeof(float)+1];
	memcpy(buff, (uint8_t*)plan.kpid, 3*sizeof(float));
 80050c2:	463b      	mov	r3, r7
 80050c4:	220c      	movs	r2, #12
 80050c6:	490e      	ldr	r1, [pc, #56]	; (8005100 <Storage_SetPID+0x48>)
 80050c8:	4618      	mov	r0, r3
 80050ca:	f009 f921 	bl	800e310 <memcpy>
	buff[3*sizeof(float)] = plan.status_pid;
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <Storage_SetPID+0x4c>)
 80050d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050d4:	733b      	strb	r3, [r7, #12]
	while(!EEP_ReadyToWrite());
 80050d6:	bf00      	nop
 80050d8:	f7fc fe76 	bl	8001dc8 <EEP_ReadyToWrite>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0fa      	beq.n	80050d8 <Storage_SetPID+0x20>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.kpid, 3*sizeof(float)+1);
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <Storage_SetPID+0x50>)
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	4413      	add	r3, r2
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	220d      	movs	r2, #13
 80050f0:	4903      	ldr	r1, [pc, #12]	; (8005100 <Storage_SetPID+0x48>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fc fdfa 	bl	8001cec <EEP_WriteMem>

//	offset = (uint8_t*)&plan.status_pid - (uint8_t*)&plan;
//	while(!EEP_ReadyToWrite());
//	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.status_pid, 1);
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20000d6c 	.word	0x20000d6c
 8005104:	20000d54 	.word	0x20000d54
 8005108:	20000cca 	.word	0x20000cca

0800510c <Storage_SetSpeed>:

void Storage_SetSpeed() {
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.speed - (uint8_t*)&plan;
 8005112:	2316      	movs	r3, #22
 8005114:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005116:	bf00      	nop
 8005118:	f7fc fe56 	bl	8001dc8 <EEP_ReadyToWrite>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0fa      	beq.n	8005118 <Storage_SetSpeed+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.speed, 2);
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	b29a      	uxth	r2, r3
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <Storage_SetSpeed+0x34>)
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	4413      	add	r3, r2
 800512c:	b29b      	uxth	r3, r3
 800512e:	2202      	movs	r2, #2
 8005130:	4904      	ldr	r1, [pc, #16]	; (8005144 <Storage_SetSpeed+0x38>)
 8005132:	4618      	mov	r0, r3
 8005134:	f7fc fdda 	bl	8001cec <EEP_WriteMem>
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000cca 	.word	0x20000cca
 8005144:	20000d6a 	.word	0x20000d6a

08005148 <GetActionOther>:

Action_typedef GetActionOther(uint8_t plan, uint8_t index) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
 8005154:	4613      	mov	r3, r2
 8005156:	70bb      	strb	r3, [r7, #2]
	index = index%DEF_ACTION_PER_PLAN;
 8005158:	78bb      	ldrb	r3, [r7, #2]
 800515a:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <GetActionOther+0x78>)
 800515c:	fba2 1203 	umull	r1, r2, r2, r3
 8005160:	0952      	lsrs	r2, r2, #5
 8005162:	2164      	movs	r1, #100	; 0x64
 8005164:	fb01 f202 	mul.w	r2, r1, r2
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	70bb      	strb	r3, [r7, #2]
	uint16_t addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+plan*2];
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	3308      	adds	r3, #8
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <GetActionOther+0x7c>)
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	83fb      	strh	r3, [r7, #30]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 800517a:	78bb      	ldrb	r3, [r7, #2]
 800517c:	b29b      	uxth	r3, r3
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	b29a      	uxth	r2, r3
 8005182:	8bfb      	ldrh	r3, [r7, #30]
 8005184:	4413      	add	r3, r2
 8005186:	b29b      	uxth	r3, r3
 8005188:	3340      	adds	r3, #64	; 0x40
 800518a:	83bb      	strh	r3, [r7, #28]
	while(!EEP_ReadyToWrite());
 800518c:	bf00      	nop
 800518e:	f7fc fe1b 	bl	8001dc8 <EEP_ReadyToWrite>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0fa      	beq.n	800518e <GetActionOther+0x46>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8005198:	f107 010c 	add.w	r1, r7, #12
 800519c:	8bbb      	ldrh	r3, [r7, #28]
 800519e:	2210      	movs	r2, #16
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fc fdeb 	bl	8001d7c <EEP_ReadMem>
	return *(Action_typedef*)&buff;
 80051a6:	f107 020c 	add.w	r2, r7, #12
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6810      	ldr	r0, [r2, #0]
 80051ae:	6851      	ldr	r1, [r2, #4]
 80051b0:	6892      	ldr	r2, [r2, #8]
 80051b2:	6018      	str	r0, [r3, #0]
 80051b4:	6059      	str	r1, [r3, #4]
 80051b6:	609a      	str	r2, [r3, #8]
}
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	51eb851f 	.word	0x51eb851f
 80051c4:	20000cd0 	.word	0x20000cd0

080051c8 <SetActionOther>:

void SetActionOther(Action_typedef act, uint8_t index) {
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b08b      	sub	sp, #44	; 0x2c
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	1d3c      	adds	r4, r7, #4
 80051d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051d4:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	4a14      	ldr	r2, [pc, #80]	; (800522c <SetActionOther+0x64>)
 80051da:	fba2 1203 	umull	r1, r2, r2, r3
 80051de:	0952      	lsrs	r2, r2, #5
 80051e0:	2164      	movs	r1, #100	; 0x64
 80051e2:	fb01 f202 	mul.w	r2, r1, r2
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <SetActionOther+0x68>)
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	4413      	add	r3, r2
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3340      	adds	r3, #64	; 0x40
 80051fc:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 80051fe:	f107 0314 	add.w	r3, r7, #20
 8005202:	1d3a      	adds	r2, r7, #4
 8005204:	ca07      	ldmia	r2, {r0, r1, r2}
 8005206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 800520a:	bf00      	nop
 800520c:	f7fc fddc 	bl	8001dc8 <EEP_ReadyToWrite>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0fa      	beq.n	800520c <SetActionOther+0x44>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005216:	f107 0114 	add.w	r1, r7, #20
 800521a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800521c:	2210      	movs	r2, #16
 800521e:	4618      	mov	r0, r3
 8005220:	f7fc fd64 	bl	8001cec <EEP_WriteMem>
}
 8005224:	bf00      	nop
 8005226:	372c      	adds	r7, #44	; 0x2c
 8005228:	46bd      	mov	sp, r7
 800522a:	bd90      	pop	{r4, r7, pc}
 800522c:	51eb851f 	.word	0x51eb851f
 8005230:	20000cca 	.word	0x20000cca

08005234 <SetActionOther2>:

void SetActionOther2(uint8_t n_plan, Action_typedef act, uint8_t index) {
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b08b      	sub	sp, #44	; 0x2c
 8005238:	af00      	add	r7, sp, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4638      	mov	r0, r7
 800523e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005242:	4623      	mov	r3, r4
 8005244:	73fb      	strb	r3, [r7, #15]
	index = index%DEF_ACTION_PER_PLAN;
 8005246:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800524a:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <SetActionOther2+0x7c>)
 800524c:	fba2 1203 	umull	r1, r2, r2, r3
 8005250:	0952      	lsrs	r2, r2, #5
 8005252:	2164      	movs	r1, #100	; 0x64
 8005254:	fb01 f202 	mul.w	r2, r1, r2
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t buff[ACTION_SIZE];
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	3308      	adds	r3, #8
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4a13      	ldr	r2, [pc, #76]	; (80052b4 <SetActionOther2+0x80>)
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t act_addr = n_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 800526c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005270:	b29b      	uxth	r3, r3
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	b29a      	uxth	r2, r3
 8005276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005278:	4413      	add	r3, r2
 800527a:	b29b      	uxth	r3, r3
 800527c:	3340      	adds	r3, #64	; 0x40
 800527e:	84bb      	strh	r3, [r7, #36]	; 0x24
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8005280:	f107 0314 	add.w	r3, r7, #20
 8005284:	463a      	mov	r2, r7
 8005286:	ca07      	ldmia	r2, {r0, r1, r2}
 8005288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 800528c:	bf00      	nop
 800528e:	f7fc fd9b 	bl	8001dc8 <EEP_ReadyToWrite>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0fa      	beq.n	800528e <SetActionOther2+0x5a>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005298:	f107 0114 	add.w	r1, r7, #20
 800529c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800529e:	2210      	movs	r2, #16
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fc fd23 	bl	8001cec <EEP_WriteMem>
}
 80052a6:	bf00      	nop
 80052a8:	372c      	adds	r7, #44	; 0x2c
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd90      	pop	{r4, r7, pc}
 80052ae:	bf00      	nop
 80052b0:	51eb851f 	.word	0x51eb851f
 80052b4:	20000cd0 	.word	0x20000cd0

080052b8 <GetActionSequence>:

uint8_t GetActionSequence() {
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
//	return 0; //temporary disable
	uint8_t retval;
	if(!(storage_flag & STO_FLAG_BUFF_EMPTY)) {
 80052be:	4b21      	ldr	r3, [pc, #132]	; (8005344 <GetActionSequence+0x8c>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d132      	bne.n	8005330 <GetActionSequence+0x78>

		if(plan_buffer_i>=BUFFER_SIZE-1) plan_buffer_i=0; else plan_buffer_i++;
 80052ca:	4b1f      	ldr	r3, [pc, #124]	; (8005348 <GetActionSequence+0x90>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d903      	bls.n	80052da <GetActionSequence+0x22>
 80052d2:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <GetActionSequence+0x90>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e005      	b.n	80052e6 <GetActionSequence+0x2e>
 80052da:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <GetActionSequence+0x90>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4b19      	ldr	r3, [pc, #100]	; (8005348 <GetActionSequence+0x90>)
 80052e4:	701a      	strb	r2, [r3, #0]

		plan_active = plan_buffer[plan_buffer_i];
 80052e6:	4b18      	ldr	r3, [pc, #96]	; (8005348 <GetActionSequence+0x90>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4817      	ldr	r0, [pc, #92]	; (800534c <GetActionSequence+0x94>)
 80052ee:	4a18      	ldr	r2, [pc, #96]	; (8005350 <GetActionSequence+0x98>)
 80052f0:	460b      	mov	r3, r1
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	440b      	add	r3, r1
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80052fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if(plan_buffer_i == plan_buffer_f) {
 8005302:	4b11      	ldr	r3, [pc, #68]	; (8005348 <GetActionSequence+0x90>)
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	4b13      	ldr	r3, [pc, #76]	; (8005354 <GetActionSequence+0x9c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d106      	bne.n	800531c <GetActionSequence+0x64>
			storage_flag |= STO_FLAG_BUFF_EMPTY;
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <GetActionSequence+0x8c>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	f043 0302 	orr.w	r3, r3, #2
 8005316:	b2da      	uxtb	r2, r3
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <GetActionSequence+0x8c>)
 800531a:	701a      	strb	r2, [r3, #0]
		}
		storage_flag &=~STO_FLAG_BUFF_FULL;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <GetActionSequence+0x8c>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	b2da      	uxtb	r2, r3
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <GetActionSequence+0x8c>)
 8005328:	701a      	strb	r2, [r3, #0]
		retval = 1;
 800532a:	2301      	movs	r3, #1
 800532c:	71fb      	strb	r3, [r7, #7]
 800532e:	e001      	b.n	8005334 <GetActionSequence+0x7c>
	} else {
		retval = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	71fb      	strb	r3, [r7, #7]
	}

	return retval;
 8005334:	79fb      	ldrb	r3, [r7, #7]
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000d50 	.word	0x20000d50
 8005348:	20000d42 	.word	0x20000d42
 800534c:	20000d44 	.word	0x20000d44
 8005350:	20000d10 	.word	0x20000d10
 8005354:	20000d41 	.word	0x20000d41

08005358 <GetActionSequenceRoutine>:

void GetActionSequenceRoutine() {
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 800535e:	4b3d      	ldr	r3, [pc, #244]	; (8005454 <GetActionSequenceRoutine+0xfc>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <GetActionSequenceRoutine+0x1e>
 8005366:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <GetActionSequenceRoutine+0x100>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	4b39      	ldr	r3, [pc, #228]	; (8005454 <GetActionSequenceRoutine+0xfc>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	3b01      	subs	r3, #1
 8005372:	429a      	cmp	r2, r3
 8005374:	d107      	bne.n	8005386 <GetActionSequenceRoutine+0x2e>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8005376:	4b37      	ldr	r3, [pc, #220]	; (8005454 <GetActionSequenceRoutine+0xfc>)
 8005378:	781b      	ldrb	r3, [r3, #0]
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 800537a:	2b00      	cmp	r3, #0
 800537c:	d15d      	bne.n	800543a <GetActionSequenceRoutine+0xe2>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 800537e:	4b36      	ldr	r3, [pc, #216]	; (8005458 <GetActionSequenceRoutine+0x100>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d059      	beq.n	800543a <GetActionSequenceRoutine+0xe2>
		if(buff_index < plan.num_action-2) {
 8005386:	4b35      	ldr	r3, [pc, #212]	; (800545c <GetActionSequenceRoutine+0x104>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	4b34      	ldr	r3, [pc, #208]	; (8005460 <GetActionSequenceRoutine+0x108>)
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	3b02      	subs	r3, #2
 8005392:	429a      	cmp	r2, r3
 8005394:	da49      	bge.n	800542a <GetActionSequenceRoutine+0xd2>
			buff_index++;
 8005396:	4b31      	ldr	r3, [pc, #196]	; (800545c <GetActionSequenceRoutine+0x104>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	4b2f      	ldr	r3, [pc, #188]	; (800545c <GetActionSequenceRoutine+0x104>)
 80053a0:	701a      	strb	r2, [r3, #0]
			uint8_t index_f = plan_buffer_f;
 80053a2:	4b2d      	ldr	r3, [pc, #180]	; (8005458 <GetActionSequenceRoutine+0x100>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	75fb      	strb	r3, [r7, #23]
			if(index_f>=BUFFER_SIZE-1) index_f=0; else index_f++;
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d902      	bls.n	80053b4 <GetActionSequenceRoutine+0x5c>
 80053ae:	2300      	movs	r3, #0
 80053b0:	75fb      	strb	r3, [r7, #23]
 80053b2:	e002      	b.n	80053ba <GetActionSequenceRoutine+0x62>
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	3301      	adds	r3, #1
 80053b8:	75fb      	strb	r3, [r7, #23]
			plan_buffer[index_f] = GetActionOther(num_plan, buff_index);
 80053ba:	4b2a      	ldr	r3, [pc, #168]	; (8005464 <GetActionSequenceRoutine+0x10c>)
 80053bc:	7819      	ldrb	r1, [r3, #0]
 80053be:	4b27      	ldr	r3, [pc, #156]	; (800545c <GetActionSequenceRoutine+0x104>)
 80053c0:	7818      	ldrb	r0, [r3, #0]
 80053c2:	7dfa      	ldrb	r2, [r7, #23]
 80053c4:	4c28      	ldr	r4, [pc, #160]	; (8005468 <GetActionSequenceRoutine+0x110>)
 80053c6:	4613      	mov	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441c      	add	r4, r3
 80053d0:	463b      	mov	r3, r7
 80053d2:	4602      	mov	r2, r0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff feb7 	bl	8005148 <GetActionOther>
 80053da:	4623      	mov	r3, r4
 80053dc:	463a      	mov	r2, r7
 80053de:	6810      	ldr	r0, [r2, #0]
 80053e0:	6851      	ldr	r1, [r2, #4]
 80053e2:	6892      	ldr	r2, [r2, #8]
 80053e4:	c307      	stmia	r3!, {r0, r1, r2}
			if(plan_buffer[index_f].act == 11) {
 80053e6:	7dfa      	ldrb	r2, [r7, #23]
 80053e8:	491f      	ldr	r1, [pc, #124]	; (8005468 <GetActionSequenceRoutine+0x110>)
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b0b      	cmp	r3, #11
 80053f8:	d10c      	bne.n	8005414 <GetActionSequenceRoutine+0xbc>
				buff_index = plan_buffer[index_f].act_value-1;
 80053fa:	7dfa      	ldrb	r2, [r7, #23]
 80053fc:	491a      	ldr	r1, [pc, #104]	; (8005468 <GetActionSequenceRoutine+0x110>)
 80053fe:	4613      	mov	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	3303      	adds	r3, #3
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	3b01      	subs	r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <GetActionSequenceRoutine+0x104>)
 8005412:	701a      	strb	r2, [r3, #0]
			}
			plan_buffer_f = index_f;
 8005414:	4a10      	ldr	r2, [pc, #64]	; (8005458 <GetActionSequenceRoutine+0x100>)
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	7013      	strb	r3, [r2, #0]
			storage_flag &=~STO_FLAG_BUFF_EMPTY;
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <GetActionSequenceRoutine+0x114>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f023 0302 	bic.w	r3, r3, #2
 8005422:	b2da      	uxtb	r2, r3
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <GetActionSequenceRoutine+0x114>)
 8005426:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005428:	e00f      	b.n	800544a <GetActionSequenceRoutine+0xf2>
		}
		else {
			storage_flag |= STO_FLAG_BUFF_END;
 800542a:	4b10      	ldr	r3, [pc, #64]	; (800546c <GetActionSequenceRoutine+0x114>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f043 0304 	orr.w	r3, r3, #4
 8005432:	b2da      	uxtb	r2, r3
 8005434:	4b0d      	ldr	r3, [pc, #52]	; (800546c <GetActionSequenceRoutine+0x114>)
 8005436:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005438:	e007      	b.n	800544a <GetActionSequenceRoutine+0xf2>
		}
	}
	else {
		storage_flag |= STO_FLAG_BUFF_FULL;
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <GetActionSequenceRoutine+0x114>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	b2da      	uxtb	r2, r3
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <GetActionSequenceRoutine+0x114>)
 8005446:	701a      	strb	r2, [r3, #0]
	}
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	bd90      	pop	{r4, r7, pc}
 8005452:	bf00      	nop
 8005454:	20000d42 	.word	0x20000d42
 8005458:	20000d41 	.word	0x20000d41
 800545c:	20000d40 	.word	0x20000d40
 8005460:	20000d54 	.word	0x20000d54
 8005464:	20000cc9 	.word	0x20000cc9
 8005468:	20000d10 	.word	0x20000d10
 800546c:	20000d50 	.word	0x20000d50

08005470 <GetActionSequenceInit>:

void GetActionSequenceInit(uint8_t num) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	75fb      	strb	r3, [r7, #23]
	GetAction(num);
 800547a:	463b      	mov	r3, r7
 800547c:	7dfa      	ldrb	r2, [r7, #23]
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fb89 	bl	8004b98 <GetAction>
	buff_index = num;
 8005486:	4a0e      	ldr	r2, [pc, #56]	; (80054c0 <GetActionSequenceInit+0x50>)
 8005488:	7dfb      	ldrb	r3, [r7, #23]
 800548a:	7013      	strb	r3, [r2, #0]
	plan_buffer_i = 0;
 800548c:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <GetActionSequenceInit+0x54>)
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
	plan_buffer_f = 0;
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <GetActionSequenceInit+0x58>)
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
	storage_flag = 0;
 8005498:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <GetActionSequenceInit+0x5c>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
	memset((uint8_t*)&plan_buffer, 0, sizeof(Action_typedef)*BUFFER_SIZE);
 800549e:	2230      	movs	r2, #48	; 0x30
 80054a0:	2100      	movs	r1, #0
 80054a2:	480b      	ldr	r0, [pc, #44]	; (80054d0 <GetActionSequenceInit+0x60>)
 80054a4:	f008 ff42 	bl	800e32c <memset>
	storage_flag |= STO_FLAG_BUFF_EMPTY;
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <GetActionSequenceInit+0x5c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <GetActionSequenceInit+0x5c>)
 80054b4:	701a      	strb	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000d40 	.word	0x20000d40
 80054c4:	20000d42 	.word	0x20000d42
 80054c8:	20000d41 	.word	0x20000d41
 80054cc:	20000d50 	.word	0x20000d50
 80054d0:	20000d10 	.word	0x20000d10

080054d4 <Storage_InsertAction>:

void Storage_InsertAction(uint8_t index) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=plan.num_action-1; i>index; i--) {
 80054de:	4b11      	ldr	r3, [pc, #68]	; (8005524 <Storage_InsertAction+0x50>)
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e014      	b.n	8005512 <Storage_InsertAction+0x3e>
		temp = GetActionOther(num_plan, i-1);
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <Storage_InsertAction+0x54>)
 80054ea:	7819      	ldrb	r1, [r3, #0]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	f107 0308 	add.w	r3, r7, #8
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fe25 	bl	8005148 <GetActionOther>
		SetActionOther(temp, i);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f107 0208 	add.w	r2, r7, #8
 8005506:	ca07      	ldmia	r2, {r0, r1, r2}
 8005508:	f7ff fe5e 	bl	80051c8 <SetActionOther>
	for(int i=plan.num_action-1; i>index; i--) {
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	3b01      	subs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	429a      	cmp	r2, r3
 8005518:	dce6      	bgt.n	80054e8 <Storage_InsertAction+0x14>
	}
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000d54 	.word	0x20000d54
 8005528:	20000cc9 	.word	0x20000cc9

0800552c <Storage_DeleteAction>:

void Storage_DeleteAction(uint8_t index) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=index; i<plan.num_action-1; i++) {
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e014      	b.n	8005566 <Storage_DeleteAction+0x3a>
		temp = GetActionOther(num_plan, i+1);
 800553c:	4b13      	ldr	r3, [pc, #76]	; (800558c <Storage_DeleteAction+0x60>)
 800553e:	7819      	ldrb	r1, [r3, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	3301      	adds	r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	f107 0308 	add.w	r3, r7, #8
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fdfb 	bl	8005148 <GetActionOther>
		SetActionOther(temp, i);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f107 0208 	add.w	r2, r7, #8
 800555a:	ca07      	ldmia	r2, {r0, r1, r2}
 800555c:	f7ff fe34 	bl	80051c8 <SetActionOther>
	for(int i=index; i<plan.num_action-1; i++) {
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3301      	adds	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <Storage_DeleteAction+0x64>)
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	3b01      	subs	r3, #1
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	429a      	cmp	r2, r3
 8005570:	dbe4      	blt.n	800553c <Storage_DeleteAction+0x10>
	}
	SetActionOther(plan_default, plan.num_action-1);
 8005572:	4b07      	ldr	r3, [pc, #28]	; (8005590 <Storage_DeleteAction+0x64>)
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	3b01      	subs	r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	4a06      	ldr	r2, [pc, #24]	; (8005594 <Storage_DeleteAction+0x68>)
 800557c:	ca07      	ldmia	r2, {r0, r1, r2}
 800557e:	f7ff fe23 	bl	80051c8 <SetActionOther>
}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000cc9 	.word	0x20000cc9
 8005590:	20000d54 	.word	0x20000d54
 8005594:	08011574 	.word	0x08011574

08005598 <Storage_CopyPlan>:

void Storage_CopyPlan(uint8_t plan_dest) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af02      	add	r7, sp, #8
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
	Storage_SetPlanOther(&plan, plan_dest);
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	4619      	mov	r1, r3
 80055a6:	4813      	ldr	r0, [pc, #76]	; (80055f4 <Storage_CopyPlan+0x5c>)
 80055a8:	f7ff fd38 	bl	800501c <Storage_SetPlanOther>
	Action_typedef temp;
	for(int i=0; i<plan.num_action; i++) {
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	e014      	b.n	80055dc <Storage_CopyPlan+0x44>
		temp = GetActionOther(num_plan, i);
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <Storage_CopyPlan+0x60>)
 80055b4:	7819      	ldrb	r1, [r3, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	f107 0308 	add.w	r3, r7, #8
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff fdc2 	bl	8005148 <GetActionOther>
		SetActionOther2(plan_dest, temp, i);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	79f8      	ldrb	r0, [r7, #7]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	f107 0308 	add.w	r3, r7, #8
 80055d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055d2:	f7ff fe2f 	bl	8005234 <SetActionOther2>
	for(int i=0; i<plan.num_action; i++) {
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	3301      	adds	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <Storage_CopyPlan+0x5c>)
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	461a      	mov	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4293      	cmp	r3, r2
 80055e6:	dbe4      	blt.n	80055b2 <Storage_CopyPlan+0x1a>
	}
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000d54 	.word	0x20000d54
 80055f8:	20000cc9 	.word	0x20000cc9

080055fc <Storage_CleanInit>:

void Storage_CleanInit() {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b092      	sub	sp, #72	; 0x48
 8005600:	af00      	add	r7, sp, #0
	uint8_t ok[PAGE_SIZE];
	memset(ok, 0, PAGE_SIZE);
 8005602:	1d3b      	adds	r3, r7, #4
 8005604:	2240      	movs	r2, #64	; 0x40
 8005606:	2100      	movs	r1, #0
 8005608:	4618      	mov	r0, r3
 800560a:	f008 fe8f 	bl	800e32c <memset>
	for(int i=0; i<PAGE_NUM; i++) {
 800560e:	2300      	movs	r3, #0
 8005610:	647b      	str	r3, [r7, #68]	; 0x44
 8005612:	e00f      	b.n	8005634 <Storage_CleanInit+0x38>
		while(!EEP_ReadyToWrite());
 8005614:	bf00      	nop
 8005616:	f7fc fbd7 	bl	8001dc8 <EEP_ReadyToWrite>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0fa      	beq.n	8005616 <Storage_CleanInit+0x1a>
		EEP_WritePage(i, ok);
 8005620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005622:	b29b      	uxth	r3, r3
 8005624:	1d3a      	adds	r2, r7, #4
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f7fc fb3b 	bl	8001ca4 <EEP_WritePage>
	for(int i=0; i<PAGE_NUM; i++) {
 800562e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005630:	3301      	adds	r3, #1
 8005632:	647b      	str	r3, [r7, #68]	; 0x44
 8005634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563a:	dbeb      	blt.n	8005614 <Storage_CleanInit+0x18>
	}
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	3748      	adds	r7, #72	; 0x48
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0
  return 1;
 800564a:	2301      	movs	r3, #1
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <_kill>:

int _kill(int pid, int sig)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005660:	f008 fe1c 	bl	800e29c <__errno>
 8005664:	4603      	mov	r3, r0
 8005666:	2216      	movs	r2, #22
 8005668:	601a      	str	r2, [r3, #0]
  return -1;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <_exit>:

void _exit (int status)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800567e:	f04f 31ff 	mov.w	r1, #4294967295
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ffe7 	bl	8005656 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005688:	e7fe      	b.n	8005688 <_exit+0x12>

0800568a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e00a      	b.n	80056b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800569c:	f3af 8000 	nop.w
 80056a0:	4601      	mov	r1, r0
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	60ba      	str	r2, [r7, #8]
 80056a8:	b2ca      	uxtb	r2, r1
 80056aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3301      	adds	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	dbf0      	blt.n	800569c <_read+0x12>
  }

  return len;
 80056ba:	687b      	ldr	r3, [r7, #4]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e009      	b.n	80056ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	60ba      	str	r2, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	3301      	adds	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	dbf1      	blt.n	80056d6 <_write+0x12>
  }
  return len;
 80056f2:	687b      	ldr	r3, [r7, #4]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <_close>:

int _close(int file)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005724:	605a      	str	r2, [r3, #4]
  return 0;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <_isatty>:

int _isatty(int file)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800573c:	2301      	movs	r3, #1
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800576c:	4a14      	ldr	r2, [pc, #80]	; (80057c0 <_sbrk+0x5c>)
 800576e:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <_sbrk+0x60>)
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005778:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <_sbrk+0x64>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005780:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <_sbrk+0x64>)
 8005782:	4a12      	ldr	r2, [pc, #72]	; (80057cc <_sbrk+0x68>)
 8005784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <_sbrk+0x64>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	429a      	cmp	r2, r3
 8005792:	d207      	bcs.n	80057a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005794:	f008 fd82 	bl	800e29c <__errno>
 8005798:	4603      	mov	r3, r0
 800579a:	220c      	movs	r2, #12
 800579c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	e009      	b.n	80057b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057a4:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <_sbrk+0x64>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <_sbrk+0x64>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <_sbrk+0x64>)
 80057b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057b6:	68fb      	ldr	r3, [r7, #12]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20020000 	.word	0x20020000
 80057c4:	00000400 	.word	0x00000400
 80057c8:	20000d7c 	.word	0x20000d7c
 80057cc:	20001540 	.word	0x20001540

080057d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <SystemInit+0x20>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	4a05      	ldr	r2, [pc, #20]	; (80057f0 <SystemInit+0x20>)
 80057dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b096      	sub	sp, #88	; 0x58
 80057f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	605a      	str	r2, [r3, #4]
 8005804:	609a      	str	r2, [r3, #8]
 8005806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	60da      	str	r2, [r3, #12]
 8005820:	611a      	str	r2, [r3, #16]
 8005822:	615a      	str	r2, [r3, #20]
 8005824:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005826:	1d3b      	adds	r3, r7, #4
 8005828:	2220      	movs	r2, #32
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f008 fd7d 	bl	800e32c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005832:	4b4a      	ldr	r3, [pc, #296]	; (800595c <MX_TIM1_Init+0x168>)
 8005834:	4a4a      	ldr	r2, [pc, #296]	; (8005960 <MX_TIM1_Init+0x16c>)
 8005836:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005838:	4b48      	ldr	r3, [pc, #288]	; (800595c <MX_TIM1_Init+0x168>)
 800583a:	2253      	movs	r2, #83	; 0x53
 800583c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800583e:	4b47      	ldr	r3, [pc, #284]	; (800595c <MX_TIM1_Init+0x168>)
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8005844:	4b45      	ldr	r3, [pc, #276]	; (800595c <MX_TIM1_Init+0x168>)
 8005846:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800584a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800584c:	4b43      	ldr	r3, [pc, #268]	; (800595c <MX_TIM1_Init+0x168>)
 800584e:	2200      	movs	r2, #0
 8005850:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005852:	4b42      	ldr	r3, [pc, #264]	; (800595c <MX_TIM1_Init+0x168>)
 8005854:	2200      	movs	r2, #0
 8005856:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005858:	4b40      	ldr	r3, [pc, #256]	; (800595c <MX_TIM1_Init+0x168>)
 800585a:	2200      	movs	r2, #0
 800585c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800585e:	483f      	ldr	r0, [pc, #252]	; (800595c <MX_TIM1_Init+0x168>)
 8005860:	f006 fda0 	bl	800c3a4 <HAL_TIM_Base_Init>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800586a:	f7fc fd66 	bl	800233a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800586e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005874:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005878:	4619      	mov	r1, r3
 800587a:	4838      	ldr	r0, [pc, #224]	; (800595c <MX_TIM1_Init+0x168>)
 800587c:	f007 fa68 	bl	800cd50 <HAL_TIM_ConfigClockSource>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005886:	f7fc fd58 	bl	800233a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800588a:	4834      	ldr	r0, [pc, #208]	; (800595c <MX_TIM1_Init+0x168>)
 800588c:	f006 fe4a 	bl	800c524 <HAL_TIM_PWM_Init>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005896:	f7fc fd50 	bl	800233a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800589a:	2300      	movs	r3, #0
 800589c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800589e:	2300      	movs	r3, #0
 80058a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058a6:	4619      	mov	r1, r3
 80058a8:	482c      	ldr	r0, [pc, #176]	; (800595c <MX_TIM1_Init+0x168>)
 80058aa:	f007 fe51 	bl	800d550 <HAL_TIMEx_MasterConfigSynchronization>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80058b4:	f7fc fd41 	bl	800233a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058b8:	2360      	movs	r3, #96	; 0x60
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058c4:	2300      	movs	r3, #0
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058d8:	2200      	movs	r2, #0
 80058da:	4619      	mov	r1, r3
 80058dc:	481f      	ldr	r0, [pc, #124]	; (800595c <MX_TIM1_Init+0x168>)
 80058de:	f007 f975 	bl	800cbcc <HAL_TIM_PWM_ConfigChannel>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80058e8:	f7fc fd27 	bl	800233a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058f0:	2204      	movs	r2, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4819      	ldr	r0, [pc, #100]	; (800595c <MX_TIM1_Init+0x168>)
 80058f6:	f007 f969 	bl	800cbcc <HAL_TIM_PWM_ConfigChannel>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005900:	f7fc fd1b 	bl	800233a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005908:	2208      	movs	r2, #8
 800590a:	4619      	mov	r1, r3
 800590c:	4813      	ldr	r0, [pc, #76]	; (800595c <MX_TIM1_Init+0x168>)
 800590e:	f007 f95d 	bl	800cbcc <HAL_TIM_PWM_ConfigChannel>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8005918:	f7fc fd0f 	bl	800233a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800591c:	2300      	movs	r3, #0
 800591e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005920:	2300      	movs	r3, #0
 8005922:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005934:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005936:	2300      	movs	r3, #0
 8005938:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800593a:	1d3b      	adds	r3, r7, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4807      	ldr	r0, [pc, #28]	; (800595c <MX_TIM1_Init+0x168>)
 8005940:	f007 fe82 	bl	800d648 <HAL_TIMEx_ConfigBreakDeadTime>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800594a:	f7fc fcf6 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800594e:	4803      	ldr	r0, [pc, #12]	; (800595c <MX_TIM1_Init+0x168>)
 8005950:	f000 fa5a 	bl	8005e08 <HAL_TIM_MspPostInit>

}
 8005954:	bf00      	nop
 8005956:	3758      	adds	r7, #88	; 0x58
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20000d80 	.word	0x20000d80
 8005960:	40010000 	.word	0x40010000

08005964 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08c      	sub	sp, #48	; 0x30
 8005968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800596a:	f107 030c 	add.w	r3, r7, #12
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f008 fcda 	bl	800e32c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005978:	1d3b      	adds	r3, r7, #4
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005980:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <MX_TIM2_Init+0xa4>)
 8005982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005988:	4b1f      	ldr	r3, [pc, #124]	; (8005a08 <MX_TIM2_Init+0xa4>)
 800598a:	2200      	movs	r2, #0
 800598c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800598e:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <MX_TIM2_Init+0xa4>)
 8005990:	2200      	movs	r2, #0
 8005992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005994:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <MX_TIM2_Init+0xa4>)
 8005996:	f04f 32ff 	mov.w	r2, #4294967295
 800599a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800599c:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <MX_TIM2_Init+0xa4>)
 800599e:	2200      	movs	r2, #0
 80059a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059a2:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <MX_TIM2_Init+0xa4>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80059a8:	2303      	movs	r3, #3
 80059aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059bc:	2300      	movs	r3, #0
 80059be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059c0:	2301      	movs	r3, #1
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059c4:	2300      	movs	r3, #0
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80059cc:	f107 030c 	add.w	r3, r7, #12
 80059d0:	4619      	mov	r1, r3
 80059d2:	480d      	ldr	r0, [pc, #52]	; (8005a08 <MX_TIM2_Init+0xa4>)
 80059d4:	f006 febe 	bl	800c754 <HAL_TIM_Encoder_Init>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80059de:	f7fc fcac 	bl	800233a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4806      	ldr	r0, [pc, #24]	; (8005a08 <MX_TIM2_Init+0xa4>)
 80059f0:	f007 fdae 	bl	800d550 <HAL_TIMEx_MasterConfigSynchronization>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80059fa:	f7fc fc9e 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80059fe:	bf00      	nop
 8005a00:	3730      	adds	r7, #48	; 0x30
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000dc8 	.word	0x20000dc8

08005a0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	; 0x28
 8005a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a12:	f107 0320 	add.w	r3, r7, #32
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	615a      	str	r2, [r3, #20]
 8005a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a2e:	4b32      	ldr	r3, [pc, #200]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a30:	4a32      	ldr	r2, [pc, #200]	; (8005afc <MX_TIM3_Init+0xf0>)
 8005a32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8005a34:	4b30      	ldr	r3, [pc, #192]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a36:	2207      	movs	r2, #7
 8005a38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a3a:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8005a40:	4b2d      	ldr	r3, [pc, #180]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a48:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a4e:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a54:	4828      	ldr	r0, [pc, #160]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a56:	f006 fd65 	bl	800c524 <HAL_TIM_PWM_Init>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005a60:	f7fc fc6b 	bl	800233a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a64:	2300      	movs	r3, #0
 8005a66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a6c:	f107 0320 	add.w	r3, r7, #32
 8005a70:	4619      	mov	r1, r3
 8005a72:	4821      	ldr	r0, [pc, #132]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a74:	f007 fd6c 	bl	800d550 <HAL_TIMEx_MasterConfigSynchronization>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005a7e:	f7fc fc5c 	bl	800233a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a82:	2360      	movs	r3, #96	; 0x60
 8005a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	2200      	movs	r2, #0
 8005a96:	4619      	mov	r1, r3
 8005a98:	4817      	ldr	r0, [pc, #92]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005a9a:	f007 f897 	bl	800cbcc <HAL_TIM_PWM_ConfigChannel>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005aa4:	f7fc fc49 	bl	800233a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	2204      	movs	r2, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4812      	ldr	r0, [pc, #72]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005ab0:	f007 f88c 	bl	800cbcc <HAL_TIM_PWM_ConfigChannel>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005aba:	f7fc fc3e 	bl	800233a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	480c      	ldr	r0, [pc, #48]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005ac6:	f007 f881 	bl	800cbcc <HAL_TIM_PWM_ConfigChannel>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8005ad0:	f7fc fc33 	bl	800233a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	220c      	movs	r2, #12
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4807      	ldr	r0, [pc, #28]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005adc:	f007 f876 	bl	800cbcc <HAL_TIM_PWM_ConfigChannel>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8005ae6:	f7fc fc28 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005aea:	4803      	ldr	r0, [pc, #12]	; (8005af8 <MX_TIM3_Init+0xec>)
 8005aec:	f000 f98c 	bl	8005e08 <HAL_TIM_MspPostInit>

}
 8005af0:	bf00      	nop
 8005af2:	3728      	adds	r7, #40	; 0x28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000e10 	.word	0x20000e10
 8005afc:	40000400 	.word	0x40000400

08005b00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	; 0x30
 8005b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b06:	f107 030c 	add.w	r3, r7, #12
 8005b0a:	2224      	movs	r2, #36	; 0x24
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f008 fc0c 	bl	800e32c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b14:	1d3b      	adds	r3, r7, #4
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b1c:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <MX_TIM4_Init+0xa0>)
 8005b1e:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <MX_TIM4_Init+0xa4>)
 8005b20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b22:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <MX_TIM4_Init+0xa0>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b28:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <MX_TIM4_Init+0xa0>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005b2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ba0 <MX_TIM4_Init+0xa0>)
 8005b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b36:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <MX_TIM4_Init+0xa0>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b3c:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <MX_TIM4_Init+0xa0>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005b42:	2303      	movs	r3, #3
 8005b44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b56:	2300      	movs	r3, #0
 8005b58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005b66:	f107 030c 	add.w	r3, r7, #12
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	480c      	ldr	r0, [pc, #48]	; (8005ba0 <MX_TIM4_Init+0xa0>)
 8005b6e:	f006 fdf1 	bl	800c754 <HAL_TIM_Encoder_Init>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005b78:	f7fc fbdf 	bl	800233a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005b84:	1d3b      	adds	r3, r7, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4805      	ldr	r0, [pc, #20]	; (8005ba0 <MX_TIM4_Init+0xa0>)
 8005b8a:	f007 fce1 	bl	800d550 <HAL_TIMEx_MasterConfigSynchronization>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005b94:	f7fc fbd1 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005b98:	bf00      	nop
 8005b9a:	3730      	adds	r7, #48	; 0x30
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000e58 	.word	0x20000e58
 8005ba4:	40000800 	.word	0x40000800

08005ba8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bae:	463b      	mov	r3, r7
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <MX_TIM6_Init+0x64>)
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <MX_TIM6_Init+0x68>)
 8005bba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8005bbc:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <MX_TIM6_Init+0x64>)
 8005bbe:	2253      	movs	r2, #83	; 0x53
 8005bc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <MX_TIM6_Init+0x64>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005bc8:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <MX_TIM6_Init+0x64>)
 8005bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005bce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <MX_TIM6_Init+0x64>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005bd6:	480d      	ldr	r0, [pc, #52]	; (8005c0c <MX_TIM6_Init+0x64>)
 8005bd8:	f006 fbe4 	bl	800c3a4 <HAL_TIM_Base_Init>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005be2:	f7fc fbaa 	bl	800233a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005be6:	2300      	movs	r3, #0
 8005be8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005bee:	463b      	mov	r3, r7
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4806      	ldr	r0, [pc, #24]	; (8005c0c <MX_TIM6_Init+0x64>)
 8005bf4:	f007 fcac 	bl	800d550 <HAL_TIMEx_MasterConfigSynchronization>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005bfe:	f7fc fb9c 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000ea0 	.word	0x20000ea0
 8005c10:	40001000 	.word	0x40001000

08005c14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_TIM_Base_MspInit+0x70>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10e      	bne.n	8005c44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	4b17      	ldr	r3, [pc, #92]	; (8005c88 <HAL_TIM_Base_MspInit+0x74>)
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	4a16      	ldr	r2, [pc, #88]	; (8005c88 <HAL_TIM_Base_MspInit+0x74>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	6453      	str	r3, [r2, #68]	; 0x44
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <HAL_TIM_Base_MspInit+0x74>)
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8005c42:	e01a      	b.n	8005c7a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <HAL_TIM_Base_MspInit+0x78>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d115      	bne.n	8005c7a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <HAL_TIM_Base_MspInit+0x74>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	4a0c      	ldr	r2, [pc, #48]	; (8005c88 <HAL_TIM_Base_MspInit+0x74>)
 8005c58:	f043 0310 	orr.w	r3, r3, #16
 8005c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <HAL_TIM_Base_MspInit+0x74>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	2036      	movs	r0, #54	; 0x36
 8005c70:	f004 f8ad 	bl	8009dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c74:	2036      	movs	r0, #54	; 0x36
 8005c76:	f004 f8c6 	bl	8009e06 <HAL_NVIC_EnableIRQ>
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	40001000 	.word	0x40001000

08005c90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08c      	sub	sp, #48	; 0x30
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c98:	f107 031c 	add.w	r3, r7, #28
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d14b      	bne.n	8005d4a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	4b3f      	ldr	r3, [pc, #252]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	4a3e      	ldr	r2, [pc, #248]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005cbc:	f043 0301 	orr.w	r3, r3, #1
 8005cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc2:	4b3c      	ldr	r3, [pc, #240]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	4a37      	ldr	r2, [pc, #220]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cde:	4b35      	ldr	r3, [pc, #212]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	4b31      	ldr	r3, [pc, #196]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	4a30      	ldr	r2, [pc, #192]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005cf4:	f043 0302 	orr.w	r3, r3, #2
 8005cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8005cfa:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d14:	2300      	movs	r3, #0
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d1c:	f107 031c 	add.w	r3, r7, #28
 8005d20:	4619      	mov	r1, r3
 8005d22:	4825      	ldr	r0, [pc, #148]	; (8005db8 <HAL_TIM_Encoder_MspInit+0x128>)
 8005d24:	f004 fbfe 	bl	800a524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005d28:	2308      	movs	r3, #8
 8005d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d34:	2300      	movs	r3, #0
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d3c:	f107 031c 	add.w	r3, r7, #28
 8005d40:	4619      	mov	r1, r3
 8005d42:	481e      	ldr	r0, [pc, #120]	; (8005dbc <HAL_TIM_Encoder_MspInit+0x12c>)
 8005d44:	f004 fbee 	bl	800a524 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005d48:	e030      	b.n	8005dac <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <HAL_TIM_Encoder_MspInit+0x130>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d12b      	bne.n	8005dac <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005d5e:	f043 0304 	orr.w	r3, r3, #4
 8005d62:	6413      	str	r3, [r2, #64]	; 0x40
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d70:	2300      	movs	r3, #0
 8005d72:	60bb      	str	r3, [r7, #8]
 8005d74:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	4a0e      	ldr	r2, [pc, #56]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005d7a:	f043 0302 	orr.w	r3, r3, #2
 8005d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d8c:	23c0      	movs	r3, #192	; 0xc0
 8005d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d90:	2302      	movs	r3, #2
 8005d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005da0:	f107 031c 	add.w	r3, r7, #28
 8005da4:	4619      	mov	r1, r3
 8005da6:	4805      	ldr	r0, [pc, #20]	; (8005dbc <HAL_TIM_Encoder_MspInit+0x12c>)
 8005da8:	f004 fbbc 	bl	800a524 <HAL_GPIO_Init>
}
 8005dac:	bf00      	nop
 8005dae:	3730      	adds	r7, #48	; 0x30
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40023800 	.word	0x40023800
 8005db8:	40020000 	.word	0x40020000
 8005dbc:	40020400 	.word	0x40020400
 8005dc0:	40000800 	.word	0x40000800

08005dc4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a0b      	ldr	r2, [pc, #44]	; (8005e00 <HAL_TIM_PWM_MspInit+0x3c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10d      	bne.n	8005df2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <HAL_TIM_PWM_MspInit+0x40>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <HAL_TIM_PWM_MspInit+0x40>)
 8005de0:	f043 0302 	orr.w	r3, r3, #2
 8005de4:	6413      	str	r3, [r2, #64]	; 0x40
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <HAL_TIM_PWM_MspInit+0x40>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40023800 	.word	0x40023800

08005e08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <HAL_TIM_MspPostInit+0xb4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d11f      	bne.n	8005e6a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <HAL_TIM_MspPostInit+0xb8>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	4a23      	ldr	r2, [pc, #140]	; (8005ec0 <HAL_TIM_MspPostInit+0xb8>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6313      	str	r3, [r2, #48]	; 0x30
 8005e3a:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <HAL_TIM_MspPostInit+0xb8>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005e46:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e54:	2300      	movs	r3, #0
 8005e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	4619      	mov	r1, r3
 8005e62:	4818      	ldr	r0, [pc, #96]	; (8005ec4 <HAL_TIM_MspPostInit+0xbc>)
 8005e64:	f004 fb5e 	bl	800a524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005e68:	e023      	b.n	8005eb2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <HAL_TIM_MspPostInit+0xc0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d11e      	bne.n	8005eb2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <HAL_TIM_MspPostInit+0xb8>)
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <HAL_TIM_MspPostInit+0xb8>)
 8005e7e:	f043 0304 	orr.w	r3, r3, #4
 8005e82:	6313      	str	r3, [r2, #48]	; 0x30
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <HAL_TIM_MspPostInit+0xb8>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005e90:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e96:	2302      	movs	r3, #2
 8005e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ea6:	f107 0314 	add.w	r3, r7, #20
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4807      	ldr	r0, [pc, #28]	; (8005ecc <HAL_TIM_MspPostInit+0xc4>)
 8005eae:	f004 fb39 	bl	800a524 <HAL_GPIO_Init>
}
 8005eb2:	bf00      	nop
 8005eb4:	3728      	adds	r7, #40	; 0x28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40020000 	.word	0x40020000
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40020800 	.word	0x40020800

08005ed0 <UI_ShowSensor>:
#define SENSOR_ORIGIN_X sen_xy[0]
#define SENSOR_ORIGIN_Y sen_xy[1]
#define SENSOR_WIDTH_SEN 6
#define SENSOR_HEIGHT_PX 15

uint8_t UI_ShowSensor() {
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b089      	sub	sp, #36	; 0x24
 8005ed4:	af02      	add	r7, sp, #8
	if((sensor_flag & 1) != 1) return 0;
 8005ed6:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <UI_ShowSensor+0xec>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <UI_ShowSensor+0x16>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e065      	b.n	8005fb2 <UI_ShowSensor+0xe2>
	uint8_t* value = sensor_disp_status;
 8005ee6:	4b36      	ldr	r3, [pc, #216]	; (8005fc0 <UI_ShowSensor+0xf0>)
 8005ee8:	60fb      	str	r3, [r7, #12]
	DISP_FillRect(
 8005eea:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <UI_ShowSensor+0xf4>)
 8005eec:	7818      	ldrb	r0, [r3, #0]
 8005eee:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <UI_ShowSensor+0xf4>)
 8005ef0:	7859      	ldrb	r1, [r3, #1]
			SENSOR_ORIGIN_X,
			SENSOR_ORIGIN_Y,
			SENSOR_ORIGIN_X+(SENSOR_WIDTH_SEN+1)*14,
 8005ef2:	4b34      	ldr	r3, [pc, #208]	; (8005fc4 <UI_ShowSensor+0xf4>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
	DISP_FillRect(
 8005ef6:	3362      	adds	r3, #98	; 0x62
 8005ef8:	b2da      	uxtb	r2, r3
			SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX,
 8005efa:	4b32      	ldr	r3, [pc, #200]	; (8005fc4 <UI_ShowSensor+0xf4>)
 8005efc:	785b      	ldrb	r3, [r3, #1]
	DISP_FillRect(
 8005efe:	330f      	adds	r3, #15
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2401      	movs	r4, #1
 8005f04:	9400      	str	r4, [sp, #0]
 8005f06:	f7fb fc0d 	bl	8001724 <DISP_FillRect>
			DISP_COLOR_BLACK);
	DISP_Shape_Typedef rect = {0,0,DISP_COLOR_WHITE,SENSOR_WIDTH_SEN-1,1};
 8005f0a:	4a2f      	ldr	r2, [pc, #188]	; (8005fc8 <UI_ShowSensor+0xf8>)
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f12:	6018      	str	r0, [r3, #0]
 8005f14:	3304      	adds	r3, #4
 8005f16:	7019      	strb	r1, [r3, #0]
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	e03e      	b.n	8005f9c <UI_ShowSensor+0xcc>
		uint8_t status = value[SENSOR_NUMBER-s-1];
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f1c3 030d 	rsb	r3, r3, #13
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	74fb      	strb	r3, [r7, #19]
		if(status>=SENSOR_HEIGHT_PX) status=SENSOR_HEIGHT_PX-1;
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
 8005f2e:	2b0e      	cmp	r3, #14
 8005f30:	d902      	bls.n	8005f38 <UI_ShowSensor+0x68>
 8005f32:	230e      	movs	r3, #14
 8005f34:	74fb      	strb	r3, [r7, #19]
 8005f36:	e007      	b.n	8005f48 <UI_ShowSensor+0x78>
		else if(status==1 || status==2) status=3;
 8005f38:	7cfb      	ldrb	r3, [r7, #19]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d002      	beq.n	8005f44 <UI_ShowSensor+0x74>
 8005f3e:	7cfb      	ldrb	r3, [r7, #19]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d101      	bne.n	8005f48 <UI_ShowSensor+0x78>
 8005f44:	2303      	movs	r3, #3
 8005f46:	74fb      	strb	r3, [r7, #19]
		uint8_t y_rect = status;
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	72fb      	strb	r3, [r7, #11]

		rect.origin_x = (s*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	00d2      	lsls	r2, r2, #3
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <UI_ShowSensor+0xf4>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	713b      	strb	r3, [r7, #4]
		rect.origin_y = SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX-y_rect;
 8005f62:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <UI_ShowSensor+0xf4>)
 8005f64:	785a      	ldrb	r2, [r3, #1]
 8005f66:	7afb      	ldrb	r3, [r7, #11]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	330f      	adds	r3, #15
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	717b      	strb	r3, [r7, #5]
		rect.size_y = y_rect;
 8005f72:	7afb      	ldrb	r3, [r7, #11]
 8005f74:	723b      	strb	r3, [r7, #8]
		DISP_FillRect2(&rect);
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fb fda7 	bl	8001acc <DISP_FillRect2>
		DISP_OLEDUpdate(
 8005f7e:	7938      	ldrb	r0, [r7, #4]
 8005f80:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <UI_ShowSensor+0xf4>)
 8005f82:	7859      	ldrb	r1, [r3, #1]
				rect.origin_x,
				SENSOR_ORIGIN_Y,
				rect.origin_x + SENSOR_WIDTH_SEN,
 8005f84:	793b      	ldrb	r3, [r7, #4]
		DISP_OLEDUpdate(
 8005f86:	3306      	adds	r3, #6
 8005f88:	b2da      	uxtb	r2, r3
				SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX);
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <UI_ShowSensor+0xf4>)
 8005f8c:	785b      	ldrb	r3, [r3, #1]
		DISP_OLEDUpdate(
 8005f8e:	330f      	adds	r3, #15
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	f7fb fd53 	bl	8001a3c <DISP_OLEDUpdate>
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b0d      	cmp	r3, #13
 8005fa0:	ddbd      	ble.n	8005f1e <UI_ShowSensor+0x4e>
	}
	sensor_flag &=~1;
 8005fa2:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <UI_ShowSensor+0xec>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <UI_ShowSensor+0xec>)
 8005fae:	701a      	strb	r2, [r3, #0]
	return 1;
 8005fb0:	2301      	movs	r3, #1
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000cbd 	.word	0x20000cbd
 8005fc0:	20000b90 	.word	0x20000b90
 8005fc4:	20000290 	.word	0x20000290
 8005fc8:	08011128 	.word	0x08011128

08005fcc <UI_ReadButton>:

uint8_t UI_ReadButton() {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin) * SW_UP_PRESS;
 8005fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fda:	483c      	ldr	r0, [pc, #240]	; (80060cc <UI_ReadButton+0x100>)
 8005fdc:	f004 fc3e 	bl	800a85c <HAL_GPIO_ReadPin>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	b25a      	sxtb	r2, r3
 8005fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	b25b      	sxtb	r3, r3
 8005ff6:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_RG_GPIO_Port, SW_RG_Pin) * SW_RG_PRESS;
 8005ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ffc:	4833      	ldr	r0, [pc, #204]	; (80060cc <UI_ReadButton+0x100>)
 8005ffe:	f004 fc2d 	bl	800a85c <HAL_GPIO_ReadPin>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <UI_ReadButton+0x40>
 8006008:	2302      	movs	r3, #2
 800600a:	e000      	b.n	800600e <UI_ReadButton+0x42>
 800600c:	2300      	movs	r3, #0
 800600e:	b25a      	sxtb	r2, r3
 8006010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006014:	4313      	orrs	r3, r2
 8006016:	b25b      	sxtb	r3, r3
 8006018:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_DW_GPIO_Port, SW_DW_Pin) * SW_DW_PRESS;
 800601a:	2110      	movs	r1, #16
 800601c:	482c      	ldr	r0, [pc, #176]	; (80060d0 <UI_ReadButton+0x104>)
 800601e:	f004 fc1d 	bl	800a85c <HAL_GPIO_ReadPin>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <UI_ReadButton+0x60>
 8006028:	2304      	movs	r3, #4
 800602a:	e000      	b.n	800602e <UI_ReadButton+0x62>
 800602c:	2300      	movs	r3, #0
 800602e:	b25a      	sxtb	r2, r3
 8006030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006034:	4313      	orrs	r3, r2
 8006036:	b25b      	sxtb	r3, r3
 8006038:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_BK_GPIO_Port, SW_BK_Pin) * SW_BK_PRESS;
 800603a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800603e:	4824      	ldr	r0, [pc, #144]	; (80060d0 <UI_ReadButton+0x104>)
 8006040:	f004 fc0c 	bl	800a85c <HAL_GPIO_ReadPin>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <UI_ReadButton+0x82>
 800604a:	2308      	movs	r3, #8
 800604c:	e000      	b.n	8006050 <UI_ReadButton+0x84>
 800604e:	2300      	movs	r3, #0
 8006050:	b25a      	sxtb	r2, r3
 8006052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006056:	4313      	orrs	r3, r2
 8006058:	b25b      	sxtb	r3, r3
 800605a:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_LF_GPIO_Port, SW_LF_Pin) * SW_LF_PRESS;
 800605c:	2120      	movs	r1, #32
 800605e:	481c      	ldr	r0, [pc, #112]	; (80060d0 <UI_ReadButton+0x104>)
 8006060:	f004 fbfc 	bl	800a85c <HAL_GPIO_ReadPin>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <UI_ReadButton+0xa2>
 800606a:	2310      	movs	r3, #16
 800606c:	e000      	b.n	8006070 <UI_ReadButton+0xa4>
 800606e:	2300      	movs	r3, #0
 8006070:	b25a      	sxtb	r2, r3
 8006072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006076:	4313      	orrs	r3, r2
 8006078:	b25b      	sxtb	r3, r3
 800607a:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin) * SW_OK_PRESS;
 800607c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006080:	4813      	ldr	r0, [pc, #76]	; (80060d0 <UI_ReadButton+0x104>)
 8006082:	f004 fbeb 	bl	800a85c <HAL_GPIO_ReadPin>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <UI_ReadButton+0xc4>
 800608c:	2320      	movs	r3, #32
 800608e:	e000      	b.n	8006092 <UI_ReadButton+0xc6>
 8006090:	2300      	movs	r3, #0
 8006092:	b25a      	sxtb	r2, r3
 8006094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006098:	4313      	orrs	r3, r2
 800609a:	b25b      	sxtb	r3, r3
 800609c:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_HM_GPIO_Port, SW_HM_Pin) * SW_HM_PRESS;
 800609e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060a2:	480b      	ldr	r0, [pc, #44]	; (80060d0 <UI_ReadButton+0x104>)
 80060a4:	f004 fbda 	bl	800a85c <HAL_GPIO_ReadPin>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <UI_ReadButton+0xe6>
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	e000      	b.n	80060b4 <UI_ReadButton+0xe8>
 80060b2:	2300      	movs	r3, #0
 80060b4:	b25a      	sxtb	r2, r3
 80060b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	71fb      	strb	r3, [r7, #7]
	return temp;
 80060c0:	79fb      	ldrb	r3, [r7, #7]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40020800 	.word	0x40020800
 80060d0:	40020400 	.word	0x40020400

080060d4 <UI_HomeScreenInit>:
		"PATH",
		"PLAN",
		"SET"
};

void UI_HomeScreenInit() {
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0

	short_message.origin_x = 0;
 80060d8:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <UI_HomeScreenInit+0xf4>)
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
	short_message.origin_y = 27;
 80060de:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <UI_HomeScreenInit+0xf4>)
 80060e0:	221b      	movs	r2, #27
 80060e2:	705a      	strb	r2, [r3, #1]
	short_message.color = DISP_COLOR_BLACK;
 80060e4:	4b38      	ldr	r3, [pc, #224]	; (80061c8 <UI_HomeScreenInit+0xf4>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	709a      	strb	r2, [r3, #2]
	short_message.size_x = 127;
 80060ea:	4b37      	ldr	r3, [pc, #220]	; (80061c8 <UI_HomeScreenInit+0xf4>)
 80060ec:	227f      	movs	r2, #127	; 0x7f
 80060ee:	70da      	strb	r2, [r3, #3]
	short_message.size_y = 10;
 80060f0:	4b35      	ldr	r3, [pc, #212]	; (80061c8 <UI_HomeScreenInit+0xf4>)
 80060f2:	220a      	movs	r2, #10
 80060f4:	711a      	strb	r2, [r3, #4]
	short_message.align_x = DISP_ALIGN_CENTER;
 80060f6:	4b34      	ldr	r3, [pc, #208]	; (80061c8 <UI_HomeScreenInit+0xf4>)
 80060f8:	2202      	movs	r2, #2
 80060fa:	715a      	strb	r2, [r3, #5]
	short_message.align_y = DISP_ALIGN_CENTER;
 80060fc:	4b32      	ldr	r3, [pc, #200]	; (80061c8 <UI_HomeScreenInit+0xf4>)
 80060fe:	2202      	movs	r2, #2
 8006100:	719a      	strb	r2, [r3, #6]

	short_message_white = short_message;
 8006102:	4b32      	ldr	r3, [pc, #200]	; (80061cc <UI_HomeScreenInit+0xf8>)
 8006104:	4a30      	ldr	r2, [pc, #192]	; (80061c8 <UI_HomeScreenInit+0xf4>)
 8006106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800610a:	6018      	str	r0, [r3, #0]
 800610c:	3304      	adds	r3, #4
 800610e:	8019      	strh	r1, [r3, #0]
 8006110:	3302      	adds	r3, #2
 8006112:	0c0a      	lsrs	r2, r1, #16
 8006114:	701a      	strb	r2, [r3, #0]
	short_message_white.color = DISP_COLOR_WHITE;
 8006116:	4b2d      	ldr	r3, [pc, #180]	; (80061cc <UI_HomeScreenInit+0xf8>)
 8006118:	2200      	movs	r2, #0
 800611a:	709a      	strb	r2, [r3, #2]

	home_menu[0].origin_x = 14;
 800611c:	4b2c      	ldr	r3, [pc, #176]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 800611e:	220e      	movs	r2, #14
 8006120:	701a      	strb	r2, [r3, #0]
	home_menu[0].origin_y = 38;
 8006122:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006124:	2226      	movs	r2, #38	; 0x26
 8006126:	705a      	strb	r2, [r3, #1]
	home_menu[0].color = DISP_COLOR_WHITE;
 8006128:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 800612a:	2200      	movs	r2, #0
 800612c:	709a      	strb	r2, [r3, #2]
	home_menu[0].size_x = 40;
 800612e:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006130:	2228      	movs	r2, #40	; 0x28
 8006132:	70da      	strb	r2, [r3, #3]
	home_menu[0].align_x = DISP_ALIGN_CENTER;
 8006134:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006136:	2202      	movs	r2, #2
 8006138:	715a      	strb	r2, [r3, #5]

	home_menu[1].origin_x = 14;
 800613a:	4b25      	ldr	r3, [pc, #148]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 800613c:	220e      	movs	r2, #14
 800613e:	71da      	strb	r2, [r3, #7]
	home_menu[1].origin_y = 51;
 8006140:	4b23      	ldr	r3, [pc, #140]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006142:	2233      	movs	r2, #51	; 0x33
 8006144:	721a      	strb	r2, [r3, #8]
	home_menu[1].color = DISP_COLOR_WHITE;
 8006146:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006148:	2200      	movs	r2, #0
 800614a:	725a      	strb	r2, [r3, #9]
	home_menu[1].size_x = 40;
 800614c:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 800614e:	2228      	movs	r2, #40	; 0x28
 8006150:	729a      	strb	r2, [r3, #10]
	home_menu[1].align_x = DISP_ALIGN_CENTER;
 8006152:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006154:	2202      	movs	r2, #2
 8006156:	731a      	strb	r2, [r3, #12]

	home_menu[2].origin_x = 73;
 8006158:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 800615a:	2249      	movs	r2, #73	; 0x49
 800615c:	739a      	strb	r2, [r3, #14]
	home_menu[2].origin_y = 38;
 800615e:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006160:	2226      	movs	r2, #38	; 0x26
 8006162:	73da      	strb	r2, [r3, #15]
	home_menu[2].color = DISP_COLOR_WHITE;
 8006164:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006166:	2200      	movs	r2, #0
 8006168:	741a      	strb	r2, [r3, #16]
	home_menu[2].size_x = 40;
 800616a:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 800616c:	2228      	movs	r2, #40	; 0x28
 800616e:	745a      	strb	r2, [r3, #17]
	home_menu[2].align_x = DISP_ALIGN_CENTER;
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006172:	2202      	movs	r2, #2
 8006174:	74da      	strb	r2, [r3, #19]

	home_menu[3].origin_x = 73;
 8006176:	4b16      	ldr	r3, [pc, #88]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006178:	2249      	movs	r2, #73	; 0x49
 800617a:	755a      	strb	r2, [r3, #21]
	home_menu[3].origin_y = 51;
 800617c:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 800617e:	2233      	movs	r2, #51	; 0x33
 8006180:	759a      	strb	r2, [r3, #22]
	home_menu[3].color = DISP_COLOR_WHITE;
 8006182:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006184:	2200      	movs	r2, #0
 8006186:	75da      	strb	r2, [r3, #23]
	home_menu[3].size_x = 40;
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 800618a:	2228      	movs	r2, #40	; 0x28
 800618c:	761a      	strb	r2, [r3, #24]
	home_menu[3].align_x = DISP_ALIGN_CENTER;
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <UI_HomeScreenInit+0xfc>)
 8006190:	2202      	movs	r2, #2
 8006192:	769a      	strb	r2, [r3, #26]

	home_status.origin_x = 0;
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <UI_HomeScreenInit+0x100>)
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
	home_status.origin_y = 0;
 800619a:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <UI_HomeScreenInit+0x100>)
 800619c:	2200      	movs	r2, #0
 800619e:	705a      	strb	r2, [r3, #1]
	home_status.size_x = 127;
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <UI_HomeScreenInit+0x100>)
 80061a2:	227f      	movs	r2, #127	; 0x7f
 80061a4:	70da      	strb	r2, [r3, #3]
	home_status.size_y = 10;
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <UI_HomeScreenInit+0x100>)
 80061a8:	220a      	movs	r2, #10
 80061aa:	711a      	strb	r2, [r3, #4]
	home_status.color = DISP_COLOR_BLACK;
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <UI_HomeScreenInit+0x100>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	709a      	strb	r2, [r3, #2]
	home_status.align_x = DISP_ALIGN_CENTER;
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <UI_HomeScreenInit+0x100>)
 80061b4:	2202      	movs	r2, #2
 80061b6:	715a      	strb	r2, [r3, #5]
	home_status.align_y = DISP_ALIGN_CENTER;
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <UI_HomeScreenInit+0x100>)
 80061ba:	2202      	movs	r2, #2
 80061bc:	719a      	strb	r2, [r3, #6]
}
 80061be:	bf00      	nop
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	20000ee8 	.word	0x20000ee8
 80061cc:	20000ef0 	.word	0x20000ef0
 80061d0:	20000ef8 	.word	0x20000ef8
 80061d4:	20000f14 	.word	0x20000f14

080061d8 <UI_HomeScreenDisplay>:


void UI_HomeScreenDisplay(uint8_t num_menu, uint8_t cp) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af02      	add	r7, sp, #8
 80061de:	4603      	mov	r3, r0
 80061e0:	460a      	mov	r2, r1
 80061e2:	71fb      	strb	r3, [r7, #7]
 80061e4:	4613      	mov	r3, r2
 80061e6:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[cp], cp, num_plan);
 80061e8:	79bb      	ldrb	r3, [r7, #6]
 80061ea:	4a23      	ldr	r2, [pc, #140]	; (8006278 <UI_HomeScreenDisplay+0xa0>)
 80061ec:	4413      	add	r3, r2
 80061ee:	789b      	ldrb	r3, [r3, #2]
 80061f0:	4619      	mov	r1, r3
 80061f2:	79bb      	ldrb	r3, [r7, #6]
 80061f4:	4a21      	ldr	r2, [pc, #132]	; (800627c <UI_HomeScreenDisplay+0xa4>)
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	f107 000c 	add.w	r0, r7, #12
 80061fc:	9200      	str	r2, [sp, #0]
 80061fe:	460a      	mov	r2, r1
 8006200:	491f      	ldr	r1, [pc, #124]	; (8006280 <UI_HomeScreenDisplay+0xa8>)
 8006202:	f008 fdf5 	bl	800edf0 <siprintf>
	DISP_DisplayText(&home_status, buff);
 8006206:	f107 030c 	add.w	r3, r7, #12
 800620a:	4619      	mov	r1, r3
 800620c:	481d      	ldr	r0, [pc, #116]	; (8006284 <UI_HomeScreenDisplay+0xac>)
 800620e:	f7fb fb43 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006212:	2300      	movs	r3, #0
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
 8006216:	e027      	b.n	8006268 <UI_HomeScreenDisplay+0x90>
		if(i == num_menu) home_menu[i].color = DISP_COLOR_BLACK;
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621c:	429a      	cmp	r2, r3
 800621e:	d109      	bne.n	8006234 <UI_HomeScreenDisplay+0x5c>
 8006220:	4919      	ldr	r1, [pc, #100]	; (8006288 <UI_HomeScreenDisplay+0xb0>)
 8006222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006224:	4613      	mov	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	440b      	add	r3, r1
 800622c:	3302      	adds	r3, #2
 800622e:	2201      	movs	r2, #1
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	e008      	b.n	8006246 <UI_HomeScreenDisplay+0x6e>
		else home_menu[i].color = DISP_COLOR_WHITE;
 8006234:	4914      	ldr	r1, [pc, #80]	; (8006288 <UI_HomeScreenDisplay+0xb0>)
 8006236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	440b      	add	r3, r1
 8006240:	3302      	adds	r3, #2
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&home_menu[i], home_screen_menus[i]);
 8006246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006248:	4613      	mov	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <UI_HomeScreenDisplay+0xb0>)
 8006250:	441a      	add	r2, r3
 8006252:	490e      	ldr	r1, [pc, #56]	; (800628c <UI_HomeScreenDisplay+0xb4>)
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f7fb fb1b 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	3301      	adds	r3, #1
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	2b03      	cmp	r3, #3
 800626c:	ddd4      	ble.n	8006218 <UI_HomeScreenDisplay+0x40>
	}
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	3728      	adds	r7, #40	; 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000d54 	.word	0x20000d54
 800627c:	20000cc9 	.word	0x20000cc9
 8006280:	08011148 	.word	0x08011148
 8006284:	20000f14 	.word	0x20000f14
 8006288:	20000ef8 	.word	0x20000ef8
 800628c:	20000294 	.word	0x20000294

08006290 <UI_HomeScreen>:

UI_Menu_Lists UI_HomeScreen() {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
	static uint8_t num_menu = 0;
	static uint32_t tick = 0;
	uint8_t checkpoint = num_checkpoint;
 8006296:	4b60      	ldr	r3, [pc, #384]	; (8006418 <UI_HomeScreen+0x188>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	71fb      	strb	r3, [r7, #7]
	ui_home_screen:
	UI_HomeScreenDisplay(num_menu, checkpoint);
 800629c:	4b5f      	ldr	r3, [pc, #380]	; (800641c <UI_HomeScreen+0x18c>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	79fa      	ldrb	r2, [r7, #7]
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff ff97 	bl	80061d8 <UI_HomeScreenDisplay>
	tick = HAL_GetTick();
 80062aa:	f002 ff43 	bl	8009134 <HAL_GetTick>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4a5b      	ldr	r2, [pc, #364]	; (8006420 <UI_HomeScreen+0x190>)
 80062b2:	6013      	str	r3, [r2, #0]
	while(1) {
		UI_ShowSensor();
 80062b4:	f7ff fe0c 	bl	8005ed0 <UI_ShowSensor>

		static uint8_t bt = 0;

		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80062b8:	f002 ff3c 	bl	8009134 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	4b58      	ldr	r3, [pc, #352]	; (8006420 <UI_HomeScreen+0x190>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b45      	cmp	r3, #69	; 0x45
 80062c6:	f240 8097 	bls.w	80063f8 <UI_HomeScreen+0x168>
		if(bt == UI_ReadButton()) continue;
 80062ca:	f7ff fe7f 	bl	8005fcc <UI_ReadButton>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	4b54      	ldr	r3, [pc, #336]	; (8006424 <UI_HomeScreen+0x194>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	f000 8090 	beq.w	80063fc <UI_HomeScreen+0x16c>
		bt = UI_ReadButton();
 80062dc:	f7ff fe76 	bl	8005fcc <UI_ReadButton>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	4b4f      	ldr	r3, [pc, #316]	; (8006424 <UI_HomeScreen+0x194>)
 80062e6:	701a      	strb	r2, [r3, #0]
//		if(bt & (SW_RG_PRESS | SW_LF_PRESS)) {
//			num_menu = (num_menu+2)%4;
//			goto ui_home_screen;
//		}
		if(bt & SW_UP_PRESS) {
 80062e8:	4b4e      	ldr	r3, [pc, #312]	; (8006424 <UI_HomeScreen+0x194>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <UI_HomeScreen+0x7a>
			if(num_menu > 0) num_menu--;
 80062f4:	4b49      	ldr	r3, [pc, #292]	; (800641c <UI_HomeScreen+0x18c>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0cf      	beq.n	800629c <UI_HomeScreen+0xc>
 80062fc:	4b47      	ldr	r3, [pc, #284]	; (800641c <UI_HomeScreen+0x18c>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	3b01      	subs	r3, #1
 8006302:	b2da      	uxtb	r2, r3
 8006304:	4b45      	ldr	r3, [pc, #276]	; (800641c <UI_HomeScreen+0x18c>)
 8006306:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006308:	e7c8      	b.n	800629c <UI_HomeScreen+0xc>
		}
		else if(bt & SW_DW_PRESS) {
 800630a:	4b46      	ldr	r3, [pc, #280]	; (8006424 <UI_HomeScreen+0x194>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <UI_HomeScreen+0xa0>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8006316:	4b41      	ldr	r3, [pc, #260]	; (800641c <UI_HomeScreen+0x18c>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d806      	bhi.n	800632c <UI_HomeScreen+0x9c>
 800631e:	4b3f      	ldr	r3, [pc, #252]	; (800641c <UI_HomeScreen+0x18c>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	4b3d      	ldr	r3, [pc, #244]	; (800641c <UI_HomeScreen+0x18c>)
 8006328:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 800632a:	e7b7      	b.n	800629c <UI_HomeScreen+0xc>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 800632c:	2303      	movs	r3, #3
 800632e:	e06f      	b.n	8006410 <UI_HomeScreen+0x180>
		}
		else if(bt & SW_RG_PRESS) {
 8006330:	4b3c      	ldr	r3, [pc, #240]	; (8006424 <UI_HomeScreen+0x194>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d009      	beq.n	8006350 <UI_HomeScreen+0xc0>
			if(checkpoint < MAX_CHECKPOINT-1) checkpoint++; else checkpoint=0;
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	2b12      	cmp	r3, #18
 8006340:	d803      	bhi.n	800634a <UI_HomeScreen+0xba>
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	3301      	adds	r3, #1
 8006346:	71fb      	strb	r3, [r7, #7]
 8006348:	e7a8      	b.n	800629c <UI_HomeScreen+0xc>
 800634a:	2300      	movs	r3, #0
 800634c:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 800634e:	e7a5      	b.n	800629c <UI_HomeScreen+0xc>
		}
		else if(bt & SW_LF_PRESS) {
 8006350:	4b34      	ldr	r3, [pc, #208]	; (8006424 <UI_HomeScreen+0x194>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d009      	beq.n	8006370 <UI_HomeScreen+0xe0>
			if(checkpoint > 0) checkpoint--; else checkpoint=MAX_CHECKPOINT-1;
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <UI_HomeScreen+0xda>
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	3b01      	subs	r3, #1
 8006366:	71fb      	strb	r3, [r7, #7]
 8006368:	e798      	b.n	800629c <UI_HomeScreen+0xc>
 800636a:	2313      	movs	r3, #19
 800636c:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 800636e:	e795      	b.n	800629c <UI_HomeScreen+0xc>
		}
		else if(bt & SW_HM_PRESS) {
 8006370:	4b2c      	ldr	r3, [pc, #176]	; (8006424 <UI_HomeScreen+0x194>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <UI_HomeScreen+0xf4>
			num_menu = 0;
 800637c:	4b27      	ldr	r3, [pc, #156]	; (800641c <UI_HomeScreen+0x18c>)
 800637e:	2200      	movs	r2, #0
 8006380:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006382:	e78b      	b.n	800629c <UI_HomeScreen+0xc>
		}
		switch(num_menu) {
 8006384:	4b25      	ldr	r3, [pc, #148]	; (800641c <UI_HomeScreen+0x18c>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d831      	bhi.n	80063f0 <UI_HomeScreen+0x160>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UI_HomeScreen+0x104>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063bb 	.word	0x080063bb
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080063e1 	.word	0x080063e1
		case 0:
			if(bt & SW_OK_PRESS) {
 80063a4:	4b1f      	ldr	r3, [pc, #124]	; (8006424 <UI_HomeScreen+0x194>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d027      	beq.n	8006400 <UI_HomeScreen+0x170>
				num_checkpoint = checkpoint;
 80063b0:	4a19      	ldr	r2, [pc, #100]	; (8006418 <UI_HomeScreen+0x188>)
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	7013      	strb	r3, [r2, #0]
				return UI_RUN;
 80063b6:	2304      	movs	r3, #4
 80063b8:	e02a      	b.n	8006410 <UI_HomeScreen+0x180>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 80063ba:	4b1a      	ldr	r3, [pc, #104]	; (8006424 <UI_HomeScreen+0x194>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01e      	beq.n	8006404 <UI_HomeScreen+0x174>
				num_checkpoint = checkpoint;
 80063c6:	4a14      	ldr	r2, [pc, #80]	; (8006418 <UI_HomeScreen+0x188>)
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	7013      	strb	r3, [r2, #0]
				return UI_PLAN_SET;
 80063cc:	2305      	movs	r3, #5
 80063ce:	e01f      	b.n	8006410 <UI_HomeScreen+0x180>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 80063d0:	4b14      	ldr	r3, [pc, #80]	; (8006424 <UI_HomeScreen+0x194>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d015      	beq.n	8006408 <UI_HomeScreen+0x178>
				return UI_PLAN_SELECT;
 80063dc:	2306      	movs	r3, #6
 80063de:	e017      	b.n	8006410 <UI_HomeScreen+0x180>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <UI_HomeScreen+0x194>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00f      	beq.n	800640c <UI_HomeScreen+0x17c>
				return UI_SET;
 80063ec:	2307      	movs	r3, #7
 80063ee:	e00f      	b.n	8006410 <UI_HomeScreen+0x180>
			}
			break;
		default: num_menu = 0;
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <UI_HomeScreen+0x18c>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e75d      	b.n	80062b4 <UI_HomeScreen+0x24>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80063f8:	bf00      	nop
 80063fa:	e75b      	b.n	80062b4 <UI_HomeScreen+0x24>
		if(bt == UI_ReadButton()) continue;
 80063fc:	bf00      	nop
 80063fe:	e759      	b.n	80062b4 <UI_HomeScreen+0x24>
			break;
 8006400:	bf00      	nop
 8006402:	e757      	b.n	80062b4 <UI_HomeScreen+0x24>
			break;
 8006404:	bf00      	nop
 8006406:	e755      	b.n	80062b4 <UI_HomeScreen+0x24>
			break;
 8006408:	bf00      	nop
 800640a:	e753      	b.n	80062b4 <UI_HomeScreen+0x24>
			break;
 800640c:	bf00      	nop
	while(1) {
 800640e:	e751      	b.n	80062b4 <UI_HomeScreen+0x24>
		}
	}
	return UI_IDLE;
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20000ccc 	.word	0x20000ccc
 800641c:	20000fcb 	.word	0x20000fcb
 8006420:	20000fcc 	.word	0x20000fcc
 8006424:	20000fd0 	.word	0x20000fd0

08006428 <UI_MirroringPlan>:



void UI_MirroringPlan() {
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
	for(int i=0; i<plan.num_action; i++) {
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e032      	b.n	800649a <UI_MirroringPlan+0x72>
		Action_typedef temp;
		temp = GetActionOther(num_plan, i);
 8006434:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <UI_MirroringPlan+0x88>)
 8006436:	7819      	ldrb	r1, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	463b      	mov	r3, r7
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fe82 	bl	8005148 <GetActionOther>
		switch(temp.act) {
 8006444:	783b      	ldrb	r3, [r7, #0]
 8006446:	3b01      	subs	r3, #1
 8006448:	2b05      	cmp	r3, #5
 800644a:	d822      	bhi.n	8006492 <UI_MirroringPlan+0x6a>
 800644c:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UI_MirroringPlan+0x2c>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	0800646d 	.word	0x0800646d
 8006458:	08006473 	.word	0x08006473
 800645c:	08006493 	.word	0x08006493
 8006460:	08006493 	.word	0x08006493
 8006464:	08006479 	.word	0x08006479
 8006468:	0800647f 	.word	0x0800647f
		case 1: temp.act = 2; break;
 800646c:	2302      	movs	r3, #2
 800646e:	703b      	strb	r3, [r7, #0]
 8006470:	e008      	b.n	8006484 <UI_MirroringPlan+0x5c>
		case 2: temp.act = 1; break;
 8006472:	2301      	movs	r3, #1
 8006474:	703b      	strb	r3, [r7, #0]
 8006476:	e005      	b.n	8006484 <UI_MirroringPlan+0x5c>
		case 5: temp.act = 6; break;
 8006478:	2306      	movs	r3, #6
 800647a:	703b      	strb	r3, [r7, #0]
 800647c:	e002      	b.n	8006484 <UI_MirroringPlan+0x5c>
		case 6: temp.act = 5; break;
 800647e:	2305      	movs	r3, #5
 8006480:	703b      	strb	r3, [r7, #0]
 8006482:	bf00      	nop
		default: continue;
		}
		SetActionOther(temp, i);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	463a      	mov	r2, r7
 800648a:	ca07      	ldmia	r2, {r0, r1, r2}
 800648c:	f7fe fe9c 	bl	80051c8 <SetActionOther>
 8006490:	e000      	b.n	8006494 <UI_MirroringPlan+0x6c>
		default: continue;
 8006492:	bf00      	nop
	for(int i=0; i<plan.num_action; i++) {
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <UI_MirroringPlan+0x8c>)
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	461a      	mov	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	dbc6      	blt.n	8006434 <UI_MirroringPlan+0xc>
	}
}
 80064a6:	bf00      	nop
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000cc9 	.word	0x20000cc9
 80064b4:	20000d54 	.word	0x20000d54

080064b8 <UI_SettingDisplayInit>:
		" Memory",
		" Hardware (NOP)",
		" Who Am I?"
};

void UI_SettingDisplayInit() {
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
	setting_menu[0].origin_x = 3;
 80064be:	4b42      	ldr	r3, [pc, #264]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 80064c0:	2203      	movs	r2, #3
 80064c2:	701a      	strb	r2, [r3, #0]
	setting_menu[0].origin_y = 13;
 80064c4:	4b40      	ldr	r3, [pc, #256]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 80064c6:	220d      	movs	r2, #13
 80064c8:	705a      	strb	r2, [r3, #1]
	setting_menu[0].size_x = 120;
 80064ca:	4b3f      	ldr	r3, [pc, #252]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 80064cc:	2278      	movs	r2, #120	; 0x78
 80064ce:	70da      	strb	r2, [r3, #3]
	setting_menu[0].size_y = 11;
 80064d0:	4b3d      	ldr	r3, [pc, #244]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 80064d2:	220b      	movs	r2, #11
 80064d4:	711a      	strb	r2, [r3, #4]
	setting_menu[0].color = DISP_COLOR_WHITE;
 80064d6:	4b3c      	ldr	r3, [pc, #240]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 80064d8:	2200      	movs	r2, #0
 80064da:	709a      	strb	r2, [r3, #2]
	setting_menu[0].align_y = DISP_ALIGN_CENTER;
 80064dc:	4b3a      	ldr	r3, [pc, #232]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 80064de:	2202      	movs	r2, #2
 80064e0:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 80064e2:	2301      	movs	r3, #1
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	e050      	b.n	800658a <UI_SettingDisplayInit+0xd2>

		setting_menu[i].origin_x = setting_menu[0].origin_x;
 80064e8:	4b37      	ldr	r3, [pc, #220]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 80064ea:	7818      	ldrb	r0, [r3, #0]
 80064ec:	4936      	ldr	r1, [pc, #216]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4613      	mov	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	440b      	add	r3, r1
 80064f8:	4602      	mov	r2, r0
 80064fa:	701a      	strb	r2, [r3, #0]
		setting_menu[i].origin_y = setting_menu[i-1].origin_y+setting_menu[0].size_y+2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	1e5a      	subs	r2, r3, #1
 8006500:	4931      	ldr	r1, [pc, #196]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	440b      	add	r3, r1
 800650a:	3301      	adds	r3, #1
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 8006510:	791b      	ldrb	r3, [r3, #4]
 8006512:	4413      	add	r3, r2
 8006514:	b2db      	uxtb	r3, r3
 8006516:	3302      	adds	r3, #2
 8006518:	b2d8      	uxtb	r0, r3
 800651a:	492b      	ldr	r1, [pc, #172]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	440b      	add	r3, r1
 8006526:	3301      	adds	r3, #1
 8006528:	4602      	mov	r2, r0
 800652a:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_x = setting_menu[0].size_x;
 800652c:	4b26      	ldr	r3, [pc, #152]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 800652e:	78d8      	ldrb	r0, [r3, #3]
 8006530:	4925      	ldr	r1, [pc, #148]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	440b      	add	r3, r1
 800653c:	3303      	adds	r3, #3
 800653e:	4602      	mov	r2, r0
 8006540:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_y = setting_menu[0].size_y;
 8006542:	4b21      	ldr	r3, [pc, #132]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 8006544:	7918      	ldrb	r0, [r3, #4]
 8006546:	4920      	ldr	r1, [pc, #128]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	4613      	mov	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	440b      	add	r3, r1
 8006552:	3304      	adds	r3, #4
 8006554:	4602      	mov	r2, r0
 8006556:	701a      	strb	r2, [r3, #0]
		setting_menu[i].color = setting_menu[0].color;
 8006558:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 800655a:	7898      	ldrb	r0, [r3, #2]
 800655c:	491a      	ldr	r1, [pc, #104]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	440b      	add	r3, r1
 8006568:	3302      	adds	r3, #2
 800656a:	4602      	mov	r2, r0
 800656c:	701a      	strb	r2, [r3, #0]
		setting_menu[i].align_y = setting_menu[0].align_y;
 800656e:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 8006570:	7998      	ldrb	r0, [r3, #6]
 8006572:	4915      	ldr	r1, [pc, #84]	; (80065c8 <UI_SettingDisplayInit+0x110>)
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	440b      	add	r3, r1
 800657e:	3306      	adds	r3, #6
 8006580:	4602      	mov	r2, r0
 8006582:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b03      	cmp	r3, #3
 800658e:	ddab      	ble.n	80064e8 <UI_SettingDisplayInit+0x30>
	}

	setting_head.origin_x = 0;
 8006590:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <UI_SettingDisplayInit+0x114>)
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
	setting_head.origin_y = 0;
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <UI_SettingDisplayInit+0x114>)
 8006598:	2200      	movs	r2, #0
 800659a:	705a      	strb	r2, [r3, #1]
	setting_head.size_x = 127;
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <UI_SettingDisplayInit+0x114>)
 800659e:	227f      	movs	r2, #127	; 0x7f
 80065a0:	70da      	strb	r2, [r3, #3]
	setting_head.size_y = 10;
 80065a2:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <UI_SettingDisplayInit+0x114>)
 80065a4:	220a      	movs	r2, #10
 80065a6:	711a      	strb	r2, [r3, #4]
	setting_head.color = DISP_COLOR_BLACK;
 80065a8:	4b08      	ldr	r3, [pc, #32]	; (80065cc <UI_SettingDisplayInit+0x114>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	709a      	strb	r2, [r3, #2]
	setting_head.align_x = DISP_ALIGN_CENTER;
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <UI_SettingDisplayInit+0x114>)
 80065b0:	2202      	movs	r2, #2
 80065b2:	715a      	strb	r2, [r3, #5]
	setting_head.align_y = DISP_ALIGN_CENTER;
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <UI_SettingDisplayInit+0x114>)
 80065b6:	2202      	movs	r2, #2
 80065b8:	719a      	strb	r2, [r3, #6]
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000f1c 	.word	0x20000f1c
 80065cc:	20000f38 	.word	0x20000f38

080065d0 <UI_SettingDisplay>:

void UI_SettingDisplay(uint8_t num) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	4a29      	ldr	r2, [pc, #164]	; (8006684 <UI_SettingDisplay+0xb4>)
 80065de:	f992 2000 	ldrsb.w	r2, [r2]
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	dd06      	ble.n	80065f6 <UI_SettingDisplay+0x26>
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	3b03      	subs	r3, #3
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	b25a      	sxtb	r2, r3
 80065f0:	4b24      	ldr	r3, [pc, #144]	; (8006684 <UI_SettingDisplay+0xb4>)
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e009      	b.n	800660a <UI_SettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	4a22      	ldr	r2, [pc, #136]	; (8006684 <UI_SettingDisplay+0xb4>)
 80065fa:	f992 2000 	ldrsb.w	r2, [r2]
 80065fe:	4293      	cmp	r3, r2
 8006600:	da03      	bge.n	800660a <UI_SettingDisplay+0x3a>
 8006602:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006606:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <UI_SettingDisplay+0xb4>)
 8006608:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e031      	b.n	8006674 <UI_SettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8006610:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <UI_SettingDisplay+0xb4>)
 8006612:	f993 3000 	ldrsb.w	r3, [r3]
 8006616:	461a      	mov	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	441a      	add	r2, r3
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	429a      	cmp	r2, r3
 8006620:	d109      	bne.n	8006636 <UI_SettingDisplay+0x66>
 8006622:	4919      	ldr	r1, [pc, #100]	; (8006688 <UI_SettingDisplay+0xb8>)
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4613      	mov	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	440b      	add	r3, r1
 800662e:	3302      	adds	r3, #2
 8006630:	2201      	movs	r2, #1
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	e008      	b.n	8006648 <UI_SettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8006636:	4914      	ldr	r1, [pc, #80]	; (8006688 <UI_SettingDisplay+0xb8>)
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4613      	mov	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	440b      	add	r3, r1
 8006642:	3302      	adds	r3, #2
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], setting_menus[i+first_list]);
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	1a9b      	subs	r3, r3, r2
 8006650:	4a0d      	ldr	r2, [pc, #52]	; (8006688 <UI_SettingDisplay+0xb8>)
 8006652:	441a      	add	r2, r3
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <UI_SettingDisplay+0xb4>)
 8006656:	f993 3000 	ldrsb.w	r3, [r3]
 800665a:	4619      	mov	r1, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	440b      	add	r3, r1
 8006660:	490a      	ldr	r1, [pc, #40]	; (800668c <UI_SettingDisplay+0xbc>)
 8006662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fb f915 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b03      	cmp	r3, #3
 8006678:	ddca      	ble.n	8006610 <UI_SettingDisplay+0x40>
	}
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20000fd1 	.word	0x20000fd1
 8006688:	20000f1c 	.word	0x20000f1c
 800668c:	200002a4 	.word	0x200002a4

08006690 <UI_Setting>:

UI_Menu_Lists UI_Setting() {
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "SETTING");
 800669a:	4964      	ldr	r1, [pc, #400]	; (800682c <UI_Setting+0x19c>)
 800669c:	4864      	ldr	r0, [pc, #400]	; (8006830 <UI_Setting+0x1a0>)
 800669e:	f7fb f8fb 	bl	8001898 <DISP_DisplayText>
	ui_setting:
	UI_SettingDisplay(num_menu);
 80066a2:	4b64      	ldr	r3, [pc, #400]	; (8006834 <UI_Setting+0x1a4>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff ff92 	bl	80065d0 <UI_SettingDisplay>
	tick = HAL_GetTick();
 80066ac:	f002 fd42 	bl	8009134 <HAL_GetTick>
 80066b0:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80066b2:	f002 fd3f 	bl	8009134 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b45      	cmp	r3, #69	; 0x45
 80066be:	f240 80a0 	bls.w	8006802 <UI_Setting+0x172>
		if(bt == UI_ReadButton()) continue;
 80066c2:	f7ff fc83 	bl	8005fcc <UI_ReadButton>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	f000 809a 	beq.w	8006806 <UI_Setting+0x176>
		bt = UI_ReadButton();
 80066d2:	f7ff fc7b 	bl	8005fcc <UI_ReadButton>
 80066d6:	4603      	mov	r3, r0
 80066d8:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <UI_Setting+0x72>
			if(num_menu==7) num_menu = 0; else num_menu++;
 80066e4:	4b53      	ldr	r3, [pc, #332]	; (8006834 <UI_Setting+0x1a4>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b07      	cmp	r3, #7
 80066ea:	d103      	bne.n	80066f4 <UI_Setting+0x64>
 80066ec:	4b51      	ldr	r3, [pc, #324]	; (8006834 <UI_Setting+0x1a4>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	e7d6      	b.n	80066a2 <UI_Setting+0x12>
 80066f4:	4b4f      	ldr	r3, [pc, #316]	; (8006834 <UI_Setting+0x1a4>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	4b4d      	ldr	r3, [pc, #308]	; (8006834 <UI_Setting+0x1a4>)
 80066fe:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8006700:	e7cf      	b.n	80066a2 <UI_Setting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00e      	beq.n	800672a <UI_Setting+0x9a>
			if(num_menu==0) num_menu = 7; else num_menu--;
 800670c:	4b49      	ldr	r3, [pc, #292]	; (8006834 <UI_Setting+0x1a4>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d103      	bne.n	800671c <UI_Setting+0x8c>
 8006714:	4b47      	ldr	r3, [pc, #284]	; (8006834 <UI_Setting+0x1a4>)
 8006716:	2207      	movs	r2, #7
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	e7c2      	b.n	80066a2 <UI_Setting+0x12>
 800671c:	4b45      	ldr	r3, [pc, #276]	; (8006834 <UI_Setting+0x1a4>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	3b01      	subs	r3, #1
 8006722:	b2da      	uxtb	r2, r3
 8006724:	4b43      	ldr	r3, [pc, #268]	; (8006834 <UI_Setting+0x1a4>)
 8006726:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8006728:	e7bb      	b.n	80066a2 <UI_Setting+0x12>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <UI_Setting+0xae>
			num_menu = 0;
 8006734:	4b3f      	ldr	r3, [pc, #252]	; (8006834 <UI_Setting+0x1a4>)
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800673a:	2302      	movs	r3, #2
 800673c:	e071      	b.n	8006822 <UI_Setting+0x192>
		}
		switch(num_menu) {
 800673e:	4b3d      	ldr	r3, [pc, #244]	; (8006834 <UI_Setting+0x1a4>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b05      	cmp	r3, #5
 8006744:	d8b5      	bhi.n	80066b2 <UI_Setting+0x22>
 8006746:	a201      	add	r2, pc, #4	; (adr r2, 800674c <UI_Setting+0xbc>)
 8006748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674c:	08006765 	.word	0x08006765
 8006750:	08006773 	.word	0x08006773
 8006754:	08006781 	.word	0x08006781
 8006758:	0800678f 	.word	0x0800678f
 800675c:	0800679d 	.word	0x0800679d
 8006760:	080067f5 	.word	0x080067f5
		case 0:
			if(bt & SW_OK_PRESS) {
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04d      	beq.n	800680a <UI_Setting+0x17a>
				return UI_SET_ADC;
 800676e:	2308      	movs	r3, #8
 8006770:	e057      	b.n	8006822 <UI_Setting+0x192>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d048      	beq.n	800680e <UI_Setting+0x17e>
				return UI_SET_CALIB;
 800677c:	2309      	movs	r3, #9
 800677e:	e050      	b.n	8006822 <UI_Setting+0x192>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d043      	beq.n	8006812 <UI_Setting+0x182>
				return UI_SET_CP;
 800678a:	230a      	movs	r3, #10
 800678c:	e049      	b.n	8006822 <UI_Setting+0x192>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d03e      	beq.n	8006816 <UI_Setting+0x186>
				return UI_SET_PID;
 8006798:	230b      	movs	r3, #11
 800679a:	e042      	b.n	8006822 <UI_Setting+0x192>
			}
			break;
		case 4:
			if(bt & SW_OK_PRESS) {
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d039      	beq.n	800681a <UI_Setting+0x18a>
				DISP_DisplayText(&short_message, "Are You Sure?");
 80067a6:	4924      	ldr	r1, [pc, #144]	; (8006838 <UI_Setting+0x1a8>)
 80067a8:	4824      	ldr	r0, [pc, #144]	; (800683c <UI_Setting+0x1ac>)
 80067aa:	f7fb f875 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 80067ae:	f7ff fc0d 	bl	8005fcc <UI_ReadButton>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461a      	mov	r2, r3
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d019      	beq.n	80067f0 <UI_Setting+0x160>
					bt = UI_ReadButton();
 80067bc:	f7ff fc06 	bl	8005fcc <UI_ReadButton>
 80067c0:	4603      	mov	r3, r0
 80067c2:	71fb      	strb	r3, [r7, #7]
					if(bt & SW_OK_PRESS) {
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UI_Setting+0x154>
						DISP_DisplayText(&short_message, "Mirroring...");
 80067ce:	491c      	ldr	r1, [pc, #112]	; (8006840 <UI_Setting+0x1b0>)
 80067d0:	481a      	ldr	r0, [pc, #104]	; (800683c <UI_Setting+0x1ac>)
 80067d2:	f7fb f861 	bl	8001898 <DISP_DisplayText>
						UI_MirroringPlan();
 80067d6:	f7ff fe27 	bl	8006428 <UI_MirroringPlan>
						DISP_DisplayText(&short_message, "Mirroring Done!");
 80067da:	491a      	ldr	r1, [pc, #104]	; (8006844 <UI_Setting+0x1b4>)
 80067dc:	4817      	ldr	r0, [pc, #92]	; (800683c <UI_Setting+0x1ac>)
 80067de:	f7fb f85b 	bl	8001898 <DISP_DisplayText>
						goto ui_setting;
 80067e2:	e75e      	b.n	80066a2 <UI_Setting+0x12>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0df      	beq.n	80067ae <UI_Setting+0x11e>
						goto ui_setting;
 80067ee:	e758      	b.n	80066a2 <UI_Setting+0x12>
					if(bt == UI_ReadButton()) continue;
 80067f0:	bf00      	nop
 80067f2:	e7dc      	b.n	80067ae <UI_Setting+0x11e>
					}
				}
			}
			break;
		case 5:
			if(bt & SW_OK_PRESS) {
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00f      	beq.n	800681e <UI_Setting+0x18e>
				return UI_SET_MEM;
 80067fe:	230d      	movs	r3, #13
 8006800:	e00f      	b.n	8006822 <UI_Setting+0x192>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006802:	bf00      	nop
 8006804:	e755      	b.n	80066b2 <UI_Setting+0x22>
		if(bt == UI_ReadButton()) continue;
 8006806:	bf00      	nop
 8006808:	e753      	b.n	80066b2 <UI_Setting+0x22>
			break;
 800680a:	bf00      	nop
 800680c:	e751      	b.n	80066b2 <UI_Setting+0x22>
			break;
 800680e:	bf00      	nop
 8006810:	e74f      	b.n	80066b2 <UI_Setting+0x22>
			break;
 8006812:	bf00      	nop
 8006814:	e74d      	b.n	80066b2 <UI_Setting+0x22>
			break;
 8006816:	bf00      	nop
 8006818:	e74b      	b.n	80066b2 <UI_Setting+0x22>
			break;
 800681a:	bf00      	nop
 800681c:	e749      	b.n	80066b2 <UI_Setting+0x22>
			}
			break;
 800681e:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006820:	e747      	b.n	80066b2 <UI_Setting+0x22>
		}
	}
	return UI_IDLE;
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	080111c8 	.word	0x080111c8
 8006830:	20000f14 	.word	0x20000f14
 8006834:	20000fd2 	.word	0x20000fd2
 8006838:	080111d0 	.word	0x080111d0
 800683c:	20000ee8 	.word	0x20000ee8
 8006840:	080111e0 	.word	0x080111e0
 8006844:	080111f0 	.word	0x080111f0

08006848 <UI_PlanSetDisplayInit>:
		" Delay",
		" Enc Val"
};


void UI_PlanSetDisplayInit() {
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
	planset_list_name[0].origin_x = 6;
 800684e:	4b49      	ldr	r3, [pc, #292]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 8006850:	2206      	movs	r2, #6
 8006852:	701a      	strb	r2, [r3, #0]
	planset_list_name[0].origin_y = 16;
 8006854:	4b47      	ldr	r3, [pc, #284]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 8006856:	2210      	movs	r2, #16
 8006858:	705a      	strb	r2, [r3, #1]
	planset_list_name[0].size_x = 54;
 800685a:	4b46      	ldr	r3, [pc, #280]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 800685c:	2236      	movs	r2, #54	; 0x36
 800685e:	70da      	strb	r2, [r3, #3]
	planset_list_name[0].size_y = 11;
 8006860:	4b44      	ldr	r3, [pc, #272]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 8006862:	220b      	movs	r2, #11
 8006864:	711a      	strb	r2, [r3, #4]
	planset_list_name[0].color = DISP_COLOR_WHITE;
 8006866:	4b43      	ldr	r3, [pc, #268]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 8006868:	2200      	movs	r2, #0
 800686a:	709a      	strb	r2, [r3, #2]
	planset_list_name[0].align_y = DISP_ALIGN_CENTER;
 800686c:	4b41      	ldr	r3, [pc, #260]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 800686e:	2202      	movs	r2, #2
 8006870:	719a      	strb	r2, [r3, #6]

	planset_list_value[0] = planset_list_name[0];
 8006872:	4b41      	ldr	r3, [pc, #260]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 8006874:	4a3f      	ldr	r2, [pc, #252]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 8006876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800687a:	6018      	str	r0, [r3, #0]
 800687c:	3304      	adds	r3, #4
 800687e:	8019      	strh	r1, [r3, #0]
 8006880:	3302      	adds	r3, #2
 8006882:	0c0a      	lsrs	r2, r1, #16
 8006884:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].origin_x = 62;
 8006886:	4b3c      	ldr	r3, [pc, #240]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 8006888:	223e      	movs	r2, #62	; 0x3e
 800688a:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].size_x = 58;
 800688c:	4b3a      	ldr	r3, [pc, #232]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 800688e:	223a      	movs	r2, #58	; 0x3a
 8006890:	70da      	strb	r2, [r3, #3]
	planset_list_value[0].align_x = DISP_ALIGN_CENTER;
 8006892:	4b39      	ldr	r3, [pc, #228]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 8006894:	2202      	movs	r2, #2
 8006896:	715a      	strb	r2, [r3, #5]


	for(int i=1; i<4; i++) {
 8006898:	2301      	movs	r3, #1
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	e04c      	b.n	8006938 <UI_PlanSetDisplayInit+0xf0>
		planset_list_name[i] = planset_list_name[0];
 800689e:	4935      	ldr	r1, [pc, #212]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	440b      	add	r3, r1
 80068aa:	4a32      	ldr	r2, [pc, #200]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 80068ac:	6810      	ldr	r0, [r2, #0]
 80068ae:	6018      	str	r0, [r3, #0]
 80068b0:	8891      	ldrh	r1, [r2, #4]
 80068b2:	7992      	ldrb	r2, [r2, #6]
 80068b4:	8099      	strh	r1, [r3, #4]
 80068b6:	719a      	strb	r2, [r3, #6]
		planset_list_name[i].origin_y = planset_list_name[i-1].origin_y+planset_list_name[0].size_y+1;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1e5a      	subs	r2, r3, #1
 80068bc:	492d      	ldr	r1, [pc, #180]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 80068be:	4613      	mov	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	440b      	add	r3, r1
 80068c6:	3301      	adds	r3, #1
 80068c8:	781a      	ldrb	r2, [r3, #0]
 80068ca:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 80068cc:	791b      	ldrb	r3, [r3, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	3301      	adds	r3, #1
 80068d4:	b2d8      	uxtb	r0, r3
 80068d6:	4927      	ldr	r1, [pc, #156]	; (8006974 <UI_PlanSetDisplayInit+0x12c>)
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	440b      	add	r3, r1
 80068e2:	3301      	adds	r3, #1
 80068e4:	4602      	mov	r2, r0
 80068e6:	701a      	strb	r2, [r3, #0]

		planset_list_value[i] = planset_list_value[0];
 80068e8:	4923      	ldr	r1, [pc, #140]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	440b      	add	r3, r1
 80068f4:	4a20      	ldr	r2, [pc, #128]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 80068f6:	6810      	ldr	r0, [r2, #0]
 80068f8:	6018      	str	r0, [r3, #0]
 80068fa:	8891      	ldrh	r1, [r2, #4]
 80068fc:	7992      	ldrb	r2, [r2, #6]
 80068fe:	8099      	strh	r1, [r3, #4]
 8006900:	719a      	strb	r2, [r3, #6]
		planset_list_value[i].origin_y = planset_list_value[i-1].origin_y+planset_list_value[0].size_y+1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	1e5a      	subs	r2, r3, #1
 8006906:	491c      	ldr	r1, [pc, #112]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 8006908:	4613      	mov	r3, r2
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	1a9b      	subs	r3, r3, r2
 800690e:	440b      	add	r3, r1
 8006910:	3301      	adds	r3, #1
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	4b18      	ldr	r3, [pc, #96]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 8006916:	791b      	ldrb	r3, [r3, #4]
 8006918:	4413      	add	r3, r2
 800691a:	b2db      	uxtb	r3, r3
 800691c:	3301      	adds	r3, #1
 800691e:	b2d8      	uxtb	r0, r3
 8006920:	4915      	ldr	r1, [pc, #84]	; (8006978 <UI_PlanSetDisplayInit+0x130>)
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	4613      	mov	r3, r2
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	440b      	add	r3, r1
 800692c:	3301      	adds	r3, #1
 800692e:	4602      	mov	r2, r0
 8006930:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3301      	adds	r3, #1
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b03      	cmp	r3, #3
 800693c:	ddaf      	ble.n	800689e <UI_PlanSetDisplayInit+0x56>
	}

	planset_head.origin_x = 0;
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <UI_PlanSetDisplayInit+0x134>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
	planset_head.origin_y = 0;
 8006944:	4b0d      	ldr	r3, [pc, #52]	; (800697c <UI_PlanSetDisplayInit+0x134>)
 8006946:	2200      	movs	r2, #0
 8006948:	705a      	strb	r2, [r3, #1]
	planset_head.size_x = 127;
 800694a:	4b0c      	ldr	r3, [pc, #48]	; (800697c <UI_PlanSetDisplayInit+0x134>)
 800694c:	227f      	movs	r2, #127	; 0x7f
 800694e:	70da      	strb	r2, [r3, #3]
	planset_head.size_y = 13;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <UI_PlanSetDisplayInit+0x134>)
 8006952:	220d      	movs	r2, #13
 8006954:	711a      	strb	r2, [r3, #4]
	planset_head.color = DISP_COLOR_BLACK;
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <UI_PlanSetDisplayInit+0x134>)
 8006958:	2201      	movs	r2, #1
 800695a:	709a      	strb	r2, [r3, #2]
	planset_head.align_x = DISP_ALIGN_LEFT;
 800695c:	4b07      	ldr	r3, [pc, #28]	; (800697c <UI_PlanSetDisplayInit+0x134>)
 800695e:	2200      	movs	r2, #0
 8006960:	715a      	strb	r2, [r3, #5]
	planset_head.align_y = DISP_ALIGN_CENTER;
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <UI_PlanSetDisplayInit+0x134>)
 8006964:	2202      	movs	r2, #2
 8006966:	719a      	strb	r2, [r3, #6]
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20000f40 	.word	0x20000f40
 8006978:	20000f5c 	.word	0x20000f5c
 800697c:	20000f78 	.word	0x20000f78

08006980 <UI_PlanSetDisplay>:

void UI_PlanSetDisplay(int8_t num, Action_typedef* plan, uint8_t num_index) {
 8006980:	b580      	push	{r7, lr}
 8006982:	b08c      	sub	sp, #48	; 0x30
 8006984:	af02      	add	r7, sp, #8
 8006986:	4603      	mov	r3, r0
 8006988:	6039      	str	r1, [r7, #0]
 800698a:	71fb      	strb	r3, [r7, #7]
 800698c:	4613      	mov	r3, r2
 800698e:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	static int8_t first_list = 0;
	uint8_t temp = (num == -1);
 8006990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	bf0c      	ite	eq
 800699a:	2301      	moveq	r3, #1
 800699c:	2300      	movne	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	sprintf(buff, " %03i ~ %s", num_index, plan_act_lists[plan->act]);
 80069a4:	79ba      	ldrb	r2, [r7, #6]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	4619      	mov	r1, r3
 80069ac:	4bba      	ldr	r3, [pc, #744]	; (8006c98 <UI_PlanSetDisplay+0x318>)
 80069ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069b2:	f107 000c 	add.w	r0, r7, #12
 80069b6:	49b9      	ldr	r1, [pc, #740]	; (8006c9c <UI_PlanSetDisplay+0x31c>)
 80069b8:	f008 fa1a 	bl	800edf0 <siprintf>
	if(temp) planset_head.color = DISP_COLOR_BLACK; else planset_head.color = DISP_COLOR_WHITE;
 80069bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <UI_PlanSetDisplay+0x4c>
 80069c4:	4bb6      	ldr	r3, [pc, #728]	; (8006ca0 <UI_PlanSetDisplay+0x320>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	709a      	strb	r2, [r3, #2]
 80069ca:	e002      	b.n	80069d2 <UI_PlanSetDisplay+0x52>
 80069cc:	4bb4      	ldr	r3, [pc, #720]	; (8006ca0 <UI_PlanSetDisplay+0x320>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	709a      	strb	r2, [r3, #2]
	DISP_DisplayText(&planset_head, buff);
 80069d2:	f107 030c 	add.w	r3, r7, #12
 80069d6:	4619      	mov	r1, r3
 80069d8:	48b1      	ldr	r0, [pc, #708]	; (8006ca0 <UI_PlanSetDisplay+0x320>)
 80069da:	f7fa ff5d 	bl	8001898 <DISP_DisplayText>
	DISP_DrawLineSimple(0, 14, 127, 14, DISP_COLOR_WHITE);
 80069de:	2300      	movs	r3, #0
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	230e      	movs	r3, #14
 80069e4:	227f      	movs	r2, #127	; 0x7f
 80069e6:	210e      	movs	r1, #14
 80069e8:	2000      	movs	r0, #0
 80069ea:	f7fa fdc1 	bl	8001570 <DISP_DrawLineSimple>
	DISP_OLEDUpdate(0, 13, 127, 13);
 80069ee:	230d      	movs	r3, #13
 80069f0:	227f      	movs	r2, #127	; 0x7f
 80069f2:	210d      	movs	r1, #13
 80069f4:	2000      	movs	r0, #0
 80069f6:	f7fb f821 	bl	8001a3c <DISP_OLEDUpdate>
	if(num==-1) num = 0;
 80069fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d101      	bne.n	8006a08 <UI_PlanSetDisplay+0x88>
 8006a04:	2300      	movs	r3, #0
 8006a06:	71fb      	strb	r3, [r7, #7]
	if(num - first_list >= 4) first_list = (num-3);
 8006a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0c:	4aa5      	ldr	r2, [pc, #660]	; (8006ca4 <UI_PlanSetDisplay+0x324>)
 8006a0e:	f992 2000 	ldrsb.w	r2, [r2]
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	dd06      	ble.n	8006a26 <UI_PlanSetDisplay+0xa6>
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	3b03      	subs	r3, #3
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	b25a      	sxtb	r2, r3
 8006a20:	4ba0      	ldr	r3, [pc, #640]	; (8006ca4 <UI_PlanSetDisplay+0x324>)
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	e009      	b.n	8006a3a <UI_PlanSetDisplay+0xba>
	else if(num < first_list) first_list = num;
 8006a26:	4b9f      	ldr	r3, [pc, #636]	; (8006ca4 <UI_PlanSetDisplay+0x324>)
 8006a28:	f993 3000 	ldrsb.w	r3, [r3]
 8006a2c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	da02      	bge.n	8006a3a <UI_PlanSetDisplay+0xba>
 8006a34:	4a9b      	ldr	r2, [pc, #620]	; (8006ca4 <UI_PlanSetDisplay+0x324>)
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<4; i++) {
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3e:	e23d      	b.n	8006ebc <UI_PlanSetDisplay+0x53c>
		if(i + first_list == num && !temp) {
 8006a40:	4b98      	ldr	r3, [pc, #608]	; (8006ca4 <UI_PlanSetDisplay+0x324>)
 8006a42:	f993 3000 	ldrsb.w	r3, [r3]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	441a      	add	r2, r3
 8006a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d116      	bne.n	8006a82 <UI_PlanSetDisplay+0x102>
 8006a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d112      	bne.n	8006a82 <UI_PlanSetDisplay+0x102>
			planset_list_name[i].color = DISP_COLOR_BLACK;
 8006a5c:	4992      	ldr	r1, [pc, #584]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a60:	4613      	mov	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	440b      	add	r3, r1
 8006a68:	3302      	adds	r3, #2
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_BLACK;
 8006a6e:	498f      	ldr	r1, [pc, #572]	; (8006cac <UI_PlanSetDisplay+0x32c>)
 8006a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	440b      	add	r3, r1
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e011      	b.n	8006aa6 <UI_PlanSetDisplay+0x126>
		}
		else {
			planset_list_name[i].color = DISP_COLOR_WHITE;
 8006a82:	4989      	ldr	r1, [pc, #548]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	3302      	adds	r3, #2
 8006a90:	2200      	movs	r2, #0
 8006a92:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_WHITE;
 8006a94:	4985      	ldr	r1, [pc, #532]	; (8006cac <UI_PlanSetDisplay+0x32c>)
 8006a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	3302      	adds	r3, #2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
		}
		switch(first_list + i) {
 8006aa6:	4b7f      	ldr	r3, [pc, #508]	; (8006ca4 <UI_PlanSetDisplay+0x324>)
 8006aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8006aac:	461a      	mov	r2, r3
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	4413      	add	r3, r2
 8006ab2:	2b0c      	cmp	r3, #12
 8006ab4:	f200 81ff 	bhi.w	8006eb6 <UI_PlanSetDisplay+0x536>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <UI_PlanSetDisplay+0x140>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006af5 	.word	0x08006af5
 8006ac4:	08006b35 	.word	0x08006b35
 8006ac8:	08006b6b 	.word	0x08006b6b
 8006acc:	08006bd5 	.word	0x08006bd5
 8006ad0:	08006c15 	.word	0x08006c15
 8006ad4:	08006c57 	.word	0x08006c57
 8006ad8:	08006cd5 	.word	0x08006cd5
 8006adc:	08006d15 	.word	0x08006d15
 8006ae0:	08006d55 	.word	0x08006d55
 8006ae4:	08006d95 	.word	0x08006d95
 8006ae8:	08006df3 	.word	0x08006df3
 8006aec:	08006e61 	.word	0x08006e61
 8006af0:	08006e8b 	.word	0x08006e8b
		case 0:
			DISP_DisplayText(&planset_list_name[i], " Sensor");
 8006af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af6:	4613      	mov	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	4a6a      	ldr	r2, [pc, #424]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006afe:	4413      	add	r3, r2
 8006b00:	496b      	ldr	r1, [pc, #428]	; (8006cb0 <UI_PlanSetDisplay+0x330>)
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fa fec8 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->sen_trig);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f107 030c 	add.w	r3, r7, #12
 8006b12:	4968      	ldr	r1, [pc, #416]	; (8006cb4 <UI_PlanSetDisplay+0x334>)
 8006b14:	4618      	mov	r0, r3
 8006b16:	f008 f96b 	bl	800edf0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	4a62      	ldr	r2, [pc, #392]	; (8006cac <UI_PlanSetDisplay+0x32c>)
 8006b24:	4413      	add	r3, r2
 8006b26:	f107 020c 	add.w	r2, r7, #12
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fa feb3 	bl	8001898 <DISP_DisplayText>
			break;
 8006b32:	e1c0      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 1:
			DISP_DisplayText(&planset_list_name[i], " Mode");
 8006b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b36:	4613      	mov	r3, r2
 8006b38:	00db      	lsls	r3, r3, #3
 8006b3a:	1a9b      	subs	r3, r3, r2
 8006b3c:	4a5a      	ldr	r2, [pc, #360]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006b3e:	4413      	add	r3, r2
 8006b40:	495d      	ldr	r1, [pc, #372]	; (8006cb8 <UI_PlanSetDisplay+0x338>)
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fa fea8 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], plan_mode_lists[plan->act_mode]);
 8006b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	4a56      	ldr	r2, [pc, #344]	; (8006cac <UI_PlanSetDisplay+0x32c>)
 8006b52:	441a      	add	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	789b      	ldrb	r3, [r3, #2]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4b58      	ldr	r3, [pc, #352]	; (8006cbc <UI_PlanSetDisplay+0x33c>)
 8006b5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f7fa fe98 	bl	8001898 <DISP_DisplayText>
			break;
 8006b68:	e1a5      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 2:
			if(plan->act != PLAN_JUMP) {
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b0b      	cmp	r3, #11
 8006b70:	d010      	beq.n	8006b94 <UI_PlanSetDisplay+0x214>
				DISP_DisplayText(&planset_list_name[i], plan_act_value_lists[plan->act_mode]);
 8006b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	4a4b      	ldr	r2, [pc, #300]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006b7c:	441a      	add	r2, r3
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	789b      	ldrb	r3, [r3, #2]
 8006b82:	4619      	mov	r1, r3
 8006b84:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <UI_PlanSetDisplay+0x340>)
 8006b86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f7fa fe83 	bl	8001898 <DISP_DisplayText>
 8006b92:	e009      	b.n	8006ba8 <UI_PlanSetDisplay+0x228>
			}
			else {
				DISP_DisplayText(&planset_list_name[i], "Index");
 8006b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b96:	4613      	mov	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	4a42      	ldr	r2, [pc, #264]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006b9e:	4413      	add	r3, r2
 8006ba0:	4948      	ldr	r1, [pc, #288]	; (8006cc4 <UI_PlanSetDisplay+0x344>)
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fa fe78 	bl	8001898 <DISP_DisplayText>
			}
			sprintf(buff, "%i", plan->act_value);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	78db      	ldrb	r3, [r3, #3]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f107 030c 	add.w	r3, r7, #12
 8006bb2:	4940      	ldr	r1, [pc, #256]	; (8006cb4 <UI_PlanSetDisplay+0x334>)
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f008 f91b 	bl	800edf0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	4a3a      	ldr	r2, [pc, #232]	; (8006cac <UI_PlanSetDisplay+0x32c>)
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f107 020c 	add.w	r2, r7, #12
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fa fe63 	bl	8001898 <DISP_DisplayText>
			break;
 8006bd2:	e170      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 3:
			DISP_DisplayText(&planset_list_name[i], " Brake");
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	4a32      	ldr	r2, [pc, #200]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006bde:	4413      	add	r3, r2
 8006be0:	4939      	ldr	r1, [pc, #228]	; (8006cc8 <UI_PlanSetDisplay+0x348>)
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fa fe58 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->brake);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	791b      	ldrb	r3, [r3, #4]
 8006bec:	461a      	mov	r2, r3
 8006bee:	f107 030c 	add.w	r3, r7, #12
 8006bf2:	4930      	ldr	r1, [pc, #192]	; (8006cb4 <UI_PlanSetDisplay+0x334>)
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f008 f8fb 	bl	800edf0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	1a9b      	subs	r3, r3, r2
 8006c02:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <UI_PlanSetDisplay+0x32c>)
 8006c04:	4413      	add	r3, r2
 8006c06:	f107 020c 	add.w	r2, r7, #12
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fa fe43 	bl	8001898 <DISP_DisplayText>
			break;
 8006c12:	e150      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 4:
			DISP_DisplayText(&planset_list_name[i], " Fw Sp");
 8006c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c16:	4613      	mov	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	4a22      	ldr	r2, [pc, #136]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006c1e:	4413      	add	r3, r2
 8006c20:	492a      	ldr	r1, [pc, #168]	; (8006ccc <UI_PlanSetDisplay+0x34c>)
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fa fe38 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->forward_speed);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f107 030c 	add.w	r3, r7, #12
 8006c34:	491f      	ldr	r1, [pc, #124]	; (8006cb4 <UI_PlanSetDisplay+0x334>)
 8006c36:	4618      	mov	r0, r3
 8006c38:	f008 f8da 	bl	800edf0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	4a19      	ldr	r2, [pc, #100]	; (8006cac <UI_PlanSetDisplay+0x32c>)
 8006c46:	4413      	add	r3, r2
 8006c48:	f107 020c 	add.w	r2, r7, #12
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fa fe22 	bl	8001898 <DISP_DisplayText>
			break;
 8006c54:	e12f      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 5:
			DISP_DisplayText(&planset_list_name[i], " Rv Sp");
 8006c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c58:	4613      	mov	r3, r2
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	4a12      	ldr	r2, [pc, #72]	; (8006ca8 <UI_PlanSetDisplay+0x328>)
 8006c60:	4413      	add	r3, r2
 8006c62:	491b      	ldr	r1, [pc, #108]	; (8006cd0 <UI_PlanSetDisplay+0x350>)
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fa fe17 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->reverse_speed);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006c70:	461a      	mov	r2, r3
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	490f      	ldr	r1, [pc, #60]	; (8006cb4 <UI_PlanSetDisplay+0x334>)
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f008 f8b9 	bl	800edf0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c80:	4613      	mov	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <UI_PlanSetDisplay+0x32c>)
 8006c88:	4413      	add	r3, r2
 8006c8a:	f107 020c 	add.w	r2, r7, #12
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fa fe01 	bl	8001898 <DISP_DisplayText>
			break;
 8006c96:	e10e      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
 8006c98:	200002c4 	.word	0x200002c4
 8006c9c:	0801129c 	.word	0x0801129c
 8006ca0:	20000f78 	.word	0x20000f78
 8006ca4:	20000fd3 	.word	0x20000fd3
 8006ca8:	20000f40 	.word	0x20000f40
 8006cac:	20000f5c 	.word	0x20000f5c
 8006cb0:	080112a8 	.word	0x080112a8
 8006cb4:	080112b0 	.word	0x080112b0
 8006cb8:	080112b4 	.word	0x080112b4
 8006cbc:	200002f8 	.word	0x200002f8
 8006cc0:	20000304 	.word	0x20000304
 8006cc4:	080112bc 	.word	0x080112bc
 8006cc8:	080112c4 	.word	0x080112c4
 8006ccc:	080112cc 	.word	0x080112cc
 8006cd0:	080112d4 	.word	0x080112d4
		case 6:
			DISP_DisplayText(&planset_list_name[i], " Wait");
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	1a9b      	subs	r3, r3, r2
 8006cdc:	4a7c      	ldr	r2, [pc, #496]	; (8006ed0 <UI_PlanSetDisplay+0x550>)
 8006cde:	4413      	add	r3, r2
 8006ce0:	497c      	ldr	r1, [pc, #496]	; (8006ed4 <UI_PlanSetDisplay+0x554>)
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fa fdd8 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->wait_time);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	79db      	ldrb	r3, [r3, #7]
 8006cec:	461a      	mov	r2, r3
 8006cee:	f107 030c 	add.w	r3, r7, #12
 8006cf2:	4979      	ldr	r1, [pc, #484]	; (8006ed8 <UI_PlanSetDisplay+0x558>)
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f008 f87b 	bl	800edf0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	4a76      	ldr	r2, [pc, #472]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006d04:	4413      	add	r3, r2
 8006d06:	f107 020c 	add.w	r2, r7, #12
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fa fdc3 	bl	8001898 <DISP_DisplayText>
			break;
 8006d12:	e0d0      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 7:
			DISP_DisplayText(&planset_list_name[i], " Bst Tim");
 8006d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d16:	4613      	mov	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	4a6c      	ldr	r2, [pc, #432]	; (8006ed0 <UI_PlanSetDisplay+0x550>)
 8006d1e:	4413      	add	r3, r2
 8006d20:	496f      	ldr	r1, [pc, #444]	; (8006ee0 <UI_PlanSetDisplay+0x560>)
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fa fdb8 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_time);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	7a1b      	ldrb	r3, [r3, #8]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f107 030c 	add.w	r3, r7, #12
 8006d32:	4969      	ldr	r1, [pc, #420]	; (8006ed8 <UI_PlanSetDisplay+0x558>)
 8006d34:	4618      	mov	r0, r3
 8006d36:	f008 f85b 	bl	800edf0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	1a9b      	subs	r3, r3, r2
 8006d42:	4a66      	ldr	r2, [pc, #408]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006d44:	4413      	add	r3, r2
 8006d46:	f107 020c 	add.w	r2, r7, #12
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fa fda3 	bl	8001898 <DISP_DisplayText>
			break;
 8006d52:	e0b0      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 8:
			DISP_DisplayText(&planset_list_name[i], " Bst Sp");
 8006d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d56:	4613      	mov	r3, r2
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	4a5c      	ldr	r2, [pc, #368]	; (8006ed0 <UI_PlanSetDisplay+0x550>)
 8006d5e:	4413      	add	r3, r2
 8006d60:	4960      	ldr	r1, [pc, #384]	; (8006ee4 <UI_PlanSetDisplay+0x564>)
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fa fd98 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_speed);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	7a5b      	ldrb	r3, [r3, #9]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f107 030c 	add.w	r3, r7, #12
 8006d72:	4959      	ldr	r1, [pc, #356]	; (8006ed8 <UI_PlanSetDisplay+0x558>)
 8006d74:	4618      	mov	r0, r3
 8006d76:	f008 f83b 	bl	800edf0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	4a56      	ldr	r2, [pc, #344]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006d84:	4413      	add	r3, r2
 8006d86:	f107 020c 	add.w	r2, r7, #12
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fa fd83 	bl	8001898 <DISP_DisplayText>
			break;
 8006d92:	e090      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 9:
			DISP_DisplayText(&planset_list_name[i], " Speed");
 8006d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	4a4c      	ldr	r2, [pc, #304]	; (8006ed0 <UI_PlanSetDisplay+0x550>)
 8006d9e:	4413      	add	r3, r2
 8006da0:	4951      	ldr	r1, [pc, #324]	; (8006ee8 <UI_PlanSetDisplay+0x568>)
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fa fd78 	bl	8001898 <DISP_DisplayText>
			if(plan->unit_speed == 0) {
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	7a9b      	ldrb	r3, [r3, #10]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <UI_PlanSetDisplay+0x446>
				DISP_DisplayText(&planset_list_value[i], "Default");
 8006db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db2:	4613      	mov	r3, r2
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	1a9b      	subs	r3, r3, r2
 8006db8:	4a48      	ldr	r2, [pc, #288]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006dba:	4413      	add	r3, r2
 8006dbc:	494b      	ldr	r1, [pc, #300]	; (8006eec <UI_PlanSetDisplay+0x56c>)
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fa fd6a 	bl	8001898 <DISP_DisplayText>
			}
			else {
				sprintf(buff, "%i", plan->unit_speed);
				DISP_DisplayText(&planset_list_value[i], buff);
			}
			break;
 8006dc4:	e077      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
				sprintf(buff, "%i", plan->unit_speed);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	7a9b      	ldrb	r3, [r3, #10]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f107 030c 	add.w	r3, r7, #12
 8006dd0:	4941      	ldr	r1, [pc, #260]	; (8006ed8 <UI_PlanSetDisplay+0x558>)
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f008 f80c 	bl	800edf0 <siprintf>
				DISP_DisplayText(&planset_list_value[i], buff);
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	4a3e      	ldr	r2, [pc, #248]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006de2:	4413      	add	r3, r2
 8006de4:	f107 020c 	add.w	r2, r7, #12
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fa fd54 	bl	8001898 <DISP_DisplayText>
			break;
 8006df0:	e061      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 10:
			DISP_DisplayText(&planset_list_name[i], " Color");
 8006df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df4:	4613      	mov	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	4a35      	ldr	r2, [pc, #212]	; (8006ed0 <UI_PlanSetDisplay+0x550>)
 8006dfc:	4413      	add	r3, r2
 8006dfe:	493c      	ldr	r1, [pc, #240]	; (8006ef0 <UI_PlanSetDisplay+0x570>)
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fa fd49 	bl	8001898 <DISP_DisplayText>
			switch(plan->status) {
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	7adb      	ldrb	r3, [r3, #11]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d01c      	beq.n	8006e48 <UI_PlanSetDisplay+0x4c8>
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	dc50      	bgt.n	8006eb4 <UI_PlanSetDisplay+0x534>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <UI_PlanSetDisplay+0x49c>
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d00b      	beq.n	8006e32 <UI_PlanSetDisplay+0x4b2>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
			}
			break;
 8006e1a:	e04b      	b.n	8006eb4 <UI_PlanSetDisplay+0x534>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1e:	4613      	mov	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	4a2d      	ldr	r2, [pc, #180]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006e26:	4413      	add	r3, r2
 8006e28:	4932      	ldr	r1, [pc, #200]	; (8006ef4 <UI_PlanSetDisplay+0x574>)
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fa fd34 	bl	8001898 <DISP_DisplayText>
 8006e30:	e015      	b.n	8006e5e <UI_PlanSetDisplay+0x4de>
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
 8006e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e34:	4613      	mov	r3, r2
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	4a28      	ldr	r2, [pc, #160]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006e3c:	4413      	add	r3, r2
 8006e3e:	492e      	ldr	r1, [pc, #184]	; (8006ef8 <UI_PlanSetDisplay+0x578>)
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fa fd29 	bl	8001898 <DISP_DisplayText>
 8006e46:	e00a      	b.n	8006e5e <UI_PlanSetDisplay+0x4de>
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
 8006e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	1a9b      	subs	r3, r3, r2
 8006e50:	4a22      	ldr	r2, [pc, #136]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006e52:	4413      	add	r3, r2
 8006e54:	4929      	ldr	r1, [pc, #164]	; (8006efc <UI_PlanSetDisplay+0x57c>)
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fa fd1e 	bl	8001898 <DISP_DisplayText>
 8006e5c:	bf00      	nop
			break;
 8006e5e:	e029      	b.n	8006eb4 <UI_PlanSetDisplay+0x534>
		case 11:
			DISP_DisplayText(&planset_list_name[i], " Insert");
 8006e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	4a19      	ldr	r2, [pc, #100]	; (8006ed0 <UI_PlanSetDisplay+0x550>)
 8006e6a:	4413      	add	r3, r2
 8006e6c:	4924      	ldr	r1, [pc, #144]	; (8006f00 <UI_PlanSetDisplay+0x580>)
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fa fd12 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8006e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e76:	4613      	mov	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	4a17      	ldr	r2, [pc, #92]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006e7e:	4413      	add	r3, r2
 8006e80:	4920      	ldr	r1, [pc, #128]	; (8006f04 <UI_PlanSetDisplay+0x584>)
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fa fd08 	bl	8001898 <DISP_DisplayText>
			break;
 8006e88:	e015      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
		case 12:
			DISP_DisplayText(&planset_list_name[i], " Delete");
 8006e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <UI_PlanSetDisplay+0x550>)
 8006e94:	4413      	add	r3, r2
 8006e96:	491c      	ldr	r1, [pc, #112]	; (8006f08 <UI_PlanSetDisplay+0x588>)
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fa fcfd 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	4a0d      	ldr	r2, [pc, #52]	; (8006edc <UI_PlanSetDisplay+0x55c>)
 8006ea8:	4413      	add	r3, r2
 8006eaa:	4916      	ldr	r1, [pc, #88]	; (8006f04 <UI_PlanSetDisplay+0x584>)
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fa fcf3 	bl	8001898 <DISP_DisplayText>
			break;
 8006eb2:	e000      	b.n	8006eb6 <UI_PlanSetDisplay+0x536>
			break;
 8006eb4:	bf00      	nop
	for(int i=0; i<4; i++) {
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	3301      	adds	r3, #1
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	f77f adbe 	ble.w	8006a40 <UI_PlanSetDisplay+0xc0>
		}
	}
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop
 8006ec8:	3728      	adds	r7, #40	; 0x28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000f40 	.word	0x20000f40
 8006ed4:	080112dc 	.word	0x080112dc
 8006ed8:	080112b0 	.word	0x080112b0
 8006edc:	20000f5c 	.word	0x20000f5c
 8006ee0:	080112e4 	.word	0x080112e4
 8006ee4:	080112f0 	.word	0x080112f0
 8006ee8:	080112f8 	.word	0x080112f8
 8006eec:	08011300 	.word	0x08011300
 8006ef0:	08011308 	.word	0x08011308
 8006ef4:	08011310 	.word	0x08011310
 8006ef8:	08011318 	.word	0x08011318
 8006efc:	08011320 	.word	0x08011320
 8006f00:	08011328 	.word	0x08011328
 8006f04:	08011330 	.word	0x08011330
 8006f08:	08011334 	.word	0x08011334

08006f0c <UI_PlanSet>:

UI_Menu_Lists UI_PlanSet() {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08c      	sub	sp, #48	; 0x30
 8006f10:	af00      	add	r7, sp, #0
	uint8_t num_index = plan.checkpoint[num_checkpoint];
 8006f12:	4bc6      	ldr	r3, [pc, #792]	; (800722c <UI_PlanSet+0x320>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	4bc5      	ldr	r3, [pc, #788]	; (8007230 <UI_PlanSet+0x324>)
 8006f1a:	4413      	add	r3, r2
 8006f1c:	789b      	ldrb	r3, [r3, #2]
 8006f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Action_typedef plan_set = GetAction(num_index);
 8006f22:	f107 0314 	add.w	r3, r7, #20
 8006f26:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fd fe33 	bl	8004b98 <GetAction>
	int8_t num = -1;
 8006f32:	23ff      	movs	r3, #255	; 0xff
 8006f34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t change_status = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	plan_set:
	UI_PlanSetDisplay(num, &plan_set, num_index);
 8006f44:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f48:	f107 0114 	add.w	r1, r7, #20
 8006f4c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fd15 	bl	8006980 <UI_PlanSetDisplay>
	tick = HAL_GetTick();
 8006f56:	f002 f8ed 	bl	8009134 <HAL_GetTick>
 8006f5a:	6278      	str	r0, [r7, #36]	; 0x24
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8006f5c:	f002 f8ea 	bl	8009134 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006f6a:	2a01      	cmp	r2, #1
 8006f6c:	d101      	bne.n	8006f72 <UI_PlanSet+0x66>
 8006f6e:	2219      	movs	r2, #25
 8006f70:	e000      	b.n	8006f74 <UI_PlanSet+0x68>
 8006f72:	2246      	movs	r2, #70	; 0x46
 8006f74:	429a      	cmp	r2, r3
 8006f76:	f200 8406 	bhi.w	8007786 <UI_PlanSet+0x87a>

		bt2 = UI_ReadButton();
 8006f7a:	f7ff f827 	bl	8005fcc <UI_ReadButton>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(bt == bt2 && bt_status == 0) continue;
 8006f84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d104      	bne.n	8006f9a <UI_PlanSet+0x8e>
 8006f90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 83f9 	beq.w	800778c <UI_PlanSet+0x880>
		bt = bt2;
 8006f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f9e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
//		}
//		else if(bt & SW_UP_PRESS) {
//			if(num==0) num = 8; else num--;
//			goto ui_setting;
//		}
		if(bt & SW_HM_PRESS) {
 8006fa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <UI_PlanSet+0xae>
			num = -1;
 8006fae:	23ff      	movs	r3, #255	; 0xff
 8006fb0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			return UI_HOMESCREEN;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	f000 bc16 	b.w	80077e6 <UI_PlanSet+0x8da>
		}
		if(num != -1) {
 8006fba:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d03e      	beq.n	8007042 <UI_PlanSet+0x136>
			if(bt & SW_UP_PRESS) {
 8006fc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d012      	beq.n	8006ff6 <UI_PlanSet+0xea>
				if(num != 0) num--; else num=12;
 8006fd0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <UI_PlanSet+0xdc>
 8006fd8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006fe6:	e002      	b.n	8006fee <UI_PlanSet+0xe2>
 8006fe8:	230c      	movs	r3, #12
 8006fea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006ff4:	e7a6      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			else if(bt & SW_DW_PRESS) {
 8006ff6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d012      	beq.n	8007028 <UI_PlanSet+0x11c>
				if(num != 12) num++; else num=0;
 8007002:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8007006:	2b0c      	cmp	r3, #12
 8007008:	d007      	beq.n	800701a <UI_PlanSet+0x10e>
 800700a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800700e:	b2db      	uxtb	r3, r3
 8007010:	3301      	adds	r3, #1
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007018:	e002      	b.n	8007020 <UI_PlanSet+0x114>
 800701a:	2300      	movs	r3, #0
 800701c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007026:	e78d      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8007028:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <UI_PlanSet+0x136>
				bt_status = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				num = -1;
 800703a:	23ff      	movs	r3, #255	; 0xff
 800703c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				goto plan_set;
 8007040:	e780      	b.n	8006f44 <UI_PlanSet+0x38>
			}
		}
		switch(num) {
 8007042:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8007046:	3301      	adds	r3, #1
 8007048:	2b0d      	cmp	r3, #13
 800704a:	d887      	bhi.n	8006f5c <UI_PlanSet+0x50>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <UI_PlanSet+0x148>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	0800708d 	.word	0x0800708d
 8007058:	080071fd 	.word	0x080071fd
 800705c:	08007269 	.word	0x08007269
 8007060:	080072c7 	.word	0x080072c7
 8007064:	08007325 	.word	0x08007325
 8007068:	08007383 	.word	0x08007383
 800706c:	080073f3 	.word	0x080073f3
 8007070:	08007463 	.word	0x08007463
 8007074:	080074c1 	.word	0x080074c1
 8007078:	0800751f 	.word	0x0800751f
 800707c:	0800757d 	.word	0x0800757d
 8007080:	080075db 	.word	0x080075db
 8007084:	08007667 	.word	0x08007667
 8007088:	080076e9 	.word	0x080076e9
		case -1:
			if(bt & SW_DW_PRESS) {
 800708c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d010      	beq.n	80070ba <UI_PlanSet+0x1ae>
				if(plan_set.act != 0) plan_set.act--; else plan_set.act=ACT_LIST-1;
 8007098:	7d3b      	ldrb	r3, [r7, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <UI_PlanSet+0x19c>
 800709e:	7d3b      	ldrb	r3, [r7, #20]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	753b      	strb	r3, [r7, #20]
 80070a6:	e001      	b.n	80070ac <UI_PlanSet+0x1a0>
 80070a8:	230c      	movs	r3, #12
 80070aa:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80070b8:	e744      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			else if(bt & SW_UP_PRESS) {
 80070ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d010      	beq.n	80070e8 <UI_PlanSet+0x1dc>
				if(plan_set.act != ACT_LIST-1) plan_set.act++; else plan_set.act=0;
 80070c6:	7d3b      	ldrb	r3, [r7, #20]
 80070c8:	2b0c      	cmp	r3, #12
 80070ca:	d004      	beq.n	80070d6 <UI_PlanSet+0x1ca>
 80070cc:	7d3b      	ldrb	r3, [r7, #20]
 80070ce:	3301      	adds	r3, #1
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	753b      	strb	r3, [r7, #20]
 80070d4:	e001      	b.n	80070da <UI_PlanSet+0x1ce>
 80070d6:	2300      	movs	r3, #0
 80070d8:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80070e6:	e72d      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			else if(bt & SW_OK_PRESS) {
 80070e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d006      	beq.n	8007102 <UI_PlanSet+0x1f6>
				num = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007100:	e720      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8007102:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d012      	beq.n	8007134 <UI_PlanSet+0x228>
				if(change_status == 1) SetAction(plan_set, num_index);
 800710e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007112:	2b01      	cmp	r3, #1
 8007114:	d106      	bne.n	8007124 <UI_PlanSet+0x218>
 8007116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800711a:	f107 0214 	add.w	r2, r7, #20
 800711e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007120:	f7fd fd7c 	bl	8004c1c <SetAction>
				num = -1;
 8007124:	23ff      	movs	r3, #255	; 0xff
 8007126:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				return UI_HOMESCREEN;
 8007130:	2302      	movs	r3, #2
 8007132:	e358      	b.n	80077e6 <UI_PlanSet+0x8da>
			}
			else if(bt2 & SW_RG_PRESS) {
 8007134:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d02b      	beq.n	8007198 <UI_PlanSet+0x28c>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007144:	2b01      	cmp	r3, #1
 8007146:	d106      	bne.n	8007156 <UI_PlanSet+0x24a>
 8007148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800714c:	f107 0214 	add.w	r2, r7, #20
 8007150:	ca07      	ldmia	r2, {r0, r1, r2}
 8007152:	f7fd fd63 	bl	8004c1c <SetAction>
				if(num_index != max_index) num_index++; else num_index=0;
 8007156:	4b37      	ldr	r3, [pc, #220]	; (8007234 <UI_PlanSet+0x328>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800715e:	429a      	cmp	r2, r3
 8007160:	d005      	beq.n	800716e <UI_PlanSet+0x262>
 8007162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007166:	3301      	adds	r3, #1
 8007168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800716c:	e002      	b.n	8007174 <UI_PlanSet+0x268>
 800716e:	2300      	movs	r3, #0
 8007170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8007174:	463b      	mov	r3, r7
 8007176:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7fd fd0b 	bl	8004b98 <GetAction>
 8007182:	f107 0314 	add.w	r3, r7, #20
 8007186:	463a      	mov	r2, r7
 8007188:	6810      	ldr	r0, [r2, #0]
 800718a:	6851      	ldr	r1, [r2, #4]
 800718c:	6892      	ldr	r2, [r2, #8]
 800718e:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8007190:	2301      	movs	r3, #1
 8007192:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007196:	e6d5      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			else if(bt2 & SW_LF_PRESS) {
 8007198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 82f6 	beq.w	8007792 <UI_PlanSet+0x886>
				if(change_status == 1) SetAction(plan_set, num_index);
 80071a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d106      	bne.n	80071bc <UI_PlanSet+0x2b0>
 80071ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071b2:	f107 0214 	add.w	r2, r7, #20
 80071b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80071b8:	f7fd fd30 	bl	8004c1c <SetAction>
				if(num_index != 0) num_index--; else num_index=max_index;
 80071bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <UI_PlanSet+0x2c4>
 80071c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071c8:	3b01      	subs	r3, #1
 80071ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80071ce:	e003      	b.n	80071d8 <UI_PlanSet+0x2cc>
 80071d0:	4b18      	ldr	r3, [pc, #96]	; (8007234 <UI_PlanSet+0x328>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 80071d8:	463b      	mov	r3, r7
 80071da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80071de:	4611      	mov	r1, r2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fd fcd9 	bl	8004b98 <GetAction>
 80071e6:	f107 0314 	add.w	r3, r7, #20
 80071ea:	463a      	mov	r2, r7
 80071ec:	6810      	ldr	r0, [r2, #0]
 80071ee:	6851      	ldr	r1, [r2, #4]
 80071f0:	6892      	ldr	r2, [r2, #8]
 80071f2:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 80071fa:	e6a3      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 0:
			if(bt & SW_LF_PRESS) {
 80071fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	d017      	beq.n	8007238 <UI_PlanSet+0x32c>
				if(plan_set.sen_trig != 0) plan_set.sen_trig--; else plan_set.sen_trig=SENSOR_NUM;
 8007208:	7d7b      	ldrb	r3, [r7, #21]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <UI_PlanSet+0x30c>
 800720e:	7d7b      	ldrb	r3, [r7, #21]
 8007210:	3b01      	subs	r3, #1
 8007212:	b2db      	uxtb	r3, r3
 8007214:	757b      	strb	r3, [r7, #21]
 8007216:	e001      	b.n	800721c <UI_PlanSet+0x310>
 8007218:	230e      	movs	r3, #14
 800721a:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007228:	e68c      	b.n	8006f44 <UI_PlanSet+0x38>
 800722a:	bf00      	nop
 800722c:	20000ccc 	.word	0x20000ccc
 8007230:	20000d54 	.word	0x20000d54
 8007234:	20000288 	.word	0x20000288
			}
			if(bt & SW_RG_PRESS) {
 8007238:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 82a9 	beq.w	8007798 <UI_PlanSet+0x88c>
				if(plan_set.sen_trig != SENSOR_NUM) plan_set.sen_trig++; else plan_set.sen_trig=0;
 8007246:	7d7b      	ldrb	r3, [r7, #21]
 8007248:	2b0e      	cmp	r3, #14
 800724a:	d004      	beq.n	8007256 <UI_PlanSet+0x34a>
 800724c:	7d7b      	ldrb	r3, [r7, #21]
 800724e:	3301      	adds	r3, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	757b      	strb	r3, [r7, #21]
 8007254:	e001      	b.n	800725a <UI_PlanSet+0x34e>
 8007256:	2300      	movs	r3, #0
 8007258:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007260:	2301      	movs	r3, #1
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007266:	e66d      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 1:
			if(bt & SW_LF_PRESS) {
 8007268:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b00      	cmp	r3, #0
 8007272:	d010      	beq.n	8007296 <UI_PlanSet+0x38a>
				if(plan_set.act_mode != 0) plan_set.act_mode--; else plan_set.act_mode=2;
 8007274:	7dbb      	ldrb	r3, [r7, #22]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <UI_PlanSet+0x378>
 800727a:	7dbb      	ldrb	r3, [r7, #22]
 800727c:	3b01      	subs	r3, #1
 800727e:	b2db      	uxtb	r3, r3
 8007280:	75bb      	strb	r3, [r7, #22]
 8007282:	e001      	b.n	8007288 <UI_PlanSet+0x37c>
 8007284:	2302      	movs	r3, #2
 8007286:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007294:	e656      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 827d 	beq.w	800779e <UI_PlanSet+0x892>
				if(plan_set.act_mode != 2) plan_set.act_mode++; else plan_set.act_mode=0;
 80072a4:	7dbb      	ldrb	r3, [r7, #22]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d004      	beq.n	80072b4 <UI_PlanSet+0x3a8>
 80072aa:	7dbb      	ldrb	r3, [r7, #22]
 80072ac:	3301      	adds	r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	75bb      	strb	r3, [r7, #22]
 80072b2:	e001      	b.n	80072b8 <UI_PlanSet+0x3ac>
 80072b4:	2300      	movs	r3, #0
 80072b6:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80072c4:	e63e      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 2:
			if(bt & SW_LF_PRESS) {
 80072c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072ca:	f003 0310 	and.w	r3, r3, #16
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d010      	beq.n	80072f4 <UI_PlanSet+0x3e8>
				if(plan_set.act_value != 0) plan_set.act_value--; else plan_set.act_value=255;
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d004      	beq.n	80072e2 <UI_PlanSet+0x3d6>
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	3b01      	subs	r3, #1
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	75fb      	strb	r3, [r7, #23]
 80072e0:	e001      	b.n	80072e6 <UI_PlanSet+0x3da>
 80072e2:	23ff      	movs	r3, #255	; 0xff
 80072e4:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80072f2:	e627      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80072f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8251 	beq.w	80077a4 <UI_PlanSet+0x898>
				if(plan_set.act_value != 255) plan_set.act_value++; else plan_set.act_value=0;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	2bff      	cmp	r3, #255	; 0xff
 8007306:	d004      	beq.n	8007312 <UI_PlanSet+0x406>
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	3301      	adds	r3, #1
 800730c:	b2db      	uxtb	r3, r3
 800730e:	75fb      	strb	r3, [r7, #23]
 8007310:	e001      	b.n	8007316 <UI_PlanSet+0x40a>
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007322:	e60f      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 3:
			if(bt & SW_LF_PRESS) {
 8007324:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b00      	cmp	r3, #0
 800732e:	d010      	beq.n	8007352 <UI_PlanSet+0x446>
				if(plan_set.brake != 0) plan_set.brake--; else plan_set.brake=255;
 8007330:	7e3b      	ldrb	r3, [r7, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <UI_PlanSet+0x434>
 8007336:	7e3b      	ldrb	r3, [r7, #24]
 8007338:	3b01      	subs	r3, #1
 800733a:	b2db      	uxtb	r3, r3
 800733c:	763b      	strb	r3, [r7, #24]
 800733e:	e001      	b.n	8007344 <UI_PlanSet+0x438>
 8007340:	23ff      	movs	r3, #255	; 0xff
 8007342:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007350:	e5f8      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007352:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8225 	beq.w	80077aa <UI_PlanSet+0x89e>
				if(plan_set.brake != 255) plan_set.brake++; else plan_set.brake=0;
 8007360:	7e3b      	ldrb	r3, [r7, #24]
 8007362:	2bff      	cmp	r3, #255	; 0xff
 8007364:	d004      	beq.n	8007370 <UI_PlanSet+0x464>
 8007366:	7e3b      	ldrb	r3, [r7, #24]
 8007368:	3301      	adds	r3, #1
 800736a:	b2db      	uxtb	r3, r3
 800736c:	763b      	strb	r3, [r7, #24]
 800736e:	e001      	b.n	8007374 <UI_PlanSet+0x468>
 8007370:	2300      	movs	r3, #0
 8007372:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007380:	e5e0      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 4:
			if(bt & SW_LF_PRESS) {
 8007382:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	2b00      	cmp	r3, #0
 800738c:	d015      	beq.n	80073ba <UI_PlanSet+0x4ae>
				if(plan_set.forward_speed != -99) plan_set.forward_speed--; else plan_set.forward_speed=99;
 800738e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007392:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007396:	d007      	beq.n	80073a8 <UI_PlanSet+0x49c>
 8007398:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	3b01      	subs	r3, #1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	b25b      	sxtb	r3, r3
 80073a4:	767b      	strb	r3, [r7, #25]
 80073a6:	e001      	b.n	80073ac <UI_PlanSet+0x4a0>
 80073a8:	2363      	movs	r3, #99	; 0x63
 80073aa:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80073b8:	e5c4      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80073ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 81f4 	beq.w	80077b0 <UI_PlanSet+0x8a4>
				if(plan_set.forward_speed != 99) plan_set.forward_speed++; else plan_set.forward_speed=-99;
 80073c8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80073cc:	2b63      	cmp	r3, #99	; 0x63
 80073ce:	d007      	beq.n	80073e0 <UI_PlanSet+0x4d4>
 80073d0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	3301      	adds	r3, #1
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	b25b      	sxtb	r3, r3
 80073dc:	767b      	strb	r3, [r7, #25]
 80073de:	e001      	b.n	80073e4 <UI_PlanSet+0x4d8>
 80073e0:	239d      	movs	r3, #157	; 0x9d
 80073e2:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80073f0:	e5a8      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 5:
			if(bt & SW_LF_PRESS) {
 80073f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d015      	beq.n	800742a <UI_PlanSet+0x51e>
				if(plan_set.reverse_speed != -99) plan_set.reverse_speed--; else plan_set.reverse_speed=99;
 80073fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007402:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007406:	d007      	beq.n	8007418 <UI_PlanSet+0x50c>
 8007408:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b2db      	uxtb	r3, r3
 8007412:	b25b      	sxtb	r3, r3
 8007414:	76bb      	strb	r3, [r7, #26]
 8007416:	e001      	b.n	800741c <UI_PlanSet+0x510>
 8007418:	2363      	movs	r3, #99	; 0x63
 800741a:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007422:	2301      	movs	r3, #1
 8007424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007428:	e58c      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 800742a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 81bf 	beq.w	80077b6 <UI_PlanSet+0x8aa>
				if(plan_set.reverse_speed != 99) plan_set.reverse_speed++; else plan_set.reverse_speed=-99;
 8007438:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800743c:	2b63      	cmp	r3, #99	; 0x63
 800743e:	d007      	beq.n	8007450 <UI_PlanSet+0x544>
 8007440:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	3301      	adds	r3, #1
 8007448:	b2db      	uxtb	r3, r3
 800744a:	b25b      	sxtb	r3, r3
 800744c:	76bb      	strb	r3, [r7, #26]
 800744e:	e001      	b.n	8007454 <UI_PlanSet+0x548>
 8007450:	239d      	movs	r3, #157	; 0x9d
 8007452:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007460:	e570      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 6:
			if(bt & SW_LF_PRESS) {
 8007462:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b00      	cmp	r3, #0
 800746c:	d010      	beq.n	8007490 <UI_PlanSet+0x584>
				if(plan_set.wait_time != 0) plan_set.wait_time--; else plan_set.wait_time=255;
 800746e:	7efb      	ldrb	r3, [r7, #27]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <UI_PlanSet+0x572>
 8007474:	7efb      	ldrb	r3, [r7, #27]
 8007476:	3b01      	subs	r3, #1
 8007478:	b2db      	uxtb	r3, r3
 800747a:	76fb      	strb	r3, [r7, #27]
 800747c:	e001      	b.n	8007482 <UI_PlanSet+0x576>
 800747e:	23ff      	movs	r3, #255	; 0xff
 8007480:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007488:	2301      	movs	r3, #1
 800748a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800748e:	e559      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007490:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 818f 	beq.w	80077bc <UI_PlanSet+0x8b0>
				if(plan_set.wait_time != 255) plan_set.wait_time++; else plan_set.wait_time=0;
 800749e:	7efb      	ldrb	r3, [r7, #27]
 80074a0:	2bff      	cmp	r3, #255	; 0xff
 80074a2:	d004      	beq.n	80074ae <UI_PlanSet+0x5a2>
 80074a4:	7efb      	ldrb	r3, [r7, #27]
 80074a6:	3301      	adds	r3, #1
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	76fb      	strb	r3, [r7, #27]
 80074ac:	e001      	b.n	80074b2 <UI_PlanSet+0x5a6>
 80074ae:	2300      	movs	r3, #0
 80074b0:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80074be:	e541      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 7:
			if(bt & SW_LF_PRESS) {
 80074c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d010      	beq.n	80074ee <UI_PlanSet+0x5e2>
				if(plan_set.boost_time != 0) plan_set.boost_time--; else plan_set.boost_time=255;
 80074cc:	7f3b      	ldrb	r3, [r7, #28]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <UI_PlanSet+0x5d0>
 80074d2:	7f3b      	ldrb	r3, [r7, #28]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	773b      	strb	r3, [r7, #28]
 80074da:	e001      	b.n	80074e0 <UI_PlanSet+0x5d4>
 80074dc:	23ff      	movs	r3, #255	; 0xff
 80074de:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80074ec:	e52a      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80074ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 8163 	beq.w	80077c2 <UI_PlanSet+0x8b6>
				if(plan_set.boost_time != 255) plan_set.boost_time++; else plan_set.boost_time=0;
 80074fc:	7f3b      	ldrb	r3, [r7, #28]
 80074fe:	2bff      	cmp	r3, #255	; 0xff
 8007500:	d004      	beq.n	800750c <UI_PlanSet+0x600>
 8007502:	7f3b      	ldrb	r3, [r7, #28]
 8007504:	3301      	adds	r3, #1
 8007506:	b2db      	uxtb	r3, r3
 8007508:	773b      	strb	r3, [r7, #28]
 800750a:	e001      	b.n	8007510 <UI_PlanSet+0x604>
 800750c:	2300      	movs	r3, #0
 800750e:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8007510:	2301      	movs	r3, #1
 8007512:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007516:	2301      	movs	r3, #1
 8007518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800751c:	e512      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 8:
			if(bt & SW_LF_PRESS) {
 800751e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b00      	cmp	r3, #0
 8007528:	d010      	beq.n	800754c <UI_PlanSet+0x640>
				if(plan_set.boost_speed != 0) plan_set.boost_speed--; else plan_set.boost_speed=255;
 800752a:	7f7b      	ldrb	r3, [r7, #29]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <UI_PlanSet+0x62e>
 8007530:	7f7b      	ldrb	r3, [r7, #29]
 8007532:	3b01      	subs	r3, #1
 8007534:	b2db      	uxtb	r3, r3
 8007536:	777b      	strb	r3, [r7, #29]
 8007538:	e001      	b.n	800753e <UI_PlanSet+0x632>
 800753a:	23ff      	movs	r3, #255	; 0xff
 800753c:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800754a:	e4fb      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 800754c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8137 	beq.w	80077c8 <UI_PlanSet+0x8bc>
				if(plan_set.boost_speed != 255) plan_set.boost_speed++; else plan_set.boost_speed=0;
 800755a:	7f7b      	ldrb	r3, [r7, #29]
 800755c:	2bff      	cmp	r3, #255	; 0xff
 800755e:	d004      	beq.n	800756a <UI_PlanSet+0x65e>
 8007560:	7f7b      	ldrb	r3, [r7, #29]
 8007562:	3301      	adds	r3, #1
 8007564:	b2db      	uxtb	r3, r3
 8007566:	777b      	strb	r3, [r7, #29]
 8007568:	e001      	b.n	800756e <UI_PlanSet+0x662>
 800756a:	2300      	movs	r3, #0
 800756c:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800757a:	e4e3      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 9:
			if(bt & SW_LF_PRESS) {
 800757c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007580:	f003 0310 	and.w	r3, r3, #16
 8007584:	2b00      	cmp	r3, #0
 8007586:	d010      	beq.n	80075aa <UI_PlanSet+0x69e>
				if(plan_set.unit_speed != 0) plan_set.unit_speed--; else plan_set.unit_speed=255;
 8007588:	7fbb      	ldrb	r3, [r7, #30]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <UI_PlanSet+0x68c>
 800758e:	7fbb      	ldrb	r3, [r7, #30]
 8007590:	3b01      	subs	r3, #1
 8007592:	b2db      	uxtb	r3, r3
 8007594:	77bb      	strb	r3, [r7, #30]
 8007596:	e001      	b.n	800759c <UI_PlanSet+0x690>
 8007598:	23ff      	movs	r3, #255	; 0xff
 800759a:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80075a8:	e4cc      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80075aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 810b 	beq.w	80077ce <UI_PlanSet+0x8c2>
				if(plan_set.unit_speed != 255) plan_set.unit_speed++; else plan_set.unit_speed=0;
 80075b8:	7fbb      	ldrb	r3, [r7, #30]
 80075ba:	2bff      	cmp	r3, #255	; 0xff
 80075bc:	d004      	beq.n	80075c8 <UI_PlanSet+0x6bc>
 80075be:	7fbb      	ldrb	r3, [r7, #30]
 80075c0:	3301      	adds	r3, #1
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	77bb      	strb	r3, [r7, #30]
 80075c6:	e001      	b.n	80075cc <UI_PlanSet+0x6c0>
 80075c8:	2300      	movs	r3, #0
 80075ca:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80075d8:	e4b4      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 10:
			if(bt & SW_LF_PRESS) {
 80075da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01d      	beq.n	8007622 <UI_PlanSet+0x716>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 0) ADD_LINE_COLOR_STAT(plan_set.status,-1) else SET_LINE_COLOR_STAT(plan_set.status,2);
 80075e6:	7ffb      	ldrb	r3, [r7, #31]
 80075e8:	f003 0303 	and.w	r3, r3, #3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d007      	beq.n	8007600 <UI_PlanSet+0x6f4>
 80075f0:	7ffb      	ldrb	r3, [r7, #31]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	77fb      	strb	r3, [r7, #31]
 80075fe:	e009      	b.n	8007614 <UI_PlanSet+0x708>
 8007600:	7ffb      	ldrb	r3, [r7, #31]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	b2db      	uxtb	r3, r3
 8007608:	77fb      	strb	r3, [r7, #31]
 800760a:	7ffb      	ldrb	r3, [r7, #31]
 800760c:	f043 0302 	orr.w	r3, r3, #2
 8007610:	b2db      	uxtb	r3, r3
 8007612:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007620:	e490      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007622:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80d2 	beq.w	80077d4 <UI_PlanSet+0x8c8>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 2) ADD_LINE_COLOR_STAT(plan_set.status,1) else SET_LINE_COLOR_STAT(plan_set.status, 0);
 8007630:	7ffb      	ldrb	r3, [r7, #31]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d007      	beq.n	800764a <UI_PlanSet+0x73e>
 800763a:	7ffb      	ldrb	r3, [r7, #31]
 800763c:	3301      	adds	r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f003 0303 	and.w	r3, r3, #3
 8007644:	b2db      	uxtb	r3, r3
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e006      	b.n	8007658 <UI_PlanSet+0x74c>
 800764a:	7ffb      	ldrb	r3, [r7, #31]
 800764c:	f023 0303 	bic.w	r3, r3, #3
 8007650:	b2db      	uxtb	r3, r3
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	7ffb      	ldrb	r3, [r7, #31]
 8007656:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007664:	e46e      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 11:
			if(bt & SW_OK_PRESS) {
 8007666:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 80b3 	beq.w	80077da <UI_PlanSet+0x8ce>
				DISP_DisplayText(&short_message, "Insert action?");
 8007674:	495e      	ldr	r1, [pc, #376]	; (80077f0 <UI_PlanSet+0x8e4>)
 8007676:	485f      	ldr	r0, [pc, #380]	; (80077f4 <UI_PlanSet+0x8e8>)
 8007678:	f7fa f90e 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 800767c:	f7fe fca6 	bl	8005fcc <UI_ReadButton>
 8007680:	4603      	mov	r3, r0
 8007682:	461a      	mov	r2, r3
 8007684:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007688:	4293      	cmp	r3, r2
 800768a:	d01f      	beq.n	80076cc <UI_PlanSet+0x7c0>
					bt = UI_ReadButton();
 800768c:	f7fe fc9e 	bl	8005fcc <UI_ReadButton>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 8007696:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00d      	beq.n	80076be <UI_PlanSet+0x7b2>
						DISP_DisplayText(&short_message, "Inserting");
 80076a2:	4955      	ldr	r1, [pc, #340]	; (80077f8 <UI_PlanSet+0x8ec>)
 80076a4:	4853      	ldr	r0, [pc, #332]	; (80077f4 <UI_PlanSet+0x8e8>)
 80076a6:	f7fa f8f7 	bl	8001898 <DISP_DisplayText>
						Storage_InsertAction(num_index);
 80076aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fd ff10 	bl	80054d4 <Storage_InsertAction>
						DISP_DisplayText(&short_message, "Insert Done!");
 80076b4:	4951      	ldr	r1, [pc, #324]	; (80077fc <UI_PlanSet+0x8f0>)
 80076b6:	484f      	ldr	r0, [pc, #316]	; (80077f4 <UI_PlanSet+0x8e8>)
 80076b8:	f7fa f8ee 	bl	8001898 <DISP_DisplayText>
						break;
 80076bc:	e009      	b.n	80076d2 <UI_PlanSet+0x7c6>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 80076be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d102      	bne.n	80076d0 <UI_PlanSet+0x7c4>
 80076ca:	e7d7      	b.n	800767c <UI_PlanSet+0x770>
					if(bt == UI_ReadButton()) continue;
 80076cc:	bf00      	nop
 80076ce:	e7d5      	b.n	800767c <UI_PlanSet+0x770>
						break;
 80076d0:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 80076d2:	494b      	ldr	r1, [pc, #300]	; (8007800 <UI_PlanSet+0x8f4>)
 80076d4:	484b      	ldr	r0, [pc, #300]	; (8007804 <UI_PlanSet+0x8f8>)
 80076d6:	f7fa f8df 	bl	8001898 <DISP_DisplayText>
				bt_status = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80076e6:	e42d      	b.n	8006f44 <UI_PlanSet+0x38>
			}
			break;
		case 12:
			if(bt & SW_OK_PRESS) {
 80076e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d075      	beq.n	80077e0 <UI_PlanSet+0x8d4>
				DISP_DisplayText(&short_message, "Delete this action?");
 80076f4:	4944      	ldr	r1, [pc, #272]	; (8007808 <UI_PlanSet+0x8fc>)
 80076f6:	483f      	ldr	r0, [pc, #252]	; (80077f4 <UI_PlanSet+0x8e8>)
 80076f8:	f7fa f8ce 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 80076fc:	f7fe fc66 	bl	8005fcc <UI_ReadButton>
 8007700:	4603      	mov	r3, r0
 8007702:	461a      	mov	r2, r3
 8007704:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007708:	4293      	cmp	r3, r2
 800770a:	d02d      	beq.n	8007768 <UI_PlanSet+0x85c>
					bt = UI_ReadButton();
 800770c:	f7fe fc5e 	bl	8005fcc <UI_ReadButton>
 8007710:	4603      	mov	r3, r0
 8007712:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 8007716:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01b      	beq.n	800775a <UI_PlanSet+0x84e>
						DISP_DisplayText(&short_message, "Deleting");
 8007722:	493a      	ldr	r1, [pc, #232]	; (800780c <UI_PlanSet+0x900>)
 8007724:	4833      	ldr	r0, [pc, #204]	; (80077f4 <UI_PlanSet+0x8e8>)
 8007726:	f7fa f8b7 	bl	8001898 <DISP_DisplayText>
						Storage_DeleteAction(num_index);
 800772a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800772e:	4618      	mov	r0, r3
 8007730:	f7fd fefc 	bl	800552c <Storage_DeleteAction>
						DISP_DisplayText(&short_message, "Delete Done!");
 8007734:	4936      	ldr	r1, [pc, #216]	; (8007810 <UI_PlanSet+0x904>)
 8007736:	482f      	ldr	r0, [pc, #188]	; (80077f4 <UI_PlanSet+0x8e8>)
 8007738:	f7fa f8ae 	bl	8001898 <DISP_DisplayText>
						plan_set = GetAction(num_index);
 800773c:	463b      	mov	r3, r7
 800773e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f7fd fa27 	bl	8004b98 <GetAction>
 800774a:	f107 0314 	add.w	r3, r7, #20
 800774e:	463a      	mov	r2, r7
 8007750:	6810      	ldr	r0, [r2, #0]
 8007752:	6851      	ldr	r1, [r2, #4]
 8007754:	6892      	ldr	r2, [r2, #8]
 8007756:	c307      	stmia	r3!, {r0, r1, r2}
						break;
 8007758:	e009      	b.n	800776e <UI_PlanSet+0x862>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 800775a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <UI_PlanSet+0x860>
 8007766:	e7c9      	b.n	80076fc <UI_PlanSet+0x7f0>
					if(bt == UI_ReadButton()) continue;
 8007768:	bf00      	nop
 800776a:	e7c7      	b.n	80076fc <UI_PlanSet+0x7f0>
						break;
 800776c:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 800776e:	4924      	ldr	r1, [pc, #144]	; (8007800 <UI_PlanSet+0x8f4>)
 8007770:	4824      	ldr	r0, [pc, #144]	; (8007804 <UI_PlanSet+0x8f8>)
 8007772:	f7fa f891 	bl	8001898 <DISP_DisplayText>
				bt_status = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007782:	f7ff bbdf 	b.w	8006f44 <UI_PlanSet+0x38>
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8007786:	bf00      	nop
 8007788:	f7ff bbe8 	b.w	8006f5c <UI_PlanSet+0x50>
		if(bt == bt2 && bt_status == 0) continue;
 800778c:	bf00      	nop
 800778e:	f7ff bbe5 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 8007792:	bf00      	nop
 8007794:	f7ff bbe2 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 8007798:	bf00      	nop
 800779a:	f7ff bbdf 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 800779e:	bf00      	nop
 80077a0:	f7ff bbdc 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077a4:	bf00      	nop
 80077a6:	f7ff bbd9 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077aa:	bf00      	nop
 80077ac:	f7ff bbd6 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077b0:	bf00      	nop
 80077b2:	f7ff bbd3 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077b6:	bf00      	nop
 80077b8:	f7ff bbd0 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077bc:	bf00      	nop
 80077be:	f7ff bbcd 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077c2:	bf00      	nop
 80077c4:	f7ff bbca 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077c8:	bf00      	nop
 80077ca:	f7ff bbc7 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077ce:	bf00      	nop
 80077d0:	f7ff bbc4 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077d4:	bf00      	nop
 80077d6:	f7ff bbc1 	b.w	8006f5c <UI_PlanSet+0x50>
			break;
 80077da:	bf00      	nop
 80077dc:	f7ff bbbe 	b.w	8006f5c <UI_PlanSet+0x50>
			}
			break;
 80077e0:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 80077e2:	f7ff bbbb 	b.w	8006f5c <UI_PlanSet+0x50>
		}
	}
	return UI_IDLE;
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3730      	adds	r7, #48	; 0x30
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	0801133c 	.word	0x0801133c
 80077f4:	20000ee8 	.word	0x20000ee8
 80077f8:	0801134c 	.word	0x0801134c
 80077fc:	08011358 	.word	0x08011358
 8007800:	08011330 	.word	0x08011330
 8007804:	20000ef0 	.word	0x20000ef0
 8007808:	08011368 	.word	0x08011368
 800780c:	0801137c 	.word	0x0801137c
 8007810:	08011388 	.word	0x08011388

08007814 <UI_ADCThresholdDisplayInit>:

DISP_Text_Typedef adc_menu[2];
DISP_Text_Typedef adc_head;
DISP_Text_Typedef adc_point;

void UI_ADCThresholdDisplayInit() {
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0
	adc_menu[0].origin_x = 4;
 8007818:	4b24      	ldr	r3, [pc, #144]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 800781a:	2204      	movs	r2, #4
 800781c:	701a      	strb	r2, [r3, #0]
	adc_menu[0].origin_y = 50;
 800781e:	4b23      	ldr	r3, [pc, #140]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 8007820:	2232      	movs	r2, #50	; 0x32
 8007822:	705a      	strb	r2, [r3, #1]
	adc_menu[0].size_x = 58;
 8007824:	4b21      	ldr	r3, [pc, #132]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 8007826:	223a      	movs	r2, #58	; 0x3a
 8007828:	70da      	strb	r2, [r3, #3]
	adc_menu[0].size_y = 11;
 800782a:	4b20      	ldr	r3, [pc, #128]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 800782c:	220b      	movs	r2, #11
 800782e:	711a      	strb	r2, [r3, #4]
	adc_menu[0].color = DISP_COLOR_BLACK;
 8007830:	4b1e      	ldr	r3, [pc, #120]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 8007832:	2201      	movs	r2, #1
 8007834:	709a      	strb	r2, [r3, #2]
	adc_menu[0].align_y = DISP_ALIGN_CENTER;
 8007836:	4b1d      	ldr	r3, [pc, #116]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 8007838:	2202      	movs	r2, #2
 800783a:	719a      	strb	r2, [r3, #6]
	adc_menu[0].align_x = DISP_ALIGN_CENTER;
 800783c:	4b1b      	ldr	r3, [pc, #108]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 800783e:	2202      	movs	r2, #2
 8007840:	715a      	strb	r2, [r3, #5]

	adc_menu[1] = adc_menu[0];
 8007842:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 8007844:	4a19      	ldr	r2, [pc, #100]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 8007846:	3307      	adds	r3, #7
 8007848:	6810      	ldr	r0, [r2, #0]
 800784a:	6018      	str	r0, [r3, #0]
 800784c:	8891      	ldrh	r1, [r2, #4]
 800784e:	7992      	ldrb	r2, [r2, #6]
 8007850:	8099      	strh	r1, [r3, #4]
 8007852:	719a      	strb	r2, [r3, #6]
	adc_menu[1].origin_x = 63;
 8007854:	4b15      	ldr	r3, [pc, #84]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 8007856:	223f      	movs	r2, #63	; 0x3f
 8007858:	71da      	strb	r2, [r3, #7]
	adc_menu[1].size_x = 60;
 800785a:	4b14      	ldr	r3, [pc, #80]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 800785c:	223c      	movs	r2, #60	; 0x3c
 800785e:	729a      	strb	r2, [r3, #10]
	adc_menu[1].color = DISP_COLOR_WHITE;
 8007860:	4b12      	ldr	r3, [pc, #72]	; (80078ac <UI_ADCThresholdDisplayInit+0x98>)
 8007862:	2200      	movs	r2, #0
 8007864:	725a      	strb	r2, [r3, #9]

	adc_head.origin_x = 0;
 8007866:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <UI_ADCThresholdDisplayInit+0x9c>)
 8007868:	2200      	movs	r2, #0
 800786a:	701a      	strb	r2, [r3, #0]
	adc_head.origin_y = 0;
 800786c:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <UI_ADCThresholdDisplayInit+0x9c>)
 800786e:	2200      	movs	r2, #0
 8007870:	705a      	strb	r2, [r3, #1]
	adc_head.size_x = 127;
 8007872:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <UI_ADCThresholdDisplayInit+0x9c>)
 8007874:	227f      	movs	r2, #127	; 0x7f
 8007876:	70da      	strb	r2, [r3, #3]
	adc_head.size_y = 10;
 8007878:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <UI_ADCThresholdDisplayInit+0x9c>)
 800787a:	220a      	movs	r2, #10
 800787c:	711a      	strb	r2, [r3, #4]
	adc_head.color = DISP_COLOR_BLACK;
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <UI_ADCThresholdDisplayInit+0x9c>)
 8007880:	2201      	movs	r2, #1
 8007882:	709a      	strb	r2, [r3, #2]
	adc_head.align_x = DISP_ALIGN_CENTER;
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <UI_ADCThresholdDisplayInit+0x9c>)
 8007886:	2202      	movs	r2, #2
 8007888:	715a      	strb	r2, [r3, #5]
	adc_head.align_y = DISP_ALIGN_CENTER;
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <UI_ADCThresholdDisplayInit+0x9c>)
 800788c:	2202      	movs	r2, #2
 800788e:	719a      	strb	r2, [r3, #6]

	adc_point.origin_y = 32;
 8007890:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <UI_ADCThresholdDisplayInit+0xa0>)
 8007892:	2220      	movs	r2, #32
 8007894:	705a      	strb	r2, [r3, #1]
	adc_point.size_x = SENSOR_WIDTH_SEN;
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <UI_ADCThresholdDisplayInit+0xa0>)
 8007898:	2206      	movs	r2, #6
 800789a:	70da      	strb	r2, [r3, #3]
	adc_point.align_x = DISP_ALIGN_CENTER;
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <UI_ADCThresholdDisplayInit+0xa0>)
 800789e:	2202      	movs	r2, #2
 80078a0:	715a      	strb	r2, [r3, #5]

}
 80078a2:	bf00      	nop
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000f80 	.word	0x20000f80
 80078b0:	20000f90 	.word	0x20000f90
 80078b4:	20000f98 	.word	0x20000f98

080078b8 <UI_ADCThresholdDisplay>:

void UI_ADCThresholdDisplay(uint8_t num) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	71fb      	strb	r3, [r7, #7]
	static uint8_t last_num = 1;
	char buff[22];
	if(last_num != num) {
 80078c2:	4b2d      	ldr	r3, [pc, #180]	; (8007978 <UI_ADCThresholdDisplay+0xc0>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	79fa      	ldrb	r2, [r7, #7]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d03e      	beq.n	800794a <UI_ADCThresholdDisplay+0x92>
		sprintf(buff, "ADC ~ %i", num+1);
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	f107 0310 	add.w	r3, r7, #16
 80078d4:	4929      	ldr	r1, [pc, #164]	; (800797c <UI_ADCThresholdDisplay+0xc4>)
 80078d6:	4618      	mov	r0, r3
 80078d8:	f007 fa8a 	bl	800edf0 <siprintf>
		DISP_DisplayText(&adc_head, buff);
 80078dc:	f107 0310 	add.w	r3, r7, #16
 80078e0:	4619      	mov	r1, r3
 80078e2:	4827      	ldr	r0, [pc, #156]	; (8007980 <UI_ADCThresholdDisplay+0xc8>)
 80078e4:	f7f9 ffd8 	bl	8001898 <DISP_DisplayText>

		uint8_t point_x = (last_num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 80078e8:	4b23      	ldr	r3, [pc, #140]	; (8007978 <UI_ADCThresholdDisplay+0xc0>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	00d2      	lsls	r2, r2, #3
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	4b23      	ldr	r3, [pc, #140]	; (8007984 <UI_ADCThresholdDisplay+0xcc>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	4413      	add	r3, r2
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char point[] = " ";
 8007902:	2320      	movs	r3, #32
 8007904:	81bb      	strh	r3, [r7, #12]
		adc_point.origin_x = point_x;
 8007906:	4a20      	ldr	r2, [pc, #128]	; (8007988 <UI_ADCThresholdDisplay+0xd0>)
 8007908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800790c:	7013      	strb	r3, [r2, #0]
		DISP_DisplayText(&adc_point, point);
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	4619      	mov	r1, r3
 8007914:	481c      	ldr	r0, [pc, #112]	; (8007988 <UI_ADCThresholdDisplay+0xd0>)
 8007916:	f7f9 ffbf 	bl	8001898 <DISP_DisplayText>

		point[0] = '~'+2;
 800791a:	2380      	movs	r3, #128	; 0x80
 800791c:	733b      	strb	r3, [r7, #12]
		adc_point.origin_x = (num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	461a      	mov	r2, r3
 8007922:	00d2      	lsls	r2, r2, #3
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	b2da      	uxtb	r2, r3
 8007928:	4b16      	ldr	r3, [pc, #88]	; (8007984 <UI_ADCThresholdDisplay+0xcc>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	4413      	add	r3, r2
 800792e:	b2db      	uxtb	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b2da      	uxtb	r2, r3
 8007934:	4b14      	ldr	r3, [pc, #80]	; (8007988 <UI_ADCThresholdDisplay+0xd0>)
 8007936:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&adc_point, point);
 8007938:	f107 030c 	add.w	r3, r7, #12
 800793c:	4619      	mov	r1, r3
 800793e:	4812      	ldr	r0, [pc, #72]	; (8007988 <UI_ADCThresholdDisplay+0xd0>)
 8007940:	f7f9 ffaa 	bl	8001898 <DISP_DisplayText>

		last_num = num;
 8007944:	4a0c      	ldr	r2, [pc, #48]	; (8007978 <UI_ADCThresholdDisplay+0xc0>)
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	7013      	strb	r3, [r2, #0]
	}
	sprintf(buff, "Tr %4i", threshold_sensor[SENSOR_NUM-num-1]);
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	f1c3 030d 	rsb	r3, r3, #13
 8007950:	4a0e      	ldr	r2, [pc, #56]	; (800798c <UI_ADCThresholdDisplay+0xd4>)
 8007952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007956:	461a      	mov	r2, r3
 8007958:	f107 0310 	add.w	r3, r7, #16
 800795c:	490c      	ldr	r1, [pc, #48]	; (8007990 <UI_ADCThresholdDisplay+0xd8>)
 800795e:	4618      	mov	r0, r3
 8007960:	f007 fa46 	bl	800edf0 <siprintf>
	DISP_DisplayText(&adc_menu[0], buff);
 8007964:	f107 0310 	add.w	r3, r7, #16
 8007968:	4619      	mov	r1, r3
 800796a:	480a      	ldr	r0, [pc, #40]	; (8007994 <UI_ADCThresholdDisplay+0xdc>)
 800796c:	f7f9 ff94 	bl	8001898 <DISP_DisplayText>

}
 8007970:	bf00      	nop
 8007972:	3728      	adds	r7, #40	; 0x28
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000320 	.word	0x20000320
 800797c:	08011398 	.word	0x08011398
 8007980:	20000f90 	.word	0x20000f90
 8007984:	20000290 	.word	0x20000290
 8007988:	20000f98 	.word	0x20000f98
 800798c:	20000b74 	.word	0x20000b74
 8007990:	080113a4 	.word	0x080113a4
 8007994:	20000f80 	.word	0x20000f80

08007998 <UI_ADCThreshold>:

UI_Menu_Lists UI_ADCThreshold() {
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	77bb      	strb	r3, [r7, #30]
	uint8_t num_sen = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	777b      	strb	r3, [r7, #29]
	uint8_t actual_num_sen = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	773b      	strb	r3, [r7, #28]
	char buff[22];
	Storage_GetADCThreshold();
 80079aa:	f7fd fa9d 	bl	8004ee8 <Storage_GetADCThreshold>
	UI_ADCThresholdDisplay(num_sen+1);
 80079ae:	7f7b      	ldrb	r3, [r7, #29]
 80079b0:	3301      	adds	r3, #1
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff ff7f 	bl	80078b8 <UI_ADCThresholdDisplay>
	adctreshold:
	UI_ADCThresholdDisplay(num_sen);
 80079ba:	7f7b      	ldrb	r3, [r7, #29]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ff7b 	bl	80078b8 <UI_ADCThresholdDisplay>
	tick = HAL_GetTick();
 80079c2:	f001 fbb7 	bl	8009134 <HAL_GetTick>
 80079c6:	61b8      	str	r0, [r7, #24]
	while(1) {
		actual_num_sen = SENSOR_NUM-num_sen-1;
 80079c8:	7f7b      	ldrb	r3, [r7, #29]
 80079ca:	f1c3 030d 	rsb	r3, r3, #13
 80079ce:	773b      	strb	r3, [r7, #28]
		if(UI_ShowSensor()) {
 80079d0:	f7fe fa7e 	bl	8005ed0 <UI_ShowSensor>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00e      	beq.n	80079f8 <UI_ADCThreshold+0x60>
			sprintf(buff, "ADC %4i", adc_sensor_arranged[actual_num_sen]);
 80079da:	7f3b      	ldrb	r3, [r7, #28]
 80079dc:	4a52      	ldr	r2, [pc, #328]	; (8007b28 <UI_ADCThreshold+0x190>)
 80079de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079e2:	461a      	mov	r2, r3
 80079e4:	463b      	mov	r3, r7
 80079e6:	4951      	ldr	r1, [pc, #324]	; (8007b2c <UI_ADCThreshold+0x194>)
 80079e8:	4618      	mov	r0, r3
 80079ea:	f007 fa01 	bl	800edf0 <siprintf>
			DISP_DisplayText(&adc_menu[1], buff);
 80079ee:	463b      	mov	r3, r7
 80079f0:	4619      	mov	r1, r3
 80079f2:	484f      	ldr	r0, [pc, #316]	; (8007b30 <UI_ADCThreshold+0x198>)
 80079f4:	f7f9 ff50 	bl	8001898 <DISP_DisplayText>
		}

		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 80079f8:	f001 fb9c 	bl	8009134 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	7fba      	ldrb	r2, [r7, #30]
 8007a04:	2a01      	cmp	r2, #1
 8007a06:	d101      	bne.n	8007a0c <UI_ADCThreshold+0x74>
 8007a08:	2214      	movs	r2, #20
 8007a0a:	e000      	b.n	8007a0e <UI_ADCThreshold+0x76>
 8007a0c:	2246      	movs	r2, #70	; 0x46
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	f200 8081 	bhi.w	8007b16 <UI_ADCThreshold+0x17e>

		bt2 = UI_ReadButton();
 8007a14:	f7fe fada 	bl	8005fcc <UI_ReadButton>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]

		if(bt == bt2 && bt_status == 0) continue;
 8007a1c:	7ffa      	ldrb	r2, [r7, #31]
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d102      	bne.n	8007a2a <UI_ADCThreshold+0x92>
 8007a24:	7fbb      	ldrb	r3, [r7, #30]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d077      	beq.n	8007b1a <UI_ADCThreshold+0x182>
		bt = bt2;
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	77fb      	strb	r3, [r7, #31]

		if(bt & SW_HM_PRESS) {
 8007a2e:	7ffb      	ldrb	r3, [r7, #31]
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <UI_ADCThreshold+0xa8>
			num_sen = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	777b      	strb	r3, [r7, #29]
			return UI_HOMESCREEN;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e06e      	b.n	8007b1e <UI_ADCThreshold+0x186>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8007a40:	7ffb      	ldrb	r3, [r7, #31]
 8007a42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <UI_ADCThreshold+0xbe>
			Storage_SetADCThreshold();
 8007a4a:	f7fd fa71 	bl	8004f30 <Storage_SetADCThreshold>
			num_sen = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	777b      	strb	r3, [r7, #29]
			return UI_SET;
 8007a52:	2307      	movs	r3, #7
 8007a54:	e063      	b.n	8007b1e <UI_ADCThreshold+0x186>
		}
		else if(bt & SW_LF_PRESS) {
 8007a56:	7ffb      	ldrb	r3, [r7, #31]
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <UI_ADCThreshold+0xe0>
			if(num_sen != 0) num_sen--; else num_sen=SENSOR_NUM-1;
 8007a60:	7f7b      	ldrb	r3, [r7, #29]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <UI_ADCThreshold+0xd6>
 8007a66:	7f7b      	ldrb	r3, [r7, #29]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	777b      	strb	r3, [r7, #29]
 8007a6c:	e001      	b.n	8007a72 <UI_ADCThreshold+0xda>
 8007a6e:	230d      	movs	r3, #13
 8007a70:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007a76:	e7a0      	b.n	80079ba <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_RG_PRESS) {
 8007a78:	7ffb      	ldrb	r3, [r7, #31]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00b      	beq.n	8007a9a <UI_ADCThreshold+0x102>
			if(num_sen != SENSOR_NUM-1) num_sen++; else num_sen=0;
 8007a82:	7f7b      	ldrb	r3, [r7, #29]
 8007a84:	2b0d      	cmp	r3, #13
 8007a86:	d003      	beq.n	8007a90 <UI_ADCThreshold+0xf8>
 8007a88:	7f7b      	ldrb	r3, [r7, #29]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	777b      	strb	r3, [r7, #29]
 8007a8e:	e001      	b.n	8007a94 <UI_ADCThreshold+0xfc>
 8007a90:	2300      	movs	r3, #0
 8007a92:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007a98:	e78f      	b.n	80079ba <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_DW_PRESS) {
 8007a9a:	7ffb      	ldrb	r3, [r7, #31]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d018      	beq.n	8007ad6 <UI_ADCThreshold+0x13e>
			if(threshold_sensor[actual_num_sen] != 0) threshold_sensor[actual_num_sen]--; else threshold_sensor[actual_num_sen]=ADC_MAX;
 8007aa4:	7f3b      	ldrb	r3, [r7, #28]
 8007aa6:	4a23      	ldr	r2, [pc, #140]	; (8007b34 <UI_ADCThreshold+0x19c>)
 8007aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <UI_ADCThreshold+0x12c>
 8007ab0:	7f3b      	ldrb	r3, [r7, #28]
 8007ab2:	4a20      	ldr	r2, [pc, #128]	; (8007b34 <UI_ADCThreshold+0x19c>)
 8007ab4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007ab8:	3a01      	subs	r2, #1
 8007aba:	b291      	uxth	r1, r2
 8007abc:	4a1d      	ldr	r2, [pc, #116]	; (8007b34 <UI_ADCThreshold+0x19c>)
 8007abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007ac2:	e005      	b.n	8007ad0 <UI_ADCThreshold+0x138>
 8007ac4:	7f3b      	ldrb	r3, [r7, #28]
 8007ac6:	4a1b      	ldr	r2, [pc, #108]	; (8007b34 <UI_ADCThreshold+0x19c>)
 8007ac8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8007acc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007ad4:	e771      	b.n	80079ba <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_UP_PRESS) {
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f43f af73 	beq.w	80079c8 <UI_ADCThreshold+0x30>
			if(threshold_sensor[actual_num_sen] != ADC_MAX) threshold_sensor[actual_num_sen]++; else threshold_sensor[actual_num_sen]=0;
 8007ae2:	7f3b      	ldrb	r3, [r7, #28]
 8007ae4:	4a13      	ldr	r2, [pc, #76]	; (8007b34 <UI_ADCThreshold+0x19c>)
 8007ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aea:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <UI_ADCThreshold+0x16e>
 8007af2:	7f3b      	ldrb	r3, [r7, #28]
 8007af4:	4a0f      	ldr	r2, [pc, #60]	; (8007b34 <UI_ADCThreshold+0x19c>)
 8007af6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007afa:	3201      	adds	r2, #1
 8007afc:	b291      	uxth	r1, r2
 8007afe:	4a0d      	ldr	r2, [pc, #52]	; (8007b34 <UI_ADCThreshold+0x19c>)
 8007b00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007b04:	e004      	b.n	8007b10 <UI_ADCThreshold+0x178>
 8007b06:	7f3b      	ldrb	r3, [r7, #28]
 8007b08:	4a0a      	ldr	r2, [pc, #40]	; (8007b34 <UI_ADCThreshold+0x19c>)
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 8007b10:	2301      	movs	r3, #1
 8007b12:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007b14:	e751      	b.n	80079ba <UI_ADCThreshold+0x22>
		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8007b16:	bf00      	nop
 8007b18:	e756      	b.n	80079c8 <UI_ADCThreshold+0x30>
		if(bt == bt2 && bt_status == 0) continue;
 8007b1a:	bf00      	nop
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8007b1c:	e754      	b.n	80079c8 <UI_ADCThreshold+0x30>
		}
	}
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000b58 	.word	0x20000b58
 8007b2c:	080113ac 	.word	0x080113ac
 8007b30:	20000f87 	.word	0x20000f87
 8007b34:	20000b74 	.word	0x20000b74

08007b38 <UI_AutoCalib>:



UI_Menu_Lists UI_AutoCalib() {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
	uint8_t bt = UI_ReadButton();
 8007b3e:	f7fe fa45 	bl	8005fcc <UI_ReadButton>
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
	SEN_StartAutoCalibration();
 8007b46:	f7fc fe7d 	bl	8004844 <SEN_StartAutoCalibration>
	while(1) {
		UI_ShowSensor();
 8007b4a:	f7fe f9c1 	bl	8005ed0 <UI_ShowSensor>
		if(bt == UI_ReadButton()) continue;
 8007b4e:	f7fe fa3d 	bl	8005fcc <UI_ReadButton>
 8007b52:	4603      	mov	r3, r0
 8007b54:	461a      	mov	r2, r3
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d02a      	beq.n	8007bb2 <UI_AutoCalib+0x7a>
		bt = UI_ReadButton();
 8007b5c:	f7fe fa36 	bl	8005fcc <UI_ReadButton>
 8007b60:	4603      	mov	r3, r0
 8007b62:	71fb      	strb	r3, [r7, #7]
		if(bt & SW_HM_PRESS) {
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <UI_AutoCalib+0x40>
			SEN_EndAutoCalibration(0);
 8007b6e:	2000      	movs	r0, #0
 8007b70:	f7fc fefa 	bl	8004968 <SEN_EndAutoCalibration>
			return UI_HOMESCREEN;
 8007b74:	2302      	movs	r3, #2
 8007b76:	e01e      	b.n	8007bb6 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_BK_PRESS) {
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <UI_AutoCalib+0x54>
			SEN_EndAutoCalibration(0);
 8007b82:	2000      	movs	r0, #0
 8007b84:	f7fc fef0 	bl	8004968 <SEN_EndAutoCalibration>
			return UI_SET;
 8007b88:	2307      	movs	r3, #7
 8007b8a:	e014      	b.n	8007bb6 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_OK_PRESS) {
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0d9      	beq.n	8007b4a <UI_AutoCalib+0x12>
			SEN_EndAutoCalibration(1);
 8007b96:	2001      	movs	r0, #1
 8007b98:	f7fc fee6 	bl	8004968 <SEN_EndAutoCalibration>
			DISP_DisplayText(&short_message, "Saving...");
 8007b9c:	4908      	ldr	r1, [pc, #32]	; (8007bc0 <UI_AutoCalib+0x88>)
 8007b9e:	4809      	ldr	r0, [pc, #36]	; (8007bc4 <UI_AutoCalib+0x8c>)
 8007ba0:	f7f9 fe7a 	bl	8001898 <DISP_DisplayText>
			Storage_SetADCThreshold();
 8007ba4:	f7fd f9c4 	bl	8004f30 <Storage_SetADCThreshold>
			HAL_Delay(200);
 8007ba8:	20c8      	movs	r0, #200	; 0xc8
 8007baa:	f001 facf 	bl	800914c <HAL_Delay>
			return UI_SET;
 8007bae:	2307      	movs	r3, #7
 8007bb0:	e001      	b.n	8007bb6 <UI_AutoCalib+0x7e>
		if(bt == UI_ReadButton()) continue;
 8007bb2:	bf00      	nop
		UI_ShowSensor();
 8007bb4:	e7c9      	b.n	8007b4a <UI_AutoCalib+0x12>
		}
	}
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	080113b4 	.word	0x080113b4
 8007bc4:	20000ee8 	.word	0x20000ee8

08007bc8 <UI_Startup>:


DISP_Text_Typedef startup;

UI_Menu_Lists UI_Startup() {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
	char buff[22];
	startup.size_y = 9;
 8007bce:	4b5e      	ldr	r3, [pc, #376]	; (8007d48 <UI_Startup+0x180>)
 8007bd0:	2209      	movs	r2, #9
 8007bd2:	711a      	strb	r2, [r3, #4]
	sprintf(buff, "[%5i]Check memory", (uint16_t)HAL_GetTick());
 8007bd4:	f001 faae 	bl	8009134 <HAL_GetTick>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	463b      	mov	r3, r7
 8007be0:	495a      	ldr	r1, [pc, #360]	; (8007d4c <UI_Startup+0x184>)
 8007be2:	4618      	mov	r0, r3
 8007be4:	f007 f904 	bl	800edf0 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007be8:	463b      	mov	r3, r7
 8007bea:	4619      	mov	r1, r3
 8007bec:	4856      	ldr	r0, [pc, #344]	; (8007d48 <UI_Startup+0x180>)
 8007bee:	f7f9 fe53 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8007bf2:	4b55      	ldr	r3, [pc, #340]	; (8007d48 <UI_Startup+0x180>)
 8007bf4:	785a      	ldrb	r2, [r3, #1]
 8007bf6:	4b54      	ldr	r3, [pc, #336]	; (8007d48 <UI_Startup+0x180>)
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	4b52      	ldr	r3, [pc, #328]	; (8007d48 <UI_Startup+0x180>)
 8007c00:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 8007c02:	2001      	movs	r0, #1
 8007c04:	f001 faa2 	bl	800914c <HAL_Delay>
	if(!Storage_Init()) {
 8007c08:	f7fd f908 	bl	8004e1c <Storage_Init>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d11d      	bne.n	8007c4e <UI_Startup+0x86>
		sprintf(buff, "[%5i]Mem initialize", (uint16_t)HAL_GetTick());
 8007c12:	f001 fa8f 	bl	8009134 <HAL_GetTick>
 8007c16:	4603      	mov	r3, r0
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	463b      	mov	r3, r7
 8007c1e:	494c      	ldr	r1, [pc, #304]	; (8007d50 <UI_Startup+0x188>)
 8007c20:	4618      	mov	r0, r3
 8007c22:	f007 f8e5 	bl	800edf0 <siprintf>
		DISP_DisplayText(&startup, buff);
 8007c26:	463b      	mov	r3, r7
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4847      	ldr	r0, [pc, #284]	; (8007d48 <UI_Startup+0x180>)
 8007c2c:	f7f9 fe34 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8007c30:	4b45      	ldr	r3, [pc, #276]	; (8007d48 <UI_Startup+0x180>)
 8007c32:	785a      	ldrb	r2, [r3, #1]
 8007c34:	4b44      	ldr	r3, [pc, #272]	; (8007d48 <UI_Startup+0x180>)
 8007c36:	791b      	ldrb	r3, [r3, #4]
 8007c38:	4413      	add	r3, r2
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	4b42      	ldr	r3, [pc, #264]	; (8007d48 <UI_Startup+0x180>)
 8007c3e:	705a      	strb	r2, [r3, #1]
		do {
			Storage_ResetMemory();
 8007c40:	f7fd f89e 	bl	8004d80 <Storage_ResetMemory>
		} while(!Storage_Init());
 8007c44:	f7fd f8ea 	bl	8004e1c <Storage_Init>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0f8      	beq.n	8007c40 <UI_Startup+0x78>
	}
	sprintf(buff, "[%5i]Memory OK", (uint16_t)HAL_GetTick());
 8007c4e:	f001 fa71 	bl	8009134 <HAL_GetTick>
 8007c52:	4603      	mov	r3, r0
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	461a      	mov	r2, r3
 8007c58:	463b      	mov	r3, r7
 8007c5a:	493e      	ldr	r1, [pc, #248]	; (8007d54 <UI_Startup+0x18c>)
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f007 f8c7 	bl	800edf0 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007c62:	463b      	mov	r3, r7
 8007c64:	4619      	mov	r1, r3
 8007c66:	4838      	ldr	r0, [pc, #224]	; (8007d48 <UI_Startup+0x180>)
 8007c68:	f7f9 fe16 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8007c6c:	4b36      	ldr	r3, [pc, #216]	; (8007d48 <UI_Startup+0x180>)
 8007c6e:	785a      	ldrb	r2, [r3, #1]
 8007c70:	4b35      	ldr	r3, [pc, #212]	; (8007d48 <UI_Startup+0x180>)
 8007c72:	791b      	ldrb	r3, [r3, #4]
 8007c74:	4413      	add	r3, r2
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	4b33      	ldr	r3, [pc, #204]	; (8007d48 <UI_Startup+0x180>)
 8007c7a:	705a      	strb	r2, [r3, #1]

	sprintf(buff, "[%5i]Checking plan", (uint16_t)HAL_GetTick());
 8007c7c:	f001 fa5a 	bl	8009134 <HAL_GetTick>
 8007c80:	4603      	mov	r3, r0
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	463b      	mov	r3, r7
 8007c88:	4933      	ldr	r1, [pc, #204]	; (8007d58 <UI_Startup+0x190>)
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f007 f8b0 	bl	800edf0 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007c90:	463b      	mov	r3, r7
 8007c92:	4619      	mov	r1, r3
 8007c94:	482c      	ldr	r0, [pc, #176]	; (8007d48 <UI_Startup+0x180>)
 8007c96:	f7f9 fdff 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8007c9a:	4b2b      	ldr	r3, [pc, #172]	; (8007d48 <UI_Startup+0x180>)
 8007c9c:	785a      	ldrb	r2, [r3, #1]
 8007c9e:	4b2a      	ldr	r3, [pc, #168]	; (8007d48 <UI_Startup+0x180>)
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <UI_Startup+0x180>)
 8007ca8:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 8007caa:	2001      	movs	r0, #1
 8007cac:	f001 fa4e 	bl	800914c <HAL_Delay>
	if(!Storage_PlanInit()) {
 8007cb0:	f7fd f8ec 	bl	8004e8c <Storage_PlanInit>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d11d      	bne.n	8007cf6 <UI_Startup+0x12e>
		sprintf(buff, "[%5i]Plan initializ", (uint16_t)HAL_GetTick());
 8007cba:	f001 fa3b 	bl	8009134 <HAL_GetTick>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	4925      	ldr	r1, [pc, #148]	; (8007d5c <UI_Startup+0x194>)
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f007 f891 	bl	800edf0 <siprintf>
		DISP_DisplayText(&startup, buff);
 8007cce:	463b      	mov	r3, r7
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	481d      	ldr	r0, [pc, #116]	; (8007d48 <UI_Startup+0x180>)
 8007cd4:	f7f9 fde0 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8007cd8:	4b1b      	ldr	r3, [pc, #108]	; (8007d48 <UI_Startup+0x180>)
 8007cda:	785a      	ldrb	r2, [r3, #1]
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <UI_Startup+0x180>)
 8007cde:	791b      	ldrb	r3, [r3, #4]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <UI_Startup+0x180>)
 8007ce6:	705a      	strb	r2, [r3, #1]

		do {
			Storage_ResetPlan();
 8007ce8:	f7fc ffd8 	bl	8004c9c <Storage_ResetPlan>
		} while(!Storage_PlanInit());
 8007cec:	f7fd f8ce 	bl	8004e8c <Storage_PlanInit>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0f8      	beq.n	8007ce8 <UI_Startup+0x120>
	}
	Storage_GetPlan(num_plan);
 8007cf6:	4b1a      	ldr	r3, [pc, #104]	; (8007d60 <UI_Startup+0x198>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fd f93c 	bl	8004f78 <Storage_GetPlan>
	sprintf(buff, "[%5i]Plan OK", (uint16_t)HAL_GetTick());
 8007d00:	f001 fa18 	bl	8009134 <HAL_GetTick>
 8007d04:	4603      	mov	r3, r0
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	4915      	ldr	r1, [pc, #84]	; (8007d64 <UI_Startup+0x19c>)
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f007 f86e 	bl	800edf0 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007d14:	463b      	mov	r3, r7
 8007d16:	4619      	mov	r1, r3
 8007d18:	480b      	ldr	r0, [pc, #44]	; (8007d48 <UI_Startup+0x180>)
 8007d1a:	f7f9 fdbd 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <UI_Startup+0x180>)
 8007d20:	785a      	ldrb	r2, [r3, #1]
 8007d22:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <UI_Startup+0x180>)
 8007d24:	791b      	ldrb	r3, [r3, #4]
 8007d26:	4413      	add	r3, r2
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <UI_Startup+0x180>)
 8007d2c:	705a      	strb	r2, [r3, #1]

	while(UI_ReadButton() & SW_HM_PRESS);
 8007d2e:	bf00      	nop
 8007d30:	f7fe f94c 	bl	8005fcc <UI_ReadButton>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f8      	bne.n	8007d30 <UI_Startup+0x168>

	return UI_HOMESCREEN;
 8007d3e:	2302      	movs	r3, #2
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20000fa0 	.word	0x20000fa0
 8007d4c:	080113c0 	.word	0x080113c0
 8007d50:	080113d4 	.word	0x080113d4
 8007d54:	080113e8 	.word	0x080113e8
 8007d58:	080113f8 	.word	0x080113f8
 8007d5c:	0801140c 	.word	0x0801140c
 8007d60:	20000cc9 	.word	0x20000cc9
 8007d64:	08011420 	.word	0x08011420

08007d68 <UI_CPDisplayInit>:


DISP_Text_Typedef cp_menu[4];
DISP_Text_Typedef cp_head;

void UI_CPDisplayInit() {
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
	cp_menu[0].origin_x = 3;
 8007d6e:	4b2f      	ldr	r3, [pc, #188]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007d70:	2203      	movs	r2, #3
 8007d72:	701a      	strb	r2, [r3, #0]
	cp_menu[0].origin_y = 13;
 8007d74:	4b2d      	ldr	r3, [pc, #180]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007d76:	220d      	movs	r2, #13
 8007d78:	705a      	strb	r2, [r3, #1]
	cp_menu[0].size_x = 120;
 8007d7a:	4b2c      	ldr	r3, [pc, #176]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007d7c:	2278      	movs	r2, #120	; 0x78
 8007d7e:	70da      	strb	r2, [r3, #3]
	cp_menu[0].size_y = 11;
 8007d80:	4b2a      	ldr	r3, [pc, #168]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007d82:	220b      	movs	r2, #11
 8007d84:	711a      	strb	r2, [r3, #4]
	cp_menu[0].color = DISP_COLOR_WHITE;
 8007d86:	4b29      	ldr	r3, [pc, #164]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	709a      	strb	r2, [r3, #2]
	cp_menu[0].align_x = DISP_ALIGN_CENTER;
 8007d8c:	4b27      	ldr	r3, [pc, #156]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007d8e:	2202      	movs	r2, #2
 8007d90:	715a      	strb	r2, [r3, #5]
	cp_menu[0].align_y = DISP_ALIGN_CENTER;
 8007d92:	4b26      	ldr	r3, [pc, #152]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007d94:	2202      	movs	r2, #2
 8007d96:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8007d98:	2301      	movs	r3, #1
 8007d9a:	607b      	str	r3, [r7, #4]
 8007d9c:	e027      	b.n	8007dee <UI_CPDisplayInit+0x86>
		cp_menu[i] = cp_menu[0];
 8007d9e:	4923      	ldr	r1, [pc, #140]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	440b      	add	r3, r1
 8007daa:	4a20      	ldr	r2, [pc, #128]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007dac:	6810      	ldr	r0, [r2, #0]
 8007dae:	6018      	str	r0, [r3, #0]
 8007db0:	8891      	ldrh	r1, [r2, #4]
 8007db2:	7992      	ldrb	r2, [r2, #6]
 8007db4:	8099      	strh	r1, [r3, #4]
 8007db6:	719a      	strb	r2, [r3, #6]
		cp_menu[i].origin_y = cp_menu[i-1].origin_y+cp_menu[0].size_y+2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	1e5a      	subs	r2, r3, #1
 8007dbc:	491b      	ldr	r1, [pc, #108]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	4413      	add	r3, r2
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	b2d8      	uxtb	r0, r3
 8007dd6:	4915      	ldr	r1, [pc, #84]	; (8007e2c <UI_CPDisplayInit+0xc4>)
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	440b      	add	r3, r1
 8007de2:	3301      	adds	r3, #1
 8007de4:	4602      	mov	r2, r0
 8007de6:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3301      	adds	r3, #1
 8007dec:	607b      	str	r3, [r7, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	ddd4      	ble.n	8007d9e <UI_CPDisplayInit+0x36>
	}

	cp_head.origin_x = 0;
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <UI_CPDisplayInit+0xc8>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	701a      	strb	r2, [r3, #0]
	cp_head.origin_y = 0;
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	; (8007e30 <UI_CPDisplayInit+0xc8>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	705a      	strb	r2, [r3, #1]
	cp_head.size_x = 127;
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <UI_CPDisplayInit+0xc8>)
 8007e02:	227f      	movs	r2, #127	; 0x7f
 8007e04:	70da      	strb	r2, [r3, #3]
	cp_head.size_y = 10;
 8007e06:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <UI_CPDisplayInit+0xc8>)
 8007e08:	220a      	movs	r2, #10
 8007e0a:	711a      	strb	r2, [r3, #4]
	cp_head.color = DISP_COLOR_BLACK;
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <UI_CPDisplayInit+0xc8>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	709a      	strb	r2, [r3, #2]
	cp_head.align_x = DISP_ALIGN_CENTER;
 8007e12:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <UI_CPDisplayInit+0xc8>)
 8007e14:	2202      	movs	r2, #2
 8007e16:	715a      	strb	r2, [r3, #5]
	cp_head.align_y = DISP_ALIGN_CENTER;
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <UI_CPDisplayInit+0xc8>)
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	719a      	strb	r2, [r3, #6]
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000fa8 	.word	0x20000fa8
 8007e30:	20000fc4 	.word	0x20000fc4

08007e34 <UI_CPDisplay>:

void UI_CPDisplay(uint8_t num, uint8_t* num_value) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08a      	sub	sp, #40	; 0x28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	4a31      	ldr	r2, [pc, #196]	; (8007f08 <UI_CPDisplay+0xd4>)
 8007e44:	f992 2000 	ldrsb.w	r2, [r2]
 8007e48:	1a9b      	subs	r3, r3, r2
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	dd06      	ble.n	8007e5c <UI_CPDisplay+0x28>
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	3b03      	subs	r3, #3
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	b25a      	sxtb	r2, r3
 8007e56:	4b2c      	ldr	r3, [pc, #176]	; (8007f08 <UI_CPDisplay+0xd4>)
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	e009      	b.n	8007e70 <UI_CPDisplay+0x3c>
	else if(num < first_list) first_list = num;
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	4a2a      	ldr	r2, [pc, #168]	; (8007f08 <UI_CPDisplay+0xd4>)
 8007e60:	f992 2000 	ldrsb.w	r2, [r2]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	da03      	bge.n	8007e70 <UI_CPDisplay+0x3c>
 8007e68:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007e6c:	4b26      	ldr	r3, [pc, #152]	; (8007f08 <UI_CPDisplay+0xd4>)
 8007e6e:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8007e70:	2300      	movs	r3, #0
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
 8007e74:	e03f      	b.n	8007ef6 <UI_CPDisplay+0xc2>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8007e76:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <UI_CPDisplay+0xd4>)
 8007e78:	f993 3000 	ldrsb.w	r3, [r3]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	441a      	add	r2, r3
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d109      	bne.n	8007e9c <UI_CPDisplay+0x68>
 8007e88:	4920      	ldr	r1, [pc, #128]	; (8007f0c <UI_CPDisplay+0xd8>)
 8007e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	440b      	add	r3, r1
 8007e94:	3302      	adds	r3, #2
 8007e96:	2201      	movs	r2, #1
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	e008      	b.n	8007eae <UI_CPDisplay+0x7a>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8007e9c:	491b      	ldr	r1, [pc, #108]	; (8007f0c <UI_CPDisplay+0xd8>)
 8007e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	3302      	adds	r3, #2
 8007eaa:	2200      	movs	r2, #0
 8007eac:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "CP%-2i  ~  %03i", i + first_list, num_value[i + first_list]);
 8007eae:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <UI_CPDisplay+0xd4>)
 8007eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	441a      	add	r2, r3
 8007eba:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <UI_CPDisplay+0xd4>)
 8007ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	440b      	add	r3, r1
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	440b      	add	r3, r1
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f107 000c 	add.w	r0, r7, #12
 8007ed2:	490f      	ldr	r1, [pc, #60]	; (8007f10 <UI_CPDisplay+0xdc>)
 8007ed4:	f006 ff8c 	bl	800edf0 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	4613      	mov	r3, r2
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <UI_CPDisplay+0xd8>)
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f107 020c 	add.w	r2, r7, #12
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7f9 fcd4 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	ddbc      	ble.n	8007e76 <UI_CPDisplay+0x42>
	}
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	3728      	adds	r7, #40	; 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000fd4 	.word	0x20000fd4
 8007f0c:	20000fa8 	.word	0x20000fa8
 8007f10:	08011430 	.word	0x08011430

08007f14 <UI_CP>:

UI_Menu_Lists UI_CP() {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "CHECKPOINT");
 8007f22:	4949      	ldr	r1, [pc, #292]	; (8008048 <UI_CP+0x134>)
 8007f24:	4849      	ldr	r0, [pc, #292]	; (800804c <UI_CP+0x138>)
 8007f26:	f7f9 fcb7 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_CPDisplay(num_menu, plan.checkpoint);
 8007f2a:	79bb      	ldrb	r3, [r7, #6]
 8007f2c:	4948      	ldr	r1, [pc, #288]	; (8008050 <UI_CP+0x13c>)
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff ff80 	bl	8007e34 <UI_CPDisplay>
	tick = HAL_GetTick();
 8007f34:	f001 f8fe 	bl	8009134 <HAL_GetTick>
 8007f38:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007f3a:	f001 f8fb 	bl	8009134 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b45      	cmp	r3, #69	; 0x45
 8007f46:	d977      	bls.n	8008038 <UI_CP+0x124>
		if(bt == UI_ReadButton()) continue;
 8007f48:	f7fe f840 	bl	8005fcc <UI_ReadButton>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d072      	beq.n	800803c <UI_CP+0x128>
		bt = UI_ReadButton();
 8007f56:	f7fe f839 	bl	8005fcc <UI_ReadButton>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <UI_CP+0x68>
			if(num_menu==MAX_CHECKPOINT-1) num_menu = 0; else num_menu++;
 8007f68:	79bb      	ldrb	r3, [r7, #6]
 8007f6a:	2b13      	cmp	r3, #19
 8007f6c:	d102      	bne.n	8007f74 <UI_CP+0x60>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	71bb      	strb	r3, [r7, #6]
 8007f72:	e7da      	b.n	8007f2a <UI_CP+0x16>
 8007f74:	79bb      	ldrb	r3, [r7, #6]
 8007f76:	3301      	adds	r3, #1
 8007f78:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007f7a:	e7d6      	b.n	8007f2a <UI_CP+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d009      	beq.n	8007f9a <UI_CP+0x86>
			if(num_menu==0) num_menu = MAX_CHECKPOINT-1; else num_menu--;
 8007f86:	79bb      	ldrb	r3, [r7, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <UI_CP+0x7e>
 8007f8c:	2313      	movs	r3, #19
 8007f8e:	71bb      	strb	r3, [r7, #6]
 8007f90:	e7cb      	b.n	8007f2a <UI_CP+0x16>
 8007f92:	79bb      	ldrb	r3, [r7, #6]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007f98:	e7c7      	b.n	8007f2a <UI_CP+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d016      	beq.n	8007fd2 <UI_CP+0xbe>
			if(plan.checkpoint[num_menu]==DEF_ACTION_PER_PLAN-1) plan.checkpoint[num_menu] = 0; else plan.checkpoint[num_menu]++;
 8007fa4:	79bb      	ldrb	r3, [r7, #6]
 8007fa6:	4a2b      	ldr	r2, [pc, #172]	; (8008054 <UI_CP+0x140>)
 8007fa8:	4413      	add	r3, r2
 8007faa:	789b      	ldrb	r3, [r3, #2]
 8007fac:	2b63      	cmp	r3, #99	; 0x63
 8007fae:	d105      	bne.n	8007fbc <UI_CP+0xa8>
 8007fb0:	79bb      	ldrb	r3, [r7, #6]
 8007fb2:	4a28      	ldr	r2, [pc, #160]	; (8008054 <UI_CP+0x140>)
 8007fb4:	4413      	add	r3, r2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	709a      	strb	r2, [r3, #2]
 8007fba:	e7b6      	b.n	8007f2a <UI_CP+0x16>
 8007fbc:	79bb      	ldrb	r3, [r7, #6]
 8007fbe:	4a25      	ldr	r2, [pc, #148]	; (8008054 <UI_CP+0x140>)
 8007fc0:	441a      	add	r2, r3
 8007fc2:	7892      	ldrb	r2, [r2, #2]
 8007fc4:	3201      	adds	r2, #1
 8007fc6:	b2d1      	uxtb	r1, r2
 8007fc8:	4a22      	ldr	r2, [pc, #136]	; (8008054 <UI_CP+0x140>)
 8007fca:	4413      	add	r3, r2
 8007fcc:	460a      	mov	r2, r1
 8007fce:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8007fd0:	e7ab      	b.n	8007f2a <UI_CP+0x16>
		}
		else if(bt & SW_LF_PRESS) {
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d016      	beq.n	800800a <UI_CP+0xf6>
			if(plan.checkpoint[num_menu]==0) plan.checkpoint[num_menu] = DEF_ACTION_PER_PLAN-1; else plan.checkpoint[num_menu]--;
 8007fdc:	79bb      	ldrb	r3, [r7, #6]
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <UI_CP+0x140>)
 8007fe0:	4413      	add	r3, r2
 8007fe2:	789b      	ldrb	r3, [r3, #2]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d105      	bne.n	8007ff4 <UI_CP+0xe0>
 8007fe8:	79bb      	ldrb	r3, [r7, #6]
 8007fea:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <UI_CP+0x140>)
 8007fec:	4413      	add	r3, r2
 8007fee:	2263      	movs	r2, #99	; 0x63
 8007ff0:	709a      	strb	r2, [r3, #2]
 8007ff2:	e79a      	b.n	8007f2a <UI_CP+0x16>
 8007ff4:	79bb      	ldrb	r3, [r7, #6]
 8007ff6:	4a17      	ldr	r2, [pc, #92]	; (8008054 <UI_CP+0x140>)
 8007ff8:	441a      	add	r2, r3
 8007ffa:	7892      	ldrb	r2, [r2, #2]
 8007ffc:	3a01      	subs	r2, #1
 8007ffe:	b2d1      	uxtb	r1, r2
 8008000:	4a14      	ldr	r2, [pc, #80]	; (8008054 <UI_CP+0x140>)
 8008002:	4413      	add	r3, r2
 8008004:	460a      	mov	r2, r1
 8008006:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8008008:	e78f      	b.n	8007f2a <UI_CP+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <UI_CP+0x104>
			return UI_HOMESCREEN;
 8008014:	2302      	movs	r3, #2
 8008016:	e013      	b.n	8008040 <UI_CP+0x12c>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d08b      	beq.n	8007f3a <UI_CP+0x26>
			DISP_DisplayText(&short_message, "Saving...");
 8008022:	490d      	ldr	r1, [pc, #52]	; (8008058 <UI_CP+0x144>)
 8008024:	480d      	ldr	r0, [pc, #52]	; (800805c <UI_CP+0x148>)
 8008026:	f7f9 fc37 	bl	8001898 <DISP_DisplayText>
			Storage_SetCheckpoint();
 800802a:	f7fd f827 	bl	800507c <Storage_SetCheckpoint>
			HAL_Delay(200);
 800802e:	20c8      	movs	r0, #200	; 0xc8
 8008030:	f001 f88c 	bl	800914c <HAL_Delay>
			return UI_SET;
 8008034:	2307      	movs	r3, #7
 8008036:	e003      	b.n	8008040 <UI_CP+0x12c>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008038:	bf00      	nop
 800803a:	e77e      	b.n	8007f3a <UI_CP+0x26>
		if(bt == UI_ReadButton()) continue;
 800803c:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800803e:	e77c      	b.n	8007f3a <UI_CP+0x26>
		}
	}
	return UI_IDLE;
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	08011440 	.word	0x08011440
 800804c:	20000fc4 	.word	0x20000fc4
 8008050:	20000d56 	.word	0x20000d56
 8008054:	20000d54 	.word	0x20000d54
 8008058:	080113b4 	.word	0x080113b4
 800805c:	20000ee8 	.word	0x20000ee8

08008060 <UI_PlanSelectDisplay>:




void UI_PlanSelectDisplay(uint8_t num) {
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	4a2c      	ldr	r2, [pc, #176]	; (8008120 <UI_PlanSelectDisplay+0xc0>)
 800806e:	f992 2000 	ldrsb.w	r2, [r2]
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	2b03      	cmp	r3, #3
 8008076:	dd06      	ble.n	8008086 <UI_PlanSelectDisplay+0x26>
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	3b03      	subs	r3, #3
 800807c:	b2db      	uxtb	r3, r3
 800807e:	b25a      	sxtb	r2, r3
 8008080:	4b27      	ldr	r3, [pc, #156]	; (8008120 <UI_PlanSelectDisplay+0xc0>)
 8008082:	701a      	strb	r2, [r3, #0]
 8008084:	e009      	b.n	800809a <UI_PlanSelectDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	4a25      	ldr	r2, [pc, #148]	; (8008120 <UI_PlanSelectDisplay+0xc0>)
 800808a:	f992 2000 	ldrsb.w	r2, [r2]
 800808e:	4293      	cmp	r3, r2
 8008090:	da03      	bge.n	800809a <UI_PlanSelectDisplay+0x3a>
 8008092:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008096:	4b22      	ldr	r3, [pc, #136]	; (8008120 <UI_PlanSelectDisplay+0xc0>)
 8008098:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 800809a:	2300      	movs	r3, #0
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
 800809e:	e036      	b.n	800810e <UI_PlanSelectDisplay+0xae>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80080a0:	4b1f      	ldr	r3, [pc, #124]	; (8008120 <UI_PlanSelectDisplay+0xc0>)
 80080a2:	f993 3000 	ldrsb.w	r3, [r3]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	441a      	add	r2, r3
 80080ac:	79fb      	ldrb	r3, [r7, #7]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d109      	bne.n	80080c6 <UI_PlanSelectDisplay+0x66>
 80080b2:	491c      	ldr	r1, [pc, #112]	; (8008124 <UI_PlanSelectDisplay+0xc4>)
 80080b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b6:	4613      	mov	r3, r2
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	1a9b      	subs	r3, r3, r2
 80080bc:	440b      	add	r3, r1
 80080be:	3302      	adds	r3, #2
 80080c0:	2201      	movs	r2, #1
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e008      	b.n	80080d8 <UI_PlanSelectDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 80080c6:	4917      	ldr	r1, [pc, #92]	; (8008124 <UI_PlanSelectDisplay+0xc4>)
 80080c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ca:	4613      	mov	r3, r2
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	440b      	add	r3, r1
 80080d2:	3302      	adds	r3, #2
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "Plan%i", i + first_list);
 80080d8:	4b11      	ldr	r3, [pc, #68]	; (8008120 <UI_PlanSelectDisplay+0xc0>)
 80080da:	f993 3000 	ldrsb.w	r3, [r3]
 80080de:	461a      	mov	r2, r3
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	441a      	add	r2, r3
 80080e4:	f107 030c 	add.w	r3, r7, #12
 80080e8:	490f      	ldr	r1, [pc, #60]	; (8008128 <UI_PlanSelectDisplay+0xc8>)
 80080ea:	4618      	mov	r0, r3
 80080ec:	f006 fe80 	bl	800edf0 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 80080f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f2:	4613      	mov	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	1a9b      	subs	r3, r3, r2
 80080f8:	4a0a      	ldr	r2, [pc, #40]	; (8008124 <UI_PlanSelectDisplay+0xc4>)
 80080fa:	4413      	add	r3, r2
 80080fc:	f107 020c 	add.w	r2, r7, #12
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7f9 fbc8 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	3301      	adds	r3, #1
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	2b03      	cmp	r3, #3
 8008112:	ddc5      	ble.n	80080a0 <UI_PlanSelectDisplay+0x40>
	}
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	3728      	adds	r7, #40	; 0x28
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000fd5 	.word	0x20000fd5
 8008124:	20000fa8 	.word	0x20000fa8
 8008128:	0801144c 	.word	0x0801144c

0800812c <UI_PlanSelect>:

UI_Menu_Lists UI_PlanSelect() {
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "SELECT PLAN");
 800813a:	494f      	ldr	r1, [pc, #316]	; (8008278 <UI_PlanSelect+0x14c>)
 800813c:	484f      	ldr	r0, [pc, #316]	; (800827c <UI_PlanSelect+0x150>)
 800813e:	f7f9 fbab 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_PlanSelectDisplay(num_menu);
 8008142:	79bb      	ldrb	r3, [r7, #6]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff ff8b 	bl	8008060 <UI_PlanSelectDisplay>
	tick = HAL_GetTick();
 800814a:	f000 fff3 	bl	8009134 <HAL_GetTick>
 800814e:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008150:	f000 fff0 	bl	8009134 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b45      	cmp	r3, #69	; 0x45
 800815c:	f240 8083 	bls.w	8008266 <UI_PlanSelect+0x13a>
		if(bt == UI_ReadButton()) continue;
 8008160:	f7fd ff34 	bl	8005fcc <UI_ReadButton>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	4293      	cmp	r3, r2
 800816c:	d07d      	beq.n	800826a <UI_PlanSelect+0x13e>
		bt = UI_ReadButton();
 800816e:	f7fd ff2d 	bl	8005fcc <UI_ReadButton>
 8008172:	4603      	mov	r3, r0
 8008174:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <UI_PlanSelect+0x68>
			if(num_menu==MAX_PLAN-1) num_menu = 0; else num_menu++;
 8008180:	79bb      	ldrb	r3, [r7, #6]
 8008182:	2b0e      	cmp	r3, #14
 8008184:	d102      	bne.n	800818c <UI_PlanSelect+0x60>
 8008186:	2300      	movs	r3, #0
 8008188:	71bb      	strb	r3, [r7, #6]
 800818a:	e7da      	b.n	8008142 <UI_PlanSelect+0x16>
 800818c:	79bb      	ldrb	r3, [r7, #6]
 800818e:	3301      	adds	r3, #1
 8008190:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008192:	e7d6      	b.n	8008142 <UI_PlanSelect+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d009      	beq.n	80081b2 <UI_PlanSelect+0x86>
			if(num_menu==0) num_menu = MAX_PLAN-1; else num_menu--;
 800819e:	79bb      	ldrb	r3, [r7, #6]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <UI_PlanSelect+0x7e>
 80081a4:	230e      	movs	r3, #14
 80081a6:	71bb      	strb	r3, [r7, #6]
 80081a8:	e7cb      	b.n	8008142 <UI_PlanSelect+0x16>
 80081aa:	79bb      	ldrb	r3, [r7, #6]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 80081b0:	e7c7      	b.n	8008142 <UI_PlanSelect+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	f003 0302 	and.w	r3, r3, #2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d029      	beq.n	8008210 <UI_PlanSelect+0xe4>
			DISP_DisplayText(&short_message, "Copy to this Plan?");
 80081bc:	4930      	ldr	r1, [pc, #192]	; (8008280 <UI_PlanSelect+0x154>)
 80081be:	4831      	ldr	r0, [pc, #196]	; (8008284 <UI_PlanSelect+0x158>)
 80081c0:	f7f9 fb6a 	bl	8001898 <DISP_DisplayText>
			while(1) {
				if(bt == UI_ReadButton()) continue;
 80081c4:	f7fd ff02 	bl	8005fcc <UI_ReadButton>
 80081c8:	4603      	mov	r3, r0
 80081ca:	461a      	mov	r2, r3
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01c      	beq.n	800820c <UI_PlanSelect+0xe0>
				bt = UI_ReadButton();
 80081d2:	f7fd fefb 	bl	8005fcc <UI_ReadButton>
 80081d6:	4603      	mov	r3, r0
 80081d8:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_OK_PRESS) {
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00d      	beq.n	8008200 <UI_PlanSelect+0xd4>
					DISP_DisplayText(&short_message, "Copying...");
 80081e4:	4928      	ldr	r1, [pc, #160]	; (8008288 <UI_PlanSelect+0x15c>)
 80081e6:	4827      	ldr	r0, [pc, #156]	; (8008284 <UI_PlanSelect+0x158>)
 80081e8:	f7f9 fb56 	bl	8001898 <DISP_DisplayText>
					Storage_CopyPlan(num_menu);
 80081ec:	79bb      	ldrb	r3, [r7, #6]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fd f9d2 	bl	8005598 <Storage_CopyPlan>
					DISP_DisplayText(&short_message, "Copy done!");
 80081f4:	4925      	ldr	r1, [pc, #148]	; (800828c <UI_PlanSelect+0x160>)
 80081f6:	4823      	ldr	r0, [pc, #140]	; (8008284 <UI_PlanSelect+0x158>)
 80081f8:	f7f9 fb4e 	bl	8001898 <DISP_DisplayText>
					break;
 80081fc:	bf00      	nop
				}
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
					goto ui_cp;
				}
			}
			goto ui_cp;
 80081fe:	e7a0      	b.n	8008142 <UI_PlanSelect+0x16>
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0dc      	beq.n	80081c4 <UI_PlanSelect+0x98>
					goto ui_cp;
 800820a:	e79a      	b.n	8008142 <UI_PlanSelect+0x16>
				if(bt == UI_ReadButton()) continue;
 800820c:	bf00      	nop
 800820e:	e7d9      	b.n	80081c4 <UI_PlanSelect+0x98>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <UI_PlanSelect+0xf2>
			return UI_HOMESCREEN;
 800821a:	2302      	movs	r3, #2
 800821c:	e027      	b.n	800826e <UI_PlanSelect+0x142>
		}
		else if(bt & SW_OK_PRESS) {
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b00      	cmp	r3, #0
 8008226:	d093      	beq.n	8008150 <UI_PlanSelect+0x24>
			DISP_DisplayText(&short_message, "Loading...");
 8008228:	4919      	ldr	r1, [pc, #100]	; (8008290 <UI_PlanSelect+0x164>)
 800822a:	4816      	ldr	r0, [pc, #88]	; (8008284 <UI_PlanSelect+0x158>)
 800822c:	f7f9 fb34 	bl	8001898 <DISP_DisplayText>
			if(!Storage_GetPlan(num_menu)) {
 8008230:	79bb      	ldrb	r3, [r7, #6]
 8008232:	4618      	mov	r0, r3
 8008234:	f7fc fea0 	bl	8004f78 <Storage_GetPlan>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <UI_PlanSelect+0x128>
				DISP_DisplayText(&short_message, "Reseting...");
 800823e:	4915      	ldr	r1, [pc, #84]	; (8008294 <UI_PlanSelect+0x168>)
 8008240:	4810      	ldr	r0, [pc, #64]	; (8008284 <UI_PlanSelect+0x158>)
 8008242:	f7f9 fb29 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008246:	f7fc fd29 	bl	8004c9c <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 800824a:	f7fc fe1f 	bl	8004e8c <Storage_PlanInit>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0f8      	beq.n	8008246 <UI_PlanSelect+0x11a>
			}
			DISP_DisplayText(&short_message, "Done!");
 8008254:	4910      	ldr	r1, [pc, #64]	; (8008298 <UI_PlanSelect+0x16c>)
 8008256:	480b      	ldr	r0, [pc, #44]	; (8008284 <UI_PlanSelect+0x158>)
 8008258:	f7f9 fb1e 	bl	8001898 <DISP_DisplayText>
			HAL_Delay(200);
 800825c:	20c8      	movs	r0, #200	; 0xc8
 800825e:	f000 ff75 	bl	800914c <HAL_Delay>
			return UI_HOMESCREEN;
 8008262:	2302      	movs	r3, #2
 8008264:	e003      	b.n	800826e <UI_PlanSelect+0x142>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008266:	bf00      	nop
 8008268:	e772      	b.n	8008150 <UI_PlanSelect+0x24>
		if(bt == UI_ReadButton()) continue;
 800826a:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800826c:	e770      	b.n	8008150 <UI_PlanSelect+0x24>
		}
	}
	return UI_IDLE;
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	08011454 	.word	0x08011454
 800827c:	20000fc4 	.word	0x20000fc4
 8008280:	08011460 	.word	0x08011460
 8008284:	20000ee8 	.word	0x20000ee8
 8008288:	08011474 	.word	0x08011474
 800828c:	08011480 	.word	0x08011480
 8008290:	0801148c 	.word	0x0801148c
 8008294:	08011498 	.word	0x08011498
 8008298:	080114a4 	.word	0x080114a4

0800829c <UI_MemSettingDisplay>:
		" Reset All",
		" ",
		" "
};

void UI_MemSettingDisplay(uint8_t num) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	4a29      	ldr	r2, [pc, #164]	; (8008350 <UI_MemSettingDisplay+0xb4>)
 80082aa:	f992 2000 	ldrsb.w	r2, [r2]
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	dd06      	ble.n	80082c2 <UI_MemSettingDisplay+0x26>
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	3b03      	subs	r3, #3
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	b25a      	sxtb	r2, r3
 80082bc:	4b24      	ldr	r3, [pc, #144]	; (8008350 <UI_MemSettingDisplay+0xb4>)
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	e009      	b.n	80082d6 <UI_MemSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 80082c2:	79fb      	ldrb	r3, [r7, #7]
 80082c4:	4a22      	ldr	r2, [pc, #136]	; (8008350 <UI_MemSettingDisplay+0xb4>)
 80082c6:	f992 2000 	ldrsb.w	r2, [r2]
 80082ca:	4293      	cmp	r3, r2
 80082cc:	da03      	bge.n	80082d6 <UI_MemSettingDisplay+0x3a>
 80082ce:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80082d2:	4b1f      	ldr	r3, [pc, #124]	; (8008350 <UI_MemSettingDisplay+0xb4>)
 80082d4:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e031      	b.n	8008340 <UI_MemSettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 80082dc:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <UI_MemSettingDisplay+0xb4>)
 80082de:	f993 3000 	ldrsb.w	r3, [r3]
 80082e2:	461a      	mov	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	441a      	add	r2, r3
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d109      	bne.n	8008302 <UI_MemSettingDisplay+0x66>
 80082ee:	4919      	ldr	r1, [pc, #100]	; (8008354 <UI_MemSettingDisplay+0xb8>)
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4613      	mov	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	1a9b      	subs	r3, r3, r2
 80082f8:	440b      	add	r3, r1
 80082fa:	3302      	adds	r3, #2
 80082fc:	2201      	movs	r2, #1
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	e008      	b.n	8008314 <UI_MemSettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8008302:	4914      	ldr	r1, [pc, #80]	; (8008354 <UI_MemSettingDisplay+0xb8>)
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	1a9b      	subs	r3, r3, r2
 800830c:	440b      	add	r3, r1
 800830e:	3302      	adds	r3, #2
 8008310:	2200      	movs	r2, #0
 8008312:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], memory_menus[i+first_list]);
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4613      	mov	r3, r2
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	1a9b      	subs	r3, r3, r2
 800831c:	4a0d      	ldr	r2, [pc, #52]	; (8008354 <UI_MemSettingDisplay+0xb8>)
 800831e:	441a      	add	r2, r3
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <UI_MemSettingDisplay+0xb4>)
 8008322:	f993 3000 	ldrsb.w	r3, [r3]
 8008326:	4619      	mov	r1, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	440b      	add	r3, r1
 800832c:	490a      	ldr	r1, [pc, #40]	; (8008358 <UI_MemSettingDisplay+0xbc>)
 800832e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008332:	4619      	mov	r1, r3
 8008334:	4610      	mov	r0, r2
 8008336:	f7f9 faaf 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b03      	cmp	r3, #3
 8008344:	ddca      	ble.n	80082dc <UI_MemSettingDisplay+0x40>
	}
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000fd6 	.word	0x20000fd6
 8008354:	20000f1c 	.word	0x20000f1c
 8008358:	20000310 	.word	0x20000310

0800835c <UI_MemSetting>:

UI_Menu_Lists UI_MemSetting() {
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "MEMORY");
 8008366:	495b      	ldr	r1, [pc, #364]	; (80084d4 <UI_MemSetting+0x178>)
 8008368:	485b      	ldr	r0, [pc, #364]	; (80084d8 <UI_MemSetting+0x17c>)
 800836a:	f7f9 fa95 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_MemSettingDisplay(num_menu);
 800836e:	4b5b      	ldr	r3, [pc, #364]	; (80084dc <UI_MemSetting+0x180>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff ff92 	bl	800829c <UI_MemSettingDisplay>
	tick = HAL_GetTick();
 8008378:	f000 fedc 	bl	8009134 <HAL_GetTick>
 800837c:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800837e:	f000 fed9 	bl	8009134 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b45      	cmp	r3, #69	; 0x45
 800838a:	f240 8097 	bls.w	80084bc <UI_MemSetting+0x160>
		if(bt == UI_ReadButton()) continue;
 800838e:	f7fd fe1d 	bl	8005fcc <UI_ReadButton>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	4293      	cmp	r3, r2
 800839a:	f000 8091 	beq.w	80084c0 <UI_MemSetting+0x164>
		bt = UI_ReadButton();
 800839e:	f7fd fe15 	bl	8005fcc <UI_ReadButton>
 80083a2:	4603      	mov	r3, r0
 80083a4:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00e      	beq.n	80083ce <UI_MemSetting+0x72>
			if(num_menu==1) num_menu = 0; else num_menu++;
 80083b0:	4b4a      	ldr	r3, [pc, #296]	; (80084dc <UI_MemSetting+0x180>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d103      	bne.n	80083c0 <UI_MemSetting+0x64>
 80083b8:	4b48      	ldr	r3, [pc, #288]	; (80084dc <UI_MemSetting+0x180>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	e7d6      	b.n	800836e <UI_MemSetting+0x12>
 80083c0:	4b46      	ldr	r3, [pc, #280]	; (80084dc <UI_MemSetting+0x180>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	3301      	adds	r3, #1
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	4b44      	ldr	r3, [pc, #272]	; (80084dc <UI_MemSetting+0x180>)
 80083ca:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 80083cc:	e7cf      	b.n	800836e <UI_MemSetting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00e      	beq.n	80083f6 <UI_MemSetting+0x9a>
			if(num_menu==0) num_menu = 1; else num_menu--;
 80083d8:	4b40      	ldr	r3, [pc, #256]	; (80084dc <UI_MemSetting+0x180>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d103      	bne.n	80083e8 <UI_MemSetting+0x8c>
 80083e0:	4b3e      	ldr	r3, [pc, #248]	; (80084dc <UI_MemSetting+0x180>)
 80083e2:	2201      	movs	r2, #1
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e7c2      	b.n	800836e <UI_MemSetting+0x12>
 80083e8:	4b3c      	ldr	r3, [pc, #240]	; (80084dc <UI_MemSetting+0x180>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	4b3a      	ldr	r3, [pc, #232]	; (80084dc <UI_MemSetting+0x180>)
 80083f2:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 80083f4:	e7bb      	b.n	800836e <UI_MemSetting+0x12>
		}
		else if(bt & SW_HM_PRESS) {
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <UI_MemSetting+0xae>
			num_menu = 0;
 8008400:	4b36      	ldr	r3, [pc, #216]	; (80084dc <UI_MemSetting+0x180>)
 8008402:	2200      	movs	r2, #0
 8008404:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8008406:	2302      	movs	r3, #2
 8008408:	e060      	b.n	80084cc <UI_MemSetting+0x170>
		}
		else if(bt & SW_BK_PRESS) {
 800840a:	79fb      	ldrb	r3, [r7, #7]
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <UI_MemSetting+0xc2>
			num_menu = 0;
 8008414:	4b31      	ldr	r3, [pc, #196]	; (80084dc <UI_MemSetting+0x180>)
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
			return UI_SET;
 800841a:	2307      	movs	r3, #7
 800841c:	e056      	b.n	80084cc <UI_MemSetting+0x170>
		}
		switch(num_menu) {
 800841e:	4b2f      	ldr	r3, [pc, #188]	; (80084dc <UI_MemSetting+0x180>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b03      	cmp	r3, #3
 8008424:	d027      	beq.n	8008476 <UI_MemSetting+0x11a>
 8008426:	2b03      	cmp	r3, #3
 8008428:	dca9      	bgt.n	800837e <UI_MemSetting+0x22>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <UI_MemSetting+0xd8>
 800842e:	2b01      	cmp	r3, #1
 8008430:	d018      	beq.n	8008464 <UI_MemSetting+0x108>
 8008432:	e04a      	b.n	80084ca <UI_MemSetting+0x16e>
		case 0:
			if(bt & SW_OK_PRESS) {
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b00      	cmp	r3, #0
 800843c:	d042      	beq.n	80084c4 <UI_MemSetting+0x168>
				DISP_DisplayText(&short_message, "Reseting...");
 800843e:	4928      	ldr	r1, [pc, #160]	; (80084e0 <UI_MemSetting+0x184>)
 8008440:	4828      	ldr	r0, [pc, #160]	; (80084e4 <UI_MemSetting+0x188>)
 8008442:	f7f9 fa29 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008446:	f7fc fc29 	bl	8004c9c <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 800844a:	f7fc fd1f 	bl	8004e8c <Storage_PlanInit>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f8      	beq.n	8008446 <UI_MemSetting+0xea>
				DISP_DisplayText(&short_message, "Done!");
 8008454:	4924      	ldr	r1, [pc, #144]	; (80084e8 <UI_MemSetting+0x18c>)
 8008456:	4823      	ldr	r0, [pc, #140]	; (80084e4 <UI_MemSetting+0x188>)
 8008458:	f7f9 fa1e 	bl	8001898 <DISP_DisplayText>
				HAL_Delay(200);
 800845c:	20c8      	movs	r0, #200	; 0xc8
 800845e:	f000 fe75 	bl	800914c <HAL_Delay>
				goto ui_mem;
 8008462:	e784      	b.n	800836e <UI_MemSetting+0x12>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d02c      	beq.n	80084c8 <UI_MemSetting+0x16c>
				num_menu = 3;
 800846e:	4b1b      	ldr	r3, [pc, #108]	; (80084dc <UI_MemSetting+0x180>)
 8008470:	2203      	movs	r2, #3
 8008472:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008474:	e028      	b.n	80084c8 <UI_MemSetting+0x16c>
		case 3:
			DISP_DisplayText(&setting_menu[3], "Are you sure?");
 8008476:	491d      	ldr	r1, [pc, #116]	; (80084ec <UI_MemSetting+0x190>)
 8008478:	481d      	ldr	r0, [pc, #116]	; (80084f0 <UI_MemSetting+0x194>)
 800847a:	f7f9 fa0d 	bl	8001898 <DISP_DisplayText>
			while(1) {
				bt = UI_ReadButton();
 800847e:	f7fd fda5 	bl	8005fcc <UI_ReadButton>
 8008482:	4603      	mov	r3, r0
 8008484:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_BK_PRESS) {
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <UI_MemSetting+0x13c>
					num_menu = 1;
 8008490:	4b12      	ldr	r3, [pc, #72]	; (80084dc <UI_MemSetting+0x180>)
 8008492:	2201      	movs	r2, #1
 8008494:	701a      	strb	r2, [r3, #0]
					goto ui_mem;
 8008496:	e76a      	b.n	800836e <UI_MemSetting+0x12>
				}
				if(bt & SW_OK_PRESS) {
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0ed      	beq.n	800847e <UI_MemSetting+0x122>
					DISP_DisplayText(&setting_menu[3], "Wait...");
 80084a2:	4914      	ldr	r1, [pc, #80]	; (80084f4 <UI_MemSetting+0x198>)
 80084a4:	4812      	ldr	r0, [pc, #72]	; (80084f0 <UI_MemSetting+0x194>)
 80084a6:	f7f9 f9f7 	bl	8001898 <DISP_DisplayText>
					Storage_CleanInit();
 80084aa:	f7fd f8a7 	bl	80055fc <Storage_CleanInit>
					HAL_Delay(1000);
 80084ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084b2:	f000 fe4b 	bl	800914c <HAL_Delay>
					HAL_NVIC_SystemReset();
 80084b6:	f001 fcb4 	bl	8009e22 <HAL_NVIC_SystemReset>
				bt = UI_ReadButton();
 80084ba:	e7e0      	b.n	800847e <UI_MemSetting+0x122>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80084bc:	bf00      	nop
 80084be:	e75e      	b.n	800837e <UI_MemSetting+0x22>
		if(bt == UI_ReadButton()) continue;
 80084c0:	bf00      	nop
 80084c2:	e75c      	b.n	800837e <UI_MemSetting+0x22>
			break;
 80084c4:	bf00      	nop
 80084c6:	e75a      	b.n	800837e <UI_MemSetting+0x22>
			break;
 80084c8:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80084ca:	e758      	b.n	800837e <UI_MemSetting+0x22>
				}
			}
		}
	}
	return UI_IDLE;
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	080114c4 	.word	0x080114c4
 80084d8:	20000f14 	.word	0x20000f14
 80084dc:	20000fd7 	.word	0x20000fd7
 80084e0:	08011498 	.word	0x08011498
 80084e4:	20000ee8 	.word	0x20000ee8
 80084e8:	080114a4 	.word	0x080114a4
 80084ec:	080114cc 	.word	0x080114cc
 80084f0:	20000f31 	.word	0x20000f31
 80084f4:	080114dc 	.word	0x080114dc

080084f8 <UI_PIDSettingDisplay>:



void UI_PIDSettingDisplay(uint8_t num) {
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	; 0x28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008502:	79fb      	ldrb	r3, [r7, #7]
 8008504:	4a4b      	ldr	r2, [pc, #300]	; (8008634 <UI_PIDSettingDisplay+0x13c>)
 8008506:	f992 2000 	ldrsb.w	r2, [r2]
 800850a:	1a9b      	subs	r3, r3, r2
 800850c:	2b03      	cmp	r3, #3
 800850e:	dd06      	ble.n	800851e <UI_PIDSettingDisplay+0x26>
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	3b03      	subs	r3, #3
 8008514:	b2db      	uxtb	r3, r3
 8008516:	b25a      	sxtb	r2, r3
 8008518:	4b46      	ldr	r3, [pc, #280]	; (8008634 <UI_PIDSettingDisplay+0x13c>)
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	e009      	b.n	8008532 <UI_PIDSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	4a44      	ldr	r2, [pc, #272]	; (8008634 <UI_PIDSettingDisplay+0x13c>)
 8008522:	f992 2000 	ldrsb.w	r2, [r2]
 8008526:	4293      	cmp	r3, r2
 8008528:	da03      	bge.n	8008532 <UI_PIDSettingDisplay+0x3a>
 800852a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800852e:	4b41      	ldr	r3, [pc, #260]	; (8008634 <UI_PIDSettingDisplay+0x13c>)
 8008530:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008532:	2300      	movs	r3, #0
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
 8008536:	e074      	b.n	8008622 <UI_PIDSettingDisplay+0x12a>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008538:	4b3e      	ldr	r3, [pc, #248]	; (8008634 <UI_PIDSettingDisplay+0x13c>)
 800853a:	f993 3000 	ldrsb.w	r3, [r3]
 800853e:	461a      	mov	r2, r3
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	441a      	add	r2, r3
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	429a      	cmp	r2, r3
 8008548:	d109      	bne.n	800855e <UI_PIDSettingDisplay+0x66>
 800854a:	493b      	ldr	r1, [pc, #236]	; (8008638 <UI_PIDSettingDisplay+0x140>)
 800854c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854e:	4613      	mov	r3, r2
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	1a9b      	subs	r3, r3, r2
 8008554:	440b      	add	r3, r1
 8008556:	3302      	adds	r3, #2
 8008558:	2201      	movs	r2, #1
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e008      	b.n	8008570 <UI_PIDSettingDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 800855e:	4936      	ldr	r1, [pc, #216]	; (8008638 <UI_PIDSettingDisplay+0x140>)
 8008560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008562:	4613      	mov	r3, r2
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	440b      	add	r3, r1
 800856a:	3302      	adds	r3, #2
 800856c:	2200      	movs	r2, #0
 800856e:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i + first_list) {
 8008570:	4b30      	ldr	r3, [pc, #192]	; (8008634 <UI_PIDSettingDisplay+0x13c>)
 8008572:	f993 3000 	ldrsb.w	r3, [r3]
 8008576:	461a      	mov	r2, r3
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	4413      	add	r3, r2
 800857c:	2b03      	cmp	r3, #3
 800857e:	d841      	bhi.n	8008604 <UI_PIDSettingDisplay+0x10c>
 8008580:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <UI_PIDSettingDisplay+0x90>)
 8008582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008586:	bf00      	nop
 8008588:	08008599 	.word	0x08008599
 800858c:	080085b3 	.word	0x080085b3
 8008590:	080085cd 	.word	0x080085cd
 8008594:	080085e7 	.word	0x080085e7
		case 0:
			sprintf(buff, "KP ~ %3.2f", plan.kpid[0]);
 8008598:	4b28      	ldr	r3, [pc, #160]	; (800863c <UI_PIDSettingDisplay+0x144>)
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	4618      	mov	r0, r3
 800859e:	f7f7 ffd3 	bl	8000548 <__aeabi_f2d>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	f107 000c 	add.w	r0, r7, #12
 80085aa:	4925      	ldr	r1, [pc, #148]	; (8008640 <UI_PIDSettingDisplay+0x148>)
 80085ac:	f006 fc20 	bl	800edf0 <siprintf>
			break;
 80085b0:	e028      	b.n	8008604 <UI_PIDSettingDisplay+0x10c>
		case 1:
			sprintf(buff, "KI ~ %3.2f", plan.kpid[1]);
 80085b2:	4b22      	ldr	r3, [pc, #136]	; (800863c <UI_PIDSettingDisplay+0x144>)
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7f7 ffc6 	bl	8000548 <__aeabi_f2d>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	f107 000c 	add.w	r0, r7, #12
 80085c4:	491f      	ldr	r1, [pc, #124]	; (8008644 <UI_PIDSettingDisplay+0x14c>)
 80085c6:	f006 fc13 	bl	800edf0 <siprintf>
			break;
 80085ca:	e01b      	b.n	8008604 <UI_PIDSettingDisplay+0x10c>
		case 2:
			sprintf(buff, "KD ~ %3.2f", plan.kpid[2]);
 80085cc:	4b1b      	ldr	r3, [pc, #108]	; (800863c <UI_PIDSettingDisplay+0x144>)
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7f7 ffb9 	bl	8000548 <__aeabi_f2d>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	f107 000c 	add.w	r0, r7, #12
 80085de:	491a      	ldr	r1, [pc, #104]	; (8008648 <UI_PIDSettingDisplay+0x150>)
 80085e0:	f006 fc06 	bl	800edf0 <siprintf>
			break;
 80085e4:	e00e      	b.n	8008604 <UI_PIDSettingDisplay+0x10c>
		case 3:
			sprintf(buff, "%s", plan.status_pid?"AUTO":"MANUAL");
 80085e6:	4b15      	ldr	r3, [pc, #84]	; (800863c <UI_PIDSettingDisplay+0x144>)
 80085e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <UI_PIDSettingDisplay+0xfc>
 80085f0:	4a16      	ldr	r2, [pc, #88]	; (800864c <UI_PIDSettingDisplay+0x154>)
 80085f2:	e000      	b.n	80085f6 <UI_PIDSettingDisplay+0xfe>
 80085f4:	4a16      	ldr	r2, [pc, #88]	; (8008650 <UI_PIDSettingDisplay+0x158>)
 80085f6:	f107 030c 	add.w	r3, r7, #12
 80085fa:	4916      	ldr	r1, [pc, #88]	; (8008654 <UI_PIDSettingDisplay+0x15c>)
 80085fc:	4618      	mov	r0, r3
 80085fe:	f006 fbf7 	bl	800edf0 <siprintf>
			break;
 8008602:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8008604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008606:	4613      	mov	r3, r2
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	4a0a      	ldr	r2, [pc, #40]	; (8008638 <UI_PIDSettingDisplay+0x140>)
 800860e:	4413      	add	r3, r2
 8008610:	f107 020c 	add.w	r2, r7, #12
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7f9 f93e 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	3301      	adds	r3, #1
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	2b03      	cmp	r3, #3
 8008626:	dd87      	ble.n	8008538 <UI_PIDSettingDisplay+0x40>
	}
}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	3728      	adds	r7, #40	; 0x28
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000fd8 	.word	0x20000fd8
 8008638:	20000fa8 	.word	0x20000fa8
 800863c:	20000d54 	.word	0x20000d54
 8008640:	080114e4 	.word	0x080114e4
 8008644:	080114f0 	.word	0x080114f0
 8008648:	080114fc 	.word	0x080114fc
 800864c:	08011508 	.word	0x08011508
 8008650:	08011510 	.word	0x08011510
 8008654:	08011518 	.word	0x08011518

08008658 <UI_PIDSetting>:

UI_Menu_Lists UI_PIDSetting() {
 8008658:	b590      	push	{r4, r7, lr}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	73bb      	strb	r3, [r7, #14]
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]
	DISP_DisplayText(&home_status, "PID");
 8008666:	49a0      	ldr	r1, [pc, #640]	; (80088e8 <UI_PIDSetting+0x290>)
 8008668:	48a0      	ldr	r0, [pc, #640]	; (80088ec <UI_PIDSetting+0x294>)
 800866a:	f7f9 f915 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_PIDSettingDisplay(num_menu);
 800866e:	4ba0      	ldr	r3, [pc, #640]	; (80088f0 <UI_PIDSetting+0x298>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff ff40 	bl	80084f8 <UI_PIDSettingDisplay>
	tick = HAL_GetTick();
 8008678:	f000 fd5c 	bl	8009134 <HAL_GetTick>
 800867c:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800867e:	f000 fd59 	bl	8009134 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	7bba      	ldrb	r2, [r7, #14]
 800868a:	2a01      	cmp	r2, #1
 800868c:	d101      	bne.n	8008692 <UI_PIDSetting+0x3a>
 800868e:	2219      	movs	r2, #25
 8008690:	e000      	b.n	8008694 <UI_PIDSetting+0x3c>
 8008692:	2246      	movs	r2, #70	; 0x46
 8008694:	429a      	cmp	r2, r3
 8008696:	f200 816d 	bhi.w	8008974 <UI_PIDSetting+0x31c>
		bt2 = UI_ReadButton();
 800869a:	f7fd fc97 	bl	8005fcc <UI_ReadButton>
 800869e:	4603      	mov	r3, r0
 80086a0:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 80086a2:	7bfa      	ldrb	r2, [r7, #15]
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d103      	bne.n	80086b2 <UI_PIDSetting+0x5a>
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8163 	beq.w	8008978 <UI_PIDSetting+0x320>
		bt = bt2;
 80086b2:	79fb      	ldrb	r3, [r7, #7]
 80086b4:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d010      	beq.n	80086e2 <UI_PIDSetting+0x8a>
			if(num_menu==3) num_menu = 0; else num_menu++;
 80086c0:	4b8b      	ldr	r3, [pc, #556]	; (80088f0 <UI_PIDSetting+0x298>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d103      	bne.n	80086d0 <UI_PIDSetting+0x78>
 80086c8:	4b89      	ldr	r3, [pc, #548]	; (80088f0 <UI_PIDSetting+0x298>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	e005      	b.n	80086dc <UI_PIDSetting+0x84>
 80086d0:	4b87      	ldr	r3, [pc, #540]	; (80088f0 <UI_PIDSetting+0x298>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	4b85      	ldr	r3, [pc, #532]	; (80088f0 <UI_PIDSetting+0x298>)
 80086da:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 80086e0:	e7c5      	b.n	800866e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d010      	beq.n	800870e <UI_PIDSetting+0xb6>
			if(num_menu==0) num_menu = 3; else num_menu--;
 80086ec:	4b80      	ldr	r3, [pc, #512]	; (80088f0 <UI_PIDSetting+0x298>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d103      	bne.n	80086fc <UI_PIDSetting+0xa4>
 80086f4:	4b7e      	ldr	r3, [pc, #504]	; (80088f0 <UI_PIDSetting+0x298>)
 80086f6:	2203      	movs	r2, #3
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	e005      	b.n	8008708 <UI_PIDSetting+0xb0>
 80086fc:	4b7c      	ldr	r3, [pc, #496]	; (80088f0 <UI_PIDSetting+0x298>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	3b01      	subs	r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	4b7a      	ldr	r3, [pc, #488]	; (80088f0 <UI_PIDSetting+0x298>)
 8008706:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 800870c:	e7af      	b.n	800866e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <UI_PIDSetting+0xca>
			num_menu = 0;
 8008718:	4b75      	ldr	r3, [pc, #468]	; (80088f0 <UI_PIDSetting+0x298>)
 800871a:	2200      	movs	r2, #0
 800871c:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800871e:	2302      	movs	r3, #2
 8008720:	e12e      	b.n	8008980 <UI_PIDSetting+0x328>
		}
		else if(bt & SW_BK_PRESS) {
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00a      	beq.n	8008742 <UI_PIDSetting+0xea>
			num_menu = 0;
 800872c:	4b70      	ldr	r3, [pc, #448]	; (80088f0 <UI_PIDSetting+0x298>)
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
			DISP_DisplayText(&short_message, "Saving..");
 8008732:	4970      	ldr	r1, [pc, #448]	; (80088f4 <UI_PIDSetting+0x29c>)
 8008734:	4870      	ldr	r0, [pc, #448]	; (80088f8 <UI_PIDSetting+0x2a0>)
 8008736:	f7f9 f8af 	bl	8001898 <DISP_DisplayText>
			Storage_SetPID();
 800873a:	f7fc fcbd 	bl	80050b8 <Storage_SetPID>
			return UI_SET;
 800873e:	2307      	movs	r3, #7
 8008740:	e11e      	b.n	8008980 <UI_PIDSetting+0x328>
		}
		switch(num_menu) {
 8008742:	4b6b      	ldr	r3, [pc, #428]	; (80088f0 <UI_PIDSetting+0x298>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b02      	cmp	r3, #2
 8008748:	dc02      	bgt.n	8008750 <UI_PIDSetting+0xf8>
 800874a:	2b00      	cmp	r3, #0
 800874c:	da04      	bge.n	8008758 <UI_PIDSetting+0x100>
 800874e:	e116      	b.n	800897e <UI_PIDSetting+0x326>
 8008750:	2b03      	cmp	r3, #3
 8008752:	f000 80fa 	beq.w	800894a <UI_PIDSetting+0x2f2>
 8008756:	e112      	b.n	800897e <UI_PIDSetting+0x326>
		case 0:
		case 1:
		case 2:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800875e:	2b10      	cmp	r3, #16
 8008760:	d12c      	bne.n	80087bc <UI_PIDSetting+0x164>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=1.0;
 8008762:	4b63      	ldr	r3, [pc, #396]	; (80088f0 <UI_PIDSetting+0x298>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	4a65      	ldr	r2, [pc, #404]	; (80088fc <UI_PIDSetting+0x2a4>)
 8008768:	3306      	adds	r3, #6
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	edd3 7a00 	vldr	s15, [r3]
 8008772:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877a:	d108      	bne.n	800878e <UI_PIDSetting+0x136>
 800877c:	4b5c      	ldr	r3, [pc, #368]	; (80088f0 <UI_PIDSetting+0x298>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	4a5e      	ldr	r2, [pc, #376]	; (80088fc <UI_PIDSetting+0x2a4>)
 8008782:	3306      	adds	r3, #6
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	4a5d      	ldr	r2, [pc, #372]	; (8008900 <UI_PIDSetting+0x2a8>)
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	e013      	b.n	80087b6 <UI_PIDSetting+0x15e>
 800878e:	4b58      	ldr	r3, [pc, #352]	; (80088f0 <UI_PIDSetting+0x298>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	4a5a      	ldr	r2, [pc, #360]	; (80088fc <UI_PIDSetting+0x2a4>)
 8008794:	3306      	adds	r3, #6
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	edd3 7a00 	vldr	s15, [r3]
 800879e:	4b54      	ldr	r3, [pc, #336]	; (80088f0 <UI_PIDSetting+0x298>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087aa:	4a54      	ldr	r2, [pc, #336]	; (80088fc <UI_PIDSetting+0x2a4>)
 80087ac:	3306      	adds	r3, #6
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 80087b6:	2301      	movs	r3, #1
 80087b8:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80087ba:	e758      	b.n	800866e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d12f      	bne.n	8008826 <UI_PIDSetting+0x1ce>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=1.0;
 80087c6:	4b4a      	ldr	r3, [pc, #296]	; (80088f0 <UI_PIDSetting+0x298>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	4a4c      	ldr	r2, [pc, #304]	; (80088fc <UI_PIDSetting+0x2a4>)
 80087cc:	3306      	adds	r3, #6
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	edd3 7a00 	vldr	s15, [r3]
 80087d6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8008904 <UI_PIDSetting+0x2ac>
 80087da:	eef4 7a47 	vcmp.f32	s15, s14
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	d109      	bne.n	80087f8 <UI_PIDSetting+0x1a0>
 80087e4:	4b42      	ldr	r3, [pc, #264]	; (80088f0 <UI_PIDSetting+0x298>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	4a44      	ldr	r2, [pc, #272]	; (80088fc <UI_PIDSetting+0x2a4>)
 80087ea:	3306      	adds	r3, #6
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	e013      	b.n	8008820 <UI_PIDSetting+0x1c8>
 80087f8:	4b3d      	ldr	r3, [pc, #244]	; (80088f0 <UI_PIDSetting+0x298>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	4a3f      	ldr	r2, [pc, #252]	; (80088fc <UI_PIDSetting+0x2a4>)
 80087fe:	3306      	adds	r3, #6
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	edd3 7a00 	vldr	s15, [r3]
 8008808:	4b39      	ldr	r3, [pc, #228]	; (80088f0 <UI_PIDSetting+0x298>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008814:	4a39      	ldr	r2, [pc, #228]	; (80088fc <UI_PIDSetting+0x2a4>)
 8008816:	3306      	adds	r3, #6
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8008820:	2301      	movs	r3, #1
 8008822:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8008824:	e723      	b.n	800866e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800882c:	2b30      	cmp	r3, #48	; 0x30
 800882e:	d136      	bne.n	800889e <UI_PIDSetting+0x246>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=0.10;
 8008830:	4b2f      	ldr	r3, [pc, #188]	; (80088f0 <UI_PIDSetting+0x298>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	4a31      	ldr	r2, [pc, #196]	; (80088fc <UI_PIDSetting+0x2a4>)
 8008836:	3306      	adds	r3, #6
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	edd3 7a00 	vldr	s15, [r3]
 8008840:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008848:	d108      	bne.n	800885c <UI_PIDSetting+0x204>
 800884a:	4b29      	ldr	r3, [pc, #164]	; (80088f0 <UI_PIDSetting+0x298>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	4a2b      	ldr	r2, [pc, #172]	; (80088fc <UI_PIDSetting+0x2a4>)
 8008850:	3306      	adds	r3, #6
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	4a2a      	ldr	r2, [pc, #168]	; (8008900 <UI_PIDSetting+0x2a8>)
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	e01d      	b.n	8008898 <UI_PIDSetting+0x240>
 800885c:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <UI_PIDSetting+0x298>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	4a26      	ldr	r2, [pc, #152]	; (80088fc <UI_PIDSetting+0x2a4>)
 8008862:	3306      	adds	r3, #6
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f7f7 fe6c 	bl	8000548 <__aeabi_f2d>
 8008870:	a31b      	add	r3, pc, #108	; (adr r3, 80088e0 <UI_PIDSetting+0x288>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fd07 	bl	8000288 <__aeabi_dsub>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	491c      	ldr	r1, [pc, #112]	; (80088f0 <UI_PIDSetting+0x298>)
 8008880:	7809      	ldrb	r1, [r1, #0]
 8008882:	460c      	mov	r4, r1
 8008884:	4610      	mov	r0, r2
 8008886:	4619      	mov	r1, r3
 8008888:	f7f8 f9ae 	bl	8000be8 <__aeabi_d2f>
 800888c:	4602      	mov	r2, r0
 800888e:	491b      	ldr	r1, [pc, #108]	; (80088fc <UI_PIDSetting+0x2a4>)
 8008890:	1da3      	adds	r3, r4, #6
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8008898:	2301      	movs	r3, #1
 800889a:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800889c:	e6e7      	b.n	800866e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80088a4:	2b22      	cmp	r3, #34	; 0x22
 80088a6:	d169      	bne.n	800897c <UI_PIDSetting+0x324>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=0.1;
 80088a8:	4b11      	ldr	r3, [pc, #68]	; (80088f0 <UI_PIDSetting+0x298>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	4a13      	ldr	r2, [pc, #76]	; (80088fc <UI_PIDSetting+0x2a4>)
 80088ae:	3306      	adds	r3, #6
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	edd3 7a00 	vldr	s15, [r3]
 80088b8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8008904 <UI_PIDSetting+0x2ac>
 80088bc:	eef4 7a47 	vcmp.f32	s15, s14
 80088c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c4:	d120      	bne.n	8008908 <UI_PIDSetting+0x2b0>
 80088c6:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <UI_PIDSetting+0x298>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	4a0c      	ldr	r2, [pc, #48]	; (80088fc <UI_PIDSetting+0x2a4>)
 80088cc:	3306      	adds	r3, #6
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	f04f 0200 	mov.w	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	e034      	b.n	8008944 <UI_PIDSetting+0x2ec>
 80088da:	bf00      	nop
 80088dc:	f3af 8000 	nop.w
 80088e0:	9999999a 	.word	0x9999999a
 80088e4:	3fb99999 	.word	0x3fb99999
 80088e8:	0801151c 	.word	0x0801151c
 80088ec:	20000f14 	.word	0x20000f14
 80088f0:	20000fd9 	.word	0x20000fd9
 80088f4:	08011520 	.word	0x08011520
 80088f8:	20000ee8 	.word	0x20000ee8
 80088fc:	20000d54 	.word	0x20000d54
 8008900:	42c60000 	.word	0x42c60000
 8008904:	42c60000 	.word	0x42c60000
 8008908:	4b21      	ldr	r3, [pc, #132]	; (8008990 <UI_PIDSetting+0x338>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	4a21      	ldr	r2, [pc, #132]	; (8008994 <UI_PIDSetting+0x33c>)
 800890e:	3306      	adds	r3, #6
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4618      	mov	r0, r3
 8008918:	f7f7 fe16 	bl	8000548 <__aeabi_f2d>
 800891c:	a31a      	add	r3, pc, #104	; (adr r3, 8008988 <UI_PIDSetting+0x330>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fcb3 	bl	800028c <__adddf3>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4919      	ldr	r1, [pc, #100]	; (8008990 <UI_PIDSetting+0x338>)
 800892c:	7809      	ldrb	r1, [r1, #0]
 800892e:	460c      	mov	r4, r1
 8008930:	4610      	mov	r0, r2
 8008932:	4619      	mov	r1, r3
 8008934:	f7f8 f958 	bl	8000be8 <__aeabi_d2f>
 8008938:	4602      	mov	r2, r0
 800893a:	4916      	ldr	r1, [pc, #88]	; (8008994 <UI_PIDSetting+0x33c>)
 800893c:	1da3      	adds	r3, r4, #6
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8008944:	2301      	movs	r3, #1
 8008946:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8008948:	e691      	b.n	800866e <UI_PIDSetting+0x16>
			}
			break;
		case 3 :
			if(bt & (SW_LF_PRESS|SW_RG_PRESS)) {
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	f003 0312 	and.w	r3, r3, #18
 8008950:	2b00      	cmp	r3, #0
 8008952:	f43f ae94 	beq.w	800867e <UI_PIDSetting+0x26>
				plan.status_pid = !plan.status_pid;
 8008956:	4b0f      	ldr	r3, [pc, #60]	; (8008994 <UI_PIDSetting+0x33c>)
 8008958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	bf0c      	ite	eq
 8008960:	2301      	moveq	r3, #1
 8008962:	2300      	movne	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	461a      	mov	r2, r3
 8008968:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <UI_PIDSetting+0x33c>)
 800896a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				bt_status = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8008972:	e67c      	b.n	800866e <UI_PIDSetting+0x16>
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 8008974:	bf00      	nop
 8008976:	e682      	b.n	800867e <UI_PIDSetting+0x26>
		if(bt == bt2 && bt_status == 0) continue;
 8008978:	bf00      	nop
 800897a:	e680      	b.n	800867e <UI_PIDSetting+0x26>
			break;
 800897c:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800897e:	e67e      	b.n	800867e <UI_PIDSetting+0x26>
			}
		}
	}
	return UI_IDLE;
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	bd90      	pop	{r4, r7, pc}
 8008988:	9999999a 	.word	0x9999999a
 800898c:	3fb99999 	.word	0x3fb99999
 8008990:	20000fd9 	.word	0x20000fd9
 8008994:	20000d54 	.word	0x20000d54

08008998 <UI_SpeedSetDisplay>:



void UI_SpeedSetDisplay(uint8_t num) {
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	; 0x28
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<4; i++) {
 80089a2:	2301      	movs	r3, #1
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24
 80089a6:	e040      	b.n	8008a2a <UI_SpeedSetDisplay+0x92>
		if(i == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d109      	bne.n	80089c4 <UI_SpeedSetDisplay+0x2c>
 80089b0:	4922      	ldr	r1, [pc, #136]	; (8008a3c <UI_SpeedSetDisplay+0xa4>)
 80089b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b4:	4613      	mov	r3, r2
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	1a9b      	subs	r3, r3, r2
 80089ba:	440b      	add	r3, r1
 80089bc:	3302      	adds	r3, #2
 80089be:	2201      	movs	r2, #1
 80089c0:	701a      	strb	r2, [r3, #0]
 80089c2:	e008      	b.n	80089d6 <UI_SpeedSetDisplay+0x3e>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 80089c4:	491d      	ldr	r1, [pc, #116]	; (8008a3c <UI_SpeedSetDisplay+0xa4>)
 80089c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c8:	4613      	mov	r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	440b      	add	r3, r1
 80089d0:	3302      	adds	r3, #2
 80089d2:	2200      	movs	r2, #0
 80089d4:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i) {
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d003      	beq.n	80089e4 <UI_SpeedSetDisplay+0x4c>
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d00a      	beq.n	80089f8 <UI_SpeedSetDisplay+0x60>
 80089e2:	e013      	b.n	8008a0c <UI_SpeedSetDisplay+0x74>
		case 1:
			sprintf(buff, "Speed ~ %-3i", plan.speed);
 80089e4:	4b16      	ldr	r3, [pc, #88]	; (8008a40 <UI_SpeedSetDisplay+0xa8>)
 80089e6:	7d9b      	ldrb	r3, [r3, #22]
 80089e8:	461a      	mov	r2, r3
 80089ea:	f107 030c 	add.w	r3, r7, #12
 80089ee:	4915      	ldr	r1, [pc, #84]	; (8008a44 <UI_SpeedSetDisplay+0xac>)
 80089f0:	4618      	mov	r0, r3
 80089f2:	f006 f9fd 	bl	800edf0 <siprintf>
			break;
 80089f6:	e009      	b.n	8008a0c <UI_SpeedSetDisplay+0x74>
		case 2:
			sprintf(buff, "Tr Speed ~ %-3i", plan.turn_speed);
 80089f8:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <UI_SpeedSetDisplay+0xa8>)
 80089fa:	7ddb      	ldrb	r3, [r3, #23]
 80089fc:	461a      	mov	r2, r3
 80089fe:	f107 030c 	add.w	r3, r7, #12
 8008a02:	4911      	ldr	r1, [pc, #68]	; (8008a48 <UI_SpeedSetDisplay+0xb0>)
 8008a04:	4618      	mov	r0, r3
 8008a06:	f006 f9f3 	bl	800edf0 <siprintf>
			break;
 8008a0a:	bf00      	nop
//		case 3:
//			sprintf(buff, "Accel ~ %-3i", plan.acc);
//			break;
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8008a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0e:	4613      	mov	r3, r2
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	4a09      	ldr	r2, [pc, #36]	; (8008a3c <UI_SpeedSetDisplay+0xa4>)
 8008a16:	4413      	add	r3, r2
 8008a18:	f107 020c 	add.w	r2, r7, #12
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7f8 ff3a 	bl	8001898 <DISP_DisplayText>
	for(int i=1; i<4; i++) {
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	3301      	adds	r3, #1
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	ddbb      	ble.n	80089a8 <UI_SpeedSetDisplay+0x10>
	}
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	3728      	adds	r7, #40	; 0x28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20000fa8 	.word	0x20000fa8
 8008a40:	20000d54 	.word	0x20000d54
 8008a44:	0801152c 	.word	0x0801152c
 8008a48:	0801153c 	.word	0x0801153c

08008a4c <UI_SpeedSetting>:

UI_Menu_Lists UI_SpeedSetting() {
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t num_menu = 1;
 8008a52:	2301      	movs	r3, #1
 8008a54:	73bb      	strb	r3, [r7, #14]
	uint32_t tick = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60bb      	str	r3, [r7, #8]
	uint8_t bt_status = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	737b      	strb	r3, [r7, #13]
	DISP_DisplayText(&home_status, "SPEED");
 8008a5e:	495e      	ldr	r1, [pc, #376]	; (8008bd8 <UI_SpeedSetting+0x18c>)
 8008a60:	485e      	ldr	r0, [pc, #376]	; (8008bdc <UI_SpeedSetting+0x190>)
 8008a62:	f7f8 ff19 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_SpeedSetDisplay(num_menu);
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff ff95 	bl	8008998 <UI_SpeedSetDisplay>
	tick = HAL_GetTick();
 8008a6e:	f000 fb61 	bl	8009134 <HAL_GetTick>
 8008a72:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8008a74:	f000 fb5e 	bl	8009134 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	7b7a      	ldrb	r2, [r7, #13]
 8008a80:	2a01      	cmp	r2, #1
 8008a82:	d101      	bne.n	8008a88 <UI_SpeedSetting+0x3c>
 8008a84:	221e      	movs	r2, #30
 8008a86:	e000      	b.n	8008a8a <UI_SpeedSetting+0x3e>
 8008a88:	2246      	movs	r2, #70	; 0x46
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	f200 809c 	bhi.w	8008bc8 <UI_SpeedSetting+0x17c>
		bt2 = UI_ReadButton();
 8008a90:	f7fd fa9c 	bl	8005fcc <UI_ReadButton>
 8008a94:	4603      	mov	r3, r0
 8008a96:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 8008a98:	7bfa      	ldrb	r2, [r7, #15]
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d103      	bne.n	8008aa8 <UI_SpeedSetting+0x5c>
 8008aa0:	7b7b      	ldrb	r3, [r7, #13]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8092 	beq.w	8008bcc <UI_SpeedSetting+0x180>
		bt = bt2;
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <UI_SpeedSetting+0x80>
			if(num_menu!=2) num_menu++;
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d002      	beq.n	8008ac2 <UI_SpeedSetting+0x76>
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8008ac6:	f7fc fb21 	bl	800510c <Storage_SetSpeed>
			goto ui_mem;
 8008aca:	e7cc      	b.n	8008a66 <UI_SpeedSetting+0x1a>
		}
		else if(bt & SW_UP_PRESS) {
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00e      	beq.n	8008af4 <UI_SpeedSetting+0xa8>
			if(num_menu==1) {
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d103      	bne.n	8008ae4 <UI_SpeedSetting+0x98>
				Storage_SetSpeed();
 8008adc:	f7fc fb16 	bl	800510c <Storage_SetSpeed>
				return UI_HOMESCREEN;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	e075      	b.n	8008bd0 <UI_SpeedSetting+0x184>
			}
			else num_menu--;
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8008aee:	f7fc fb0d 	bl	800510c <Storage_SetSpeed>
			goto ui_mem;
 8008af2:	e7b8      	b.n	8008a66 <UI_SpeedSetting+0x1a>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <UI_SpeedSetting+0xbe>
			num_menu = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73bb      	strb	r3, [r7, #14]
			Storage_SetSpeed();
 8008b02:	f7fc fb03 	bl	800510c <Storage_SetSpeed>
			return UI_HOMESCREEN;
 8008b06:	2302      	movs	r3, #2
 8008b08:	e062      	b.n	8008bd0 <UI_SpeedSetting+0x184>
		}
		switch(num_menu) {
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d002      	beq.n	8008b16 <UI_SpeedSetting+0xca>
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d02c      	beq.n	8008b6e <UI_SpeedSetting+0x122>
 8008b14:	e05b      	b.n	8008bce <UI_SpeedSetting+0x182>
		case 1 :
			if(bt & SW_LF_PRESS) {
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	f003 0310 	and.w	r3, r3, #16
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d010      	beq.n	8008b42 <UI_SpeedSetting+0xf6>
				if(plan.speed==0) plan.speed = 99; else plan.speed-=1;
 8008b20:	4b2f      	ldr	r3, [pc, #188]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b22:	7d9b      	ldrb	r3, [r3, #22]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d103      	bne.n	8008b30 <UI_SpeedSetting+0xe4>
 8008b28:	4b2d      	ldr	r3, [pc, #180]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b2a:	2263      	movs	r2, #99	; 0x63
 8008b2c:	759a      	strb	r2, [r3, #22]
 8008b2e:	e005      	b.n	8008b3c <UI_SpeedSetting+0xf0>
 8008b30:	4b2b      	ldr	r3, [pc, #172]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b32:	7d9b      	ldrb	r3, [r3, #22]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	4b29      	ldr	r3, [pc, #164]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b3a:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008b40:	e791      	b.n	8008a66 <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d010      	beq.n	8008b6e <UI_SpeedSetting+0x122>
				if(plan.speed==99) plan.speed = 0; else plan.speed+=1;
 8008b4c:	4b24      	ldr	r3, [pc, #144]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b4e:	7d9b      	ldrb	r3, [r3, #22]
 8008b50:	2b63      	cmp	r3, #99	; 0x63
 8008b52:	d103      	bne.n	8008b5c <UI_SpeedSetting+0x110>
 8008b54:	4b22      	ldr	r3, [pc, #136]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	759a      	strb	r2, [r3, #22]
 8008b5a:	e005      	b.n	8008b68 <UI_SpeedSetting+0x11c>
 8008b5c:	4b20      	ldr	r3, [pc, #128]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b5e:	7d9b      	ldrb	r3, [r3, #22]
 8008b60:	3301      	adds	r3, #1
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	4b1e      	ldr	r3, [pc, #120]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b66:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008b6c:	e77b      	b.n	8008a66 <UI_SpeedSetting+0x1a>
			}
		case 2 :
			if(bt & SW_LF_PRESS) {
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d010      	beq.n	8008b9a <UI_SpeedSetting+0x14e>
				if(plan.turn_speed==0) plan.turn_speed = 99; else plan.turn_speed-=1;
 8008b78:	4b19      	ldr	r3, [pc, #100]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b7a:	7ddb      	ldrb	r3, [r3, #23]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d103      	bne.n	8008b88 <UI_SpeedSetting+0x13c>
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b82:	2263      	movs	r2, #99	; 0x63
 8008b84:	75da      	strb	r2, [r3, #23]
 8008b86:	e005      	b.n	8008b94 <UI_SpeedSetting+0x148>
 8008b88:	4b15      	ldr	r3, [pc, #84]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b8a:	7ddb      	ldrb	r3, [r3, #23]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	4b13      	ldr	r3, [pc, #76]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008b92:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 8008b94:	2301      	movs	r3, #1
 8008b96:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008b98:	e765      	b.n	8008a66 <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f43f af67 	beq.w	8008a74 <UI_SpeedSetting+0x28>
				if(plan.turn_speed==99) plan.turn_speed = 0; else plan.turn_speed+=1;
 8008ba6:	4b0e      	ldr	r3, [pc, #56]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008ba8:	7ddb      	ldrb	r3, [r3, #23]
 8008baa:	2b63      	cmp	r3, #99	; 0x63
 8008bac:	d103      	bne.n	8008bb6 <UI_SpeedSetting+0x16a>
 8008bae:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	75da      	strb	r2, [r3, #23]
 8008bb4:	e005      	b.n	8008bc2 <UI_SpeedSetting+0x176>
 8008bb6:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008bb8:	7ddb      	ldrb	r3, [r3, #23]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <UI_SpeedSetting+0x194>)
 8008bc0:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008bc6:	e74e      	b.n	8008a66 <UI_SpeedSetting+0x1a>
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8008bc8:	bf00      	nop
 8008bca:	e753      	b.n	8008a74 <UI_SpeedSetting+0x28>
		if(bt == bt2 && bt_status == 0) continue;
 8008bcc:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8008bce:	e751      	b.n	8008a74 <UI_SpeedSetting+0x28>
//			}

		}
	}
	return UI_IDLE;
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	0801154c 	.word	0x0801154c
 8008bdc:	20000f14 	.word	0x20000f14
 8008be0:	20000d54 	.word	0x20000d54

08008be4 <UI_Run>:


UI_Menu_Lists UI_Run() {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af02      	add	r7, sp, #8
	static uint8_t bt;

	char buff[22];
	Plan_Start();
 8008bea:	f7fa fc01 	bl	80033f0 <Plan_Start>
	ui_run:
	Plan_UIRoutine();
 8008bee:	f7fa fc47 	bl	8003480 <Plan_UIRoutine>
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", num_index, num_checkpoint, num_plan);
 8008bf2:	4b3c      	ldr	r3, [pc, #240]	; (8008ce4 <UI_Run+0x100>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	4b3b      	ldr	r3, [pc, #236]	; (8008ce8 <UI_Run+0x104>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4b3b      	ldr	r3, [pc, #236]	; (8008cec <UI_Run+0x108>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	4638      	mov	r0, r7
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	460b      	mov	r3, r1
 8008c08:	4939      	ldr	r1, [pc, #228]	; (8008cf0 <UI_Run+0x10c>)
 8008c0a:	f006 f8f1 	bl	800edf0 <siprintf>
	DISP_DisplayText(&home_status, buff);
 8008c0e:	463b      	mov	r3, r7
 8008c10:	4619      	mov	r1, r3
 8008c12:	4838      	ldr	r0, [pc, #224]	; (8008cf4 <UI_Run+0x110>)
 8008c14:	f7f8 fe40 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "Act ~ %s", plan_act_lists[plan_active.act]);
 8008c18:	4b37      	ldr	r3, [pc, #220]	; (8008cf8 <UI_Run+0x114>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4b37      	ldr	r3, [pc, #220]	; (8008cfc <UI_Run+0x118>)
 8008c20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c24:	463b      	mov	r3, r7
 8008c26:	4936      	ldr	r1, [pc, #216]	; (8008d00 <UI_Run+0x11c>)
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f006 f8e1 	bl	800edf0 <siprintf>
	DISP_DisplayText(&cp_menu[2], buff);
 8008c2e:	463b      	mov	r3, r7
 8008c30:	4619      	mov	r1, r3
 8008c32:	4834      	ldr	r0, [pc, #208]	; (8008d04 <UI_Run+0x120>)
 8008c34:	f7f8 fe30 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "%3i | %-3i", (int16_t)motor[1].pwm, (int16_t)motor[0].pwm);
 8008c38:	4b33      	ldr	r3, [pc, #204]	; (8008d08 <UI_Run+0x124>)
 8008c3a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c42:	ee17 3a90 	vmov	r3, s15
 8008c46:	b21b      	sxth	r3, r3
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <UI_Run+0x124>)
 8008c4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8008c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c54:	ee17 3a90 	vmov	r3, s15
 8008c58:	b21b      	sxth	r3, r3
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	492b      	ldr	r1, [pc, #172]	; (8008d0c <UI_Run+0x128>)
 8008c5e:	f006 f8c7 	bl	800edf0 <siprintf>
	DISP_DisplayText(&cp_menu[3], buff);
 8008c62:	463b      	mov	r3, r7
 8008c64:	4619      	mov	r1, r3
 8008c66:	482a      	ldr	r0, [pc, #168]	; (8008d10 <UI_Run+0x12c>)
 8008c68:	f7f8 fe16 	bl	8001898 <DISP_DisplayText>
	while(1) {
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8008c6c:	4b29      	ldr	r3, [pc, #164]	; (8008d14 <UI_Run+0x130>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d027      	beq.n	8008cc8 <UI_Run+0xe4>
		Plan_UIRoutine();
 8008c78:	f7fa fc02 	bl	8003480 <Plan_UIRoutine>
		UI_ShowSensor();
 8008c7c:	f7fd f928 	bl	8005ed0 <UI_ShowSensor>
		bt = UI_ReadButton();
 8008c80:	f7fd f9a4 	bl	8005fcc <UI_ReadButton>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	4b23      	ldr	r3, [pc, #140]	; (8008d18 <UI_Run+0x134>)
 8008c8a:	701a      	strb	r2, [r3, #0]
		if(bt & SW_HM_PRESS) {
 8008c8c:	4b22      	ldr	r3, [pc, #136]	; (8008d18 <UI_Run+0x134>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <UI_Run+0xca>
			main_flag &=~0x01;
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <UI_Run+0x130>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	f023 0301 	bic.w	r3, r3, #1
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <UI_Run+0x130>)
 8008ca4:	701a      	strb	r2, [r3, #0]
			Plan_Stop();
 8008ca6:	f7fa fb6b 	bl	8003380 <Plan_Stop>
			return UI_HOMESCREEN;
 8008caa:	2302      	movs	r3, #2
 8008cac:	e016      	b.n	8008cdc <UI_Run+0xf8>
		}
		if(main_flag & 0x80) {
 8008cae:	4b19      	ldr	r3, [pc, #100]	; (8008d14 <UI_Run+0x130>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	b25b      	sxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dad9      	bge.n	8008c6c <UI_Run+0x88>
			main_flag &=~0x80;
 8008cb8:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <UI_Run+0x130>)
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	4b14      	ldr	r3, [pc, #80]	; (8008d14 <UI_Run+0x130>)
 8008cc4:	701a      	strb	r2, [r3, #0]
			goto ui_run;
 8008cc6:	e792      	b.n	8008bee <UI_Run+0xa>
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8008cc8:	bf00      	nop
		}
	}
	DISP_DisplayText(&short_message, "FINISH!");
 8008cca:	4914      	ldr	r1, [pc, #80]	; (8008d1c <UI_Run+0x138>)
 8008ccc:	4814      	ldr	r0, [pc, #80]	; (8008d20 <UI_Run+0x13c>)
 8008cce:	f7f8 fde3 	bl	8001898 <DISP_DisplayText>
	HAL_Delay(500);
 8008cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cd6:	f000 fa39 	bl	800914c <HAL_Delay>
//	num_checkpoint;
	return UI_HOMESCREEN;
 8008cda:	2302      	movs	r3, #2
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20000ccd 	.word	0x20000ccd
 8008ce8:	20000ccc 	.word	0x20000ccc
 8008cec:	20000cc9 	.word	0x20000cc9
 8008cf0:	08011148 	.word	0x08011148
 8008cf4:	20000f14 	.word	0x20000f14
 8008cf8:	20000d44 	.word	0x20000d44
 8008cfc:	200002c4 	.word	0x200002c4
 8008d00:	08011554 	.word	0x08011554
 8008d04:	20000fb6 	.word	0x20000fb6
 8008d08:	20000a90 	.word	0x20000a90
 8008d0c:	08011560 	.word	0x08011560
 8008d10:	20000fbd 	.word	0x20000fbd
 8008d14:	20000a74 	.word	0x20000a74
 8008d18:	20000fda 	.word	0x20000fda
 8008d1c:	0801156c 	.word	0x0801156c
 8008d20:	20000ee8 	.word	0x20000ee8

08008d24 <UI_Init>:


void UI_Init() {
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
	UI_HomeScreenInit();
 8008d28:	f7fd f9d4 	bl	80060d4 <UI_HomeScreenInit>
	UI_SettingDisplayInit();
 8008d2c:	f7fd fbc4 	bl	80064b8 <UI_SettingDisplayInit>
	UI_PlanSetDisplayInit();
 8008d30:	f7fd fd8a 	bl	8006848 <UI_PlanSetDisplayInit>
	UI_ADCThresholdDisplayInit();
 8008d34:	f7fe fd6e 	bl	8007814 <UI_ADCThresholdDisplayInit>
	UI_CPDisplayInit();
 8008d38:	f7ff f816 	bl	8007d68 <UI_CPDisplayInit>
}
 8008d3c:	bf00      	nop
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <UI_Main>:

void UI_Main() {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
	static UI_Menu_Lists retval = UI_STARTUP;
	DISP_ClearAll();
 8008d44:	f7f8 ff72 	bl	8001c2c <DISP_ClearAll>
	switch(retval) {
 8008d48:	4b3b      	ldr	r3, [pc, #236]	; (8008e38 <UI_Main+0xf8>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	2b0c      	cmp	r3, #12
 8008d50:	d870      	bhi.n	8008e34 <UI_Main+0xf4>
 8008d52:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <UI_Main+0x18>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008d8d 	.word	0x08008d8d
 8008d5c:	08008d9b 	.word	0x08008d9b
 8008d60:	08008da9 	.word	0x08008da9
 8008d64:	08008db7 	.word	0x08008db7
 8008d68:	08008dc5 	.word	0x08008dc5
 8008d6c:	08008dd3 	.word	0x08008dd3
 8008d70:	08008de1 	.word	0x08008de1
 8008d74:	08008def 	.word	0x08008def
 8008d78:	08008dfd 	.word	0x08008dfd
 8008d7c:	08008e0b 	.word	0x08008e0b
 8008d80:	08008e19 	.word	0x08008e19
 8008d84:	08008e35 	.word	0x08008e35
 8008d88:	08008e27 	.word	0x08008e27
	case UI_STARTUP:
		retval = UI_Startup();
 8008d8c:	f7fe ff1c 	bl	8007bc8 <UI_Startup>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	4b28      	ldr	r3, [pc, #160]	; (8008e38 <UI_Main+0xf8>)
 8008d96:	701a      	strb	r2, [r3, #0]
		break;
 8008d98:	e04c      	b.n	8008e34 <UI_Main+0xf4>
	case UI_HOMESCREEN:
		retval = UI_HomeScreen();
 8008d9a:	f7fd fa79 	bl	8006290 <UI_HomeScreen>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	461a      	mov	r2, r3
 8008da2:	4b25      	ldr	r3, [pc, #148]	; (8008e38 <UI_Main+0xf8>)
 8008da4:	701a      	strb	r2, [r3, #0]
		break;
 8008da6:	e045      	b.n	8008e34 <UI_Main+0xf4>
	case UI_SPEED_SET:
		retval = UI_SpeedSetting();
 8008da8:	f7ff fe50 	bl	8008a4c <UI_SpeedSetting>
 8008dac:	4603      	mov	r3, r0
 8008dae:	461a      	mov	r2, r3
 8008db0:	4b21      	ldr	r3, [pc, #132]	; (8008e38 <UI_Main+0xf8>)
 8008db2:	701a      	strb	r2, [r3, #0]
		break;
 8008db4:	e03e      	b.n	8008e34 <UI_Main+0xf4>
	case UI_RUN:
		retval = UI_Run();
 8008db6:	f7ff ff15 	bl	8008be4 <UI_Run>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4b1e      	ldr	r3, [pc, #120]	; (8008e38 <UI_Main+0xf8>)
 8008dc0:	701a      	strb	r2, [r3, #0]
		break;
 8008dc2:	e037      	b.n	8008e34 <UI_Main+0xf4>
	case UI_PLAN_SET:
		retval = UI_PlanSet();
 8008dc4:	f7fe f8a2 	bl	8006f0c <UI_PlanSet>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <UI_Main+0xf8>)
 8008dce:	701a      	strb	r2, [r3, #0]
		break;
 8008dd0:	e030      	b.n	8008e34 <UI_Main+0xf4>
	case UI_PLAN_SELECT:
		retval = UI_PlanSelect();
 8008dd2:	f7ff f9ab 	bl	800812c <UI_PlanSelect>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <UI_Main+0xf8>)
 8008ddc:	701a      	strb	r2, [r3, #0]
		break;
 8008dde:	e029      	b.n	8008e34 <UI_Main+0xf4>
	case UI_SET:
		retval = UI_Setting();
 8008de0:	f7fd fc56 	bl	8006690 <UI_Setting>
 8008de4:	4603      	mov	r3, r0
 8008de6:	461a      	mov	r2, r3
 8008de8:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <UI_Main+0xf8>)
 8008dea:	701a      	strb	r2, [r3, #0]
		break;
 8008dec:	e022      	b.n	8008e34 <UI_Main+0xf4>
	case UI_SET_ADC:
		retval = UI_ADCThreshold();
 8008dee:	f7fe fdd3 	bl	8007998 <UI_ADCThreshold>
 8008df2:	4603      	mov	r3, r0
 8008df4:	461a      	mov	r2, r3
 8008df6:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <UI_Main+0xf8>)
 8008df8:	701a      	strb	r2, [r3, #0]
		break;
 8008dfa:	e01b      	b.n	8008e34 <UI_Main+0xf4>
	case UI_SET_CALIB:
		retval = UI_AutoCalib();
 8008dfc:	f7fe fe9c 	bl	8007b38 <UI_AutoCalib>
 8008e00:	4603      	mov	r3, r0
 8008e02:	461a      	mov	r2, r3
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <UI_Main+0xf8>)
 8008e06:	701a      	strb	r2, [r3, #0]
		break;
 8008e08:	e014      	b.n	8008e34 <UI_Main+0xf4>
	case UI_SET_CP:
		retval = UI_CP();
 8008e0a:	f7ff f883 	bl	8007f14 <UI_CP>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <UI_Main+0xf8>)
 8008e14:	701a      	strb	r2, [r3, #0]
		break;
 8008e16:	e00d      	b.n	8008e34 <UI_Main+0xf4>
	case UI_SET_PID:
		retval = UI_PIDSetting();
 8008e18:	f7ff fc1e 	bl	8008658 <UI_PIDSetting>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	461a      	mov	r2, r3
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <UI_Main+0xf8>)
 8008e22:	701a      	strb	r2, [r3, #0]
		break;
 8008e24:	e006      	b.n	8008e34 <UI_Main+0xf4>
	case UI_SET_MEM:
		retval = UI_MemSetting();
 8008e26:	f7ff fa99 	bl	800835c <UI_MemSetting>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <UI_Main+0xf8>)
 8008e30:	701a      	strb	r2, [r3, #0]
		break;
 8008e32:	bf00      	nop
	default:
		;
	}
}
 8008e34:	bf00      	nop
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20000321 	.word	0x20000321

08008e3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008e40:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e42:	4a12      	ldr	r2, [pc, #72]	; (8008e8c <MX_USART3_UART_Init+0x50>)
 8008e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008e54:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008e5a:	4b0b      	ldr	r3, [pc, #44]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008e60:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e62:	220c      	movs	r2, #12
 8008e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e66:	4b08      	ldr	r3, [pc, #32]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e6c:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008e72:	4805      	ldr	r0, [pc, #20]	; (8008e88 <MX_USART3_UART_Init+0x4c>)
 8008e74:	f004 fc4e 	bl	800d714 <HAL_UART_Init>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008e7e:	f7f9 fa5c 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008e82:	bf00      	nop
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20000fdc 	.word	0x20000fdc
 8008e8c:	40004800 	.word	0x40004800

08008e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08a      	sub	sp, #40	; 0x28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e98:	f107 0314 	add.w	r3, r7, #20
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	605a      	str	r2, [r3, #4]
 8008ea2:	609a      	str	r2, [r3, #8]
 8008ea4:	60da      	str	r2, [r3, #12]
 8008ea6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a19      	ldr	r2, [pc, #100]	; (8008f14 <HAL_UART_MspInit+0x84>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d12c      	bne.n	8008f0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <HAL_UART_MspInit+0x88>)
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	4a17      	ldr	r2, [pc, #92]	; (8008f18 <HAL_UART_MspInit+0x88>)
 8008ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ec2:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <HAL_UART_MspInit+0x88>)
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eca:	613b      	str	r3, [r7, #16]
 8008ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <HAL_UART_MspInit+0x88>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	4a10      	ldr	r2, [pc, #64]	; (8008f18 <HAL_UART_MspInit+0x88>)
 8008ed8:	f043 0304 	orr.w	r3, r3, #4
 8008edc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ede:	4b0e      	ldr	r3, [pc, #56]	; (8008f18 <HAL_UART_MspInit+0x88>)
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	f003 0304 	and.w	r3, r3, #4
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008eea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008efc:	2307      	movs	r3, #7
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f00:	f107 0314 	add.w	r3, r7, #20
 8008f04:	4619      	mov	r1, r3
 8008f06:	4805      	ldr	r0, [pc, #20]	; (8008f1c <HAL_UART_MspInit+0x8c>)
 8008f08:	f001 fb0c 	bl	800a524 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	3728      	adds	r7, #40	; 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40004800 	.word	0x40004800
 8008f18:	40023800 	.word	0x40023800
 8008f1c:	40020800 	.word	0x40020800

08008f20 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f24:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f2c:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f2e:	2204      	movs	r2, #4
 8008f30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f32:	4b11      	ldr	r3, [pc, #68]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f34:	2202      	movs	r2, #2
 8008f36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f38:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f3e:	4b0e      	ldr	r3, [pc, #56]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f40:	2202      	movs	r2, #2
 8008f42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f50:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f56:	4b08      	ldr	r3, [pc, #32]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f5c:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f62:	4805      	ldr	r0, [pc, #20]	; (8008f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008f64:	f002 fc6b 	bl	800b83e <HAL_PCD_Init>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8008f6e:	f7f9 f9e4 	bl	800233a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8008f72:	bf00      	nop
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20001020 	.word	0x20001020

08008f7c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f84:	f107 0314 	add.w	r3, r7, #20
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	605a      	str	r2, [r3, #4]
 8008f8e:	609a      	str	r2, [r3, #8]
 8008f90:	60da      	str	r2, [r3, #12]
 8008f92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f9c:	d132      	bne.n	8009004 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	613b      	str	r3, [r7, #16]
 8008fa2:	4b1a      	ldr	r3, [pc, #104]	; (800900c <HAL_PCD_MspInit+0x90>)
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa6:	4a19      	ldr	r2, [pc, #100]	; (800900c <HAL_PCD_MspInit+0x90>)
 8008fa8:	f043 0301 	orr.w	r3, r3, #1
 8008fac:	6313      	str	r3, [r2, #48]	; 0x30
 8008fae:	4b17      	ldr	r3, [pc, #92]	; (800900c <HAL_PCD_MspInit+0x90>)
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	613b      	str	r3, [r7, #16]
 8008fb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008fba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fcc:	230a      	movs	r3, #10
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fd0:	f107 0314 	add.w	r3, r7, #20
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	480e      	ldr	r0, [pc, #56]	; (8009010 <HAL_PCD_MspInit+0x94>)
 8008fd8:	f001 faa4 	bl	800a524 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fdc:	4b0b      	ldr	r3, [pc, #44]	; (800900c <HAL_PCD_MspInit+0x90>)
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe0:	4a0a      	ldr	r2, [pc, #40]	; (800900c <HAL_PCD_MspInit+0x90>)
 8008fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe6:	6353      	str	r3, [r2, #52]	; 0x34
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	4b07      	ldr	r3, [pc, #28]	; (800900c <HAL_PCD_MspInit+0x90>)
 8008fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff0:	4a06      	ldr	r2, [pc, #24]	; (800900c <HAL_PCD_MspInit+0x90>)
 8008ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8008ff8:	4b04      	ldr	r3, [pc, #16]	; (800900c <HAL_PCD_MspInit+0x90>)
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009004:	bf00      	nop
 8009006:	3728      	adds	r7, #40	; 0x28
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	40023800 	.word	0x40023800
 8009010:	40020000 	.word	0x40020000

08009014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800904c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009018:	480d      	ldr	r0, [pc, #52]	; (8009050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800901a:	490e      	ldr	r1, [pc, #56]	; (8009054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800901c:	4a0e      	ldr	r2, [pc, #56]	; (8009058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800901e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009020:	e002      	b.n	8009028 <LoopCopyDataInit>

08009022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009026:	3304      	adds	r3, #4

08009028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800902a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800902c:	d3f9      	bcc.n	8009022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800902e:	4a0b      	ldr	r2, [pc, #44]	; (800905c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009030:	4c0b      	ldr	r4, [pc, #44]	; (8009060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009034:	e001      	b.n	800903a <LoopFillZerobss>

08009036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009038:	3204      	adds	r2, #4

0800903a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800903a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800903c:	d3fb      	bcc.n	8009036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800903e:	f7fc fbc7 	bl	80057d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009042:	f005 f931 	bl	800e2a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009046:	f7f9 f84d 	bl	80020e4 <main>
  bx  lr    
 800904a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800904c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009054:	200004fc 	.word	0x200004fc
  ldr r2, =_sidata
 8009058:	0801198c 	.word	0x0801198c
  ldr r2, =_sbss
 800905c:	200004fc 	.word	0x200004fc
  ldr r4, =_ebss
 8009060:	20001540 	.word	0x20001540

08009064 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009064:	e7fe      	b.n	8009064 <CAN1_RX0_IRQHandler>
	...

08009068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800906c:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <HAL_Init+0x40>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a0d      	ldr	r2, [pc, #52]	; (80090a8 <HAL_Init+0x40>)
 8009072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009078:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <HAL_Init+0x40>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a0a      	ldr	r2, [pc, #40]	; (80090a8 <HAL_Init+0x40>)
 800907e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009084:	4b08      	ldr	r3, [pc, #32]	; (80090a8 <HAL_Init+0x40>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a07      	ldr	r2, [pc, #28]	; (80090a8 <HAL_Init+0x40>)
 800908a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800908e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009090:	2003      	movs	r0, #3
 8009092:	f000 fe91 	bl	8009db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009096:	200f      	movs	r0, #15
 8009098:	f000 f808 	bl	80090ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800909c:	f7fb fd0c 	bl	8004ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	40023c00 	.word	0x40023c00

080090ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80090b4:	4b12      	ldr	r3, [pc, #72]	; (8009100 <HAL_InitTick+0x54>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	4b12      	ldr	r3, [pc, #72]	; (8009104 <HAL_InitTick+0x58>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	4619      	mov	r1, r3
 80090be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80090c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80090c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fead 	bl	8009e2a <HAL_SYSTICK_Config>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e00e      	b.n	80090f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b0f      	cmp	r3, #15
 80090de:	d80a      	bhi.n	80090f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80090e0:	2200      	movs	r2, #0
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	f000 fe71 	bl	8009dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80090ec:	4a06      	ldr	r2, [pc, #24]	; (8009108 <HAL_InitTick+0x5c>)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	e000      	b.n	80090f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	2000028c 	.word	0x2000028c
 8009104:	20000328 	.word	0x20000328
 8009108:	20000324 	.word	0x20000324

0800910c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <HAL_IncTick+0x20>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	4b06      	ldr	r3, [pc, #24]	; (8009130 <HAL_IncTick+0x24>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4413      	add	r3, r2
 800911c:	4a04      	ldr	r2, [pc, #16]	; (8009130 <HAL_IncTick+0x24>)
 800911e:	6013      	str	r3, [r2, #0]
}
 8009120:	bf00      	nop
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	20000328 	.word	0x20000328
 8009130:	2000152c 	.word	0x2000152c

08009134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
  return uwTick;
 8009138:	4b03      	ldr	r3, [pc, #12]	; (8009148 <HAL_GetTick+0x14>)
 800913a:	681b      	ldr	r3, [r3, #0]
}
 800913c:	4618      	mov	r0, r3
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	2000152c 	.word	0x2000152c

0800914c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009154:	f7ff ffee 	bl	8009134 <HAL_GetTick>
 8009158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009164:	d005      	beq.n	8009172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009166:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <HAL_Delay+0x44>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009172:	bf00      	nop
 8009174:	f7ff ffde 	bl	8009134 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	429a      	cmp	r2, r3
 8009182:	d8f7      	bhi.n	8009174 <HAL_Delay+0x28>
  {
  }
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20000328 	.word	0x20000328

08009194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e033      	b.n	8009212 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d109      	bne.n	80091c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7f7 fff6 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d118      	bne.n	8009204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80091da:	f023 0302 	bic.w	r3, r3, #2
 80091de:	f043 0202 	orr.w	r2, r3, #2
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fb78 	bl	80098dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	f023 0303 	bic.w	r3, r3, #3
 80091fa:	f043 0201 	orr.w	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	641a      	str	r2, [r3, #64]	; 0x40
 8009202:	e001      	b.n	8009208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]
 8009226:	2300      	movs	r3, #0
 8009228:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d049      	beq.n	80092e4 <HAL_ADC_IRQHandler+0xca>
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d046      	beq.n	80092e4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	f003 0310 	and.w	r3, r3, #16
 800925e:	2b00      	cmp	r3, #0
 8009260:	d105      	bne.n	800926e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009266:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d12b      	bne.n	80092d4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009280:	2b00      	cmp	r3, #0
 8009282:	d127      	bne.n	80092d4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800928e:	2b00      	cmp	r3, #0
 8009290:	d006      	beq.n	80092a0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800929c:	2b00      	cmp	r3, #0
 800929e:	d119      	bne.n	80092d4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0220 	bic.w	r2, r2, #32
 80092ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d105      	bne.n	80092d4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092cc:	f043 0201 	orr.w	r2, r3, #1
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7f9 f825 	bl	8002324 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f06f 0212 	mvn.w	r2, #18
 80092e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d057      	beq.n	80093aa <HAL_ADC_IRQHandler+0x190>
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d054      	beq.n	80093aa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009304:	f003 0310 	and.w	r3, r3, #16
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009310:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d139      	bne.n	800939a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009330:	2b00      	cmp	r3, #0
 8009332:	d006      	beq.n	8009342 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800933e:	2b00      	cmp	r3, #0
 8009340:	d12b      	bne.n	800939a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800934c:	2b00      	cmp	r3, #0
 800934e:	d124      	bne.n	800939a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800935a:	2b00      	cmp	r3, #0
 800935c:	d11d      	bne.n	800939a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8009362:	2b00      	cmp	r3, #0
 8009364:	d119      	bne.n	800939a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009374:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938a:	2b00      	cmp	r3, #0
 800938c:	d105      	bne.n	800939a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	f043 0201 	orr.w	r2, r3, #1
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fc1c 	bl	8009bd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 020c 	mvn.w	r2, #12
 80093a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d017      	beq.n	80093f0 <HAL_ADC_IRQHandler+0x1d6>
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d014      	beq.n	80093f0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d10d      	bne.n	80093f0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f945 	bl	8009670 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f06f 0201 	mvn.w	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093fe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d015      	beq.n	8009432 <HAL_ADC_IRQHandler+0x218>
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d012      	beq.n	8009432 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009410:	f043 0202 	orr.w	r2, r3, #2
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f06f 0220 	mvn.w	r2, #32
 8009420:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f92e 	bl	8009684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0220 	mvn.w	r2, #32
 8009430:	601a      	str	r2, [r3, #0]
  }
}
 8009432:	bf00      	nop
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009452:	2b01      	cmp	r3, #1
 8009454:	d101      	bne.n	800945a <HAL_ADC_Start_DMA+0x1e>
 8009456:	2302      	movs	r3, #2
 8009458:	e0e9      	b.n	800962e <HAL_ADC_Start_DMA+0x1f2>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b01      	cmp	r3, #1
 800946e:	d018      	beq.n	80094a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689a      	ldr	r2, [r3, #8]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0201 	orr.w	r2, r2, #1
 800947e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009480:	4b6d      	ldr	r3, [pc, #436]	; (8009638 <HAL_ADC_Start_DMA+0x1fc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a6d      	ldr	r2, [pc, #436]	; (800963c <HAL_ADC_Start_DMA+0x200>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	0c9a      	lsrs	r2, r3, #18
 800948c:	4613      	mov	r3, r2
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	4413      	add	r3, r2
 8009492:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009494:	e002      	b.n	800949c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	3b01      	subs	r3, #1
 800949a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f9      	bne.n	8009496 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b0:	d107      	bne.n	80094c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689a      	ldr	r2, [r3, #8]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	f040 80a1 	bne.w	8009614 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d007      	beq.n	8009504 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80094fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800950c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009510:	d106      	bne.n	8009520 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009516:	f023 0206 	bic.w	r2, r3, #6
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	645a      	str	r2, [r3, #68]	; 0x44
 800951e:	e002      	b.n	8009526 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800952e:	4b44      	ldr	r3, [pc, #272]	; (8009640 <HAL_ADC_Start_DMA+0x204>)
 8009530:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	4a43      	ldr	r2, [pc, #268]	; (8009644 <HAL_ADC_Start_DMA+0x208>)
 8009538:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	4a42      	ldr	r2, [pc, #264]	; (8009648 <HAL_ADC_Start_DMA+0x20c>)
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	4a41      	ldr	r2, [pc, #260]	; (800964c <HAL_ADC_Start_DMA+0x210>)
 8009548:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009552:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009562:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009572:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	334c      	adds	r3, #76	; 0x4c
 800957e:	4619      	mov	r1, r3
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f000 fd0c 	bl	8009fa0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f003 031f 	and.w	r3, r3, #31
 8009590:	2b00      	cmp	r3, #0
 8009592:	d12a      	bne.n	80095ea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a2d      	ldr	r2, [pc, #180]	; (8009650 <HAL_ADC_Start_DMA+0x214>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d015      	beq.n	80095ca <HAL_ADC_Start_DMA+0x18e>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a2c      	ldr	r2, [pc, #176]	; (8009654 <HAL_ADC_Start_DMA+0x218>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d105      	bne.n	80095b4 <HAL_ADC_Start_DMA+0x178>
 80095a8:	4b25      	ldr	r3, [pc, #148]	; (8009640 <HAL_ADC_Start_DMA+0x204>)
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f003 031f 	and.w	r3, r3, #31
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00a      	beq.n	80095ca <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a27      	ldr	r2, [pc, #156]	; (8009658 <HAL_ADC_Start_DMA+0x21c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d136      	bne.n	800962c <HAL_ADC_Start_DMA+0x1f0>
 80095be:	4b20      	ldr	r3, [pc, #128]	; (8009640 <HAL_ADC_Start_DMA+0x204>)
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f003 0310 	and.w	r3, r3, #16
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d130      	bne.n	800962c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d129      	bne.n	800962c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80095e6:	609a      	str	r2, [r3, #8]
 80095e8:	e020      	b.n	800962c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a18      	ldr	r2, [pc, #96]	; (8009650 <HAL_ADC_Start_DMA+0x214>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d11b      	bne.n	800962c <HAL_ADC_Start_DMA+0x1f0>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d114      	bne.n	800962c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009610:	609a      	str	r2, [r3, #8]
 8009612:	e00b      	b.n	800962c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009618:	f043 0210 	orr.w	r2, r3, #16
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009624:	f043 0201 	orr.w	r2, r3, #1
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	2000028c 	.word	0x2000028c
 800963c:	431bde83 	.word	0x431bde83
 8009640:	40012300 	.word	0x40012300
 8009644:	08009ad5 	.word	0x08009ad5
 8009648:	08009b8f 	.word	0x08009b8f
 800964c:	08009bab 	.word	0x08009bab
 8009650:	40012000 	.word	0x40012000
 8009654:	40012100 	.word	0x40012100
 8009658:	40012200 	.word	0x40012200

0800965c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d101      	bne.n	80096b4 <HAL_ADC_ConfigChannel+0x1c>
 80096b0:	2302      	movs	r3, #2
 80096b2:	e105      	b.n	80098c0 <HAL_ADC_ConfigChannel+0x228>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b09      	cmp	r3, #9
 80096c2:	d925      	bls.n	8009710 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68d9      	ldr	r1, [r3, #12]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	461a      	mov	r2, r3
 80096d2:	4613      	mov	r3, r2
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	4413      	add	r3, r2
 80096d8:	3b1e      	subs	r3, #30
 80096da:	2207      	movs	r2, #7
 80096dc:	fa02 f303 	lsl.w	r3, r2, r3
 80096e0:	43da      	mvns	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	400a      	ands	r2, r1
 80096e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68d9      	ldr	r1, [r3, #12]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4618      	mov	r0, r3
 80096fc:	4603      	mov	r3, r0
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	4403      	add	r3, r0
 8009702:	3b1e      	subs	r3, #30
 8009704:	409a      	lsls	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	60da      	str	r2, [r3, #12]
 800970e:	e022      	b.n	8009756 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6919      	ldr	r1, [r3, #16]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	4613      	mov	r3, r2
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	4413      	add	r3, r2
 8009724:	2207      	movs	r2, #7
 8009726:	fa02 f303 	lsl.w	r3, r2, r3
 800972a:	43da      	mvns	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	400a      	ands	r2, r1
 8009732:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6919      	ldr	r1, [r3, #16]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	b29b      	uxth	r3, r3
 8009744:	4618      	mov	r0, r3
 8009746:	4603      	mov	r3, r0
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	4403      	add	r3, r0
 800974c:	409a      	lsls	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	2b06      	cmp	r3, #6
 800975c:	d824      	bhi.n	80097a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	4613      	mov	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	3b05      	subs	r3, #5
 8009770:	221f      	movs	r2, #31
 8009772:	fa02 f303 	lsl.w	r3, r2, r3
 8009776:	43da      	mvns	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	400a      	ands	r2, r1
 800977e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	b29b      	uxth	r3, r3
 800978c:	4618      	mov	r0, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	3b05      	subs	r3, #5
 800979a:	fa00 f203 	lsl.w	r2, r0, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	635a      	str	r2, [r3, #52]	; 0x34
 80097a6:	e04c      	b.n	8009842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b0c      	cmp	r3, #12
 80097ae:	d824      	bhi.n	80097fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	3b23      	subs	r3, #35	; 0x23
 80097c2:	221f      	movs	r2, #31
 80097c4:	fa02 f303 	lsl.w	r3, r2, r3
 80097c8:	43da      	mvns	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	400a      	ands	r2, r1
 80097d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	4618      	mov	r0, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	3b23      	subs	r3, #35	; 0x23
 80097ec:	fa00 f203 	lsl.w	r2, r0, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
 80097f8:	e023      	b.n	8009842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	3b41      	subs	r3, #65	; 0x41
 800980c:	221f      	movs	r2, #31
 800980e:	fa02 f303 	lsl.w	r3, r2, r3
 8009812:	43da      	mvns	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	400a      	ands	r2, r1
 800981a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	4618      	mov	r0, r3
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	3b41      	subs	r3, #65	; 0x41
 8009836:	fa00 f203 	lsl.w	r2, r0, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009842:	4b22      	ldr	r3, [pc, #136]	; (80098cc <HAL_ADC_ConfigChannel+0x234>)
 8009844:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a21      	ldr	r2, [pc, #132]	; (80098d0 <HAL_ADC_ConfigChannel+0x238>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d109      	bne.n	8009864 <HAL_ADC_ConfigChannel+0x1cc>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b12      	cmp	r3, #18
 8009856:	d105      	bne.n	8009864 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a19      	ldr	r2, [pc, #100]	; (80098d0 <HAL_ADC_ConfigChannel+0x238>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d123      	bne.n	80098b6 <HAL_ADC_ConfigChannel+0x21e>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b10      	cmp	r3, #16
 8009874:	d003      	beq.n	800987e <HAL_ADC_ConfigChannel+0x1e6>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b11      	cmp	r3, #17
 800987c:	d11b      	bne.n	80098b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b10      	cmp	r3, #16
 8009890:	d111      	bne.n	80098b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009892:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <HAL_ADC_ConfigChannel+0x23c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a10      	ldr	r2, [pc, #64]	; (80098d8 <HAL_ADC_ConfigChannel+0x240>)
 8009898:	fba2 2303 	umull	r2, r3, r2, r3
 800989c:	0c9a      	lsrs	r2, r3, #18
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80098a8:	e002      	b.n	80098b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1f9      	bne.n	80098aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	40012300 	.word	0x40012300
 80098d0:	40012000 	.word	0x40012000
 80098d4:	2000028c 	.word	0x2000028c
 80098d8:	431bde83 	.word	0x431bde83

080098dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80098e4:	4b79      	ldr	r3, [pc, #484]	; (8009acc <ADC_Init+0x1f0>)
 80098e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	431a      	orrs	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6859      	ldr	r1, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	021a      	lsls	r2, r3, #8
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6859      	ldr	r1, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689a      	ldr	r2, [r3, #8]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6899      	ldr	r1, [r3, #8]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996e:	4a58      	ldr	r2, [pc, #352]	; (8009ad0 <ADC_Init+0x1f4>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d022      	beq.n	80099ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009982:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6899      	ldr	r1, [r3, #8]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689a      	ldr	r2, [r3, #8]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80099a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6899      	ldr	r1, [r3, #8]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	609a      	str	r2, [r3, #8]
 80099b8:	e00f      	b.n	80099da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689a      	ldr	r2, [r3, #8]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80099c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80099d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 0202 	bic.w	r2, r2, #2
 80099e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6899      	ldr	r1, [r3, #8]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7e1b      	ldrb	r3, [r3, #24]
 80099f4:	005a      	lsls	r2, r3, #1
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01b      	beq.n	8009a40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009a26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6859      	ldr	r1, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	3b01      	subs	r3, #1
 8009a34:	035a      	lsls	r2, r3, #13
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	605a      	str	r2, [r3, #4]
 8009a3e:	e007      	b.n	8009a50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	051a      	lsls	r2, r3, #20
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6899      	ldr	r1, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a92:	025a      	lsls	r2, r3, #9
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6899      	ldr	r1, [r3, #8]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	029a      	lsls	r2, r3, #10
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	609a      	str	r2, [r3, #8]
}
 8009ac0:	bf00      	nop
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	40012300 	.word	0x40012300
 8009ad0:	0f000001 	.word	0x0f000001

08009ad4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d13c      	bne.n	8009b68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d12b      	bne.n	8009b60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d127      	bne.n	8009b60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d006      	beq.n	8009b2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d119      	bne.n	8009b60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f022 0220 	bic.w	r2, r2, #32
 8009b3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d105      	bne.n	8009b60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b58:	f043 0201 	orr.w	r2, r3, #1
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7f8 fbdf 	bl	8002324 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009b66:	e00e      	b.n	8009b86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6c:	f003 0310 	and.w	r3, r3, #16
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff fd85 	bl	8009684 <HAL_ADC_ErrorCallback>
}
 8009b7a:	e004      	b.n	8009b86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	4798      	blx	r3
}
 8009b86:	bf00      	nop
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff fd5d 	bl	800965c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2240      	movs	r2, #64	; 0x40
 8009bbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc2:	f043 0204 	orr.w	r2, r3, #4
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f7ff fd5a 	bl	8009684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009bd0:	bf00      	nop
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bfc:	4b0c      	ldr	r3, [pc, #48]	; (8009c30 <__NVIC_SetPriorityGrouping+0x44>)
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009c08:	4013      	ands	r3, r2
 8009c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c1e:	4a04      	ldr	r2, [pc, #16]	; (8009c30 <__NVIC_SetPriorityGrouping+0x44>)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	60d3      	str	r3, [r2, #12]
}
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	e000ed00 	.word	0xe000ed00

08009c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c38:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <__NVIC_GetPriorityGrouping+0x18>)
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	0a1b      	lsrs	r3, r3, #8
 8009c3e:	f003 0307 	and.w	r3, r3, #7
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	e000ed00 	.word	0xe000ed00

08009c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	db0b      	blt.n	8009c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	f003 021f 	and.w	r2, r3, #31
 8009c68:	4907      	ldr	r1, [pc, #28]	; (8009c88 <__NVIC_EnableIRQ+0x38>)
 8009c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c6e:	095b      	lsrs	r3, r3, #5
 8009c70:	2001      	movs	r0, #1
 8009c72:	fa00 f202 	lsl.w	r2, r0, r2
 8009c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	e000e100 	.word	0xe000e100

08009c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	6039      	str	r1, [r7, #0]
 8009c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	db0a      	blt.n	8009cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	490c      	ldr	r1, [pc, #48]	; (8009cd8 <__NVIC_SetPriority+0x4c>)
 8009ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009caa:	0112      	lsls	r2, r2, #4
 8009cac:	b2d2      	uxtb	r2, r2
 8009cae:	440b      	add	r3, r1
 8009cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009cb4:	e00a      	b.n	8009ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	4908      	ldr	r1, [pc, #32]	; (8009cdc <__NVIC_SetPriority+0x50>)
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	f003 030f 	and.w	r3, r3, #15
 8009cc2:	3b04      	subs	r3, #4
 8009cc4:	0112      	lsls	r2, r2, #4
 8009cc6:	b2d2      	uxtb	r2, r2
 8009cc8:	440b      	add	r3, r1
 8009cca:	761a      	strb	r2, [r3, #24]
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	e000e100 	.word	0xe000e100
 8009cdc:	e000ed00 	.word	0xe000ed00

08009ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b089      	sub	sp, #36	; 0x24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	f1c3 0307 	rsb	r3, r3, #7
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	bf28      	it	cs
 8009cfe:	2304      	movcs	r3, #4
 8009d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	3304      	adds	r3, #4
 8009d06:	2b06      	cmp	r3, #6
 8009d08:	d902      	bls.n	8009d10 <NVIC_EncodePriority+0x30>
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	3b03      	subs	r3, #3
 8009d0e:	e000      	b.n	8009d12 <NVIC_EncodePriority+0x32>
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1e:	43da      	mvns	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	401a      	ands	r2, r3
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d28:	f04f 31ff 	mov.w	r1, #4294967295
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d32:	43d9      	mvns	r1, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d38:	4313      	orrs	r3, r2
         );
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3724      	adds	r7, #36	; 0x24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
	...

08009d48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009d4c:	f3bf 8f4f 	dsb	sy
}
 8009d50:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009d52:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <__NVIC_SystemReset+0x24>)
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009d5a:	4904      	ldr	r1, [pc, #16]	; (8009d6c <__NVIC_SystemReset+0x24>)
 8009d5c:	4b04      	ldr	r3, [pc, #16]	; (8009d70 <__NVIC_SystemReset+0x28>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d62:	f3bf 8f4f 	dsb	sy
}
 8009d66:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009d68:	bf00      	nop
 8009d6a:	e7fd      	b.n	8009d68 <__NVIC_SystemReset+0x20>
 8009d6c:	e000ed00 	.word	0xe000ed00
 8009d70:	05fa0004 	.word	0x05fa0004

08009d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d84:	d301      	bcc.n	8009d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009d86:	2301      	movs	r3, #1
 8009d88:	e00f      	b.n	8009daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009d8a:	4a0a      	ldr	r2, [pc, #40]	; (8009db4 <SysTick_Config+0x40>)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009d92:	210f      	movs	r1, #15
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	f7ff ff78 	bl	8009c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009d9c:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <SysTick_Config+0x40>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009da2:	4b04      	ldr	r3, [pc, #16]	; (8009db4 <SysTick_Config+0x40>)
 8009da4:	2207      	movs	r2, #7
 8009da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	e000e010 	.word	0xe000e010

08009db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff ff13 	bl	8009bec <__NVIC_SetPriorityGrouping>
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b086      	sub	sp, #24
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	607a      	str	r2, [r7, #4]
 8009dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009de0:	f7ff ff28 	bl	8009c34 <__NVIC_GetPriorityGrouping>
 8009de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	6978      	ldr	r0, [r7, #20]
 8009dec:	f7ff ff78 	bl	8009ce0 <NVIC_EncodePriority>
 8009df0:	4602      	mov	r2, r0
 8009df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff ff47 	bl	8009c8c <__NVIC_SetPriority>
}
 8009dfe:	bf00      	nop
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7ff ff1b 	bl	8009c50 <__NVIC_EnableIRQ>
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009e26:	f7ff ff8f 	bl	8009d48 <__NVIC_SystemReset>

08009e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff ff9e 	bl	8009d74 <SysTick_Config>
 8009e38:	4603      	mov	r3, r0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009e50:	f7ff f970 	bl	8009134 <HAL_GetTick>
 8009e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e099      	b.n	8009f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2202      	movs	r2, #2
 8009e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0201 	bic.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e80:	e00f      	b.n	8009ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e82:	f7ff f957 	bl	8009134 <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b05      	cmp	r3, #5
 8009e8e:	d908      	bls.n	8009ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2203      	movs	r2, #3
 8009e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e078      	b.n	8009f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e8      	bne.n	8009e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	4b38      	ldr	r3, [pc, #224]	; (8009f9c <HAL_DMA_Init+0x158>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	2b04      	cmp	r3, #4
 8009efa:	d107      	bne.n	8009f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f04:	4313      	orrs	r3, r2
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f023 0307 	bic.w	r3, r3, #7
 8009f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d117      	bne.n	8009f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00e      	beq.n	8009f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fa6f 	bl	800a42c <DMA_CheckFifoParam>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d008      	beq.n	8009f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2240      	movs	r2, #64	; 0x40
 8009f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009f62:	2301      	movs	r3, #1
 8009f64:	e016      	b.n	8009f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa26 	bl	800a3c0 <DMA_CalcBaseAndBitshift>
 8009f74:	4603      	mov	r3, r0
 8009f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f7c:	223f      	movs	r2, #63	; 0x3f
 8009f7e:	409a      	lsls	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	f010803f 	.word	0xf010803f

08009fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d101      	bne.n	8009fc6 <HAL_DMA_Start_IT+0x26>
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e040      	b.n	800a048 <HAL_DMA_Start_IT+0xa8>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d12f      	bne.n	800a03a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2202      	movs	r2, #2
 8009fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	68b9      	ldr	r1, [r7, #8]
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f000 f9b8 	bl	800a364 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff8:	223f      	movs	r2, #63	; 0x3f
 8009ffa:	409a      	lsls	r2, r3
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0216 	orr.w	r2, r2, #22
 800a00e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a014:	2b00      	cmp	r3, #0
 800a016:	d007      	beq.n	800a028 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f042 0208 	orr.w	r2, r2, #8
 800a026:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0201 	orr.w	r2, r2, #1
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	e005      	b.n	800a046 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a042:	2302      	movs	r3, #2
 800a044:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a05c:	4b8e      	ldr	r3, [pc, #568]	; (800a298 <HAL_DMA_IRQHandler+0x248>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a8e      	ldr	r2, [pc, #568]	; (800a29c <HAL_DMA_IRQHandler+0x24c>)
 800a062:	fba2 2303 	umull	r2, r3, r2, r3
 800a066:	0a9b      	lsrs	r3, r3, #10
 800a068:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a07a:	2208      	movs	r2, #8
 800a07c:	409a      	lsls	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4013      	ands	r3, r2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d01a      	beq.n	800a0bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d013      	beq.n	800a0bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f022 0204 	bic.w	r2, r2, #4
 800a0a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	409a      	lsls	r2, r3
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b4:	f043 0201 	orr.w	r2, r3, #1
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	409a      	lsls	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d012      	beq.n	800a0f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00b      	beq.n	800a0f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0de:	2201      	movs	r2, #1
 800a0e0:	409a      	lsls	r2, r3
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ea:	f043 0202 	orr.w	r2, r3, #2
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f6:	2204      	movs	r2, #4
 800a0f8:	409a      	lsls	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d012      	beq.n	800a128 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a114:	2204      	movs	r2, #4
 800a116:	409a      	lsls	r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a120:	f043 0204 	orr.w	r2, r3, #4
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a12c:	2210      	movs	r2, #16
 800a12e:	409a      	lsls	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	4013      	ands	r3, r2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d043      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0308 	and.w	r3, r3, #8
 800a142:	2b00      	cmp	r3, #0
 800a144:	d03c      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a14a:	2210      	movs	r2, #16
 800a14c:	409a      	lsls	r2, r3
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d018      	beq.n	800a192 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d108      	bne.n	800a180 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d024      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	4798      	blx	r3
 800a17e:	e01f      	b.n	800a1c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a184:	2b00      	cmp	r3, #0
 800a186:	d01b      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	4798      	blx	r3
 800a190:	e016      	b.n	800a1c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d107      	bne.n	800a1b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0208 	bic.w	r2, r2, #8
 800a1ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d003      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	409a      	lsls	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 808f 	beq.w	800a2f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0310 	and.w	r3, r3, #16
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 8087 	beq.w	800a2f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	409a      	lsls	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b05      	cmp	r3, #5
 800a1f8:	d136      	bne.n	800a268 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f022 0216 	bic.w	r2, r2, #22
 800a208:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	695a      	ldr	r2, [r3, #20]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a218:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d103      	bne.n	800a22a <HAL_DMA_IRQHandler+0x1da>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f022 0208 	bic.w	r2, r2, #8
 800a238:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a23e:	223f      	movs	r2, #63	; 0x3f
 800a240:	409a      	lsls	r2, r3
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d07e      	beq.n	800a35c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	4798      	blx	r3
        }
        return;
 800a266:	e079      	b.n	800a35c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01d      	beq.n	800a2b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10d      	bne.n	800a2a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d031      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
 800a294:	e02c      	b.n	800a2f0 <HAL_DMA_IRQHandler+0x2a0>
 800a296:	bf00      	nop
 800a298:	2000028c 	.word	0x2000028c
 800a29c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d023      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	4798      	blx	r3
 800a2b0:	e01e      	b.n	800a2f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10f      	bne.n	800a2e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f022 0210 	bic.w	r2, r2, #16
 800a2ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d032      	beq.n	800a35e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fc:	f003 0301 	and.w	r3, r3, #1
 800a300:	2b00      	cmp	r3, #0
 800a302:	d022      	beq.n	800a34a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2205      	movs	r2, #5
 800a308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f022 0201 	bic.w	r2, r2, #1
 800a31a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3301      	adds	r3, #1
 800a320:	60bb      	str	r3, [r7, #8]
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	429a      	cmp	r2, r3
 800a326:	d307      	bcc.n	800a338 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1f2      	bne.n	800a31c <HAL_DMA_IRQHandler+0x2cc>
 800a336:	e000      	b.n	800a33a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a338:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d005      	beq.n	800a35e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	4798      	blx	r3
 800a35a:	e000      	b.n	800a35e <HAL_DMA_IRQHandler+0x30e>
        return;
 800a35c:	bf00      	nop
    }
  }
}
 800a35e:	3718      	adds	r7, #24
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a380:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	2b40      	cmp	r3, #64	; 0x40
 800a390:	d108      	bne.n	800a3a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a3a2:	e007      	b.n	800a3b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	60da      	str	r2, [r3, #12]
}
 800a3b4:	bf00      	nop
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	3b10      	subs	r3, #16
 800a3d0:	4a14      	ldr	r2, [pc, #80]	; (800a424 <DMA_CalcBaseAndBitshift+0x64>)
 800a3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d6:	091b      	lsrs	r3, r3, #4
 800a3d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a3da:	4a13      	ldr	r2, [pc, #76]	; (800a428 <DMA_CalcBaseAndBitshift+0x68>)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4413      	add	r3, r2
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d909      	bls.n	800a402 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a3f6:	f023 0303 	bic.w	r3, r3, #3
 800a3fa:	1d1a      	adds	r2, r3, #4
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	659a      	str	r2, [r3, #88]	; 0x58
 800a400:	e007      	b.n	800a412 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	aaaaaaab 	.word	0xaaaaaaab
 800a428:	08011598 	.word	0x08011598

0800a42c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d11f      	bne.n	800a486 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d856      	bhi.n	800a4fa <DMA_CheckFifoParam+0xce>
 800a44c:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <DMA_CheckFifoParam+0x28>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a465 	.word	0x0800a465
 800a458:	0800a477 	.word	0x0800a477
 800a45c:	0800a465 	.word	0x0800a465
 800a460:	0800a4fb 	.word	0x0800a4fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d046      	beq.n	800a4fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a474:	e043      	b.n	800a4fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a47e:	d140      	bne.n	800a502 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a484:	e03d      	b.n	800a502 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a48e:	d121      	bne.n	800a4d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2b03      	cmp	r3, #3
 800a494:	d837      	bhi.n	800a506 <DMA_CheckFifoParam+0xda>
 800a496:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <DMA_CheckFifoParam+0x70>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a4ad 	.word	0x0800a4ad
 800a4a0:	0800a4b3 	.word	0x0800a4b3
 800a4a4:	0800a4ad 	.word	0x0800a4ad
 800a4a8:	0800a4c5 	.word	0x0800a4c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b0:	e030      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d025      	beq.n	800a50a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4c2:	e022      	b.n	800a50a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a4cc:	d11f      	bne.n	800a50e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a4d2:	e01c      	b.n	800a50e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d903      	bls.n	800a4e2 <DMA_CheckFifoParam+0xb6>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	d003      	beq.n	800a4e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a4e0:	e018      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e6:	e015      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00e      	beq.n	800a512 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f8:	e00b      	b.n	800a512 <DMA_CheckFifoParam+0xe6>
      break;
 800a4fa:	bf00      	nop
 800a4fc:	e00a      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
      break;
 800a4fe:	bf00      	nop
 800a500:	e008      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
      break;
 800a502:	bf00      	nop
 800a504:	e006      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
      break;
 800a506:	bf00      	nop
 800a508:	e004      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
      break;
 800a50a:	bf00      	nop
 800a50c:	e002      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
      break;   
 800a50e:	bf00      	nop
 800a510:	e000      	b.n	800a514 <DMA_CheckFifoParam+0xe8>
      break;
 800a512:	bf00      	nop
    }
  } 
  
  return status; 
 800a514:	7bfb      	ldrb	r3, [r7, #15]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop

0800a524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a524:	b480      	push	{r7}
 800a526:	b089      	sub	sp, #36	; 0x24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a52e:	2300      	movs	r3, #0
 800a530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a532:	2300      	movs	r3, #0
 800a534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a536:	2300      	movs	r3, #0
 800a538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a53a:	2300      	movs	r3, #0
 800a53c:	61fb      	str	r3, [r7, #28]
 800a53e:	e16b      	b.n	800a818 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a540:	2201      	movs	r2, #1
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	fa02 f303 	lsl.w	r3, r2, r3
 800a548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	4013      	ands	r3, r2
 800a552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	429a      	cmp	r2, r3
 800a55a:	f040 815a 	bne.w	800a812 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	2b01      	cmp	r3, #1
 800a568:	d005      	beq.n	800a576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a572:	2b02      	cmp	r3, #2
 800a574:	d130      	bne.n	800a5d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	2203      	movs	r2, #3
 800a582:	fa02 f303 	lsl.w	r3, r2, r3
 800a586:	43db      	mvns	r3, r3
 800a588:	69ba      	ldr	r2, [r7, #24]
 800a58a:	4013      	ands	r3, r2
 800a58c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	fa02 f303 	lsl.w	r3, r2, r3
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b4:	43db      	mvns	r3, r3
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	091b      	lsrs	r3, r3, #4
 800a5c2:	f003 0201 	and.w	r2, r3, #1
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	69ba      	ldr	r2, [r7, #24]
 800a5d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	f003 0303 	and.w	r3, r3, #3
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d017      	beq.n	800a614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	005b      	lsls	r3, r3, #1
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	fa02 f303 	lsl.w	r3, r2, r3
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d123      	bne.n	800a668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	08da      	lsrs	r2, r3, #3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3208      	adds	r2, #8
 800a628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	f003 0307 	and.w	r3, r3, #7
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	220f      	movs	r2, #15
 800a638:	fa02 f303 	lsl.w	r3, r2, r3
 800a63c:	43db      	mvns	r3, r3
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	4013      	ands	r3, r2
 800a642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f003 0307 	and.w	r3, r3, #7
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	fa02 f303 	lsl.w	r3, r2, r3
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	4313      	orrs	r3, r2
 800a658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	08da      	lsrs	r2, r3, #3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3208      	adds	r2, #8
 800a662:	69b9      	ldr	r1, [r7, #24]
 800a664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	2203      	movs	r2, #3
 800a674:	fa02 f303 	lsl.w	r3, r2, r3
 800a678:	43db      	mvns	r3, r3
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	4013      	ands	r3, r2
 800a67e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f003 0203 	and.w	r2, r3, #3
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	fa02 f303 	lsl.w	r3, r2, r3
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	4313      	orrs	r3, r2
 800a694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 80b4 	beq.w	800a812 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	4b60      	ldr	r3, [pc, #384]	; (800a830 <HAL_GPIO_Init+0x30c>)
 800a6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b2:	4a5f      	ldr	r2, [pc, #380]	; (800a830 <HAL_GPIO_Init+0x30c>)
 800a6b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6b8:	6453      	str	r3, [r2, #68]	; 0x44
 800a6ba:	4b5d      	ldr	r3, [pc, #372]	; (800a830 <HAL_GPIO_Init+0x30c>)
 800a6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a6c6:	4a5b      	ldr	r2, [pc, #364]	; (800a834 <HAL_GPIO_Init+0x310>)
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	089b      	lsrs	r3, r3, #2
 800a6cc:	3302      	adds	r3, #2
 800a6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	220f      	movs	r2, #15
 800a6de:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e2:	43db      	mvns	r3, r3
 800a6e4:	69ba      	ldr	r2, [r7, #24]
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a52      	ldr	r2, [pc, #328]	; (800a838 <HAL_GPIO_Init+0x314>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d02b      	beq.n	800a74a <HAL_GPIO_Init+0x226>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a51      	ldr	r2, [pc, #324]	; (800a83c <HAL_GPIO_Init+0x318>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d025      	beq.n	800a746 <HAL_GPIO_Init+0x222>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a50      	ldr	r2, [pc, #320]	; (800a840 <HAL_GPIO_Init+0x31c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d01f      	beq.n	800a742 <HAL_GPIO_Init+0x21e>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a4f      	ldr	r2, [pc, #316]	; (800a844 <HAL_GPIO_Init+0x320>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d019      	beq.n	800a73e <HAL_GPIO_Init+0x21a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a4e      	ldr	r2, [pc, #312]	; (800a848 <HAL_GPIO_Init+0x324>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d013      	beq.n	800a73a <HAL_GPIO_Init+0x216>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a4d      	ldr	r2, [pc, #308]	; (800a84c <HAL_GPIO_Init+0x328>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00d      	beq.n	800a736 <HAL_GPIO_Init+0x212>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a4c      	ldr	r2, [pc, #304]	; (800a850 <HAL_GPIO_Init+0x32c>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d007      	beq.n	800a732 <HAL_GPIO_Init+0x20e>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a4b      	ldr	r2, [pc, #300]	; (800a854 <HAL_GPIO_Init+0x330>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d101      	bne.n	800a72e <HAL_GPIO_Init+0x20a>
 800a72a:	2307      	movs	r3, #7
 800a72c:	e00e      	b.n	800a74c <HAL_GPIO_Init+0x228>
 800a72e:	2308      	movs	r3, #8
 800a730:	e00c      	b.n	800a74c <HAL_GPIO_Init+0x228>
 800a732:	2306      	movs	r3, #6
 800a734:	e00a      	b.n	800a74c <HAL_GPIO_Init+0x228>
 800a736:	2305      	movs	r3, #5
 800a738:	e008      	b.n	800a74c <HAL_GPIO_Init+0x228>
 800a73a:	2304      	movs	r3, #4
 800a73c:	e006      	b.n	800a74c <HAL_GPIO_Init+0x228>
 800a73e:	2303      	movs	r3, #3
 800a740:	e004      	b.n	800a74c <HAL_GPIO_Init+0x228>
 800a742:	2302      	movs	r3, #2
 800a744:	e002      	b.n	800a74c <HAL_GPIO_Init+0x228>
 800a746:	2301      	movs	r3, #1
 800a748:	e000      	b.n	800a74c <HAL_GPIO_Init+0x228>
 800a74a:	2300      	movs	r3, #0
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	f002 0203 	and.w	r2, r2, #3
 800a752:	0092      	lsls	r2, r2, #2
 800a754:	4093      	lsls	r3, r2
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	4313      	orrs	r3, r2
 800a75a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a75c:	4935      	ldr	r1, [pc, #212]	; (800a834 <HAL_GPIO_Init+0x310>)
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	089b      	lsrs	r3, r3, #2
 800a762:	3302      	adds	r3, #2
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a76a:	4b3b      	ldr	r3, [pc, #236]	; (800a858 <HAL_GPIO_Init+0x334>)
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	43db      	mvns	r3, r3
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	4013      	ands	r3, r2
 800a778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d003      	beq.n	800a78e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a78e:	4a32      	ldr	r2, [pc, #200]	; (800a858 <HAL_GPIO_Init+0x334>)
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a794:	4b30      	ldr	r3, [pc, #192]	; (800a858 <HAL_GPIO_Init+0x334>)
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	43db      	mvns	r3, r3
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a7b8:	4a27      	ldr	r2, [pc, #156]	; (800a858 <HAL_GPIO_Init+0x334>)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a7be:	4b26      	ldr	r3, [pc, #152]	; (800a858 <HAL_GPIO_Init+0x334>)
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	43db      	mvns	r3, r3
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a7da:	69ba      	ldr	r2, [r7, #24]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a7e2:	4a1d      	ldr	r2, [pc, #116]	; (800a858 <HAL_GPIO_Init+0x334>)
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a7e8:	4b1b      	ldr	r3, [pc, #108]	; (800a858 <HAL_GPIO_Init+0x334>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d003      	beq.n	800a80c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	4313      	orrs	r3, r2
 800a80a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a80c:	4a12      	ldr	r2, [pc, #72]	; (800a858 <HAL_GPIO_Init+0x334>)
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	3301      	adds	r3, #1
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	2b0f      	cmp	r3, #15
 800a81c:	f67f ae90 	bls.w	800a540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a820:	bf00      	nop
 800a822:	bf00      	nop
 800a824:	3724      	adds	r7, #36	; 0x24
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	40023800 	.word	0x40023800
 800a834:	40013800 	.word	0x40013800
 800a838:	40020000 	.word	0x40020000
 800a83c:	40020400 	.word	0x40020400
 800a840:	40020800 	.word	0x40020800
 800a844:	40020c00 	.word	0x40020c00
 800a848:	40021000 	.word	0x40021000
 800a84c:	40021400 	.word	0x40021400
 800a850:	40021800 	.word	0x40021800
 800a854:	40021c00 	.word	0x40021c00
 800a858:	40013c00 	.word	0x40013c00

0800a85c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691a      	ldr	r2, [r3, #16]
 800a86c:	887b      	ldrh	r3, [r7, #2]
 800a86e:	4013      	ands	r3, r2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a874:	2301      	movs	r3, #1
 800a876:	73fb      	strb	r3, [r7, #15]
 800a878:	e001      	b.n	800a87e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	807b      	strh	r3, [r7, #2]
 800a898:	4613      	mov	r3, r2
 800a89a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a89c:	787b      	ldrb	r3, [r7, #1]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8a2:	887a      	ldrh	r2, [r7, #2]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a8a8:	e003      	b.n	800a8b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a8aa:	887b      	ldrh	r3, [r7, #2]
 800a8ac:	041a      	lsls	r2, r3, #16
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	619a      	str	r2, [r3, #24]
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e12b      	b.n	800ab2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d106      	bne.n	800a8ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7f7 fb7e 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2224      	movs	r2, #36	; 0x24
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 0201 	bic.w	r2, r2, #1
 800a902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a924:	f001 fd16 	bl	800c354 <HAL_RCC_GetPCLK1Freq>
 800a928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4a81      	ldr	r2, [pc, #516]	; (800ab34 <HAL_I2C_Init+0x274>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d807      	bhi.n	800a944 <HAL_I2C_Init+0x84>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4a80      	ldr	r2, [pc, #512]	; (800ab38 <HAL_I2C_Init+0x278>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	bf94      	ite	ls
 800a93c:	2301      	movls	r3, #1
 800a93e:	2300      	movhi	r3, #0
 800a940:	b2db      	uxtb	r3, r3
 800a942:	e006      	b.n	800a952 <HAL_I2C_Init+0x92>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4a7d      	ldr	r2, [pc, #500]	; (800ab3c <HAL_I2C_Init+0x27c>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	bf94      	ite	ls
 800a94c:	2301      	movls	r3, #1
 800a94e:	2300      	movhi	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e0e7      	b.n	800ab2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4a78      	ldr	r2, [pc, #480]	; (800ab40 <HAL_I2C_Init+0x280>)
 800a95e:	fba2 2303 	umull	r2, r3, r2, r3
 800a962:	0c9b      	lsrs	r3, r3, #18
 800a964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6a1b      	ldr	r3, [r3, #32]
 800a980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	4a6a      	ldr	r2, [pc, #424]	; (800ab34 <HAL_I2C_Init+0x274>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d802      	bhi.n	800a994 <HAL_I2C_Init+0xd4>
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	3301      	adds	r3, #1
 800a992:	e009      	b.n	800a9a8 <HAL_I2C_Init+0xe8>
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
 800a99e:	4a69      	ldr	r2, [pc, #420]	; (800ab44 <HAL_I2C_Init+0x284>)
 800a9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a4:	099b      	lsrs	r3, r3, #6
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	6812      	ldr	r2, [r2, #0]
 800a9ac:	430b      	orrs	r3, r1
 800a9ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a9ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	495c      	ldr	r1, [pc, #368]	; (800ab34 <HAL_I2C_Init+0x274>)
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	d819      	bhi.n	800a9fc <HAL_I2C_Init+0x13c>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	1e59      	subs	r1, r3, #1
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a9d6:	1c59      	adds	r1, r3, #1
 800a9d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a9dc:	400b      	ands	r3, r1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00a      	beq.n	800a9f8 <HAL_I2C_Init+0x138>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	1e59      	subs	r1, r3, #1
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	fbb1 f3f3 	udiv	r3, r1, r3
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9f6:	e051      	b.n	800aa9c <HAL_I2C_Init+0x1dc>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	e04f      	b.n	800aa9c <HAL_I2C_Init+0x1dc>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d111      	bne.n	800aa28 <HAL_I2C_Init+0x168>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	1e58      	subs	r0, r3, #1
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6859      	ldr	r1, [r3, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	440b      	add	r3, r1
 800aa12:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa16:	3301      	adds	r3, #1
 800aa18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bf0c      	ite	eq
 800aa20:	2301      	moveq	r3, #1
 800aa22:	2300      	movne	r3, #0
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	e012      	b.n	800aa4e <HAL_I2C_Init+0x18e>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	1e58      	subs	r0, r3, #1
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6859      	ldr	r1, [r3, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	0099      	lsls	r1, r3, #2
 800aa38:	440b      	add	r3, r1
 800aa3a:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa3e:	3301      	adds	r3, #1
 800aa40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bf0c      	ite	eq
 800aa48:	2301      	moveq	r3, #1
 800aa4a:	2300      	movne	r3, #0
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <HAL_I2C_Init+0x196>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e022      	b.n	800aa9c <HAL_I2C_Init+0x1dc>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10e      	bne.n	800aa7c <HAL_I2C_Init+0x1bc>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1e58      	subs	r0, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6859      	ldr	r1, [r3, #4]
 800aa66:	460b      	mov	r3, r1
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	440b      	add	r3, r1
 800aa6c:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa70:	3301      	adds	r3, #1
 800aa72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa7a:	e00f      	b.n	800aa9c <HAL_I2C_Init+0x1dc>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	1e58      	subs	r0, r3, #1
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6859      	ldr	r1, [r3, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	440b      	add	r3, r1
 800aa8a:	0099      	lsls	r1, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa92:	3301      	adds	r3, #1
 800aa94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	6809      	ldr	r1, [r1, #0]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	69da      	ldr	r2, [r3, #28]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a1b      	ldr	r3, [r3, #32]
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800aaca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	6911      	ldr	r1, [r2, #16]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	68d2      	ldr	r2, [r2, #12]
 800aad6:	4311      	orrs	r1, r2
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6812      	ldr	r2, [r2, #0]
 800aadc:	430b      	orrs	r3, r1
 800aade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	695a      	ldr	r2, [r3, #20]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0201 	orr.w	r2, r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2220      	movs	r2, #32
 800ab16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	000186a0 	.word	0x000186a0
 800ab38:	001e847f 	.word	0x001e847f
 800ab3c:	003d08ff 	.word	0x003d08ff
 800ab40:	431bde83 	.word	0x431bde83
 800ab44:	10624dd3 	.word	0x10624dd3

0800ab48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	4608      	mov	r0, r1
 800ab52:	4611      	mov	r1, r2
 800ab54:	461a      	mov	r2, r3
 800ab56:	4603      	mov	r3, r0
 800ab58:	817b      	strh	r3, [r7, #10]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	813b      	strh	r3, [r7, #8]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ab62:	f7fe fae7 	bl	8009134 <HAL_GetTick>
 800ab66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	f040 80d9 	bne.w	800ad28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	2319      	movs	r3, #25
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	496d      	ldr	r1, [pc, #436]	; (800ad34 <HAL_I2C_Mem_Write+0x1ec>)
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 fc7f 	bl	800b484 <I2C_WaitOnFlagUntilTimeout>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e0cc      	b.n	800ad2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d101      	bne.n	800ab9e <HAL_I2C_Mem_Write+0x56>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	e0c5      	b.n	800ad2a <HAL_I2C_Mem_Write+0x1e2>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d007      	beq.n	800abc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f042 0201 	orr.w	r2, r2, #1
 800abc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2221      	movs	r2, #33	; 0x21
 800abd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2240      	movs	r2, #64	; 0x40
 800abe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6a3a      	ldr	r2, [r7, #32]
 800abee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800abf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4a4d      	ldr	r2, [pc, #308]	; (800ad38 <HAL_I2C_Mem_Write+0x1f0>)
 800ac04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac06:	88f8      	ldrh	r0, [r7, #6]
 800ac08:	893a      	ldrh	r2, [r7, #8]
 800ac0a:	8979      	ldrh	r1, [r7, #10]
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4603      	mov	r3, r0
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f000 fab6 	bl	800b188 <I2C_RequestMemoryWrite>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d052      	beq.n	800acc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e081      	b.n	800ad2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 fd00 	bl	800b630 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00d      	beq.n	800ac52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3a:	2b04      	cmp	r3, #4
 800ac3c:	d107      	bne.n	800ac4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e06b      	b.n	800ad2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	781a      	ldrb	r2, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b04      	cmp	r3, #4
 800ac8e:	d11b      	bne.n	800acc8 <HAL_I2C_Mem_Write+0x180>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d017      	beq.n	800acc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9c:	781a      	ldrb	r2, [r3, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acb2:	3b01      	subs	r3, #1
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	3b01      	subs	r3, #1
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1aa      	bne.n	800ac26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 fcec 	bl	800b6b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00d      	beq.n	800acfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	d107      	bne.n	800acf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e016      	b.n	800ad2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2220      	movs	r2, #32
 800ad10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	e000      	b.n	800ad2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ad28:	2302      	movs	r3, #2
  }
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	00100002 	.word	0x00100002
 800ad38:	ffff0000 	.word	0xffff0000

0800ad3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08c      	sub	sp, #48	; 0x30
 800ad40:	af02      	add	r7, sp, #8
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	4608      	mov	r0, r1
 800ad46:	4611      	mov	r1, r2
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	817b      	strh	r3, [r7, #10]
 800ad4e:	460b      	mov	r3, r1
 800ad50:	813b      	strh	r3, [r7, #8]
 800ad52:	4613      	mov	r3, r2
 800ad54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ad56:	f7fe f9ed 	bl	8009134 <HAL_GetTick>
 800ad5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b20      	cmp	r3, #32
 800ad66:	f040 8208 	bne.w	800b17a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	9300      	str	r3, [sp, #0]
 800ad6e:	2319      	movs	r3, #25
 800ad70:	2201      	movs	r2, #1
 800ad72:	497b      	ldr	r1, [pc, #492]	; (800af60 <HAL_I2C_Mem_Read+0x224>)
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f000 fb85 	bl	800b484 <I2C_WaitOnFlagUntilTimeout>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800ad80:	2302      	movs	r3, #2
 800ad82:	e1fb      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d101      	bne.n	800ad92 <HAL_I2C_Mem_Read+0x56>
 800ad8e:	2302      	movs	r3, #2
 800ad90:	e1f4      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d007      	beq.n	800adb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f042 0201 	orr.w	r2, r2, #1
 800adb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2222      	movs	r2, #34	; 0x22
 800adcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2240      	movs	r2, #64	; 0x40
 800add4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ade8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adee:	b29a      	uxth	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4a5b      	ldr	r2, [pc, #364]	; (800af64 <HAL_I2C_Mem_Read+0x228>)
 800adf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800adfa:	88f8      	ldrh	r0, [r7, #6]
 800adfc:	893a      	ldrh	r2, [r7, #8]
 800adfe:	8979      	ldrh	r1, [r7, #10]
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	4603      	mov	r3, r0
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 fa52 	bl	800b2b4 <I2C_RequestMemoryRead>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e1b0      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d113      	bne.n	800ae4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae22:	2300      	movs	r3, #0
 800ae24:	623b      	str	r3, [r7, #32]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	623b      	str	r3, [r7, #32]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	623b      	str	r3, [r7, #32]
 800ae36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	e184      	b.n	800b154 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d11b      	bne.n	800ae8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae62:	2300      	movs	r3, #0
 800ae64:	61fb      	str	r3, [r7, #28]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	695b      	ldr	r3, [r3, #20]
 800ae6c:	61fb      	str	r3, [r7, #28]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	61fb      	str	r3, [r7, #28]
 800ae76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	e164      	b.n	800b154 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d11b      	bne.n	800aeca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aea0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	61bb      	str	r3, [r7, #24]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	61bb      	str	r3, [r7, #24]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	61bb      	str	r3, [r7, #24]
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	e144      	b.n	800b154 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	617b      	str	r3, [r7, #20]
 800aede:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800aee0:	e138      	b.n	800b154 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	f200 80f1 	bhi.w	800b0ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d123      	bne.n	800af3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f000 fc1b 	bl	800b734 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e139      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	691a      	ldr	r2, [r3, #16]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	b2d2      	uxtb	r2, r2
 800af14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	1c5a      	adds	r2, r3, #1
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af24:	3b01      	subs	r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af30:	b29b      	uxth	r3, r3
 800af32:	3b01      	subs	r3, #1
 800af34:	b29a      	uxth	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	855a      	strh	r2, [r3, #42]	; 0x2a
 800af3a:	e10b      	b.n	800b154 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af40:	2b02      	cmp	r3, #2
 800af42:	d14e      	bne.n	800afe2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	2200      	movs	r2, #0
 800af4c:	4906      	ldr	r1, [pc, #24]	; (800af68 <HAL_I2C_Mem_Read+0x22c>)
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 fa98 	bl	800b484 <I2C_WaitOnFlagUntilTimeout>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d008      	beq.n	800af6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e10e      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
 800af5e:	bf00      	nop
 800af60:	00100002 	.word	0x00100002
 800af64:	ffff0000 	.word	0xffff0000
 800af68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	691a      	ldr	r2, [r3, #16]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	b2d2      	uxtb	r2, r2
 800af88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af98:	3b01      	subs	r3, #1
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	3b01      	subs	r3, #1
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	691a      	ldr	r2, [r3, #16]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb8:	b2d2      	uxtb	r2, r2
 800afba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afca:	3b01      	subs	r3, #1
 800afcc:	b29a      	uxth	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	3b01      	subs	r3, #1
 800afda:	b29a      	uxth	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	855a      	strh	r2, [r3, #42]	; 0x2a
 800afe0:	e0b8      	b.n	800b154 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe8:	2200      	movs	r2, #0
 800afea:	4966      	ldr	r1, [pc, #408]	; (800b184 <HAL_I2C_Mem_Read+0x448>)
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 fa49 	bl	800b484 <I2C_WaitOnFlagUntilTimeout>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e0bf      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b00a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	691a      	ldr	r2, [r3, #16]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	b2d2      	uxtb	r2, r2
 800b018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b028:	3b01      	subs	r3, #1
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b034:	b29b      	uxth	r3, r3
 800b036:	3b01      	subs	r3, #1
 800b038:	b29a      	uxth	r2, r3
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	2200      	movs	r2, #0
 800b046:	494f      	ldr	r1, [pc, #316]	; (800b184 <HAL_I2C_Mem_Read+0x448>)
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 fa1b 	bl	800b484 <I2C_WaitOnFlagUntilTimeout>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e091      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	b2d2      	uxtb	r2, r2
 800b074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b084:	3b01      	subs	r3, #1
 800b086:	b29a      	uxth	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b090:	b29b      	uxth	r3, r3
 800b092:	3b01      	subs	r3, #1
 800b094:	b29a      	uxth	r2, r3
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	691a      	ldr	r2, [r3, #16]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	b2d2      	uxtb	r2, r2
 800b0a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b0cc:	e042      	b.n	800b154 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 fb2e 	bl	800b734 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e04c      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	691a      	ldr	r2, [r3, #16]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	b2d2      	uxtb	r2, r2
 800b0ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	1c5a      	adds	r2, r3, #1
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0fe:	3b01      	subs	r3, #1
 800b100:	b29a      	uxth	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	3b01      	subs	r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	f003 0304 	and.w	r3, r3, #4
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d118      	bne.n	800b154 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	691a      	ldr	r2, [r3, #16]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	b2d2      	uxtb	r2, r2
 800b12e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	1c5a      	adds	r2, r3, #1
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b13e:	3b01      	subs	r3, #1
 800b140:	b29a      	uxth	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	3b01      	subs	r3, #1
 800b14e:	b29a      	uxth	r2, r3
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f47f aec2 	bne.w	800aee2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2220      	movs	r2, #32
 800b162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	e000      	b.n	800b17c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b17a:	2302      	movs	r3, #2
  }
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3728      	adds	r7, #40	; 0x28
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	00010004 	.word	0x00010004

0800b188 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	4608      	mov	r0, r1
 800b192:	4611      	mov	r1, r2
 800b194:	461a      	mov	r2, r3
 800b196:	4603      	mov	r3, r0
 800b198:	817b      	strh	r3, [r7, #10]
 800b19a:	460b      	mov	r3, r1
 800b19c:	813b      	strh	r3, [r7, #8]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 f960 	bl	800b484 <I2C_WaitOnFlagUntilTimeout>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00d      	beq.n	800b1e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1d8:	d103      	bne.n	800b1e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e05f      	b.n	800b2a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b1e6:	897b      	ldrh	r3, [r7, #10]
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b1f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	6a3a      	ldr	r2, [r7, #32]
 800b1fa:	492d      	ldr	r1, [pc, #180]	; (800b2b0 <I2C_RequestMemoryWrite+0x128>)
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 f998 	bl	800b532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e04c      	b.n	800b2a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b20c:	2300      	movs	r3, #0
 800b20e:	617b      	str	r3, [r7, #20]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	617b      	str	r3, [r7, #20]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b224:	6a39      	ldr	r1, [r7, #32]
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 fa02 	bl	800b630 <I2C_WaitOnTXEFlagUntilTimeout>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00d      	beq.n	800b24e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b236:	2b04      	cmp	r3, #4
 800b238:	d107      	bne.n	800b24a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e02b      	b.n	800b2a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b24e:	88fb      	ldrh	r3, [r7, #6]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d105      	bne.n	800b260 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b254:	893b      	ldrh	r3, [r7, #8]
 800b256:	b2da      	uxtb	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	611a      	str	r2, [r3, #16]
 800b25e:	e021      	b.n	800b2a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b260:	893b      	ldrh	r3, [r7, #8]
 800b262:	0a1b      	lsrs	r3, r3, #8
 800b264:	b29b      	uxth	r3, r3
 800b266:	b2da      	uxtb	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b270:	6a39      	ldr	r1, [r7, #32]
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 f9dc 	bl	800b630 <I2C_WaitOnTXEFlagUntilTimeout>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00d      	beq.n	800b29a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	2b04      	cmp	r3, #4
 800b284:	d107      	bne.n	800b296 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e005      	b.n	800b2a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b29a:	893b      	ldrh	r3, [r7, #8]
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	00010002 	.word	0x00010002

0800b2b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b088      	sub	sp, #32
 800b2b8:	af02      	add	r7, sp, #8
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	4608      	mov	r0, r1
 800b2be:	4611      	mov	r1, r2
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	817b      	strh	r3, [r7, #10]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	813b      	strh	r3, [r7, #8]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f000 f8c2 	bl	800b484 <I2C_WaitOnFlagUntilTimeout>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00d      	beq.n	800b322 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b314:	d103      	bne.n	800b31e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b31c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e0aa      	b.n	800b478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b322:	897b      	ldrh	r3, [r7, #10]
 800b324:	b2db      	uxtb	r3, r3
 800b326:	461a      	mov	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	6a3a      	ldr	r2, [r7, #32]
 800b336:	4952      	ldr	r1, [pc, #328]	; (800b480 <I2C_RequestMemoryRead+0x1cc>)
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 f8fa 	bl	800b532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	e097      	b.n	800b478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b348:	2300      	movs	r3, #0
 800b34a:	617b      	str	r3, [r7, #20]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b360:	6a39      	ldr	r1, [r7, #32]
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f000 f964 	bl	800b630 <I2C_WaitOnTXEFlagUntilTimeout>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00d      	beq.n	800b38a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b372:	2b04      	cmp	r3, #4
 800b374:	d107      	bne.n	800b386 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e076      	b.n	800b478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b38a:	88fb      	ldrh	r3, [r7, #6]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d105      	bne.n	800b39c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b390:	893b      	ldrh	r3, [r7, #8]
 800b392:	b2da      	uxtb	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	611a      	str	r2, [r3, #16]
 800b39a:	e021      	b.n	800b3e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b39c:	893b      	ldrh	r3, [r7, #8]
 800b39e:	0a1b      	lsrs	r3, r3, #8
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ac:	6a39      	ldr	r1, [r7, #32]
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 f93e 	bl	800b630 <I2C_WaitOnTXEFlagUntilTimeout>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00d      	beq.n	800b3d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3be:	2b04      	cmp	r3, #4
 800b3c0:	d107      	bne.n	800b3d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e050      	b.n	800b478 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b3d6:	893b      	ldrh	r3, [r7, #8]
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e2:	6a39      	ldr	r1, [r7, #32]
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 f923 	bl	800b630 <I2C_WaitOnTXEFlagUntilTimeout>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00d      	beq.n	800b40c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f4:	2b04      	cmp	r3, #4
 800b3f6:	d107      	bne.n	800b408 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b406:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e035      	b.n	800b478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b41a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	6a3b      	ldr	r3, [r7, #32]
 800b422:	2200      	movs	r2, #0
 800b424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 f82b 	bl	800b484 <I2C_WaitOnFlagUntilTimeout>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00d      	beq.n	800b450 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b43e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b442:	d103      	bne.n	800b44c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b44a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b44c:	2303      	movs	r3, #3
 800b44e:	e013      	b.n	800b478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b450:	897b      	ldrh	r3, [r7, #10]
 800b452:	b2db      	uxtb	r3, r3
 800b454:	f043 0301 	orr.w	r3, r3, #1
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	6a3a      	ldr	r2, [r7, #32]
 800b464:	4906      	ldr	r1, [pc, #24]	; (800b480 <I2C_RequestMemoryRead+0x1cc>)
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 f863 	bl	800b532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e000      	b.n	800b478 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	00010002 	.word	0x00010002

0800b484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	603b      	str	r3, [r7, #0]
 800b490:	4613      	mov	r3, r2
 800b492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b494:	e025      	b.n	800b4e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49c:	d021      	beq.n	800b4e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b49e:	f7fd fe49 	bl	8009134 <HAL_GetTick>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d302      	bcc.n	800b4b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d116      	bne.n	800b4e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ce:	f043 0220 	orr.w	r2, r3, #32
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e023      	b.n	800b52a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	0c1b      	lsrs	r3, r3, #16
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d10d      	bne.n	800b508 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	43da      	mvns	r2, r3
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	bf0c      	ite	eq
 800b4fe:	2301      	moveq	r3, #1
 800b500:	2300      	movne	r3, #0
 800b502:	b2db      	uxtb	r3, r3
 800b504:	461a      	mov	r2, r3
 800b506:	e00c      	b.n	800b522 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	699b      	ldr	r3, [r3, #24]
 800b50e:	43da      	mvns	r2, r3
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	4013      	ands	r3, r2
 800b514:	b29b      	uxth	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	bf0c      	ite	eq
 800b51a:	2301      	moveq	r3, #1
 800b51c:	2300      	movne	r3, #0
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	461a      	mov	r2, r3
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	429a      	cmp	r2, r3
 800b526:	d0b6      	beq.n	800b496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	607a      	str	r2, [r7, #4]
 800b53e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b540:	e051      	b.n	800b5e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b54c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b550:	d123      	bne.n	800b59a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b560:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b56a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2220      	movs	r2, #32
 800b576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b586:	f043 0204 	orr.w	r2, r3, #4
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	e046      	b.n	800b628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a0:	d021      	beq.n	800b5e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5a2:	f7fd fdc7 	bl	8009134 <HAL_GetTick>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d302      	bcc.n	800b5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d116      	bne.n	800b5e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2220      	movs	r2, #32
 800b5c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d2:	f043 0220 	orr.w	r2, r3, #32
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e020      	b.n	800b628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	0c1b      	lsrs	r3, r3, #16
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d10c      	bne.n	800b60a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	43da      	mvns	r2, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bf14      	ite	ne
 800b602:	2301      	movne	r3, #1
 800b604:	2300      	moveq	r3, #0
 800b606:	b2db      	uxtb	r3, r3
 800b608:	e00b      	b.n	800b622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	43da      	mvns	r2, r3
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	4013      	ands	r3, r2
 800b616:	b29b      	uxth	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	bf14      	ite	ne
 800b61c:	2301      	movne	r3, #1
 800b61e:	2300      	moveq	r3, #0
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b00      	cmp	r3, #0
 800b624:	d18d      	bne.n	800b542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b63c:	e02d      	b.n	800b69a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 f8ce 	bl	800b7e0 <I2C_IsAcknowledgeFailed>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e02d      	b.n	800b6aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b654:	d021      	beq.n	800b69a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b656:	f7fd fd6d 	bl	8009134 <HAL_GetTick>
 800b65a:	4602      	mov	r2, r0
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	429a      	cmp	r2, r3
 800b664:	d302      	bcc.n	800b66c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d116      	bne.n	800b69a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2220      	movs	r2, #32
 800b676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b686:	f043 0220 	orr.w	r2, r3, #32
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e007      	b.n	800b6aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a4:	2b80      	cmp	r3, #128	; 0x80
 800b6a6:	d1ca      	bne.n	800b63e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b6be:	e02d      	b.n	800b71c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 f88d 	bl	800b7e0 <I2C_IsAcknowledgeFailed>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e02d      	b.n	800b72c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d6:	d021      	beq.n	800b71c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6d8:	f7fd fd2c 	bl	8009134 <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d302      	bcc.n	800b6ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d116      	bne.n	800b71c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b708:	f043 0220 	orr.w	r2, r3, #32
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	e007      	b.n	800b72c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	f003 0304 	and.w	r3, r3, #4
 800b726:	2b04      	cmp	r3, #4
 800b728:	d1ca      	bne.n	800b6c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b740:	e042      	b.n	800b7c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	f003 0310 	and.w	r3, r3, #16
 800b74c:	2b10      	cmp	r3, #16
 800b74e:	d119      	bne.n	800b784 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f06f 0210 	mvn.w	r2, #16
 800b758:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2220      	movs	r2, #32
 800b764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	e029      	b.n	800b7d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b784:	f7fd fcd6 	bl	8009134 <HAL_GetTick>
 800b788:	4602      	mov	r2, r0
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	429a      	cmp	r2, r3
 800b792:	d302      	bcc.n	800b79a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d116      	bne.n	800b7c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b4:	f043 0220 	orr.w	r2, r3, #32
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e007      	b.n	800b7d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d2:	2b40      	cmp	r3, #64	; 0x40
 800b7d4:	d1b5      	bne.n	800b742 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7f6:	d11b      	bne.n	800b830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2220      	movs	r2, #32
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81c:	f043 0204 	orr.w	r2, r3, #4
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e000      	b.n	800b832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b83e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b840:	b08f      	sub	sp, #60	; 0x3c
 800b842:	af0a      	add	r7, sp, #40	; 0x28
 800b844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e10f      	b.n	800ba70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7fd fb86 	bl	8008f7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2203      	movs	r2, #3
 800b874:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b880:	2b00      	cmp	r3, #0
 800b882:	d102      	bne.n	800b88a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4618      	mov	r0, r3
 800b890:	f002 fa63 	bl	800dd5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	603b      	str	r3, [r7, #0]
 800b89a:	687e      	ldr	r6, [r7, #4]
 800b89c:	466d      	mov	r5, sp
 800b89e:	f106 0410 	add.w	r4, r6, #16
 800b8a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b8a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b8aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b8ae:	e885 0003 	stmia.w	r5, {r0, r1}
 800b8b2:	1d33      	adds	r3, r6, #4
 800b8b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8b6:	6838      	ldr	r0, [r7, #0]
 800b8b8:	f002 f9ee 	bl	800dc98 <USB_CoreInit>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d005      	beq.n	800b8ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e0d0      	b.n	800ba70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f002 fa51 	bl	800dd7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]
 800b8de:	e04a      	b.n	800b976 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b8e0:	7bfa      	ldrb	r2, [r7, #15]
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	440b      	add	r3, r1
 800b8ee:	333d      	adds	r3, #61	; 0x3d
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b8f4:	7bfa      	ldrb	r2, [r7, #15]
 800b8f6:	6879      	ldr	r1, [r7, #4]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	440b      	add	r3, r1
 800b902:	333c      	adds	r3, #60	; 0x3c
 800b904:	7bfa      	ldrb	r2, [r7, #15]
 800b906:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b908:	7bfa      	ldrb	r2, [r7, #15]
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	b298      	uxth	r0, r3
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4613      	mov	r3, r2
 800b912:	00db      	lsls	r3, r3, #3
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	440b      	add	r3, r1
 800b91a:	3344      	adds	r3, #68	; 0x44
 800b91c:	4602      	mov	r2, r0
 800b91e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b920:	7bfa      	ldrb	r2, [r7, #15]
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	4613      	mov	r3, r2
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	4413      	add	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	440b      	add	r3, r1
 800b92e:	3340      	adds	r3, #64	; 0x40
 800b930:	2200      	movs	r2, #0
 800b932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b934:	7bfa      	ldrb	r2, [r7, #15]
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	4613      	mov	r3, r2
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	440b      	add	r3, r1
 800b942:	3348      	adds	r3, #72	; 0x48
 800b944:	2200      	movs	r2, #0
 800b946:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b948:	7bfa      	ldrb	r2, [r7, #15]
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	4613      	mov	r3, r2
 800b94e:	00db      	lsls	r3, r3, #3
 800b950:	4413      	add	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	440b      	add	r3, r1
 800b956:	334c      	adds	r3, #76	; 0x4c
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b95c:	7bfa      	ldrb	r2, [r7, #15]
 800b95e:	6879      	ldr	r1, [r7, #4]
 800b960:	4613      	mov	r3, r2
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	4413      	add	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	440b      	add	r3, r1
 800b96a:	3354      	adds	r3, #84	; 0x54
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	3301      	adds	r3, #1
 800b974:	73fb      	strb	r3, [r7, #15]
 800b976:	7bfa      	ldrb	r2, [r7, #15]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d3af      	bcc.n	800b8e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]
 800b984:	e044      	b.n	800ba10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b986:	7bfa      	ldrb	r2, [r7, #15]
 800b988:	6879      	ldr	r1, [r7, #4]
 800b98a:	4613      	mov	r3, r2
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	440b      	add	r3, r1
 800b994:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b998:	2200      	movs	r2, #0
 800b99a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b99c:	7bfa      	ldrb	r2, [r7, #15]
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	00db      	lsls	r3, r3, #3
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	440b      	add	r3, r1
 800b9aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b9ae:	7bfa      	ldrb	r2, [r7, #15]
 800b9b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b9b2:	7bfa      	ldrb	r2, [r7, #15]
 800b9b4:	6879      	ldr	r1, [r7, #4]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	4413      	add	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	440b      	add	r3, r1
 800b9c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b9c8:	7bfa      	ldrb	r2, [r7, #15]
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	00db      	lsls	r3, r3, #3
 800b9d0:	4413      	add	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	440b      	add	r3, r1
 800b9d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b9de:	7bfa      	ldrb	r2, [r7, #15]
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	00db      	lsls	r3, r3, #3
 800b9e6:	4413      	add	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	440b      	add	r3, r1
 800b9ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b9f4:	7bfa      	ldrb	r2, [r7, #15]
 800b9f6:	6879      	ldr	r1, [r7, #4]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	00db      	lsls	r3, r3, #3
 800b9fc:	4413      	add	r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	440b      	add	r3, r1
 800ba02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ba06:	2200      	movs	r2, #0
 800ba08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	73fb      	strb	r3, [r7, #15]
 800ba10:	7bfa      	ldrb	r2, [r7, #15]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d3b5      	bcc.n	800b986 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	687e      	ldr	r6, [r7, #4]
 800ba22:	466d      	mov	r5, sp
 800ba24:	f106 0410 	add.w	r4, r6, #16
 800ba28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba30:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ba34:	e885 0003 	stmia.w	r5, {r0, r1}
 800ba38:	1d33      	adds	r3, r6, #4
 800ba3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba3c:	6838      	ldr	r0, [r7, #0]
 800ba3e:	f002 f9e9 	bl	800de14 <USB_DevInit>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e00d      	b.n	800ba70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f002 fbb4 	bl	800e1d6 <USB_DevDisconnect>

  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e267      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d075      	beq.n	800bb82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ba96:	4b88      	ldr	r3, [pc, #544]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f003 030c 	and.w	r3, r3, #12
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d00c      	beq.n	800babc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800baa2:	4b85      	ldr	r3, [pc, #532]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800baaa:	2b08      	cmp	r3, #8
 800baac:	d112      	bne.n	800bad4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800baae:	4b82      	ldr	r3, [pc, #520]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800baba:	d10b      	bne.n	800bad4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800babc:	4b7e      	ldr	r3, [pc, #504]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d05b      	beq.n	800bb80 <HAL_RCC_OscConfig+0x108>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d157      	bne.n	800bb80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e242      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800badc:	d106      	bne.n	800baec <HAL_RCC_OscConfig+0x74>
 800bade:	4b76      	ldr	r3, [pc, #472]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a75      	ldr	r2, [pc, #468]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	e01d      	b.n	800bb28 <HAL_RCC_OscConfig+0xb0>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800baf4:	d10c      	bne.n	800bb10 <HAL_RCC_OscConfig+0x98>
 800baf6:	4b70      	ldr	r3, [pc, #448]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a6f      	ldr	r2, [pc, #444]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bafc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb00:	6013      	str	r3, [r2, #0]
 800bb02:	4b6d      	ldr	r3, [pc, #436]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a6c      	ldr	r2, [pc, #432]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb0c:	6013      	str	r3, [r2, #0]
 800bb0e:	e00b      	b.n	800bb28 <HAL_RCC_OscConfig+0xb0>
 800bb10:	4b69      	ldr	r3, [pc, #420]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a68      	ldr	r2, [pc, #416]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	4b66      	ldr	r3, [pc, #408]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a65      	ldr	r2, [pc, #404]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d013      	beq.n	800bb58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb30:	f7fd fb00 	bl	8009134 <HAL_GetTick>
 800bb34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb36:	e008      	b.n	800bb4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb38:	f7fd fafc 	bl	8009134 <HAL_GetTick>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	2b64      	cmp	r3, #100	; 0x64
 800bb44:	d901      	bls.n	800bb4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e207      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb4a:	4b5b      	ldr	r3, [pc, #364]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0f0      	beq.n	800bb38 <HAL_RCC_OscConfig+0xc0>
 800bb56:	e014      	b.n	800bb82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb58:	f7fd faec 	bl	8009134 <HAL_GetTick>
 800bb5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb5e:	e008      	b.n	800bb72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb60:	f7fd fae8 	bl	8009134 <HAL_GetTick>
 800bb64:	4602      	mov	r2, r0
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b64      	cmp	r3, #100	; 0x64
 800bb6c:	d901      	bls.n	800bb72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e1f3      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb72:	4b51      	ldr	r3, [pc, #324]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1f0      	bne.n	800bb60 <HAL_RCC_OscConfig+0xe8>
 800bb7e:	e000      	b.n	800bb82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 0302 	and.w	r3, r3, #2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d063      	beq.n	800bc56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bb8e:	4b4a      	ldr	r3, [pc, #296]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f003 030c 	and.w	r3, r3, #12
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00b      	beq.n	800bbb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb9a:	4b47      	ldr	r3, [pc, #284]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bba2:	2b08      	cmp	r3, #8
 800bba4:	d11c      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bba6:	4b44      	ldr	r3, [pc, #272]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d116      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbb2:	4b41      	ldr	r3, [pc, #260]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0302 	and.w	r3, r3, #2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d005      	beq.n	800bbca <HAL_RCC_OscConfig+0x152>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d001      	beq.n	800bbca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e1c7      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbca:	4b3b      	ldr	r3, [pc, #236]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	4937      	ldr	r1, [pc, #220]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbde:	e03a      	b.n	800bc56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d020      	beq.n	800bc2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bbe8:	4b34      	ldr	r3, [pc, #208]	; (800bcbc <HAL_RCC_OscConfig+0x244>)
 800bbea:	2201      	movs	r2, #1
 800bbec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbee:	f7fd faa1 	bl	8009134 <HAL_GetTick>
 800bbf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbf4:	e008      	b.n	800bc08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bbf6:	f7fd fa9d 	bl	8009134 <HAL_GetTick>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d901      	bls.n	800bc08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e1a8      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc08:	4b2b      	ldr	r3, [pc, #172]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 0302 	and.w	r3, r3, #2
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0f0      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc14:	4b28      	ldr	r3, [pc, #160]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	4925      	ldr	r1, [pc, #148]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	600b      	str	r3, [r1, #0]
 800bc28:	e015      	b.n	800bc56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc2a:	4b24      	ldr	r3, [pc, #144]	; (800bcbc <HAL_RCC_OscConfig+0x244>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc30:	f7fd fa80 	bl	8009134 <HAL_GetTick>
 800bc34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc36:	e008      	b.n	800bc4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc38:	f7fd fa7c 	bl	8009134 <HAL_GetTick>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d901      	bls.n	800bc4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e187      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc4a:	4b1b      	ldr	r3, [pc, #108]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 0302 	and.w	r3, r3, #2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1f0      	bne.n	800bc38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 0308 	and.w	r3, r3, #8
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d036      	beq.n	800bcd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d016      	beq.n	800bc98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc6a:	4b15      	ldr	r3, [pc, #84]	; (800bcc0 <HAL_RCC_OscConfig+0x248>)
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc70:	f7fd fa60 	bl	8009134 <HAL_GetTick>
 800bc74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc76:	e008      	b.n	800bc8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc78:	f7fd fa5c 	bl	8009134 <HAL_GetTick>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d901      	bls.n	800bc8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bc86:	2303      	movs	r3, #3
 800bc88:	e167      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc8a:	4b0b      	ldr	r3, [pc, #44]	; (800bcb8 <HAL_RCC_OscConfig+0x240>)
 800bc8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d0f0      	beq.n	800bc78 <HAL_RCC_OscConfig+0x200>
 800bc96:	e01b      	b.n	800bcd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc98:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <HAL_RCC_OscConfig+0x248>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bc9e:	f7fd fa49 	bl	8009134 <HAL_GetTick>
 800bca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bca4:	e00e      	b.n	800bcc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bca6:	f7fd fa45 	bl	8009134 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d907      	bls.n	800bcc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	e150      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
 800bcb8:	40023800 	.word	0x40023800
 800bcbc:	42470000 	.word	0x42470000
 800bcc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bcc4:	4b88      	ldr	r3, [pc, #544]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bcc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1ea      	bne.n	800bca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f003 0304 	and.w	r3, r3, #4
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 8097 	beq.w	800be0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bcde:	2300      	movs	r3, #0
 800bce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bce2:	4b81      	ldr	r3, [pc, #516]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10f      	bne.n	800bd0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60bb      	str	r3, [r7, #8]
 800bcf2:	4b7d      	ldr	r3, [pc, #500]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf6:	4a7c      	ldr	r2, [pc, #496]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bcf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcfc:	6413      	str	r3, [r2, #64]	; 0x40
 800bcfe:	4b7a      	ldr	r3, [pc, #488]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd06:	60bb      	str	r3, [r7, #8]
 800bd08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd0e:	4b77      	ldr	r3, [pc, #476]	; (800beec <HAL_RCC_OscConfig+0x474>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d118      	bne.n	800bd4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd1a:	4b74      	ldr	r3, [pc, #464]	; (800beec <HAL_RCC_OscConfig+0x474>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a73      	ldr	r2, [pc, #460]	; (800beec <HAL_RCC_OscConfig+0x474>)
 800bd20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd26:	f7fd fa05 	bl	8009134 <HAL_GetTick>
 800bd2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd2c:	e008      	b.n	800bd40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd2e:	f7fd fa01 	bl	8009134 <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d901      	bls.n	800bd40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e10c      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd40:	4b6a      	ldr	r3, [pc, #424]	; (800beec <HAL_RCC_OscConfig+0x474>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d0f0      	beq.n	800bd2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d106      	bne.n	800bd62 <HAL_RCC_OscConfig+0x2ea>
 800bd54:	4b64      	ldr	r3, [pc, #400]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd58:	4a63      	ldr	r2, [pc, #396]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd5a:	f043 0301 	orr.w	r3, r3, #1
 800bd5e:	6713      	str	r3, [r2, #112]	; 0x70
 800bd60:	e01c      	b.n	800bd9c <HAL_RCC_OscConfig+0x324>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	2b05      	cmp	r3, #5
 800bd68:	d10c      	bne.n	800bd84 <HAL_RCC_OscConfig+0x30c>
 800bd6a:	4b5f      	ldr	r3, [pc, #380]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6e:	4a5e      	ldr	r2, [pc, #376]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd70:	f043 0304 	orr.w	r3, r3, #4
 800bd74:	6713      	str	r3, [r2, #112]	; 0x70
 800bd76:	4b5c      	ldr	r3, [pc, #368]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7a:	4a5b      	ldr	r2, [pc, #364]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd7c:	f043 0301 	orr.w	r3, r3, #1
 800bd80:	6713      	str	r3, [r2, #112]	; 0x70
 800bd82:	e00b      	b.n	800bd9c <HAL_RCC_OscConfig+0x324>
 800bd84:	4b58      	ldr	r3, [pc, #352]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd88:	4a57      	ldr	r2, [pc, #348]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd8a:	f023 0301 	bic.w	r3, r3, #1
 800bd8e:	6713      	str	r3, [r2, #112]	; 0x70
 800bd90:	4b55      	ldr	r3, [pc, #340]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd94:	4a54      	ldr	r2, [pc, #336]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bd96:	f023 0304 	bic.w	r3, r3, #4
 800bd9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d015      	beq.n	800bdd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bda4:	f7fd f9c6 	bl	8009134 <HAL_GetTick>
 800bda8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bdaa:	e00a      	b.n	800bdc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdac:	f7fd f9c2 	bl	8009134 <HAL_GetTick>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d901      	bls.n	800bdc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	e0cb      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bdc2:	4b49      	ldr	r3, [pc, #292]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc6:	f003 0302 	and.w	r3, r3, #2
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d0ee      	beq.n	800bdac <HAL_RCC_OscConfig+0x334>
 800bdce:	e014      	b.n	800bdfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bdd0:	f7fd f9b0 	bl	8009134 <HAL_GetTick>
 800bdd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdd6:	e00a      	b.n	800bdee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdd8:	f7fd f9ac 	bl	8009134 <HAL_GetTick>
 800bddc:	4602      	mov	r2, r0
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d901      	bls.n	800bdee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	e0b5      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdee:	4b3e      	ldr	r3, [pc, #248]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bdf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf2:	f003 0302 	and.w	r3, r3, #2
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1ee      	bne.n	800bdd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d105      	bne.n	800be0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be00:	4b39      	ldr	r3, [pc, #228]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800be02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be04:	4a38      	ldr	r2, [pc, #224]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800be06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 80a1 	beq.w	800bf58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800be16:	4b34      	ldr	r3, [pc, #208]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f003 030c 	and.w	r3, r3, #12
 800be1e:	2b08      	cmp	r3, #8
 800be20:	d05c      	beq.n	800bedc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	2b02      	cmp	r3, #2
 800be28:	d141      	bne.n	800beae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be2a:	4b31      	ldr	r3, [pc, #196]	; (800bef0 <HAL_RCC_OscConfig+0x478>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be30:	f7fd f980 	bl	8009134 <HAL_GetTick>
 800be34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be36:	e008      	b.n	800be4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be38:	f7fd f97c 	bl	8009134 <HAL_GetTick>
 800be3c:	4602      	mov	r2, r0
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	2b02      	cmp	r3, #2
 800be44:	d901      	bls.n	800be4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e087      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be4a:	4b27      	ldr	r3, [pc, #156]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1f0      	bne.n	800be38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	69da      	ldr	r2, [r3, #28]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	019b      	lsls	r3, r3, #6
 800be66:	431a      	orrs	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	3b01      	subs	r3, #1
 800be70:	041b      	lsls	r3, r3, #16
 800be72:	431a      	orrs	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be78:	061b      	lsls	r3, r3, #24
 800be7a:	491b      	ldr	r1, [pc, #108]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800be7c:	4313      	orrs	r3, r2
 800be7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be80:	4b1b      	ldr	r3, [pc, #108]	; (800bef0 <HAL_RCC_OscConfig+0x478>)
 800be82:	2201      	movs	r2, #1
 800be84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be86:	f7fd f955 	bl	8009134 <HAL_GetTick>
 800be8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be8c:	e008      	b.n	800bea0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be8e:	f7fd f951 	bl	8009134 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d901      	bls.n	800bea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e05c      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bea0:	4b11      	ldr	r3, [pc, #68]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d0f0      	beq.n	800be8e <HAL_RCC_OscConfig+0x416>
 800beac:	e054      	b.n	800bf58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800beae:	4b10      	ldr	r3, [pc, #64]	; (800bef0 <HAL_RCC_OscConfig+0x478>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800beb4:	f7fd f93e 	bl	8009134 <HAL_GetTick>
 800beb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800beba:	e008      	b.n	800bece <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bebc:	f7fd f93a 	bl	8009134 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d901      	bls.n	800bece <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	e045      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bece:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <HAL_RCC_OscConfig+0x470>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1f0      	bne.n	800bebc <HAL_RCC_OscConfig+0x444>
 800beda:	e03d      	b.n	800bf58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d107      	bne.n	800bef4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e038      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
 800bee8:	40023800 	.word	0x40023800
 800beec:	40007000 	.word	0x40007000
 800bef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bef4:	4b1b      	ldr	r3, [pc, #108]	; (800bf64 <HAL_RCC_OscConfig+0x4ec>)
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	699b      	ldr	r3, [r3, #24]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d028      	beq.n	800bf54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d121      	bne.n	800bf54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d11a      	bne.n	800bf54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bf24:	4013      	ands	r3, r2
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bf2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d111      	bne.n	800bf54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3a:	085b      	lsrs	r3, r3, #1
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d107      	bne.n	800bf54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d001      	beq.n	800bf58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e000      	b.n	800bf5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	40023800 	.word	0x40023800

0800bf68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e0cc      	b.n	800c116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bf7c:	4b68      	ldr	r3, [pc, #416]	; (800c120 <HAL_RCC_ClockConfig+0x1b8>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 0307 	and.w	r3, r3, #7
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d90c      	bls.n	800bfa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf8a:	4b65      	ldr	r3, [pc, #404]	; (800c120 <HAL_RCC_ClockConfig+0x1b8>)
 800bf8c:	683a      	ldr	r2, [r7, #0]
 800bf8e:	b2d2      	uxtb	r2, r2
 800bf90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf92:	4b63      	ldr	r3, [pc, #396]	; (800c120 <HAL_RCC_ClockConfig+0x1b8>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d001      	beq.n	800bfa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e0b8      	b.n	800c116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0302 	and.w	r3, r3, #2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d020      	beq.n	800bff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0304 	and.w	r3, r3, #4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d005      	beq.n	800bfc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bfbc:	4b59      	ldr	r3, [pc, #356]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	4a58      	ldr	r2, [pc, #352]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800bfc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bfc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0308 	and.w	r3, r3, #8
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d005      	beq.n	800bfe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bfd4:	4b53      	ldr	r3, [pc, #332]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	4a52      	ldr	r2, [pc, #328]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800bfda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bfde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfe0:	4b50      	ldr	r3, [pc, #320]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	494d      	ldr	r1, [pc, #308]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d044      	beq.n	800c088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d107      	bne.n	800c016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c006:	4b47      	ldr	r3, [pc, #284]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d119      	bne.n	800c046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e07f      	b.n	800c116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d003      	beq.n	800c026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c022:	2b03      	cmp	r3, #3
 800c024:	d107      	bne.n	800c036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c026:	4b3f      	ldr	r3, [pc, #252]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d109      	bne.n	800c046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	e06f      	b.n	800c116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c036:	4b3b      	ldr	r3, [pc, #236]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e067      	b.n	800c116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c046:	4b37      	ldr	r3, [pc, #220]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	f023 0203 	bic.w	r2, r3, #3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	4934      	ldr	r1, [pc, #208]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c054:	4313      	orrs	r3, r2
 800c056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c058:	f7fd f86c 	bl	8009134 <HAL_GetTick>
 800c05c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c05e:	e00a      	b.n	800c076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c060:	f7fd f868 	bl	8009134 <HAL_GetTick>
 800c064:	4602      	mov	r2, r0
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c06e:	4293      	cmp	r3, r2
 800c070:	d901      	bls.n	800c076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c072:	2303      	movs	r3, #3
 800c074:	e04f      	b.n	800c116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c076:	4b2b      	ldr	r3, [pc, #172]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	f003 020c 	and.w	r2, r3, #12
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	429a      	cmp	r2, r3
 800c086:	d1eb      	bne.n	800c060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c088:	4b25      	ldr	r3, [pc, #148]	; (800c120 <HAL_RCC_ClockConfig+0x1b8>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0307 	and.w	r3, r3, #7
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	d20c      	bcs.n	800c0b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c096:	4b22      	ldr	r3, [pc, #136]	; (800c120 <HAL_RCC_ClockConfig+0x1b8>)
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	b2d2      	uxtb	r2, r2
 800c09c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c09e:	4b20      	ldr	r3, [pc, #128]	; (800c120 <HAL_RCC_ClockConfig+0x1b8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0307 	and.w	r3, r3, #7
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d001      	beq.n	800c0b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e032      	b.n	800c116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0304 	and.w	r3, r3, #4
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d008      	beq.n	800c0ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c0bc:	4b19      	ldr	r3, [pc, #100]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	4916      	ldr	r1, [pc, #88]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 0308 	and.w	r3, r3, #8
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d009      	beq.n	800c0ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c0da:	4b12      	ldr	r3, [pc, #72]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	490e      	ldr	r1, [pc, #56]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c0ee:	f000 f821 	bl	800c134 <HAL_RCC_GetSysClockFreq>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	4b0b      	ldr	r3, [pc, #44]	; (800c124 <HAL_RCC_ClockConfig+0x1bc>)
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	091b      	lsrs	r3, r3, #4
 800c0fa:	f003 030f 	and.w	r3, r3, #15
 800c0fe:	490a      	ldr	r1, [pc, #40]	; (800c128 <HAL_RCC_ClockConfig+0x1c0>)
 800c100:	5ccb      	ldrb	r3, [r1, r3]
 800c102:	fa22 f303 	lsr.w	r3, r2, r3
 800c106:	4a09      	ldr	r2, [pc, #36]	; (800c12c <HAL_RCC_ClockConfig+0x1c4>)
 800c108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c10a:	4b09      	ldr	r3, [pc, #36]	; (800c130 <HAL_RCC_ClockConfig+0x1c8>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fc ffcc 	bl	80090ac <HAL_InitTick>

  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	40023c00 	.word	0x40023c00
 800c124:	40023800 	.word	0x40023800
 800c128:	08011580 	.word	0x08011580
 800c12c:	2000028c 	.word	0x2000028c
 800c130:	20000324 	.word	0x20000324

0800c134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c138:	b094      	sub	sp, #80	; 0x50
 800c13a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c13c:	2300      	movs	r3, #0
 800c13e:	647b      	str	r3, [r7, #68]	; 0x44
 800c140:	2300      	movs	r3, #0
 800c142:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c144:	2300      	movs	r3, #0
 800c146:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c14c:	4b79      	ldr	r3, [pc, #484]	; (800c334 <HAL_RCC_GetSysClockFreq+0x200>)
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f003 030c 	and.w	r3, r3, #12
 800c154:	2b08      	cmp	r3, #8
 800c156:	d00d      	beq.n	800c174 <HAL_RCC_GetSysClockFreq+0x40>
 800c158:	2b08      	cmp	r3, #8
 800c15a:	f200 80e1 	bhi.w	800c320 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d002      	beq.n	800c168 <HAL_RCC_GetSysClockFreq+0x34>
 800c162:	2b04      	cmp	r3, #4
 800c164:	d003      	beq.n	800c16e <HAL_RCC_GetSysClockFreq+0x3a>
 800c166:	e0db      	b.n	800c320 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c168:	4b73      	ldr	r3, [pc, #460]	; (800c338 <HAL_RCC_GetSysClockFreq+0x204>)
 800c16a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800c16c:	e0db      	b.n	800c326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c16e:	4b72      	ldr	r3, [pc, #456]	; (800c338 <HAL_RCC_GetSysClockFreq+0x204>)
 800c170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c172:	e0d8      	b.n	800c326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c174:	4b6f      	ldr	r3, [pc, #444]	; (800c334 <HAL_RCC_GetSysClockFreq+0x200>)
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c17c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c17e:	4b6d      	ldr	r3, [pc, #436]	; (800c334 <HAL_RCC_GetSysClockFreq+0x200>)
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c186:	2b00      	cmp	r3, #0
 800c188:	d063      	beq.n	800c252 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c18a:	4b6a      	ldr	r3, [pc, #424]	; (800c334 <HAL_RCC_GetSysClockFreq+0x200>)
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	099b      	lsrs	r3, r3, #6
 800c190:	2200      	movs	r2, #0
 800c192:	63bb      	str	r3, [r7, #56]	; 0x38
 800c194:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19c:	633b      	str	r3, [r7, #48]	; 0x30
 800c19e:	2300      	movs	r3, #0
 800c1a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c1a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	f04f 0000 	mov.w	r0, #0
 800c1ae:	f04f 0100 	mov.w	r1, #0
 800c1b2:	0159      	lsls	r1, r3, #5
 800c1b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c1b8:	0150      	lsls	r0, r2, #5
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4621      	mov	r1, r4
 800c1c0:	1a51      	subs	r1, r2, r1
 800c1c2:	6139      	str	r1, [r7, #16]
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	eb63 0301 	sbc.w	r3, r3, r1
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	f04f 0200 	mov.w	r2, #0
 800c1d0:	f04f 0300 	mov.w	r3, #0
 800c1d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c1d8:	4659      	mov	r1, fp
 800c1da:	018b      	lsls	r3, r1, #6
 800c1dc:	4651      	mov	r1, sl
 800c1de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c1e2:	4651      	mov	r1, sl
 800c1e4:	018a      	lsls	r2, r1, #6
 800c1e6:	4651      	mov	r1, sl
 800c1e8:	ebb2 0801 	subs.w	r8, r2, r1
 800c1ec:	4659      	mov	r1, fp
 800c1ee:	eb63 0901 	sbc.w	r9, r3, r1
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	f04f 0300 	mov.w	r3, #0
 800c1fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c206:	4690      	mov	r8, r2
 800c208:	4699      	mov	r9, r3
 800c20a:	4623      	mov	r3, r4
 800c20c:	eb18 0303 	adds.w	r3, r8, r3
 800c210:	60bb      	str	r3, [r7, #8]
 800c212:	462b      	mov	r3, r5
 800c214:	eb49 0303 	adc.w	r3, r9, r3
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	f04f 0200 	mov.w	r2, #0
 800c21e:	f04f 0300 	mov.w	r3, #0
 800c222:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c226:	4629      	mov	r1, r5
 800c228:	028b      	lsls	r3, r1, #10
 800c22a:	4621      	mov	r1, r4
 800c22c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c230:	4621      	mov	r1, r4
 800c232:	028a      	lsls	r2, r1, #10
 800c234:	4610      	mov	r0, r2
 800c236:	4619      	mov	r1, r3
 800c238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c23a:	2200      	movs	r2, #0
 800c23c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c23e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c240:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c244:	f7f4 fd20 	bl	8000c88 <__aeabi_uldivmod>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4613      	mov	r3, r2
 800c24e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c250:	e058      	b.n	800c304 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c252:	4b38      	ldr	r3, [pc, #224]	; (800c334 <HAL_RCC_GetSysClockFreq+0x200>)
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	099b      	lsrs	r3, r3, #6
 800c258:	2200      	movs	r2, #0
 800c25a:	4618      	mov	r0, r3
 800c25c:	4611      	mov	r1, r2
 800c25e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c262:	623b      	str	r3, [r7, #32]
 800c264:	2300      	movs	r3, #0
 800c266:	627b      	str	r3, [r7, #36]	; 0x24
 800c268:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c26c:	4642      	mov	r2, r8
 800c26e:	464b      	mov	r3, r9
 800c270:	f04f 0000 	mov.w	r0, #0
 800c274:	f04f 0100 	mov.w	r1, #0
 800c278:	0159      	lsls	r1, r3, #5
 800c27a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c27e:	0150      	lsls	r0, r2, #5
 800c280:	4602      	mov	r2, r0
 800c282:	460b      	mov	r3, r1
 800c284:	4641      	mov	r1, r8
 800c286:	ebb2 0a01 	subs.w	sl, r2, r1
 800c28a:	4649      	mov	r1, r9
 800c28c:	eb63 0b01 	sbc.w	fp, r3, r1
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	f04f 0300 	mov.w	r3, #0
 800c298:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c29c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c2a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c2a4:	ebb2 040a 	subs.w	r4, r2, sl
 800c2a8:	eb63 050b 	sbc.w	r5, r3, fp
 800c2ac:	f04f 0200 	mov.w	r2, #0
 800c2b0:	f04f 0300 	mov.w	r3, #0
 800c2b4:	00eb      	lsls	r3, r5, #3
 800c2b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c2ba:	00e2      	lsls	r2, r4, #3
 800c2bc:	4614      	mov	r4, r2
 800c2be:	461d      	mov	r5, r3
 800c2c0:	4643      	mov	r3, r8
 800c2c2:	18e3      	adds	r3, r4, r3
 800c2c4:	603b      	str	r3, [r7, #0]
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	eb45 0303 	adc.w	r3, r5, r3
 800c2cc:	607b      	str	r3, [r7, #4]
 800c2ce:	f04f 0200 	mov.w	r2, #0
 800c2d2:	f04f 0300 	mov.w	r3, #0
 800c2d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c2da:	4629      	mov	r1, r5
 800c2dc:	028b      	lsls	r3, r1, #10
 800c2de:	4621      	mov	r1, r4
 800c2e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	028a      	lsls	r2, r1, #10
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	61bb      	str	r3, [r7, #24]
 800c2f2:	61fa      	str	r2, [r7, #28]
 800c2f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c2f8:	f7f4 fcc6 	bl	8000c88 <__aeabi_uldivmod>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4613      	mov	r3, r2
 800c302:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c304:	4b0b      	ldr	r3, [pc, #44]	; (800c334 <HAL_RCC_GetSysClockFreq+0x200>)
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	0c1b      	lsrs	r3, r3, #16
 800c30a:	f003 0303 	and.w	r3, r3, #3
 800c30e:	3301      	adds	r3, #1
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c318:	fbb2 f3f3 	udiv	r3, r2, r3
 800c31c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c31e:	e002      	b.n	800c326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c320:	4b05      	ldr	r3, [pc, #20]	; (800c338 <HAL_RCC_GetSysClockFreq+0x204>)
 800c322:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c324:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3750      	adds	r7, #80	; 0x50
 800c32c:	46bd      	mov	sp, r7
 800c32e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c332:	bf00      	nop
 800c334:	40023800 	.word	0x40023800
 800c338:	00f42400 	.word	0x00f42400

0800c33c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c340:	4b03      	ldr	r3, [pc, #12]	; (800c350 <HAL_RCC_GetHCLKFreq+0x14>)
 800c342:	681b      	ldr	r3, [r3, #0]
}
 800c344:	4618      	mov	r0, r3
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	2000028c 	.word	0x2000028c

0800c354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c358:	f7ff fff0 	bl	800c33c <HAL_RCC_GetHCLKFreq>
 800c35c:	4602      	mov	r2, r0
 800c35e:	4b05      	ldr	r3, [pc, #20]	; (800c374 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	0a9b      	lsrs	r3, r3, #10
 800c364:	f003 0307 	and.w	r3, r3, #7
 800c368:	4903      	ldr	r1, [pc, #12]	; (800c378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c36a:	5ccb      	ldrb	r3, [r1, r3]
 800c36c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c370:	4618      	mov	r0, r3
 800c372:	bd80      	pop	{r7, pc}
 800c374:	40023800 	.word	0x40023800
 800c378:	08011590 	.word	0x08011590

0800c37c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c380:	f7ff ffdc 	bl	800c33c <HAL_RCC_GetHCLKFreq>
 800c384:	4602      	mov	r2, r0
 800c386:	4b05      	ldr	r3, [pc, #20]	; (800c39c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	0b5b      	lsrs	r3, r3, #13
 800c38c:	f003 0307 	and.w	r3, r3, #7
 800c390:	4903      	ldr	r1, [pc, #12]	; (800c3a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c392:	5ccb      	ldrb	r3, [r1, r3]
 800c394:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c398:	4618      	mov	r0, r3
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	40023800 	.word	0x40023800
 800c3a0:	08011590 	.word	0x08011590

0800c3a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e041      	b.n	800c43a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d106      	bne.n	800c3d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7f9 fc22 	bl	8005c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	f000 fda4 	bl	800cf30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
	...

0800c444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b01      	cmp	r3, #1
 800c456:	d001      	beq.n	800c45c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e04e      	b.n	800c4fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2202      	movs	r2, #2
 800c460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68da      	ldr	r2, [r3, #12]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f042 0201 	orr.w	r2, r2, #1
 800c472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a23      	ldr	r2, [pc, #140]	; (800c508 <HAL_TIM_Base_Start_IT+0xc4>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d022      	beq.n	800c4c4 <HAL_TIM_Base_Start_IT+0x80>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c486:	d01d      	beq.n	800c4c4 <HAL_TIM_Base_Start_IT+0x80>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a1f      	ldr	r2, [pc, #124]	; (800c50c <HAL_TIM_Base_Start_IT+0xc8>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d018      	beq.n	800c4c4 <HAL_TIM_Base_Start_IT+0x80>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a1e      	ldr	r2, [pc, #120]	; (800c510 <HAL_TIM_Base_Start_IT+0xcc>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d013      	beq.n	800c4c4 <HAL_TIM_Base_Start_IT+0x80>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a1c      	ldr	r2, [pc, #112]	; (800c514 <HAL_TIM_Base_Start_IT+0xd0>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00e      	beq.n	800c4c4 <HAL_TIM_Base_Start_IT+0x80>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a1b      	ldr	r2, [pc, #108]	; (800c518 <HAL_TIM_Base_Start_IT+0xd4>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d009      	beq.n	800c4c4 <HAL_TIM_Base_Start_IT+0x80>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a19      	ldr	r2, [pc, #100]	; (800c51c <HAL_TIM_Base_Start_IT+0xd8>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d004      	beq.n	800c4c4 <HAL_TIM_Base_Start_IT+0x80>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a18      	ldr	r2, [pc, #96]	; (800c520 <HAL_TIM_Base_Start_IT+0xdc>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d111      	bne.n	800c4e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f003 0307 	and.w	r3, r3, #7
 800c4ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2b06      	cmp	r3, #6
 800c4d4:	d010      	beq.n	800c4f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f042 0201 	orr.w	r2, r2, #1
 800c4e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e6:	e007      	b.n	800c4f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f042 0201 	orr.w	r2, r2, #1
 800c4f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	40010000 	.word	0x40010000
 800c50c:	40000400 	.word	0x40000400
 800c510:	40000800 	.word	0x40000800
 800c514:	40000c00 	.word	0x40000c00
 800c518:	40010400 	.word	0x40010400
 800c51c:	40014000 	.word	0x40014000
 800c520:	40001800 	.word	0x40001800

0800c524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	e041      	b.n	800c5ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7f9 fc3a 	bl	8005dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2202      	movs	r2, #2
 800c554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	3304      	adds	r3, #4
 800c560:	4619      	mov	r1, r3
 800c562:	4610      	mov	r0, r2
 800c564:	f000 fce4 	bl	800cf30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
	...

0800c5c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d109      	bne.n	800c5e8 <HAL_TIM_PWM_Start+0x24>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	bf14      	ite	ne
 800c5e0:	2301      	movne	r3, #1
 800c5e2:	2300      	moveq	r3, #0
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	e022      	b.n	800c62e <HAL_TIM_PWM_Start+0x6a>
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	2b04      	cmp	r3, #4
 800c5ec:	d109      	bne.n	800c602 <HAL_TIM_PWM_Start+0x3e>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	bf14      	ite	ne
 800c5fa:	2301      	movne	r3, #1
 800c5fc:	2300      	moveq	r3, #0
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	e015      	b.n	800c62e <HAL_TIM_PWM_Start+0x6a>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b08      	cmp	r3, #8
 800c606:	d109      	bne.n	800c61c <HAL_TIM_PWM_Start+0x58>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	bf14      	ite	ne
 800c614:	2301      	movne	r3, #1
 800c616:	2300      	moveq	r3, #0
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	e008      	b.n	800c62e <HAL_TIM_PWM_Start+0x6a>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b01      	cmp	r3, #1
 800c626:	bf14      	ite	ne
 800c628:	2301      	movne	r3, #1
 800c62a:	2300      	moveq	r3, #0
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e07c      	b.n	800c730 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d104      	bne.n	800c646 <HAL_TIM_PWM_Start+0x82>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2202      	movs	r2, #2
 800c640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c644:	e013      	b.n	800c66e <HAL_TIM_PWM_Start+0xaa>
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	2b04      	cmp	r3, #4
 800c64a:	d104      	bne.n	800c656 <HAL_TIM_PWM_Start+0x92>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c654:	e00b      	b.n	800c66e <HAL_TIM_PWM_Start+0xaa>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2b08      	cmp	r3, #8
 800c65a:	d104      	bne.n	800c666 <HAL_TIM_PWM_Start+0xa2>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2202      	movs	r2, #2
 800c660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c664:	e003      	b.n	800c66e <HAL_TIM_PWM_Start+0xaa>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2202      	movs	r2, #2
 800c66a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2201      	movs	r2, #1
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	4618      	mov	r0, r3
 800c678:	f000 ff44 	bl	800d504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a2d      	ldr	r2, [pc, #180]	; (800c738 <HAL_TIM_PWM_Start+0x174>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d004      	beq.n	800c690 <HAL_TIM_PWM_Start+0xcc>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a2c      	ldr	r2, [pc, #176]	; (800c73c <HAL_TIM_PWM_Start+0x178>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d101      	bne.n	800c694 <HAL_TIM_PWM_Start+0xd0>
 800c690:	2301      	movs	r3, #1
 800c692:	e000      	b.n	800c696 <HAL_TIM_PWM_Start+0xd2>
 800c694:	2300      	movs	r3, #0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d007      	beq.n	800c6aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a22      	ldr	r2, [pc, #136]	; (800c738 <HAL_TIM_PWM_Start+0x174>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d022      	beq.n	800c6fa <HAL_TIM_PWM_Start+0x136>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6bc:	d01d      	beq.n	800c6fa <HAL_TIM_PWM_Start+0x136>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a1f      	ldr	r2, [pc, #124]	; (800c740 <HAL_TIM_PWM_Start+0x17c>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d018      	beq.n	800c6fa <HAL_TIM_PWM_Start+0x136>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a1d      	ldr	r2, [pc, #116]	; (800c744 <HAL_TIM_PWM_Start+0x180>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d013      	beq.n	800c6fa <HAL_TIM_PWM_Start+0x136>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a1c      	ldr	r2, [pc, #112]	; (800c748 <HAL_TIM_PWM_Start+0x184>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d00e      	beq.n	800c6fa <HAL_TIM_PWM_Start+0x136>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a16      	ldr	r2, [pc, #88]	; (800c73c <HAL_TIM_PWM_Start+0x178>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d009      	beq.n	800c6fa <HAL_TIM_PWM_Start+0x136>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a18      	ldr	r2, [pc, #96]	; (800c74c <HAL_TIM_PWM_Start+0x188>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d004      	beq.n	800c6fa <HAL_TIM_PWM_Start+0x136>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a16      	ldr	r2, [pc, #88]	; (800c750 <HAL_TIM_PWM_Start+0x18c>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d111      	bne.n	800c71e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f003 0307 	and.w	r3, r3, #7
 800c704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b06      	cmp	r3, #6
 800c70a:	d010      	beq.n	800c72e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f042 0201 	orr.w	r2, r2, #1
 800c71a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c71c:	e007      	b.n	800c72e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0201 	orr.w	r2, r2, #1
 800c72c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	40010000 	.word	0x40010000
 800c73c:	40010400 	.word	0x40010400
 800c740:	40000400 	.word	0x40000400
 800c744:	40000800 	.word	0x40000800
 800c748:	40000c00 	.word	0x40000c00
 800c74c:	40014000 	.word	0x40014000
 800c750:	40001800 	.word	0x40001800

0800c754 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d101      	bne.n	800c768 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	e097      	b.n	800c898 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d106      	bne.n	800c782 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f7f9 fa87 	bl	8005c90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2202      	movs	r2, #2
 800c786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	6812      	ldr	r2, [r2, #0]
 800c794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c798:	f023 0307 	bic.w	r3, r3, #7
 800c79c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	f000 fbc1 	bl	800cf30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	699b      	ldr	r3, [r3, #24]
 800c7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	6a1b      	ldr	r3, [r3, #32]
 800c7c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7d6:	f023 0303 	bic.w	r3, r3, #3
 800c7da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	689a      	ldr	r2, [r3, #8]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	021b      	lsls	r3, r3, #8
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c7f4:	f023 030c 	bic.w	r3, r3, #12
 800c7f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c800:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	68da      	ldr	r2, [r3, #12]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	021b      	lsls	r3, r3, #8
 800c810:	4313      	orrs	r3, r2
 800c812:	693a      	ldr	r2, [r7, #16]
 800c814:	4313      	orrs	r3, r2
 800c816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	011a      	lsls	r2, r3, #4
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	031b      	lsls	r3, r3, #12
 800c824:	4313      	orrs	r3, r2
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	4313      	orrs	r3, r2
 800c82a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c832:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c83a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	011b      	lsls	r3, r3, #4
 800c846:	4313      	orrs	r3, r2
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c8b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c8c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d110      	bne.n	800c8f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d102      	bne.n	800c8dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c8d6:	7b7b      	ldrb	r3, [r7, #13]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d001      	beq.n	800c8e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e069      	b.n	800c9b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2202      	movs	r2, #2
 800c8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8f0:	e031      	b.n	800c956 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b04      	cmp	r3, #4
 800c8f6:	d110      	bne.n	800c91a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8f8:	7bbb      	ldrb	r3, [r7, #14]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d102      	bne.n	800c904 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c8fe:	7b3b      	ldrb	r3, [r7, #12]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d001      	beq.n	800c908 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e055      	b.n	800c9b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2202      	movs	r2, #2
 800c90c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2202      	movs	r2, #2
 800c914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c918:	e01d      	b.n	800c956 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d108      	bne.n	800c932 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c920:	7bbb      	ldrb	r3, [r7, #14]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d105      	bne.n	800c932 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c926:	7b7b      	ldrb	r3, [r7, #13]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d102      	bne.n	800c932 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c92c:	7b3b      	ldrb	r3, [r7, #12]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d001      	beq.n	800c936 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	e03e      	b.n	800c9b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2202      	movs	r2, #2
 800c93a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2202      	movs	r2, #2
 800c942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2202      	movs	r2, #2
 800c94a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2202      	movs	r2, #2
 800c952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d003      	beq.n	800c964 <HAL_TIM_Encoder_Start+0xc4>
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b04      	cmp	r3, #4
 800c960:	d008      	beq.n	800c974 <HAL_TIM_Encoder_Start+0xd4>
 800c962:	e00f      	b.n	800c984 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2201      	movs	r2, #1
 800c96a:	2100      	movs	r1, #0
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fdc9 	bl	800d504 <TIM_CCxChannelCmd>
      break;
 800c972:	e016      	b.n	800c9a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2201      	movs	r2, #1
 800c97a:	2104      	movs	r1, #4
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 fdc1 	bl	800d504 <TIM_CCxChannelCmd>
      break;
 800c982:	e00e      	b.n	800c9a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2201      	movs	r2, #1
 800c98a:	2100      	movs	r1, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 fdb9 	bl	800d504 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2201      	movs	r2, #1
 800c998:	2104      	movs	r1, #4
 800c99a:	4618      	mov	r0, r3
 800c99c:	f000 fdb2 	bl	800d504 <TIM_CCxChannelCmd>
      break;
 800c9a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f042 0201 	orr.w	r2, r2, #1
 800c9b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c9b2:	2300      	movs	r3, #0
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d122      	bne.n	800ca18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	f003 0302 	and.w	r3, r3, #2
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d11b      	bne.n	800ca18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f06f 0202 	mvn.w	r2, #2
 800c9e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	f003 0303 	and.w	r3, r3, #3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d003      	beq.n	800ca06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fa77 	bl	800cef2 <HAL_TIM_IC_CaptureCallback>
 800ca04:	e005      	b.n	800ca12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa69 	bl	800cede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fa7a 	bl	800cf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	f003 0304 	and.w	r3, r3, #4
 800ca22:	2b04      	cmp	r3, #4
 800ca24:	d122      	bne.n	800ca6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	f003 0304 	and.w	r3, r3, #4
 800ca30:	2b04      	cmp	r3, #4
 800ca32:	d11b      	bne.n	800ca6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f06f 0204 	mvn.w	r2, #4
 800ca3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2202      	movs	r2, #2
 800ca42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d003      	beq.n	800ca5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fa4d 	bl	800cef2 <HAL_TIM_IC_CaptureCallback>
 800ca58:	e005      	b.n	800ca66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fa3f 	bl	800cede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 fa50 	bl	800cf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	f003 0308 	and.w	r3, r3, #8
 800ca76:	2b08      	cmp	r3, #8
 800ca78:	d122      	bne.n	800cac0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	f003 0308 	and.w	r3, r3, #8
 800ca84:	2b08      	cmp	r3, #8
 800ca86:	d11b      	bne.n	800cac0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f06f 0208 	mvn.w	r2, #8
 800ca90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2204      	movs	r2, #4
 800ca96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	f003 0303 	and.w	r3, r3, #3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d003      	beq.n	800caae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fa23 	bl	800cef2 <HAL_TIM_IC_CaptureCallback>
 800caac:	e005      	b.n	800caba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fa15 	bl	800cede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fa26 	bl	800cf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2200      	movs	r2, #0
 800cabe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	f003 0310 	and.w	r3, r3, #16
 800caca:	2b10      	cmp	r3, #16
 800cacc:	d122      	bne.n	800cb14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	f003 0310 	and.w	r3, r3, #16
 800cad8:	2b10      	cmp	r3, #16
 800cada:	d11b      	bne.n	800cb14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f06f 0210 	mvn.w	r2, #16
 800cae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2208      	movs	r2, #8
 800caea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f9f9 	bl	800cef2 <HAL_TIM_IC_CaptureCallback>
 800cb00:	e005      	b.n	800cb0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f9eb 	bl	800cede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f9fc 	bl	800cf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	f003 0301 	and.w	r3, r3, #1
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d10e      	bne.n	800cb40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	f003 0301 	and.w	r3, r3, #1
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d107      	bne.n	800cb40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f06f 0201 	mvn.w	r2, #1
 800cb38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7f5 fbaa 	bl	8002294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb4a:	2b80      	cmp	r3, #128	; 0x80
 800cb4c:	d10e      	bne.n	800cb6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb58:	2b80      	cmp	r3, #128	; 0x80
 800cb5a:	d107      	bne.n	800cb6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fdca 	bl	800d700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	691b      	ldr	r3, [r3, #16]
 800cb72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb76:	2b40      	cmp	r3, #64	; 0x40
 800cb78:	d10e      	bne.n	800cb98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb84:	2b40      	cmp	r3, #64	; 0x40
 800cb86:	d107      	bne.n	800cb98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f9c1 	bl	800cf1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	f003 0320 	and.w	r3, r3, #32
 800cba2:	2b20      	cmp	r3, #32
 800cba4:	d10e      	bne.n	800cbc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	f003 0320 	and.w	r3, r3, #32
 800cbb0:	2b20      	cmp	r3, #32
 800cbb2:	d107      	bne.n	800cbc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f06f 0220 	mvn.w	r2, #32
 800cbbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fd94 	bl	800d6ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d101      	bne.n	800cbea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	e0ae      	b.n	800cd48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2201      	movs	r2, #1
 800cbee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b0c      	cmp	r3, #12
 800cbf6:	f200 809f 	bhi.w	800cd38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cbfa:	a201      	add	r2, pc, #4	; (adr r2, 800cc00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc00:	0800cc35 	.word	0x0800cc35
 800cc04:	0800cd39 	.word	0x0800cd39
 800cc08:	0800cd39 	.word	0x0800cd39
 800cc0c:	0800cd39 	.word	0x0800cd39
 800cc10:	0800cc75 	.word	0x0800cc75
 800cc14:	0800cd39 	.word	0x0800cd39
 800cc18:	0800cd39 	.word	0x0800cd39
 800cc1c:	0800cd39 	.word	0x0800cd39
 800cc20:	0800ccb7 	.word	0x0800ccb7
 800cc24:	0800cd39 	.word	0x0800cd39
 800cc28:	0800cd39 	.word	0x0800cd39
 800cc2c:	0800cd39 	.word	0x0800cd39
 800cc30:	0800ccf7 	.word	0x0800ccf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	68b9      	ldr	r1, [r7, #8]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 fa18 	bl	800d070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	699a      	ldr	r2, [r3, #24]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f042 0208 	orr.w	r2, r2, #8
 800cc4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	699a      	ldr	r2, [r3, #24]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f022 0204 	bic.w	r2, r2, #4
 800cc5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6999      	ldr	r1, [r3, #24]
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	691a      	ldr	r2, [r3, #16]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	619a      	str	r2, [r3, #24]
      break;
 800cc72:	e064      	b.n	800cd3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 fa68 	bl	800d150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	699a      	ldr	r2, [r3, #24]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	699a      	ldr	r2, [r3, #24]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6999      	ldr	r1, [r3, #24]
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	021a      	lsls	r2, r3, #8
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	619a      	str	r2, [r3, #24]
      break;
 800ccb4:	e043      	b.n	800cd3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68b9      	ldr	r1, [r7, #8]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 fabd 	bl	800d23c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	69da      	ldr	r2, [r3, #28]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f042 0208 	orr.w	r2, r2, #8
 800ccd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	69da      	ldr	r2, [r3, #28]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f022 0204 	bic.w	r2, r2, #4
 800cce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	69d9      	ldr	r1, [r3, #28]
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	691a      	ldr	r2, [r3, #16]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	430a      	orrs	r2, r1
 800ccf2:	61da      	str	r2, [r3, #28]
      break;
 800ccf4:	e023      	b.n	800cd3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68b9      	ldr	r1, [r7, #8]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 fb11 	bl	800d324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	69da      	ldr	r2, [r3, #28]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	69da      	ldr	r2, [r3, #28]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	69d9      	ldr	r1, [r3, #28]
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	021a      	lsls	r2, r3, #8
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	430a      	orrs	r2, r1
 800cd34:	61da      	str	r2, [r3, #28]
      break;
 800cd36:	e002      	b.n	800cd3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	75fb      	strb	r3, [r7, #23]
      break;
 800cd3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3718      	adds	r7, #24
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d101      	bne.n	800cd6c <HAL_TIM_ConfigClockSource+0x1c>
 800cd68:	2302      	movs	r3, #2
 800cd6a:	e0b4      	b.n	800ced6 <HAL_TIM_ConfigClockSource+0x186>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2202      	movs	r2, #2
 800cd78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cd8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cda4:	d03e      	beq.n	800ce24 <HAL_TIM_ConfigClockSource+0xd4>
 800cda6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdaa:	f200 8087 	bhi.w	800cebc <HAL_TIM_ConfigClockSource+0x16c>
 800cdae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdb2:	f000 8086 	beq.w	800cec2 <HAL_TIM_ConfigClockSource+0x172>
 800cdb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdba:	d87f      	bhi.n	800cebc <HAL_TIM_ConfigClockSource+0x16c>
 800cdbc:	2b70      	cmp	r3, #112	; 0x70
 800cdbe:	d01a      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0xa6>
 800cdc0:	2b70      	cmp	r3, #112	; 0x70
 800cdc2:	d87b      	bhi.n	800cebc <HAL_TIM_ConfigClockSource+0x16c>
 800cdc4:	2b60      	cmp	r3, #96	; 0x60
 800cdc6:	d050      	beq.n	800ce6a <HAL_TIM_ConfigClockSource+0x11a>
 800cdc8:	2b60      	cmp	r3, #96	; 0x60
 800cdca:	d877      	bhi.n	800cebc <HAL_TIM_ConfigClockSource+0x16c>
 800cdcc:	2b50      	cmp	r3, #80	; 0x50
 800cdce:	d03c      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0xfa>
 800cdd0:	2b50      	cmp	r3, #80	; 0x50
 800cdd2:	d873      	bhi.n	800cebc <HAL_TIM_ConfigClockSource+0x16c>
 800cdd4:	2b40      	cmp	r3, #64	; 0x40
 800cdd6:	d058      	beq.n	800ce8a <HAL_TIM_ConfigClockSource+0x13a>
 800cdd8:	2b40      	cmp	r3, #64	; 0x40
 800cdda:	d86f      	bhi.n	800cebc <HAL_TIM_ConfigClockSource+0x16c>
 800cddc:	2b30      	cmp	r3, #48	; 0x30
 800cdde:	d064      	beq.n	800ceaa <HAL_TIM_ConfigClockSource+0x15a>
 800cde0:	2b30      	cmp	r3, #48	; 0x30
 800cde2:	d86b      	bhi.n	800cebc <HAL_TIM_ConfigClockSource+0x16c>
 800cde4:	2b20      	cmp	r3, #32
 800cde6:	d060      	beq.n	800ceaa <HAL_TIM_ConfigClockSource+0x15a>
 800cde8:	2b20      	cmp	r3, #32
 800cdea:	d867      	bhi.n	800cebc <HAL_TIM_ConfigClockSource+0x16c>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d05c      	beq.n	800ceaa <HAL_TIM_ConfigClockSource+0x15a>
 800cdf0:	2b10      	cmp	r3, #16
 800cdf2:	d05a      	beq.n	800ceaa <HAL_TIM_ConfigClockSource+0x15a>
 800cdf4:	e062      	b.n	800cebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6818      	ldr	r0, [r3, #0]
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	6899      	ldr	r1, [r3, #8]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	f000 fb5d 	bl	800d4c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	609a      	str	r2, [r3, #8]
      break;
 800ce22:	e04f      	b.n	800cec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	6899      	ldr	r1, [r3, #8]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	f000 fb46 	bl	800d4c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	689a      	ldr	r2, [r3, #8]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce46:	609a      	str	r2, [r3, #8]
      break;
 800ce48:	e03c      	b.n	800cec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6818      	ldr	r0, [r3, #0]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	6859      	ldr	r1, [r3, #4]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	461a      	mov	r2, r3
 800ce58:	f000 faba 	bl	800d3d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2150      	movs	r1, #80	; 0x50
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 fb13 	bl	800d48e <TIM_ITRx_SetConfig>
      break;
 800ce68:	e02c      	b.n	800cec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	6859      	ldr	r1, [r3, #4]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	461a      	mov	r2, r3
 800ce78:	f000 fad9 	bl	800d42e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2160      	movs	r1, #96	; 0x60
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fb03 	bl	800d48e <TIM_ITRx_SetConfig>
      break;
 800ce88:	e01c      	b.n	800cec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	6859      	ldr	r1, [r3, #4]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	461a      	mov	r2, r3
 800ce98:	f000 fa9a 	bl	800d3d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2140      	movs	r1, #64	; 0x40
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 faf3 	bl	800d48e <TIM_ITRx_SetConfig>
      break;
 800cea8:	e00c      	b.n	800cec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f000 faea 	bl	800d48e <TIM_ITRx_SetConfig>
      break;
 800ceba:	e003      	b.n	800cec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	73fb      	strb	r3, [r7, #15]
      break;
 800cec0:	e000      	b.n	800cec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cede:	b480      	push	{r7}
 800cee0:	b083      	sub	sp, #12
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cee6:	bf00      	nop
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cef2:	b480      	push	{r7}
 800cef4:	b083      	sub	sp, #12
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cefa:	bf00      	nop
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf0e:	bf00      	nop
 800cf10:	370c      	adds	r7, #12
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr

0800cf1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf1a:	b480      	push	{r7}
 800cf1c:	b083      	sub	sp, #12
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf22:	bf00      	nop
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
	...

0800cf30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a40      	ldr	r2, [pc, #256]	; (800d044 <TIM_Base_SetConfig+0x114>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d013      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf4e:	d00f      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a3d      	ldr	r2, [pc, #244]	; (800d048 <TIM_Base_SetConfig+0x118>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d00b      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a3c      	ldr	r2, [pc, #240]	; (800d04c <TIM_Base_SetConfig+0x11c>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d007      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a3b      	ldr	r2, [pc, #236]	; (800d050 <TIM_Base_SetConfig+0x120>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d003      	beq.n	800cf70 <TIM_Base_SetConfig+0x40>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a3a      	ldr	r2, [pc, #232]	; (800d054 <TIM_Base_SetConfig+0x124>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d108      	bne.n	800cf82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a2f      	ldr	r2, [pc, #188]	; (800d044 <TIM_Base_SetConfig+0x114>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d02b      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf90:	d027      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a2c      	ldr	r2, [pc, #176]	; (800d048 <TIM_Base_SetConfig+0x118>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d023      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a2b      	ldr	r2, [pc, #172]	; (800d04c <TIM_Base_SetConfig+0x11c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d01f      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a2a      	ldr	r2, [pc, #168]	; (800d050 <TIM_Base_SetConfig+0x120>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d01b      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4a29      	ldr	r2, [pc, #164]	; (800d054 <TIM_Base_SetConfig+0x124>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d017      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4a28      	ldr	r2, [pc, #160]	; (800d058 <TIM_Base_SetConfig+0x128>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d013      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4a27      	ldr	r2, [pc, #156]	; (800d05c <TIM_Base_SetConfig+0x12c>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d00f      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4a26      	ldr	r2, [pc, #152]	; (800d060 <TIM_Base_SetConfig+0x130>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d00b      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4a25      	ldr	r2, [pc, #148]	; (800d064 <TIM_Base_SetConfig+0x134>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d007      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a24      	ldr	r2, [pc, #144]	; (800d068 <TIM_Base_SetConfig+0x138>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d003      	beq.n	800cfe2 <TIM_Base_SetConfig+0xb2>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4a23      	ldr	r2, [pc, #140]	; (800d06c <TIM_Base_SetConfig+0x13c>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d108      	bne.n	800cff4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	695b      	ldr	r3, [r3, #20]
 800cffe:	4313      	orrs	r3, r2
 800d000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	689a      	ldr	r2, [r3, #8]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a0a      	ldr	r2, [pc, #40]	; (800d044 <TIM_Base_SetConfig+0x114>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d003      	beq.n	800d028 <TIM_Base_SetConfig+0xf8>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a0c      	ldr	r2, [pc, #48]	; (800d054 <TIM_Base_SetConfig+0x124>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d103      	bne.n	800d030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	691a      	ldr	r2, [r3, #16]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	615a      	str	r2, [r3, #20]
}
 800d036:	bf00      	nop
 800d038:	3714      	adds	r7, #20
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	40010000 	.word	0x40010000
 800d048:	40000400 	.word	0x40000400
 800d04c:	40000800 	.word	0x40000800
 800d050:	40000c00 	.word	0x40000c00
 800d054:	40010400 	.word	0x40010400
 800d058:	40014000 	.word	0x40014000
 800d05c:	40014400 	.word	0x40014400
 800d060:	40014800 	.word	0x40014800
 800d064:	40001800 	.word	0x40001800
 800d068:	40001c00 	.word	0x40001c00
 800d06c:	40002000 	.word	0x40002000

0800d070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d070:	b480      	push	{r7}
 800d072:	b087      	sub	sp, #28
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	f023 0201 	bic.w	r2, r3, #1
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f023 0303 	bic.w	r3, r3, #3
 800d0a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f023 0302 	bic.w	r3, r3, #2
 800d0b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4a20      	ldr	r2, [pc, #128]	; (800d148 <TIM_OC1_SetConfig+0xd8>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d003      	beq.n	800d0d4 <TIM_OC1_SetConfig+0x64>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a1f      	ldr	r2, [pc, #124]	; (800d14c <TIM_OC1_SetConfig+0xdc>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d10c      	bne.n	800d0ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	f023 0308 	bic.w	r3, r3, #8
 800d0da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	697a      	ldr	r2, [r7, #20]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	f023 0304 	bic.w	r3, r3, #4
 800d0ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a15      	ldr	r2, [pc, #84]	; (800d148 <TIM_OC1_SetConfig+0xd8>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d003      	beq.n	800d0fe <TIM_OC1_SetConfig+0x8e>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a14      	ldr	r2, [pc, #80]	; (800d14c <TIM_OC1_SetConfig+0xdc>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d111      	bne.n	800d122 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d10c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	693a      	ldr	r2, [r7, #16]
 800d114:	4313      	orrs	r3, r2
 800d116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	4313      	orrs	r3, r2
 800d120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	693a      	ldr	r2, [r7, #16]
 800d126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	621a      	str	r2, [r3, #32]
}
 800d13c:	bf00      	nop
 800d13e:	371c      	adds	r7, #28
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	40010000 	.word	0x40010000
 800d14c:	40010400 	.word	0x40010400

0800d150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d150:	b480      	push	{r7}
 800d152:	b087      	sub	sp, #28
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	f023 0210 	bic.w	r2, r3, #16
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	699b      	ldr	r3, [r3, #24]
 800d176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	021b      	lsls	r3, r3, #8
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	4313      	orrs	r3, r2
 800d192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	f023 0320 	bic.w	r3, r3, #32
 800d19a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	011b      	lsls	r3, r3, #4
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a22      	ldr	r2, [pc, #136]	; (800d234 <TIM_OC2_SetConfig+0xe4>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d003      	beq.n	800d1b8 <TIM_OC2_SetConfig+0x68>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a21      	ldr	r2, [pc, #132]	; (800d238 <TIM_OC2_SetConfig+0xe8>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d10d      	bne.n	800d1d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	011b      	lsls	r3, r3, #4
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a17      	ldr	r2, [pc, #92]	; (800d234 <TIM_OC2_SetConfig+0xe4>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d003      	beq.n	800d1e4 <TIM_OC2_SetConfig+0x94>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a16      	ldr	r2, [pc, #88]	; (800d238 <TIM_OC2_SetConfig+0xe8>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d113      	bne.n	800d20c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	4313      	orrs	r3, r2
 800d20a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	697a      	ldr	r2, [r7, #20]
 800d224:	621a      	str	r2, [r3, #32]
}
 800d226:	bf00      	nop
 800d228:	371c      	adds	r7, #28
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	40010000 	.word	0x40010000
 800d238:	40010400 	.word	0x40010400

0800d23c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b087      	sub	sp, #28
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a1b      	ldr	r3, [r3, #32]
 800d24a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	69db      	ldr	r3, [r3, #28]
 800d262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f023 0303 	bic.w	r3, r3, #3
 800d272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	021b      	lsls	r3, r3, #8
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	4313      	orrs	r3, r2
 800d290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a21      	ldr	r2, [pc, #132]	; (800d31c <TIM_OC3_SetConfig+0xe0>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d003      	beq.n	800d2a2 <TIM_OC3_SetConfig+0x66>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a20      	ldr	r2, [pc, #128]	; (800d320 <TIM_OC3_SetConfig+0xe4>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d10d      	bne.n	800d2be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a16      	ldr	r2, [pc, #88]	; (800d31c <TIM_OC3_SetConfig+0xe0>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d003      	beq.n	800d2ce <TIM_OC3_SetConfig+0x92>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a15      	ldr	r2, [pc, #84]	; (800d320 <TIM_OC3_SetConfig+0xe4>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d113      	bne.n	800d2f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	011b      	lsls	r3, r3, #4
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	699b      	ldr	r3, [r3, #24]
 800d2ee:	011b      	lsls	r3, r3, #4
 800d2f0:	693a      	ldr	r2, [r7, #16]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	697a      	ldr	r2, [r7, #20]
 800d30e:	621a      	str	r2, [r3, #32]
}
 800d310:	bf00      	nop
 800d312:	371c      	adds	r7, #28
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	40010000 	.word	0x40010000
 800d320:	40010400 	.word	0x40010400

0800d324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d324:	b480      	push	{r7}
 800d326:	b087      	sub	sp, #28
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	69db      	ldr	r3, [r3, #28]
 800d34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d35a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	021b      	lsls	r3, r3, #8
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	4313      	orrs	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d36e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	031b      	lsls	r3, r3, #12
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	4313      	orrs	r3, r2
 800d37a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a12      	ldr	r2, [pc, #72]	; (800d3c8 <TIM_OC4_SetConfig+0xa4>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d003      	beq.n	800d38c <TIM_OC4_SetConfig+0x68>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4a11      	ldr	r2, [pc, #68]	; (800d3cc <TIM_OC4_SetConfig+0xa8>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d109      	bne.n	800d3a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	019b      	lsls	r3, r3, #6
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	4313      	orrs	r3, r2
 800d39e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	697a      	ldr	r2, [r7, #20]
 800d3a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	621a      	str	r2, [r3, #32]
}
 800d3ba:	bf00      	nop
 800d3bc:	371c      	adds	r7, #28
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	40010000 	.word	0x40010000
 800d3cc:	40010400 	.word	0x40010400

0800d3d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b087      	sub	sp, #28
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6a1b      	ldr	r3, [r3, #32]
 800d3e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	f023 0201 	bic.w	r2, r3, #1
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	011b      	lsls	r3, r3, #4
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	4313      	orrs	r3, r2
 800d404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	f023 030a 	bic.w	r3, r3, #10
 800d40c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	4313      	orrs	r3, r2
 800d414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	693a      	ldr	r2, [r7, #16]
 800d41a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	621a      	str	r2, [r3, #32]
}
 800d422:	bf00      	nop
 800d424:	371c      	adds	r7, #28
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d42e:	b480      	push	{r7}
 800d430:	b087      	sub	sp, #28
 800d432:	af00      	add	r7, sp, #0
 800d434:	60f8      	str	r0, [r7, #12]
 800d436:	60b9      	str	r1, [r7, #8]
 800d438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	f023 0210 	bic.w	r2, r3, #16
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	699b      	ldr	r3, [r3, #24]
 800d44a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6a1b      	ldr	r3, [r3, #32]
 800d450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	031b      	lsls	r3, r3, #12
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	4313      	orrs	r3, r2
 800d462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d46a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	011b      	lsls	r3, r3, #4
 800d470:	693a      	ldr	r2, [r7, #16]
 800d472:	4313      	orrs	r3, r2
 800d474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	697a      	ldr	r2, [r7, #20]
 800d47a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	693a      	ldr	r2, [r7, #16]
 800d480:	621a      	str	r2, [r3, #32]
}
 800d482:	bf00      	nop
 800d484:	371c      	adds	r7, #28
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d48e:	b480      	push	{r7}
 800d490:	b085      	sub	sp, #20
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4a6:	683a      	ldr	r2, [r7, #0]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	f043 0307 	orr.w	r3, r3, #7
 800d4b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	609a      	str	r2, [r3, #8]
}
 800d4b8:	bf00      	nop
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b087      	sub	sp, #28
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	021a      	lsls	r2, r3, #8
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	431a      	orrs	r2, r3
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	697a      	ldr	r2, [r7, #20]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	697a      	ldr	r2, [r7, #20]
 800d4f6:	609a      	str	r2, [r3, #8]
}
 800d4f8:	bf00      	nop
 800d4fa:	371c      	adds	r7, #28
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d504:	b480      	push	{r7}
 800d506:	b087      	sub	sp, #28
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f003 031f 	and.w	r3, r3, #31
 800d516:	2201      	movs	r2, #1
 800d518:	fa02 f303 	lsl.w	r3, r2, r3
 800d51c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6a1a      	ldr	r2, [r3, #32]
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	43db      	mvns	r3, r3
 800d526:	401a      	ands	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6a1a      	ldr	r2, [r3, #32]
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	f003 031f 	and.w	r3, r3, #31
 800d536:	6879      	ldr	r1, [r7, #4]
 800d538:	fa01 f303 	lsl.w	r3, r1, r3
 800d53c:	431a      	orrs	r2, r3
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	621a      	str	r2, [r3, #32]
}
 800d542:	bf00      	nop
 800d544:	371c      	adds	r7, #28
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
	...

0800d550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d560:	2b01      	cmp	r3, #1
 800d562:	d101      	bne.n	800d568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d564:	2302      	movs	r3, #2
 800d566:	e05a      	b.n	800d61e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d58e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	4313      	orrs	r3, r2
 800d598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a21      	ldr	r2, [pc, #132]	; (800d62c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d022      	beq.n	800d5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5b4:	d01d      	beq.n	800d5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a1d      	ldr	r2, [pc, #116]	; (800d630 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d018      	beq.n	800d5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a1b      	ldr	r2, [pc, #108]	; (800d634 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d013      	beq.n	800d5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a1a      	ldr	r2, [pc, #104]	; (800d638 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d00e      	beq.n	800d5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a18      	ldr	r2, [pc, #96]	; (800d63c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d009      	beq.n	800d5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a17      	ldr	r2, [pc, #92]	; (800d640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d004      	beq.n	800d5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a15      	ldr	r2, [pc, #84]	; (800d644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d10c      	bne.n	800d60c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	4313      	orrs	r3, r2
 800d602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	40010000 	.word	0x40010000
 800d630:	40000400 	.word	0x40000400
 800d634:	40000800 	.word	0x40000800
 800d638:	40000c00 	.word	0x40000c00
 800d63c:	40010400 	.word	0x40010400
 800d640:	40014000 	.word	0x40014000
 800d644:	40001800 	.word	0x40001800

0800d648 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d652:	2300      	movs	r3, #0
 800d654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d101      	bne.n	800d664 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d660:	2302      	movs	r3, #2
 800d662:	e03d      	b.n	800d6e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	4313      	orrs	r3, r2
 800d678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	4313      	orrs	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	4313      	orrs	r3, r2
 800d694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	695b      	ldr	r3, [r3, #20]
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	69db      	ldr	r3, [r3, #28]
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3714      	adds	r7, #20
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d708:	bf00      	nop
 800d70a:	370c      	adds	r7, #12
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d722:	2301      	movs	r3, #1
 800d724:	e03f      	b.n	800d7a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7fb fba8 	bl	8008e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2224      	movs	r2, #36	; 0x24
 800d744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68da      	ldr	r2, [r3, #12]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f829 	bl	800d7b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	691a      	ldr	r2, [r3, #16]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d76c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	695a      	ldr	r2, [r3, #20]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d77c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	68da      	ldr	r2, [r3, #12]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d78c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2220      	movs	r2, #32
 800d798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2220      	movs	r2, #32
 800d7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
	...

0800d7b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7b4:	b0c0      	sub	sp, #256	; 0x100
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7cc:	68d9      	ldr	r1, [r3, #12]
 800d7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	ea40 0301 	orr.w	r3, r0, r1
 800d7d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7de:	689a      	ldr	r2, [r3, #8]
 800d7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	431a      	orrs	r2, r3
 800d7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7f4:	69db      	ldr	r3, [r3, #28]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d808:	f021 010c 	bic.w	r1, r1, #12
 800d80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d816:	430b      	orrs	r3, r1
 800d818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d81a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d82a:	6999      	ldr	r1, [r3, #24]
 800d82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	ea40 0301 	orr.w	r3, r0, r1
 800d836:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	4b8f      	ldr	r3, [pc, #572]	; (800da7c <UART_SetConfig+0x2cc>)
 800d840:	429a      	cmp	r2, r3
 800d842:	d005      	beq.n	800d850 <UART_SetConfig+0xa0>
 800d844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	4b8d      	ldr	r3, [pc, #564]	; (800da80 <UART_SetConfig+0x2d0>)
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d104      	bne.n	800d85a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d850:	f7fe fd94 	bl	800c37c <HAL_RCC_GetPCLK2Freq>
 800d854:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d858:	e003      	b.n	800d862 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d85a:	f7fe fd7b 	bl	800c354 <HAL_RCC_GetPCLK1Freq>
 800d85e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d866:	69db      	ldr	r3, [r3, #28]
 800d868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d86c:	f040 810c 	bne.w	800da88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d874:	2200      	movs	r2, #0
 800d876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d87a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d87e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d882:	4622      	mov	r2, r4
 800d884:	462b      	mov	r3, r5
 800d886:	1891      	adds	r1, r2, r2
 800d888:	65b9      	str	r1, [r7, #88]	; 0x58
 800d88a:	415b      	adcs	r3, r3
 800d88c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d88e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d892:	4621      	mov	r1, r4
 800d894:	eb12 0801 	adds.w	r8, r2, r1
 800d898:	4629      	mov	r1, r5
 800d89a:	eb43 0901 	adc.w	r9, r3, r1
 800d89e:	f04f 0200 	mov.w	r2, #0
 800d8a2:	f04f 0300 	mov.w	r3, #0
 800d8a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d8aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d8ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d8b2:	4690      	mov	r8, r2
 800d8b4:	4699      	mov	r9, r3
 800d8b6:	4623      	mov	r3, r4
 800d8b8:	eb18 0303 	adds.w	r3, r8, r3
 800d8bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d8c0:	462b      	mov	r3, r5
 800d8c2:	eb49 0303 	adc.w	r3, r9, r3
 800d8c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d8ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d8d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d8da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d8de:	460b      	mov	r3, r1
 800d8e0:	18db      	adds	r3, r3, r3
 800d8e2:	653b      	str	r3, [r7, #80]	; 0x50
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	eb42 0303 	adc.w	r3, r2, r3
 800d8ea:	657b      	str	r3, [r7, #84]	; 0x54
 800d8ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d8f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d8f4:	f7f3 f9c8 	bl	8000c88 <__aeabi_uldivmod>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	4b61      	ldr	r3, [pc, #388]	; (800da84 <UART_SetConfig+0x2d4>)
 800d8fe:	fba3 2302 	umull	r2, r3, r3, r2
 800d902:	095b      	lsrs	r3, r3, #5
 800d904:	011c      	lsls	r4, r3, #4
 800d906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d90a:	2200      	movs	r2, #0
 800d90c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d910:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d918:	4642      	mov	r2, r8
 800d91a:	464b      	mov	r3, r9
 800d91c:	1891      	adds	r1, r2, r2
 800d91e:	64b9      	str	r1, [r7, #72]	; 0x48
 800d920:	415b      	adcs	r3, r3
 800d922:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d928:	4641      	mov	r1, r8
 800d92a:	eb12 0a01 	adds.w	sl, r2, r1
 800d92e:	4649      	mov	r1, r9
 800d930:	eb43 0b01 	adc.w	fp, r3, r1
 800d934:	f04f 0200 	mov.w	r2, #0
 800d938:	f04f 0300 	mov.w	r3, #0
 800d93c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d948:	4692      	mov	sl, r2
 800d94a:	469b      	mov	fp, r3
 800d94c:	4643      	mov	r3, r8
 800d94e:	eb1a 0303 	adds.w	r3, sl, r3
 800d952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d956:	464b      	mov	r3, r9
 800d958:	eb4b 0303 	adc.w	r3, fp, r3
 800d95c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d96c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d974:	460b      	mov	r3, r1
 800d976:	18db      	adds	r3, r3, r3
 800d978:	643b      	str	r3, [r7, #64]	; 0x40
 800d97a:	4613      	mov	r3, r2
 800d97c:	eb42 0303 	adc.w	r3, r2, r3
 800d980:	647b      	str	r3, [r7, #68]	; 0x44
 800d982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d98a:	f7f3 f97d 	bl	8000c88 <__aeabi_uldivmod>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4611      	mov	r1, r2
 800d994:	4b3b      	ldr	r3, [pc, #236]	; (800da84 <UART_SetConfig+0x2d4>)
 800d996:	fba3 2301 	umull	r2, r3, r3, r1
 800d99a:	095b      	lsrs	r3, r3, #5
 800d99c:	2264      	movs	r2, #100	; 0x64
 800d99e:	fb02 f303 	mul.w	r3, r2, r3
 800d9a2:	1acb      	subs	r3, r1, r3
 800d9a4:	00db      	lsls	r3, r3, #3
 800d9a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d9aa:	4b36      	ldr	r3, [pc, #216]	; (800da84 <UART_SetConfig+0x2d4>)
 800d9ac:	fba3 2302 	umull	r2, r3, r3, r2
 800d9b0:	095b      	lsrs	r3, r3, #5
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d9b8:	441c      	add	r4, r3
 800d9ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d9c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d9c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d9cc:	4642      	mov	r2, r8
 800d9ce:	464b      	mov	r3, r9
 800d9d0:	1891      	adds	r1, r2, r2
 800d9d2:	63b9      	str	r1, [r7, #56]	; 0x38
 800d9d4:	415b      	adcs	r3, r3
 800d9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d9dc:	4641      	mov	r1, r8
 800d9de:	1851      	adds	r1, r2, r1
 800d9e0:	6339      	str	r1, [r7, #48]	; 0x30
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	414b      	adcs	r3, r1
 800d9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d9e8:	f04f 0200 	mov.w	r2, #0
 800d9ec:	f04f 0300 	mov.w	r3, #0
 800d9f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d9f4:	4659      	mov	r1, fp
 800d9f6:	00cb      	lsls	r3, r1, #3
 800d9f8:	4651      	mov	r1, sl
 800d9fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d9fe:	4651      	mov	r1, sl
 800da00:	00ca      	lsls	r2, r1, #3
 800da02:	4610      	mov	r0, r2
 800da04:	4619      	mov	r1, r3
 800da06:	4603      	mov	r3, r0
 800da08:	4642      	mov	r2, r8
 800da0a:	189b      	adds	r3, r3, r2
 800da0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800da10:	464b      	mov	r3, r9
 800da12:	460a      	mov	r2, r1
 800da14:	eb42 0303 	adc.w	r3, r2, r3
 800da18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800da28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800da2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800da30:	460b      	mov	r3, r1
 800da32:	18db      	adds	r3, r3, r3
 800da34:	62bb      	str	r3, [r7, #40]	; 0x28
 800da36:	4613      	mov	r3, r2
 800da38:	eb42 0303 	adc.w	r3, r2, r3
 800da3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800da42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800da46:	f7f3 f91f 	bl	8000c88 <__aeabi_uldivmod>
 800da4a:	4602      	mov	r2, r0
 800da4c:	460b      	mov	r3, r1
 800da4e:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <UART_SetConfig+0x2d4>)
 800da50:	fba3 1302 	umull	r1, r3, r3, r2
 800da54:	095b      	lsrs	r3, r3, #5
 800da56:	2164      	movs	r1, #100	; 0x64
 800da58:	fb01 f303 	mul.w	r3, r1, r3
 800da5c:	1ad3      	subs	r3, r2, r3
 800da5e:	00db      	lsls	r3, r3, #3
 800da60:	3332      	adds	r3, #50	; 0x32
 800da62:	4a08      	ldr	r2, [pc, #32]	; (800da84 <UART_SetConfig+0x2d4>)
 800da64:	fba2 2303 	umull	r2, r3, r2, r3
 800da68:	095b      	lsrs	r3, r3, #5
 800da6a:	f003 0207 	and.w	r2, r3, #7
 800da6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4422      	add	r2, r4
 800da76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800da78:	e105      	b.n	800dc86 <UART_SetConfig+0x4d6>
 800da7a:	bf00      	nop
 800da7c:	40011000 	.word	0x40011000
 800da80:	40011400 	.word	0x40011400
 800da84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800da88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da8c:	2200      	movs	r2, #0
 800da8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800da92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800da96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800da9a:	4642      	mov	r2, r8
 800da9c:	464b      	mov	r3, r9
 800da9e:	1891      	adds	r1, r2, r2
 800daa0:	6239      	str	r1, [r7, #32]
 800daa2:	415b      	adcs	r3, r3
 800daa4:	627b      	str	r3, [r7, #36]	; 0x24
 800daa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800daaa:	4641      	mov	r1, r8
 800daac:	1854      	adds	r4, r2, r1
 800daae:	4649      	mov	r1, r9
 800dab0:	eb43 0501 	adc.w	r5, r3, r1
 800dab4:	f04f 0200 	mov.w	r2, #0
 800dab8:	f04f 0300 	mov.w	r3, #0
 800dabc:	00eb      	lsls	r3, r5, #3
 800dabe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dac2:	00e2      	lsls	r2, r4, #3
 800dac4:	4614      	mov	r4, r2
 800dac6:	461d      	mov	r5, r3
 800dac8:	4643      	mov	r3, r8
 800daca:	18e3      	adds	r3, r4, r3
 800dacc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dad0:	464b      	mov	r3, r9
 800dad2:	eb45 0303 	adc.w	r3, r5, r3
 800dad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800daea:	f04f 0200 	mov.w	r2, #0
 800daee:	f04f 0300 	mov.w	r3, #0
 800daf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800daf6:	4629      	mov	r1, r5
 800daf8:	008b      	lsls	r3, r1, #2
 800dafa:	4621      	mov	r1, r4
 800dafc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db00:	4621      	mov	r1, r4
 800db02:	008a      	lsls	r2, r1, #2
 800db04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800db08:	f7f3 f8be 	bl	8000c88 <__aeabi_uldivmod>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	4b60      	ldr	r3, [pc, #384]	; (800dc94 <UART_SetConfig+0x4e4>)
 800db12:	fba3 2302 	umull	r2, r3, r3, r2
 800db16:	095b      	lsrs	r3, r3, #5
 800db18:	011c      	lsls	r4, r3, #4
 800db1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db1e:	2200      	movs	r2, #0
 800db20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800db28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800db2c:	4642      	mov	r2, r8
 800db2e:	464b      	mov	r3, r9
 800db30:	1891      	adds	r1, r2, r2
 800db32:	61b9      	str	r1, [r7, #24]
 800db34:	415b      	adcs	r3, r3
 800db36:	61fb      	str	r3, [r7, #28]
 800db38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800db3c:	4641      	mov	r1, r8
 800db3e:	1851      	adds	r1, r2, r1
 800db40:	6139      	str	r1, [r7, #16]
 800db42:	4649      	mov	r1, r9
 800db44:	414b      	adcs	r3, r1
 800db46:	617b      	str	r3, [r7, #20]
 800db48:	f04f 0200 	mov.w	r2, #0
 800db4c:	f04f 0300 	mov.w	r3, #0
 800db50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800db54:	4659      	mov	r1, fp
 800db56:	00cb      	lsls	r3, r1, #3
 800db58:	4651      	mov	r1, sl
 800db5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db5e:	4651      	mov	r1, sl
 800db60:	00ca      	lsls	r2, r1, #3
 800db62:	4610      	mov	r0, r2
 800db64:	4619      	mov	r1, r3
 800db66:	4603      	mov	r3, r0
 800db68:	4642      	mov	r2, r8
 800db6a:	189b      	adds	r3, r3, r2
 800db6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db70:	464b      	mov	r3, r9
 800db72:	460a      	mov	r2, r1
 800db74:	eb42 0303 	adc.w	r3, r2, r3
 800db78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	67bb      	str	r3, [r7, #120]	; 0x78
 800db86:	67fa      	str	r2, [r7, #124]	; 0x7c
 800db88:	f04f 0200 	mov.w	r2, #0
 800db8c:	f04f 0300 	mov.w	r3, #0
 800db90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800db94:	4649      	mov	r1, r9
 800db96:	008b      	lsls	r3, r1, #2
 800db98:	4641      	mov	r1, r8
 800db9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db9e:	4641      	mov	r1, r8
 800dba0:	008a      	lsls	r2, r1, #2
 800dba2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dba6:	f7f3 f86f 	bl	8000c88 <__aeabi_uldivmod>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4b39      	ldr	r3, [pc, #228]	; (800dc94 <UART_SetConfig+0x4e4>)
 800dbb0:	fba3 1302 	umull	r1, r3, r3, r2
 800dbb4:	095b      	lsrs	r3, r3, #5
 800dbb6:	2164      	movs	r1, #100	; 0x64
 800dbb8:	fb01 f303 	mul.w	r3, r1, r3
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	011b      	lsls	r3, r3, #4
 800dbc0:	3332      	adds	r3, #50	; 0x32
 800dbc2:	4a34      	ldr	r2, [pc, #208]	; (800dc94 <UART_SetConfig+0x4e4>)
 800dbc4:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc8:	095b      	lsrs	r3, r3, #5
 800dbca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbce:	441c      	add	r4, r3
 800dbd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	673b      	str	r3, [r7, #112]	; 0x70
 800dbd8:	677a      	str	r2, [r7, #116]	; 0x74
 800dbda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800dbde:	4642      	mov	r2, r8
 800dbe0:	464b      	mov	r3, r9
 800dbe2:	1891      	adds	r1, r2, r2
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	415b      	adcs	r3, r3
 800dbe8:	60fb      	str	r3, [r7, #12]
 800dbea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dbee:	4641      	mov	r1, r8
 800dbf0:	1851      	adds	r1, r2, r1
 800dbf2:	6039      	str	r1, [r7, #0]
 800dbf4:	4649      	mov	r1, r9
 800dbf6:	414b      	adcs	r3, r1
 800dbf8:	607b      	str	r3, [r7, #4]
 800dbfa:	f04f 0200 	mov.w	r2, #0
 800dbfe:	f04f 0300 	mov.w	r3, #0
 800dc02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dc06:	4659      	mov	r1, fp
 800dc08:	00cb      	lsls	r3, r1, #3
 800dc0a:	4651      	mov	r1, sl
 800dc0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc10:	4651      	mov	r1, sl
 800dc12:	00ca      	lsls	r2, r1, #3
 800dc14:	4610      	mov	r0, r2
 800dc16:	4619      	mov	r1, r3
 800dc18:	4603      	mov	r3, r0
 800dc1a:	4642      	mov	r2, r8
 800dc1c:	189b      	adds	r3, r3, r2
 800dc1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc20:	464b      	mov	r3, r9
 800dc22:	460a      	mov	r2, r1
 800dc24:	eb42 0303 	adc.w	r3, r2, r3
 800dc28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	663b      	str	r3, [r7, #96]	; 0x60
 800dc34:	667a      	str	r2, [r7, #100]	; 0x64
 800dc36:	f04f 0200 	mov.w	r2, #0
 800dc3a:	f04f 0300 	mov.w	r3, #0
 800dc3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800dc42:	4649      	mov	r1, r9
 800dc44:	008b      	lsls	r3, r1, #2
 800dc46:	4641      	mov	r1, r8
 800dc48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc4c:	4641      	mov	r1, r8
 800dc4e:	008a      	lsls	r2, r1, #2
 800dc50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dc54:	f7f3 f818 	bl	8000c88 <__aeabi_uldivmod>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	4b0d      	ldr	r3, [pc, #52]	; (800dc94 <UART_SetConfig+0x4e4>)
 800dc5e:	fba3 1302 	umull	r1, r3, r3, r2
 800dc62:	095b      	lsrs	r3, r3, #5
 800dc64:	2164      	movs	r1, #100	; 0x64
 800dc66:	fb01 f303 	mul.w	r3, r1, r3
 800dc6a:	1ad3      	subs	r3, r2, r3
 800dc6c:	011b      	lsls	r3, r3, #4
 800dc6e:	3332      	adds	r3, #50	; 0x32
 800dc70:	4a08      	ldr	r2, [pc, #32]	; (800dc94 <UART_SetConfig+0x4e4>)
 800dc72:	fba2 2303 	umull	r2, r3, r2, r3
 800dc76:	095b      	lsrs	r3, r3, #5
 800dc78:	f003 020f 	and.w	r2, r3, #15
 800dc7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4422      	add	r2, r4
 800dc84:	609a      	str	r2, [r3, #8]
}
 800dc86:	bf00      	nop
 800dc88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc92:	bf00      	nop
 800dc94:	51eb851f 	.word	0x51eb851f

0800dc98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc98:	b084      	sub	sp, #16
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b084      	sub	sp, #16
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
 800dca2:	f107 001c 	add.w	r0, r7, #28
 800dca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d122      	bne.n	800dcf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dcc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dcd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d105      	bne.n	800dcea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 faa2 	bl	800e234 <USB_CoreReset>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
 800dcf4:	e01a      	b.n	800dd2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fa96 	bl	800e234 <USB_CoreReset>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d106      	bne.n	800dd20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	639a      	str	r2, [r3, #56]	; 0x38
 800dd1e:	e005      	b.n	800dd2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d10b      	bne.n	800dd4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	f043 0206 	orr.w	r2, r3, #6
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	f043 0220 	orr.w	r2, r3, #32
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd56:	b004      	add	sp, #16
 800dd58:	4770      	bx	lr

0800dd5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	b083      	sub	sp, #12
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	f023 0201 	bic.w	r2, r3, #1
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	460b      	mov	r3, r1
 800dd86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dd98:	78fb      	ldrb	r3, [r7, #3]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d115      	bne.n	800ddca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ddaa:	2001      	movs	r0, #1
 800ddac:	f7fb f9ce 	bl	800914c <HAL_Delay>
      ms++;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 fa2e 	bl	800e218 <USB_GetMode>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d01e      	beq.n	800de00 <USB_SetCurrentMode+0x84>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b31      	cmp	r3, #49	; 0x31
 800ddc6:	d9f0      	bls.n	800ddaa <USB_SetCurrentMode+0x2e>
 800ddc8:	e01a      	b.n	800de00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ddca:	78fb      	ldrb	r3, [r7, #3]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d115      	bne.n	800ddfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dddc:	2001      	movs	r0, #1
 800ddde:	f7fb f9b5 	bl	800914c <HAL_Delay>
      ms++;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3301      	adds	r3, #1
 800dde6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 fa15 	bl	800e218 <USB_GetMode>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d005      	beq.n	800de00 <USB_SetCurrentMode+0x84>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b31      	cmp	r3, #49	; 0x31
 800ddf8:	d9f0      	bls.n	800dddc <USB_SetCurrentMode+0x60>
 800ddfa:	e001      	b.n	800de00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e005      	b.n	800de0c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b32      	cmp	r3, #50	; 0x32
 800de04:	d101      	bne.n	800de0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e000      	b.n	800de0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800de0a:	2300      	movs	r3, #0
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de14:	b084      	sub	sp, #16
 800de16:	b580      	push	{r7, lr}
 800de18:	b086      	sub	sp, #24
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800de22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800de26:	2300      	movs	r3, #0
 800de28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800de2e:	2300      	movs	r3, #0
 800de30:	613b      	str	r3, [r7, #16]
 800de32:	e009      	b.n	800de48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	3340      	adds	r3, #64	; 0x40
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	2200      	movs	r2, #0
 800de40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	3301      	adds	r3, #1
 800de46:	613b      	str	r3, [r7, #16]
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	2b0e      	cmp	r3, #14
 800de4c:	d9f2      	bls.n	800de34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800de4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de50:	2b00      	cmp	r3, #0
 800de52:	d11c      	bne.n	800de8e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de62:	f043 0302 	orr.w	r3, r3, #2
 800de66:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	639a      	str	r2, [r3, #56]	; 0x38
 800de8c:	e00b      	b.n	800dea6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800deac:	461a      	mov	r2, r3
 800deae:	2300      	movs	r3, #0
 800deb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deb8:	4619      	mov	r1, r3
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dec0:	461a      	mov	r2, r3
 800dec2:	680b      	ldr	r3, [r1, #0]
 800dec4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d10c      	bne.n	800dee6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800decc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d104      	bne.n	800dedc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ded2:	2100      	movs	r1, #0
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f965 	bl	800e1a4 <USB_SetDevSpeed>
 800deda:	e008      	b.n	800deee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dedc:	2101      	movs	r1, #1
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 f960 	bl	800e1a4 <USB_SetDevSpeed>
 800dee4:	e003      	b.n	800deee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dee6:	2103      	movs	r1, #3
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f95b 	bl	800e1a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800deee:	2110      	movs	r1, #16
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 f8f3 	bl	800e0dc <USB_FlushTxFifo>
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d001      	beq.n	800df00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800defc:	2301      	movs	r3, #1
 800defe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 f91f 	bl	800e144 <USB_FlushRxFifo>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d001      	beq.n	800df10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df16:	461a      	mov	r2, r3
 800df18:	2300      	movs	r3, #0
 800df1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df22:	461a      	mov	r2, r3
 800df24:	2300      	movs	r3, #0
 800df26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df2e:	461a      	mov	r2, r3
 800df30:	2300      	movs	r3, #0
 800df32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df34:	2300      	movs	r3, #0
 800df36:	613b      	str	r3, [r7, #16]
 800df38:	e043      	b.n	800dfc2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	015a      	lsls	r2, r3, #5
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	4413      	add	r3, r2
 800df42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df50:	d118      	bne.n	800df84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10a      	bne.n	800df6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	015a      	lsls	r2, r3, #5
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	4413      	add	r3, r2
 800df60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df64:	461a      	mov	r2, r3
 800df66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	e013      	b.n	800df96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	015a      	lsls	r2, r3, #5
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	4413      	add	r3, r2
 800df76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df7a:	461a      	mov	r2, r3
 800df7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800df80:	6013      	str	r3, [r2, #0]
 800df82:	e008      	b.n	800df96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	015a      	lsls	r2, r3, #5
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	4413      	add	r3, r2
 800df8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df90:	461a      	mov	r2, r3
 800df92:	2300      	movs	r3, #0
 800df94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	015a      	lsls	r2, r3, #5
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	4413      	add	r3, r2
 800dfb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dfba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	613b      	str	r3, [r7, #16]
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	693a      	ldr	r2, [r7, #16]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d3b7      	bcc.n	800df3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfca:	2300      	movs	r3, #0
 800dfcc:	613b      	str	r3, [r7, #16]
 800dfce:	e043      	b.n	800e058 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	015a      	lsls	r2, r3, #5
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfe6:	d118      	bne.n	800e01a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	015a      	lsls	r2, r3, #5
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dffa:	461a      	mov	r2, r3
 800dffc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e000:	6013      	str	r3, [r2, #0]
 800e002:	e013      	b.n	800e02c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	015a      	lsls	r2, r3, #5
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	4413      	add	r3, r2
 800e00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e010:	461a      	mov	r2, r3
 800e012:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	e008      	b.n	800e02c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	015a      	lsls	r2, r3, #5
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	4413      	add	r3, r2
 800e022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e026:	461a      	mov	r2, r3
 800e028:	2300      	movs	r3, #0
 800e02a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	015a      	lsls	r2, r3, #5
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	4413      	add	r3, r2
 800e034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e038:	461a      	mov	r2, r3
 800e03a:	2300      	movs	r3, #0
 800e03c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	015a      	lsls	r2, r3, #5
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	4413      	add	r3, r2
 800e046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e04a:	461a      	mov	r2, r3
 800e04c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e050:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	3301      	adds	r3, #1
 800e056:	613b      	str	r3, [r7, #16]
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d3b7      	bcc.n	800dfd0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e06e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e072:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e080:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e084:	2b00      	cmp	r3, #0
 800e086:	d105      	bne.n	800e094 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	f043 0210 	orr.w	r2, r3, #16
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	699a      	ldr	r2, [r3, #24]
 800e098:	4b0f      	ldr	r3, [pc, #60]	; (800e0d8 <USB_DevInit+0x2c4>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d005      	beq.n	800e0b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	699b      	ldr	r3, [r3, #24]
 800e0aa:	f043 0208 	orr.w	r2, r3, #8
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d107      	bne.n	800e0c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e0c0:	f043 0304 	orr.w	r3, r3, #4
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3718      	adds	r7, #24
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0d4:	b004      	add	sp, #16
 800e0d6:	4770      	bx	lr
 800e0d8:	803c3800 	.word	0x803c3800

0800e0dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	4a13      	ldr	r2, [pc, #76]	; (800e140 <USB_FlushTxFifo+0x64>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d901      	bls.n	800e0fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	e01b      	b.n	800e134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	691b      	ldr	r3, [r3, #16]
 800e100:	2b00      	cmp	r3, #0
 800e102:	daf2      	bge.n	800e0ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e104:	2300      	movs	r3, #0
 800e106:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	019b      	lsls	r3, r3, #6
 800e10c:	f043 0220 	orr.w	r2, r3, #32
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	4a08      	ldr	r2, [pc, #32]	; (800e140 <USB_FlushTxFifo+0x64>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d901      	bls.n	800e126 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e122:	2303      	movs	r3, #3
 800e124:	e006      	b.n	800e134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	f003 0320 	and.w	r3, r3, #32
 800e12e:	2b20      	cmp	r3, #32
 800e130:	d0f0      	beq.n	800e114 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3714      	adds	r7, #20
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr
 800e140:	00030d40 	.word	0x00030d40

0800e144 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e14c:	2300      	movs	r3, #0
 800e14e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	3301      	adds	r3, #1
 800e154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	4a11      	ldr	r2, [pc, #68]	; (800e1a0 <USB_FlushRxFifo+0x5c>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d901      	bls.n	800e162 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e15e:	2303      	movs	r3, #3
 800e160:	e018      	b.n	800e194 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	2b00      	cmp	r3, #0
 800e168:	daf2      	bge.n	800e150 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e16a:	2300      	movs	r3, #0
 800e16c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2210      	movs	r2, #16
 800e172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	3301      	adds	r3, #1
 800e178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	4a08      	ldr	r2, [pc, #32]	; (800e1a0 <USB_FlushRxFifo+0x5c>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d901      	bls.n	800e186 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e182:	2303      	movs	r3, #3
 800e184:	e006      	b.n	800e194 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	f003 0310 	and.w	r3, r3, #16
 800e18e:	2b10      	cmp	r3, #16
 800e190:	d0f0      	beq.n	800e174 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3714      	adds	r7, #20
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	00030d40 	.word	0x00030d40

0800e1a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	78fb      	ldrb	r3, [r7, #3]
 800e1be:	68f9      	ldr	r1, [r7, #12]
 800e1c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3714      	adds	r7, #20
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1d6:	b480      	push	{r7}
 800e1d8:	b085      	sub	sp, #20
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1f0:	f023 0303 	bic.w	r3, r3, #3
 800e1f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e204:	f043 0302 	orr.w	r3, r3, #2
 800e208:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	f003 0301 	and.w	r3, r3, #1
}
 800e228:	4618      	mov	r0, r3
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e23c:	2300      	movs	r3, #0
 800e23e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3301      	adds	r3, #1
 800e244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	4a13      	ldr	r2, [pc, #76]	; (800e298 <USB_CoreReset+0x64>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d901      	bls.n	800e252 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e24e:	2303      	movs	r3, #3
 800e250:	e01b      	b.n	800e28a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	daf2      	bge.n	800e240 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e25a:	2300      	movs	r3, #0
 800e25c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	f043 0201 	orr.w	r2, r3, #1
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	3301      	adds	r3, #1
 800e26e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	4a09      	ldr	r2, [pc, #36]	; (800e298 <USB_CoreReset+0x64>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d901      	bls.n	800e27c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e278:	2303      	movs	r3, #3
 800e27a:	e006      	b.n	800e28a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	691b      	ldr	r3, [r3, #16]
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b01      	cmp	r3, #1
 800e286:	d0f0      	beq.n	800e26a <USB_CoreReset+0x36>

  return HAL_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3714      	adds	r7, #20
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	00030d40 	.word	0x00030d40

0800e29c <__errno>:
 800e29c:	4b01      	ldr	r3, [pc, #4]	; (800e2a4 <__errno+0x8>)
 800e29e:	6818      	ldr	r0, [r3, #0]
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop
 800e2a4:	2000032c 	.word	0x2000032c

0800e2a8 <__libc_init_array>:
 800e2a8:	b570      	push	{r4, r5, r6, lr}
 800e2aa:	4d0d      	ldr	r5, [pc, #52]	; (800e2e0 <__libc_init_array+0x38>)
 800e2ac:	4c0d      	ldr	r4, [pc, #52]	; (800e2e4 <__libc_init_array+0x3c>)
 800e2ae:	1b64      	subs	r4, r4, r5
 800e2b0:	10a4      	asrs	r4, r4, #2
 800e2b2:	2600      	movs	r6, #0
 800e2b4:	42a6      	cmp	r6, r4
 800e2b6:	d109      	bne.n	800e2cc <__libc_init_array+0x24>
 800e2b8:	4d0b      	ldr	r5, [pc, #44]	; (800e2e8 <__libc_init_array+0x40>)
 800e2ba:	4c0c      	ldr	r4, [pc, #48]	; (800e2ec <__libc_init_array+0x44>)
 800e2bc:	f002 ff0a 	bl	80110d4 <_init>
 800e2c0:	1b64      	subs	r4, r4, r5
 800e2c2:	10a4      	asrs	r4, r4, #2
 800e2c4:	2600      	movs	r6, #0
 800e2c6:	42a6      	cmp	r6, r4
 800e2c8:	d105      	bne.n	800e2d6 <__libc_init_array+0x2e>
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2d0:	4798      	blx	r3
 800e2d2:	3601      	adds	r6, #1
 800e2d4:	e7ee      	b.n	800e2b4 <__libc_init_array+0xc>
 800e2d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2da:	4798      	blx	r3
 800e2dc:	3601      	adds	r6, #1
 800e2de:	e7f2      	b.n	800e2c6 <__libc_init_array+0x1e>
 800e2e0:	08011984 	.word	0x08011984
 800e2e4:	08011984 	.word	0x08011984
 800e2e8:	08011984 	.word	0x08011984
 800e2ec:	08011988 	.word	0x08011988

0800e2f0 <malloc>:
 800e2f0:	4b02      	ldr	r3, [pc, #8]	; (800e2fc <malloc+0xc>)
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	6818      	ldr	r0, [r3, #0]
 800e2f6:	f000 b88d 	b.w	800e414 <_malloc_r>
 800e2fa:	bf00      	nop
 800e2fc:	2000032c 	.word	0x2000032c

0800e300 <free>:
 800e300:	4b02      	ldr	r3, [pc, #8]	; (800e30c <free+0xc>)
 800e302:	4601      	mov	r1, r0
 800e304:	6818      	ldr	r0, [r3, #0]
 800e306:	f000 b819 	b.w	800e33c <_free_r>
 800e30a:	bf00      	nop
 800e30c:	2000032c 	.word	0x2000032c

0800e310 <memcpy>:
 800e310:	440a      	add	r2, r1
 800e312:	4291      	cmp	r1, r2
 800e314:	f100 33ff 	add.w	r3, r0, #4294967295
 800e318:	d100      	bne.n	800e31c <memcpy+0xc>
 800e31a:	4770      	bx	lr
 800e31c:	b510      	push	{r4, lr}
 800e31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e322:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e326:	4291      	cmp	r1, r2
 800e328:	d1f9      	bne.n	800e31e <memcpy+0xe>
 800e32a:	bd10      	pop	{r4, pc}

0800e32c <memset>:
 800e32c:	4402      	add	r2, r0
 800e32e:	4603      	mov	r3, r0
 800e330:	4293      	cmp	r3, r2
 800e332:	d100      	bne.n	800e336 <memset+0xa>
 800e334:	4770      	bx	lr
 800e336:	f803 1b01 	strb.w	r1, [r3], #1
 800e33a:	e7f9      	b.n	800e330 <memset+0x4>

0800e33c <_free_r>:
 800e33c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e33e:	2900      	cmp	r1, #0
 800e340:	d044      	beq.n	800e3cc <_free_r+0x90>
 800e342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e346:	9001      	str	r0, [sp, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f1a1 0404 	sub.w	r4, r1, #4
 800e34e:	bfb8      	it	lt
 800e350:	18e4      	addlt	r4, r4, r3
 800e352:	f001 fbeb 	bl	800fb2c <__malloc_lock>
 800e356:	4a1e      	ldr	r2, [pc, #120]	; (800e3d0 <_free_r+0x94>)
 800e358:	9801      	ldr	r0, [sp, #4]
 800e35a:	6813      	ldr	r3, [r2, #0]
 800e35c:	b933      	cbnz	r3, 800e36c <_free_r+0x30>
 800e35e:	6063      	str	r3, [r4, #4]
 800e360:	6014      	str	r4, [r2, #0]
 800e362:	b003      	add	sp, #12
 800e364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e368:	f001 bbe6 	b.w	800fb38 <__malloc_unlock>
 800e36c:	42a3      	cmp	r3, r4
 800e36e:	d908      	bls.n	800e382 <_free_r+0x46>
 800e370:	6825      	ldr	r5, [r4, #0]
 800e372:	1961      	adds	r1, r4, r5
 800e374:	428b      	cmp	r3, r1
 800e376:	bf01      	itttt	eq
 800e378:	6819      	ldreq	r1, [r3, #0]
 800e37a:	685b      	ldreq	r3, [r3, #4]
 800e37c:	1949      	addeq	r1, r1, r5
 800e37e:	6021      	streq	r1, [r4, #0]
 800e380:	e7ed      	b.n	800e35e <_free_r+0x22>
 800e382:	461a      	mov	r2, r3
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	b10b      	cbz	r3, 800e38c <_free_r+0x50>
 800e388:	42a3      	cmp	r3, r4
 800e38a:	d9fa      	bls.n	800e382 <_free_r+0x46>
 800e38c:	6811      	ldr	r1, [r2, #0]
 800e38e:	1855      	adds	r5, r2, r1
 800e390:	42a5      	cmp	r5, r4
 800e392:	d10b      	bne.n	800e3ac <_free_r+0x70>
 800e394:	6824      	ldr	r4, [r4, #0]
 800e396:	4421      	add	r1, r4
 800e398:	1854      	adds	r4, r2, r1
 800e39a:	42a3      	cmp	r3, r4
 800e39c:	6011      	str	r1, [r2, #0]
 800e39e:	d1e0      	bne.n	800e362 <_free_r+0x26>
 800e3a0:	681c      	ldr	r4, [r3, #0]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	6053      	str	r3, [r2, #4]
 800e3a6:	4421      	add	r1, r4
 800e3a8:	6011      	str	r1, [r2, #0]
 800e3aa:	e7da      	b.n	800e362 <_free_r+0x26>
 800e3ac:	d902      	bls.n	800e3b4 <_free_r+0x78>
 800e3ae:	230c      	movs	r3, #12
 800e3b0:	6003      	str	r3, [r0, #0]
 800e3b2:	e7d6      	b.n	800e362 <_free_r+0x26>
 800e3b4:	6825      	ldr	r5, [r4, #0]
 800e3b6:	1961      	adds	r1, r4, r5
 800e3b8:	428b      	cmp	r3, r1
 800e3ba:	bf04      	itt	eq
 800e3bc:	6819      	ldreq	r1, [r3, #0]
 800e3be:	685b      	ldreq	r3, [r3, #4]
 800e3c0:	6063      	str	r3, [r4, #4]
 800e3c2:	bf04      	itt	eq
 800e3c4:	1949      	addeq	r1, r1, r5
 800e3c6:	6021      	streq	r1, [r4, #0]
 800e3c8:	6054      	str	r4, [r2, #4]
 800e3ca:	e7ca      	b.n	800e362 <_free_r+0x26>
 800e3cc:	b003      	add	sp, #12
 800e3ce:	bd30      	pop	{r4, r5, pc}
 800e3d0:	20001530 	.word	0x20001530

0800e3d4 <sbrk_aligned>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	4e0e      	ldr	r6, [pc, #56]	; (800e410 <sbrk_aligned+0x3c>)
 800e3d8:	460c      	mov	r4, r1
 800e3da:	6831      	ldr	r1, [r6, #0]
 800e3dc:	4605      	mov	r5, r0
 800e3de:	b911      	cbnz	r1, 800e3e6 <sbrk_aligned+0x12>
 800e3e0:	f000 fcf6 	bl	800edd0 <_sbrk_r>
 800e3e4:	6030      	str	r0, [r6, #0]
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f000 fcf1 	bl	800edd0 <_sbrk_r>
 800e3ee:	1c43      	adds	r3, r0, #1
 800e3f0:	d00a      	beq.n	800e408 <sbrk_aligned+0x34>
 800e3f2:	1cc4      	adds	r4, r0, #3
 800e3f4:	f024 0403 	bic.w	r4, r4, #3
 800e3f8:	42a0      	cmp	r0, r4
 800e3fa:	d007      	beq.n	800e40c <sbrk_aligned+0x38>
 800e3fc:	1a21      	subs	r1, r4, r0
 800e3fe:	4628      	mov	r0, r5
 800e400:	f000 fce6 	bl	800edd0 <_sbrk_r>
 800e404:	3001      	adds	r0, #1
 800e406:	d101      	bne.n	800e40c <sbrk_aligned+0x38>
 800e408:	f04f 34ff 	mov.w	r4, #4294967295
 800e40c:	4620      	mov	r0, r4
 800e40e:	bd70      	pop	{r4, r5, r6, pc}
 800e410:	20001534 	.word	0x20001534

0800e414 <_malloc_r>:
 800e414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e418:	1ccd      	adds	r5, r1, #3
 800e41a:	f025 0503 	bic.w	r5, r5, #3
 800e41e:	3508      	adds	r5, #8
 800e420:	2d0c      	cmp	r5, #12
 800e422:	bf38      	it	cc
 800e424:	250c      	movcc	r5, #12
 800e426:	2d00      	cmp	r5, #0
 800e428:	4607      	mov	r7, r0
 800e42a:	db01      	blt.n	800e430 <_malloc_r+0x1c>
 800e42c:	42a9      	cmp	r1, r5
 800e42e:	d905      	bls.n	800e43c <_malloc_r+0x28>
 800e430:	230c      	movs	r3, #12
 800e432:	603b      	str	r3, [r7, #0]
 800e434:	2600      	movs	r6, #0
 800e436:	4630      	mov	r0, r6
 800e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e43c:	4e2e      	ldr	r6, [pc, #184]	; (800e4f8 <_malloc_r+0xe4>)
 800e43e:	f001 fb75 	bl	800fb2c <__malloc_lock>
 800e442:	6833      	ldr	r3, [r6, #0]
 800e444:	461c      	mov	r4, r3
 800e446:	bb34      	cbnz	r4, 800e496 <_malloc_r+0x82>
 800e448:	4629      	mov	r1, r5
 800e44a:	4638      	mov	r0, r7
 800e44c:	f7ff ffc2 	bl	800e3d4 <sbrk_aligned>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	4604      	mov	r4, r0
 800e454:	d14d      	bne.n	800e4f2 <_malloc_r+0xde>
 800e456:	6834      	ldr	r4, [r6, #0]
 800e458:	4626      	mov	r6, r4
 800e45a:	2e00      	cmp	r6, #0
 800e45c:	d140      	bne.n	800e4e0 <_malloc_r+0xcc>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	4631      	mov	r1, r6
 800e462:	4638      	mov	r0, r7
 800e464:	eb04 0803 	add.w	r8, r4, r3
 800e468:	f000 fcb2 	bl	800edd0 <_sbrk_r>
 800e46c:	4580      	cmp	r8, r0
 800e46e:	d13a      	bne.n	800e4e6 <_malloc_r+0xd2>
 800e470:	6821      	ldr	r1, [r4, #0]
 800e472:	3503      	adds	r5, #3
 800e474:	1a6d      	subs	r5, r5, r1
 800e476:	f025 0503 	bic.w	r5, r5, #3
 800e47a:	3508      	adds	r5, #8
 800e47c:	2d0c      	cmp	r5, #12
 800e47e:	bf38      	it	cc
 800e480:	250c      	movcc	r5, #12
 800e482:	4629      	mov	r1, r5
 800e484:	4638      	mov	r0, r7
 800e486:	f7ff ffa5 	bl	800e3d4 <sbrk_aligned>
 800e48a:	3001      	adds	r0, #1
 800e48c:	d02b      	beq.n	800e4e6 <_malloc_r+0xd2>
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	442b      	add	r3, r5
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	e00e      	b.n	800e4b4 <_malloc_r+0xa0>
 800e496:	6822      	ldr	r2, [r4, #0]
 800e498:	1b52      	subs	r2, r2, r5
 800e49a:	d41e      	bmi.n	800e4da <_malloc_r+0xc6>
 800e49c:	2a0b      	cmp	r2, #11
 800e49e:	d916      	bls.n	800e4ce <_malloc_r+0xba>
 800e4a0:	1961      	adds	r1, r4, r5
 800e4a2:	42a3      	cmp	r3, r4
 800e4a4:	6025      	str	r5, [r4, #0]
 800e4a6:	bf18      	it	ne
 800e4a8:	6059      	strne	r1, [r3, #4]
 800e4aa:	6863      	ldr	r3, [r4, #4]
 800e4ac:	bf08      	it	eq
 800e4ae:	6031      	streq	r1, [r6, #0]
 800e4b0:	5162      	str	r2, [r4, r5]
 800e4b2:	604b      	str	r3, [r1, #4]
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	f104 060b 	add.w	r6, r4, #11
 800e4ba:	f001 fb3d 	bl	800fb38 <__malloc_unlock>
 800e4be:	f026 0607 	bic.w	r6, r6, #7
 800e4c2:	1d23      	adds	r3, r4, #4
 800e4c4:	1af2      	subs	r2, r6, r3
 800e4c6:	d0b6      	beq.n	800e436 <_malloc_r+0x22>
 800e4c8:	1b9b      	subs	r3, r3, r6
 800e4ca:	50a3      	str	r3, [r4, r2]
 800e4cc:	e7b3      	b.n	800e436 <_malloc_r+0x22>
 800e4ce:	6862      	ldr	r2, [r4, #4]
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	bf0c      	ite	eq
 800e4d4:	6032      	streq	r2, [r6, #0]
 800e4d6:	605a      	strne	r2, [r3, #4]
 800e4d8:	e7ec      	b.n	800e4b4 <_malloc_r+0xa0>
 800e4da:	4623      	mov	r3, r4
 800e4dc:	6864      	ldr	r4, [r4, #4]
 800e4de:	e7b2      	b.n	800e446 <_malloc_r+0x32>
 800e4e0:	4634      	mov	r4, r6
 800e4e2:	6876      	ldr	r6, [r6, #4]
 800e4e4:	e7b9      	b.n	800e45a <_malloc_r+0x46>
 800e4e6:	230c      	movs	r3, #12
 800e4e8:	603b      	str	r3, [r7, #0]
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	f001 fb24 	bl	800fb38 <__malloc_unlock>
 800e4f0:	e7a1      	b.n	800e436 <_malloc_r+0x22>
 800e4f2:	6025      	str	r5, [r4, #0]
 800e4f4:	e7de      	b.n	800e4b4 <_malloc_r+0xa0>
 800e4f6:	bf00      	nop
 800e4f8:	20001530 	.word	0x20001530

0800e4fc <__cvt>:
 800e4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e500:	ec55 4b10 	vmov	r4, r5, d0
 800e504:	2d00      	cmp	r5, #0
 800e506:	460e      	mov	r6, r1
 800e508:	4619      	mov	r1, r3
 800e50a:	462b      	mov	r3, r5
 800e50c:	bfbb      	ittet	lt
 800e50e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e512:	461d      	movlt	r5, r3
 800e514:	2300      	movge	r3, #0
 800e516:	232d      	movlt	r3, #45	; 0x2d
 800e518:	700b      	strb	r3, [r1, #0]
 800e51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e51c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e520:	4691      	mov	r9, r2
 800e522:	f023 0820 	bic.w	r8, r3, #32
 800e526:	bfbc      	itt	lt
 800e528:	4622      	movlt	r2, r4
 800e52a:	4614      	movlt	r4, r2
 800e52c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e530:	d005      	beq.n	800e53e <__cvt+0x42>
 800e532:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e536:	d100      	bne.n	800e53a <__cvt+0x3e>
 800e538:	3601      	adds	r6, #1
 800e53a:	2102      	movs	r1, #2
 800e53c:	e000      	b.n	800e540 <__cvt+0x44>
 800e53e:	2103      	movs	r1, #3
 800e540:	ab03      	add	r3, sp, #12
 800e542:	9301      	str	r3, [sp, #4]
 800e544:	ab02      	add	r3, sp, #8
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	ec45 4b10 	vmov	d0, r4, r5
 800e54c:	4653      	mov	r3, sl
 800e54e:	4632      	mov	r2, r6
 800e550:	f000 fcfa 	bl	800ef48 <_dtoa_r>
 800e554:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e558:	4607      	mov	r7, r0
 800e55a:	d102      	bne.n	800e562 <__cvt+0x66>
 800e55c:	f019 0f01 	tst.w	r9, #1
 800e560:	d022      	beq.n	800e5a8 <__cvt+0xac>
 800e562:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e566:	eb07 0906 	add.w	r9, r7, r6
 800e56a:	d110      	bne.n	800e58e <__cvt+0x92>
 800e56c:	783b      	ldrb	r3, [r7, #0]
 800e56e:	2b30      	cmp	r3, #48	; 0x30
 800e570:	d10a      	bne.n	800e588 <__cvt+0x8c>
 800e572:	2200      	movs	r2, #0
 800e574:	2300      	movs	r3, #0
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f2 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e57e:	b918      	cbnz	r0, 800e588 <__cvt+0x8c>
 800e580:	f1c6 0601 	rsb	r6, r6, #1
 800e584:	f8ca 6000 	str.w	r6, [sl]
 800e588:	f8da 3000 	ldr.w	r3, [sl]
 800e58c:	4499      	add	r9, r3
 800e58e:	2200      	movs	r2, #0
 800e590:	2300      	movs	r3, #0
 800e592:	4620      	mov	r0, r4
 800e594:	4629      	mov	r1, r5
 800e596:	f7f2 fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800e59a:	b108      	cbz	r0, 800e5a0 <__cvt+0xa4>
 800e59c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5a0:	2230      	movs	r2, #48	; 0x30
 800e5a2:	9b03      	ldr	r3, [sp, #12]
 800e5a4:	454b      	cmp	r3, r9
 800e5a6:	d307      	bcc.n	800e5b8 <__cvt+0xbc>
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5ac:	1bdb      	subs	r3, r3, r7
 800e5ae:	4638      	mov	r0, r7
 800e5b0:	6013      	str	r3, [r2, #0]
 800e5b2:	b004      	add	sp, #16
 800e5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5b8:	1c59      	adds	r1, r3, #1
 800e5ba:	9103      	str	r1, [sp, #12]
 800e5bc:	701a      	strb	r2, [r3, #0]
 800e5be:	e7f0      	b.n	800e5a2 <__cvt+0xa6>

0800e5c0 <__exponent>:
 800e5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2900      	cmp	r1, #0
 800e5c6:	bfb8      	it	lt
 800e5c8:	4249      	neglt	r1, r1
 800e5ca:	f803 2b02 	strb.w	r2, [r3], #2
 800e5ce:	bfb4      	ite	lt
 800e5d0:	222d      	movlt	r2, #45	; 0x2d
 800e5d2:	222b      	movge	r2, #43	; 0x2b
 800e5d4:	2909      	cmp	r1, #9
 800e5d6:	7042      	strb	r2, [r0, #1]
 800e5d8:	dd2a      	ble.n	800e630 <__exponent+0x70>
 800e5da:	f10d 0407 	add.w	r4, sp, #7
 800e5de:	46a4      	mov	ip, r4
 800e5e0:	270a      	movs	r7, #10
 800e5e2:	46a6      	mov	lr, r4
 800e5e4:	460a      	mov	r2, r1
 800e5e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800e5ea:	fb07 1516 	mls	r5, r7, r6, r1
 800e5ee:	3530      	adds	r5, #48	; 0x30
 800e5f0:	2a63      	cmp	r2, #99	; 0x63
 800e5f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e5f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e5fa:	4631      	mov	r1, r6
 800e5fc:	dcf1      	bgt.n	800e5e2 <__exponent+0x22>
 800e5fe:	3130      	adds	r1, #48	; 0x30
 800e600:	f1ae 0502 	sub.w	r5, lr, #2
 800e604:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e608:	1c44      	adds	r4, r0, #1
 800e60a:	4629      	mov	r1, r5
 800e60c:	4561      	cmp	r1, ip
 800e60e:	d30a      	bcc.n	800e626 <__exponent+0x66>
 800e610:	f10d 0209 	add.w	r2, sp, #9
 800e614:	eba2 020e 	sub.w	r2, r2, lr
 800e618:	4565      	cmp	r5, ip
 800e61a:	bf88      	it	hi
 800e61c:	2200      	movhi	r2, #0
 800e61e:	4413      	add	r3, r2
 800e620:	1a18      	subs	r0, r3, r0
 800e622:	b003      	add	sp, #12
 800e624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e62a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e62e:	e7ed      	b.n	800e60c <__exponent+0x4c>
 800e630:	2330      	movs	r3, #48	; 0x30
 800e632:	3130      	adds	r1, #48	; 0x30
 800e634:	7083      	strb	r3, [r0, #2]
 800e636:	70c1      	strb	r1, [r0, #3]
 800e638:	1d03      	adds	r3, r0, #4
 800e63a:	e7f1      	b.n	800e620 <__exponent+0x60>

0800e63c <_printf_float>:
 800e63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e640:	ed2d 8b02 	vpush	{d8}
 800e644:	b08d      	sub	sp, #52	; 0x34
 800e646:	460c      	mov	r4, r1
 800e648:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e64c:	4616      	mov	r6, r2
 800e64e:	461f      	mov	r7, r3
 800e650:	4605      	mov	r5, r0
 800e652:	f001 fa67 	bl	800fb24 <_localeconv_r>
 800e656:	f8d0 a000 	ldr.w	sl, [r0]
 800e65a:	4650      	mov	r0, sl
 800e65c:	f7f1 fdb8 	bl	80001d0 <strlen>
 800e660:	2300      	movs	r3, #0
 800e662:	930a      	str	r3, [sp, #40]	; 0x28
 800e664:	6823      	ldr	r3, [r4, #0]
 800e666:	9305      	str	r3, [sp, #20]
 800e668:	f8d8 3000 	ldr.w	r3, [r8]
 800e66c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e670:	3307      	adds	r3, #7
 800e672:	f023 0307 	bic.w	r3, r3, #7
 800e676:	f103 0208 	add.w	r2, r3, #8
 800e67a:	f8c8 2000 	str.w	r2, [r8]
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e686:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e68a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e68e:	9307      	str	r3, [sp, #28]
 800e690:	f8cd 8018 	str.w	r8, [sp, #24]
 800e694:	ee08 0a10 	vmov	s16, r0
 800e698:	4b9f      	ldr	r3, [pc, #636]	; (800e918 <_printf_float+0x2dc>)
 800e69a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e69e:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a2:	f7f2 fa43 	bl	8000b2c <__aeabi_dcmpun>
 800e6a6:	bb88      	cbnz	r0, 800e70c <_printf_float+0xd0>
 800e6a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6ac:	4b9a      	ldr	r3, [pc, #616]	; (800e918 <_printf_float+0x2dc>)
 800e6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e6b2:	f7f2 fa1d 	bl	8000af0 <__aeabi_dcmple>
 800e6b6:	bb48      	cbnz	r0, 800e70c <_printf_float+0xd0>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	4640      	mov	r0, r8
 800e6be:	4649      	mov	r1, r9
 800e6c0:	f7f2 fa0c 	bl	8000adc <__aeabi_dcmplt>
 800e6c4:	b110      	cbz	r0, 800e6cc <_printf_float+0x90>
 800e6c6:	232d      	movs	r3, #45	; 0x2d
 800e6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6cc:	4b93      	ldr	r3, [pc, #588]	; (800e91c <_printf_float+0x2e0>)
 800e6ce:	4894      	ldr	r0, [pc, #592]	; (800e920 <_printf_float+0x2e4>)
 800e6d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e6d4:	bf94      	ite	ls
 800e6d6:	4698      	movls	r8, r3
 800e6d8:	4680      	movhi	r8, r0
 800e6da:	2303      	movs	r3, #3
 800e6dc:	6123      	str	r3, [r4, #16]
 800e6de:	9b05      	ldr	r3, [sp, #20]
 800e6e0:	f023 0204 	bic.w	r2, r3, #4
 800e6e4:	6022      	str	r2, [r4, #0]
 800e6e6:	f04f 0900 	mov.w	r9, #0
 800e6ea:	9700      	str	r7, [sp, #0]
 800e6ec:	4633      	mov	r3, r6
 800e6ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	f000 f9d8 	bl	800eaa8 <_printf_common>
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	f040 8090 	bne.w	800e81e <_printf_float+0x1e2>
 800e6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e702:	b00d      	add	sp, #52	; 0x34
 800e704:	ecbd 8b02 	vpop	{d8}
 800e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70c:	4642      	mov	r2, r8
 800e70e:	464b      	mov	r3, r9
 800e710:	4640      	mov	r0, r8
 800e712:	4649      	mov	r1, r9
 800e714:	f7f2 fa0a 	bl	8000b2c <__aeabi_dcmpun>
 800e718:	b140      	cbz	r0, 800e72c <_printf_float+0xf0>
 800e71a:	464b      	mov	r3, r9
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	bfbc      	itt	lt
 800e720:	232d      	movlt	r3, #45	; 0x2d
 800e722:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e726:	487f      	ldr	r0, [pc, #508]	; (800e924 <_printf_float+0x2e8>)
 800e728:	4b7f      	ldr	r3, [pc, #508]	; (800e928 <_printf_float+0x2ec>)
 800e72a:	e7d1      	b.n	800e6d0 <_printf_float+0x94>
 800e72c:	6863      	ldr	r3, [r4, #4]
 800e72e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e732:	9206      	str	r2, [sp, #24]
 800e734:	1c5a      	adds	r2, r3, #1
 800e736:	d13f      	bne.n	800e7b8 <_printf_float+0x17c>
 800e738:	2306      	movs	r3, #6
 800e73a:	6063      	str	r3, [r4, #4]
 800e73c:	9b05      	ldr	r3, [sp, #20]
 800e73e:	6861      	ldr	r1, [r4, #4]
 800e740:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e744:	2300      	movs	r3, #0
 800e746:	9303      	str	r3, [sp, #12]
 800e748:	ab0a      	add	r3, sp, #40	; 0x28
 800e74a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e74e:	ab09      	add	r3, sp, #36	; 0x24
 800e750:	ec49 8b10 	vmov	d0, r8, r9
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	6022      	str	r2, [r4, #0]
 800e758:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e75c:	4628      	mov	r0, r5
 800e75e:	f7ff fecd 	bl	800e4fc <__cvt>
 800e762:	9b06      	ldr	r3, [sp, #24]
 800e764:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e766:	2b47      	cmp	r3, #71	; 0x47
 800e768:	4680      	mov	r8, r0
 800e76a:	d108      	bne.n	800e77e <_printf_float+0x142>
 800e76c:	1cc8      	adds	r0, r1, #3
 800e76e:	db02      	blt.n	800e776 <_printf_float+0x13a>
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	4299      	cmp	r1, r3
 800e774:	dd41      	ble.n	800e7fa <_printf_float+0x1be>
 800e776:	f1ab 0b02 	sub.w	fp, fp, #2
 800e77a:	fa5f fb8b 	uxtb.w	fp, fp
 800e77e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e782:	d820      	bhi.n	800e7c6 <_printf_float+0x18a>
 800e784:	3901      	subs	r1, #1
 800e786:	465a      	mov	r2, fp
 800e788:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e78c:	9109      	str	r1, [sp, #36]	; 0x24
 800e78e:	f7ff ff17 	bl	800e5c0 <__exponent>
 800e792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e794:	1813      	adds	r3, r2, r0
 800e796:	2a01      	cmp	r2, #1
 800e798:	4681      	mov	r9, r0
 800e79a:	6123      	str	r3, [r4, #16]
 800e79c:	dc02      	bgt.n	800e7a4 <_printf_float+0x168>
 800e79e:	6822      	ldr	r2, [r4, #0]
 800e7a0:	07d2      	lsls	r2, r2, #31
 800e7a2:	d501      	bpl.n	800e7a8 <_printf_float+0x16c>
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	6123      	str	r3, [r4, #16]
 800e7a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d09c      	beq.n	800e6ea <_printf_float+0xae>
 800e7b0:	232d      	movs	r3, #45	; 0x2d
 800e7b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7b6:	e798      	b.n	800e6ea <_printf_float+0xae>
 800e7b8:	9a06      	ldr	r2, [sp, #24]
 800e7ba:	2a47      	cmp	r2, #71	; 0x47
 800e7bc:	d1be      	bne.n	800e73c <_printf_float+0x100>
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1bc      	bne.n	800e73c <_printf_float+0x100>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e7b9      	b.n	800e73a <_printf_float+0xfe>
 800e7c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e7ca:	d118      	bne.n	800e7fe <_printf_float+0x1c2>
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	6863      	ldr	r3, [r4, #4]
 800e7d0:	dd0b      	ble.n	800e7ea <_printf_float+0x1ae>
 800e7d2:	6121      	str	r1, [r4, #16]
 800e7d4:	b913      	cbnz	r3, 800e7dc <_printf_float+0x1a0>
 800e7d6:	6822      	ldr	r2, [r4, #0]
 800e7d8:	07d0      	lsls	r0, r2, #31
 800e7da:	d502      	bpl.n	800e7e2 <_printf_float+0x1a6>
 800e7dc:	3301      	adds	r3, #1
 800e7de:	440b      	add	r3, r1
 800e7e0:	6123      	str	r3, [r4, #16]
 800e7e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e7e4:	f04f 0900 	mov.w	r9, #0
 800e7e8:	e7de      	b.n	800e7a8 <_printf_float+0x16c>
 800e7ea:	b913      	cbnz	r3, 800e7f2 <_printf_float+0x1b6>
 800e7ec:	6822      	ldr	r2, [r4, #0]
 800e7ee:	07d2      	lsls	r2, r2, #31
 800e7f0:	d501      	bpl.n	800e7f6 <_printf_float+0x1ba>
 800e7f2:	3302      	adds	r3, #2
 800e7f4:	e7f4      	b.n	800e7e0 <_printf_float+0x1a4>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e7f2      	b.n	800e7e0 <_printf_float+0x1a4>
 800e7fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e800:	4299      	cmp	r1, r3
 800e802:	db05      	blt.n	800e810 <_printf_float+0x1d4>
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	6121      	str	r1, [r4, #16]
 800e808:	07d8      	lsls	r0, r3, #31
 800e80a:	d5ea      	bpl.n	800e7e2 <_printf_float+0x1a6>
 800e80c:	1c4b      	adds	r3, r1, #1
 800e80e:	e7e7      	b.n	800e7e0 <_printf_float+0x1a4>
 800e810:	2900      	cmp	r1, #0
 800e812:	bfd4      	ite	le
 800e814:	f1c1 0202 	rsble	r2, r1, #2
 800e818:	2201      	movgt	r2, #1
 800e81a:	4413      	add	r3, r2
 800e81c:	e7e0      	b.n	800e7e0 <_printf_float+0x1a4>
 800e81e:	6823      	ldr	r3, [r4, #0]
 800e820:	055a      	lsls	r2, r3, #21
 800e822:	d407      	bmi.n	800e834 <_printf_float+0x1f8>
 800e824:	6923      	ldr	r3, [r4, #16]
 800e826:	4642      	mov	r2, r8
 800e828:	4631      	mov	r1, r6
 800e82a:	4628      	mov	r0, r5
 800e82c:	47b8      	blx	r7
 800e82e:	3001      	adds	r0, #1
 800e830:	d12c      	bne.n	800e88c <_printf_float+0x250>
 800e832:	e764      	b.n	800e6fe <_printf_float+0xc2>
 800e834:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e838:	f240 80e0 	bls.w	800e9fc <_printf_float+0x3c0>
 800e83c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e840:	2200      	movs	r2, #0
 800e842:	2300      	movs	r3, #0
 800e844:	f7f2 f940 	bl	8000ac8 <__aeabi_dcmpeq>
 800e848:	2800      	cmp	r0, #0
 800e84a:	d034      	beq.n	800e8b6 <_printf_float+0x27a>
 800e84c:	4a37      	ldr	r2, [pc, #220]	; (800e92c <_printf_float+0x2f0>)
 800e84e:	2301      	movs	r3, #1
 800e850:	4631      	mov	r1, r6
 800e852:	4628      	mov	r0, r5
 800e854:	47b8      	blx	r7
 800e856:	3001      	adds	r0, #1
 800e858:	f43f af51 	beq.w	800e6fe <_printf_float+0xc2>
 800e85c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e860:	429a      	cmp	r2, r3
 800e862:	db02      	blt.n	800e86a <_printf_float+0x22e>
 800e864:	6823      	ldr	r3, [r4, #0]
 800e866:	07d8      	lsls	r0, r3, #31
 800e868:	d510      	bpl.n	800e88c <_printf_float+0x250>
 800e86a:	ee18 3a10 	vmov	r3, s16
 800e86e:	4652      	mov	r2, sl
 800e870:	4631      	mov	r1, r6
 800e872:	4628      	mov	r0, r5
 800e874:	47b8      	blx	r7
 800e876:	3001      	adds	r0, #1
 800e878:	f43f af41 	beq.w	800e6fe <_printf_float+0xc2>
 800e87c:	f04f 0800 	mov.w	r8, #0
 800e880:	f104 091a 	add.w	r9, r4, #26
 800e884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e886:	3b01      	subs	r3, #1
 800e888:	4543      	cmp	r3, r8
 800e88a:	dc09      	bgt.n	800e8a0 <_printf_float+0x264>
 800e88c:	6823      	ldr	r3, [r4, #0]
 800e88e:	079b      	lsls	r3, r3, #30
 800e890:	f100 8105 	bmi.w	800ea9e <_printf_float+0x462>
 800e894:	68e0      	ldr	r0, [r4, #12]
 800e896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e898:	4298      	cmp	r0, r3
 800e89a:	bfb8      	it	lt
 800e89c:	4618      	movlt	r0, r3
 800e89e:	e730      	b.n	800e702 <_printf_float+0xc6>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	464a      	mov	r2, r9
 800e8a4:	4631      	mov	r1, r6
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	47b8      	blx	r7
 800e8aa:	3001      	adds	r0, #1
 800e8ac:	f43f af27 	beq.w	800e6fe <_printf_float+0xc2>
 800e8b0:	f108 0801 	add.w	r8, r8, #1
 800e8b4:	e7e6      	b.n	800e884 <_printf_float+0x248>
 800e8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	dc39      	bgt.n	800e930 <_printf_float+0x2f4>
 800e8bc:	4a1b      	ldr	r2, [pc, #108]	; (800e92c <_printf_float+0x2f0>)
 800e8be:	2301      	movs	r3, #1
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	47b8      	blx	r7
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	f43f af19 	beq.w	800e6fe <_printf_float+0xc2>
 800e8cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	d102      	bne.n	800e8da <_printf_float+0x29e>
 800e8d4:	6823      	ldr	r3, [r4, #0]
 800e8d6:	07d9      	lsls	r1, r3, #31
 800e8d8:	d5d8      	bpl.n	800e88c <_printf_float+0x250>
 800e8da:	ee18 3a10 	vmov	r3, s16
 800e8de:	4652      	mov	r2, sl
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	47b8      	blx	r7
 800e8e6:	3001      	adds	r0, #1
 800e8e8:	f43f af09 	beq.w	800e6fe <_printf_float+0xc2>
 800e8ec:	f04f 0900 	mov.w	r9, #0
 800e8f0:	f104 0a1a 	add.w	sl, r4, #26
 800e8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f6:	425b      	negs	r3, r3
 800e8f8:	454b      	cmp	r3, r9
 800e8fa:	dc01      	bgt.n	800e900 <_printf_float+0x2c4>
 800e8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8fe:	e792      	b.n	800e826 <_printf_float+0x1ea>
 800e900:	2301      	movs	r3, #1
 800e902:	4652      	mov	r2, sl
 800e904:	4631      	mov	r1, r6
 800e906:	4628      	mov	r0, r5
 800e908:	47b8      	blx	r7
 800e90a:	3001      	adds	r0, #1
 800e90c:	f43f aef7 	beq.w	800e6fe <_printf_float+0xc2>
 800e910:	f109 0901 	add.w	r9, r9, #1
 800e914:	e7ee      	b.n	800e8f4 <_printf_float+0x2b8>
 800e916:	bf00      	nop
 800e918:	7fefffff 	.word	0x7fefffff
 800e91c:	080115a4 	.word	0x080115a4
 800e920:	080115a8 	.word	0x080115a8
 800e924:	080115b0 	.word	0x080115b0
 800e928:	080115ac 	.word	0x080115ac
 800e92c:	080115b4 	.word	0x080115b4
 800e930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e934:	429a      	cmp	r2, r3
 800e936:	bfa8      	it	ge
 800e938:	461a      	movge	r2, r3
 800e93a:	2a00      	cmp	r2, #0
 800e93c:	4691      	mov	r9, r2
 800e93e:	dc37      	bgt.n	800e9b0 <_printf_float+0x374>
 800e940:	f04f 0b00 	mov.w	fp, #0
 800e944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e948:	f104 021a 	add.w	r2, r4, #26
 800e94c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e94e:	9305      	str	r3, [sp, #20]
 800e950:	eba3 0309 	sub.w	r3, r3, r9
 800e954:	455b      	cmp	r3, fp
 800e956:	dc33      	bgt.n	800e9c0 <_printf_float+0x384>
 800e958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e95c:	429a      	cmp	r2, r3
 800e95e:	db3b      	blt.n	800e9d8 <_printf_float+0x39c>
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	07da      	lsls	r2, r3, #31
 800e964:	d438      	bmi.n	800e9d8 <_printf_float+0x39c>
 800e966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e968:	9a05      	ldr	r2, [sp, #20]
 800e96a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e96c:	1a9a      	subs	r2, r3, r2
 800e96e:	eba3 0901 	sub.w	r9, r3, r1
 800e972:	4591      	cmp	r9, r2
 800e974:	bfa8      	it	ge
 800e976:	4691      	movge	r9, r2
 800e978:	f1b9 0f00 	cmp.w	r9, #0
 800e97c:	dc35      	bgt.n	800e9ea <_printf_float+0x3ae>
 800e97e:	f04f 0800 	mov.w	r8, #0
 800e982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e986:	f104 0a1a 	add.w	sl, r4, #26
 800e98a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e98e:	1a9b      	subs	r3, r3, r2
 800e990:	eba3 0309 	sub.w	r3, r3, r9
 800e994:	4543      	cmp	r3, r8
 800e996:	f77f af79 	ble.w	800e88c <_printf_float+0x250>
 800e99a:	2301      	movs	r3, #1
 800e99c:	4652      	mov	r2, sl
 800e99e:	4631      	mov	r1, r6
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	47b8      	blx	r7
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	f43f aeaa 	beq.w	800e6fe <_printf_float+0xc2>
 800e9aa:	f108 0801 	add.w	r8, r8, #1
 800e9ae:	e7ec      	b.n	800e98a <_printf_float+0x34e>
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	4642      	mov	r2, r8
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	47b8      	blx	r7
 800e9ba:	3001      	adds	r0, #1
 800e9bc:	d1c0      	bne.n	800e940 <_printf_float+0x304>
 800e9be:	e69e      	b.n	800e6fe <_printf_float+0xc2>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	9205      	str	r2, [sp, #20]
 800e9c8:	47b8      	blx	r7
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	f43f ae97 	beq.w	800e6fe <_printf_float+0xc2>
 800e9d0:	9a05      	ldr	r2, [sp, #20]
 800e9d2:	f10b 0b01 	add.w	fp, fp, #1
 800e9d6:	e7b9      	b.n	800e94c <_printf_float+0x310>
 800e9d8:	ee18 3a10 	vmov	r3, s16
 800e9dc:	4652      	mov	r2, sl
 800e9de:	4631      	mov	r1, r6
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	47b8      	blx	r7
 800e9e4:	3001      	adds	r0, #1
 800e9e6:	d1be      	bne.n	800e966 <_printf_float+0x32a>
 800e9e8:	e689      	b.n	800e6fe <_printf_float+0xc2>
 800e9ea:	9a05      	ldr	r2, [sp, #20]
 800e9ec:	464b      	mov	r3, r9
 800e9ee:	4442      	add	r2, r8
 800e9f0:	4631      	mov	r1, r6
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	47b8      	blx	r7
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	d1c1      	bne.n	800e97e <_printf_float+0x342>
 800e9fa:	e680      	b.n	800e6fe <_printf_float+0xc2>
 800e9fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9fe:	2a01      	cmp	r2, #1
 800ea00:	dc01      	bgt.n	800ea06 <_printf_float+0x3ca>
 800ea02:	07db      	lsls	r3, r3, #31
 800ea04:	d538      	bpl.n	800ea78 <_printf_float+0x43c>
 800ea06:	2301      	movs	r3, #1
 800ea08:	4642      	mov	r2, r8
 800ea0a:	4631      	mov	r1, r6
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	47b8      	blx	r7
 800ea10:	3001      	adds	r0, #1
 800ea12:	f43f ae74 	beq.w	800e6fe <_printf_float+0xc2>
 800ea16:	ee18 3a10 	vmov	r3, s16
 800ea1a:	4652      	mov	r2, sl
 800ea1c:	4631      	mov	r1, r6
 800ea1e:	4628      	mov	r0, r5
 800ea20:	47b8      	blx	r7
 800ea22:	3001      	adds	r0, #1
 800ea24:	f43f ae6b 	beq.w	800e6fe <_printf_float+0xc2>
 800ea28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f7f2 f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea34:	b9d8      	cbnz	r0, 800ea6e <_printf_float+0x432>
 800ea36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea38:	f108 0201 	add.w	r2, r8, #1
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	4631      	mov	r1, r6
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b8      	blx	r7
 800ea44:	3001      	adds	r0, #1
 800ea46:	d10e      	bne.n	800ea66 <_printf_float+0x42a>
 800ea48:	e659      	b.n	800e6fe <_printf_float+0xc2>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4652      	mov	r2, sl
 800ea4e:	4631      	mov	r1, r6
 800ea50:	4628      	mov	r0, r5
 800ea52:	47b8      	blx	r7
 800ea54:	3001      	adds	r0, #1
 800ea56:	f43f ae52 	beq.w	800e6fe <_printf_float+0xc2>
 800ea5a:	f108 0801 	add.w	r8, r8, #1
 800ea5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea60:	3b01      	subs	r3, #1
 800ea62:	4543      	cmp	r3, r8
 800ea64:	dcf1      	bgt.n	800ea4a <_printf_float+0x40e>
 800ea66:	464b      	mov	r3, r9
 800ea68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ea6c:	e6dc      	b.n	800e828 <_printf_float+0x1ec>
 800ea6e:	f04f 0800 	mov.w	r8, #0
 800ea72:	f104 0a1a 	add.w	sl, r4, #26
 800ea76:	e7f2      	b.n	800ea5e <_printf_float+0x422>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	4642      	mov	r2, r8
 800ea7c:	e7df      	b.n	800ea3e <_printf_float+0x402>
 800ea7e:	2301      	movs	r3, #1
 800ea80:	464a      	mov	r2, r9
 800ea82:	4631      	mov	r1, r6
 800ea84:	4628      	mov	r0, r5
 800ea86:	47b8      	blx	r7
 800ea88:	3001      	adds	r0, #1
 800ea8a:	f43f ae38 	beq.w	800e6fe <_printf_float+0xc2>
 800ea8e:	f108 0801 	add.w	r8, r8, #1
 800ea92:	68e3      	ldr	r3, [r4, #12]
 800ea94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea96:	1a5b      	subs	r3, r3, r1
 800ea98:	4543      	cmp	r3, r8
 800ea9a:	dcf0      	bgt.n	800ea7e <_printf_float+0x442>
 800ea9c:	e6fa      	b.n	800e894 <_printf_float+0x258>
 800ea9e:	f04f 0800 	mov.w	r8, #0
 800eaa2:	f104 0919 	add.w	r9, r4, #25
 800eaa6:	e7f4      	b.n	800ea92 <_printf_float+0x456>

0800eaa8 <_printf_common>:
 800eaa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaac:	4616      	mov	r6, r2
 800eaae:	4699      	mov	r9, r3
 800eab0:	688a      	ldr	r2, [r1, #8]
 800eab2:	690b      	ldr	r3, [r1, #16]
 800eab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eab8:	4293      	cmp	r3, r2
 800eaba:	bfb8      	it	lt
 800eabc:	4613      	movlt	r3, r2
 800eabe:	6033      	str	r3, [r6, #0]
 800eac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eac4:	4607      	mov	r7, r0
 800eac6:	460c      	mov	r4, r1
 800eac8:	b10a      	cbz	r2, 800eace <_printf_common+0x26>
 800eaca:	3301      	adds	r3, #1
 800eacc:	6033      	str	r3, [r6, #0]
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	0699      	lsls	r1, r3, #26
 800ead2:	bf42      	ittt	mi
 800ead4:	6833      	ldrmi	r3, [r6, #0]
 800ead6:	3302      	addmi	r3, #2
 800ead8:	6033      	strmi	r3, [r6, #0]
 800eada:	6825      	ldr	r5, [r4, #0]
 800eadc:	f015 0506 	ands.w	r5, r5, #6
 800eae0:	d106      	bne.n	800eaf0 <_printf_common+0x48>
 800eae2:	f104 0a19 	add.w	sl, r4, #25
 800eae6:	68e3      	ldr	r3, [r4, #12]
 800eae8:	6832      	ldr	r2, [r6, #0]
 800eaea:	1a9b      	subs	r3, r3, r2
 800eaec:	42ab      	cmp	r3, r5
 800eaee:	dc26      	bgt.n	800eb3e <_printf_common+0x96>
 800eaf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eaf4:	1e13      	subs	r3, r2, #0
 800eaf6:	6822      	ldr	r2, [r4, #0]
 800eaf8:	bf18      	it	ne
 800eafa:	2301      	movne	r3, #1
 800eafc:	0692      	lsls	r2, r2, #26
 800eafe:	d42b      	bmi.n	800eb58 <_printf_common+0xb0>
 800eb00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb04:	4649      	mov	r1, r9
 800eb06:	4638      	mov	r0, r7
 800eb08:	47c0      	blx	r8
 800eb0a:	3001      	adds	r0, #1
 800eb0c:	d01e      	beq.n	800eb4c <_printf_common+0xa4>
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	68e5      	ldr	r5, [r4, #12]
 800eb12:	6832      	ldr	r2, [r6, #0]
 800eb14:	f003 0306 	and.w	r3, r3, #6
 800eb18:	2b04      	cmp	r3, #4
 800eb1a:	bf08      	it	eq
 800eb1c:	1aad      	subeq	r5, r5, r2
 800eb1e:	68a3      	ldr	r3, [r4, #8]
 800eb20:	6922      	ldr	r2, [r4, #16]
 800eb22:	bf0c      	ite	eq
 800eb24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb28:	2500      	movne	r5, #0
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	bfc4      	itt	gt
 800eb2e:	1a9b      	subgt	r3, r3, r2
 800eb30:	18ed      	addgt	r5, r5, r3
 800eb32:	2600      	movs	r6, #0
 800eb34:	341a      	adds	r4, #26
 800eb36:	42b5      	cmp	r5, r6
 800eb38:	d11a      	bne.n	800eb70 <_printf_common+0xc8>
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	e008      	b.n	800eb50 <_printf_common+0xa8>
 800eb3e:	2301      	movs	r3, #1
 800eb40:	4652      	mov	r2, sl
 800eb42:	4649      	mov	r1, r9
 800eb44:	4638      	mov	r0, r7
 800eb46:	47c0      	blx	r8
 800eb48:	3001      	adds	r0, #1
 800eb4a:	d103      	bne.n	800eb54 <_printf_common+0xac>
 800eb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb54:	3501      	adds	r5, #1
 800eb56:	e7c6      	b.n	800eae6 <_printf_common+0x3e>
 800eb58:	18e1      	adds	r1, r4, r3
 800eb5a:	1c5a      	adds	r2, r3, #1
 800eb5c:	2030      	movs	r0, #48	; 0x30
 800eb5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb62:	4422      	add	r2, r4
 800eb64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb6c:	3302      	adds	r3, #2
 800eb6e:	e7c7      	b.n	800eb00 <_printf_common+0x58>
 800eb70:	2301      	movs	r3, #1
 800eb72:	4622      	mov	r2, r4
 800eb74:	4649      	mov	r1, r9
 800eb76:	4638      	mov	r0, r7
 800eb78:	47c0      	blx	r8
 800eb7a:	3001      	adds	r0, #1
 800eb7c:	d0e6      	beq.n	800eb4c <_printf_common+0xa4>
 800eb7e:	3601      	adds	r6, #1
 800eb80:	e7d9      	b.n	800eb36 <_printf_common+0x8e>
	...

0800eb84 <_printf_i>:
 800eb84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb88:	7e0f      	ldrb	r7, [r1, #24]
 800eb8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb8c:	2f78      	cmp	r7, #120	; 0x78
 800eb8e:	4691      	mov	r9, r2
 800eb90:	4680      	mov	r8, r0
 800eb92:	460c      	mov	r4, r1
 800eb94:	469a      	mov	sl, r3
 800eb96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb9a:	d807      	bhi.n	800ebac <_printf_i+0x28>
 800eb9c:	2f62      	cmp	r7, #98	; 0x62
 800eb9e:	d80a      	bhi.n	800ebb6 <_printf_i+0x32>
 800eba0:	2f00      	cmp	r7, #0
 800eba2:	f000 80d8 	beq.w	800ed56 <_printf_i+0x1d2>
 800eba6:	2f58      	cmp	r7, #88	; 0x58
 800eba8:	f000 80a3 	beq.w	800ecf2 <_printf_i+0x16e>
 800ebac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ebb4:	e03a      	b.n	800ec2c <_printf_i+0xa8>
 800ebb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ebba:	2b15      	cmp	r3, #21
 800ebbc:	d8f6      	bhi.n	800ebac <_printf_i+0x28>
 800ebbe:	a101      	add	r1, pc, #4	; (adr r1, 800ebc4 <_printf_i+0x40>)
 800ebc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebc4:	0800ec1d 	.word	0x0800ec1d
 800ebc8:	0800ec31 	.word	0x0800ec31
 800ebcc:	0800ebad 	.word	0x0800ebad
 800ebd0:	0800ebad 	.word	0x0800ebad
 800ebd4:	0800ebad 	.word	0x0800ebad
 800ebd8:	0800ebad 	.word	0x0800ebad
 800ebdc:	0800ec31 	.word	0x0800ec31
 800ebe0:	0800ebad 	.word	0x0800ebad
 800ebe4:	0800ebad 	.word	0x0800ebad
 800ebe8:	0800ebad 	.word	0x0800ebad
 800ebec:	0800ebad 	.word	0x0800ebad
 800ebf0:	0800ed3d 	.word	0x0800ed3d
 800ebf4:	0800ec61 	.word	0x0800ec61
 800ebf8:	0800ed1f 	.word	0x0800ed1f
 800ebfc:	0800ebad 	.word	0x0800ebad
 800ec00:	0800ebad 	.word	0x0800ebad
 800ec04:	0800ed5f 	.word	0x0800ed5f
 800ec08:	0800ebad 	.word	0x0800ebad
 800ec0c:	0800ec61 	.word	0x0800ec61
 800ec10:	0800ebad 	.word	0x0800ebad
 800ec14:	0800ebad 	.word	0x0800ebad
 800ec18:	0800ed27 	.word	0x0800ed27
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	1d1a      	adds	r2, r3, #4
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	602a      	str	r2, [r5, #0]
 800ec24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e0a3      	b.n	800ed78 <_printf_i+0x1f4>
 800ec30:	6820      	ldr	r0, [r4, #0]
 800ec32:	6829      	ldr	r1, [r5, #0]
 800ec34:	0606      	lsls	r6, r0, #24
 800ec36:	f101 0304 	add.w	r3, r1, #4
 800ec3a:	d50a      	bpl.n	800ec52 <_printf_i+0xce>
 800ec3c:	680e      	ldr	r6, [r1, #0]
 800ec3e:	602b      	str	r3, [r5, #0]
 800ec40:	2e00      	cmp	r6, #0
 800ec42:	da03      	bge.n	800ec4c <_printf_i+0xc8>
 800ec44:	232d      	movs	r3, #45	; 0x2d
 800ec46:	4276      	negs	r6, r6
 800ec48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec4c:	485e      	ldr	r0, [pc, #376]	; (800edc8 <_printf_i+0x244>)
 800ec4e:	230a      	movs	r3, #10
 800ec50:	e019      	b.n	800ec86 <_printf_i+0x102>
 800ec52:	680e      	ldr	r6, [r1, #0]
 800ec54:	602b      	str	r3, [r5, #0]
 800ec56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec5a:	bf18      	it	ne
 800ec5c:	b236      	sxthne	r6, r6
 800ec5e:	e7ef      	b.n	800ec40 <_printf_i+0xbc>
 800ec60:	682b      	ldr	r3, [r5, #0]
 800ec62:	6820      	ldr	r0, [r4, #0]
 800ec64:	1d19      	adds	r1, r3, #4
 800ec66:	6029      	str	r1, [r5, #0]
 800ec68:	0601      	lsls	r1, r0, #24
 800ec6a:	d501      	bpl.n	800ec70 <_printf_i+0xec>
 800ec6c:	681e      	ldr	r6, [r3, #0]
 800ec6e:	e002      	b.n	800ec76 <_printf_i+0xf2>
 800ec70:	0646      	lsls	r6, r0, #25
 800ec72:	d5fb      	bpl.n	800ec6c <_printf_i+0xe8>
 800ec74:	881e      	ldrh	r6, [r3, #0]
 800ec76:	4854      	ldr	r0, [pc, #336]	; (800edc8 <_printf_i+0x244>)
 800ec78:	2f6f      	cmp	r7, #111	; 0x6f
 800ec7a:	bf0c      	ite	eq
 800ec7c:	2308      	moveq	r3, #8
 800ec7e:	230a      	movne	r3, #10
 800ec80:	2100      	movs	r1, #0
 800ec82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec86:	6865      	ldr	r5, [r4, #4]
 800ec88:	60a5      	str	r5, [r4, #8]
 800ec8a:	2d00      	cmp	r5, #0
 800ec8c:	bfa2      	ittt	ge
 800ec8e:	6821      	ldrge	r1, [r4, #0]
 800ec90:	f021 0104 	bicge.w	r1, r1, #4
 800ec94:	6021      	strge	r1, [r4, #0]
 800ec96:	b90e      	cbnz	r6, 800ec9c <_printf_i+0x118>
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	d04d      	beq.n	800ed38 <_printf_i+0x1b4>
 800ec9c:	4615      	mov	r5, r2
 800ec9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800eca2:	fb03 6711 	mls	r7, r3, r1, r6
 800eca6:	5dc7      	ldrb	r7, [r0, r7]
 800eca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ecac:	4637      	mov	r7, r6
 800ecae:	42bb      	cmp	r3, r7
 800ecb0:	460e      	mov	r6, r1
 800ecb2:	d9f4      	bls.n	800ec9e <_printf_i+0x11a>
 800ecb4:	2b08      	cmp	r3, #8
 800ecb6:	d10b      	bne.n	800ecd0 <_printf_i+0x14c>
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	07de      	lsls	r6, r3, #31
 800ecbc:	d508      	bpl.n	800ecd0 <_printf_i+0x14c>
 800ecbe:	6923      	ldr	r3, [r4, #16]
 800ecc0:	6861      	ldr	r1, [r4, #4]
 800ecc2:	4299      	cmp	r1, r3
 800ecc4:	bfde      	ittt	le
 800ecc6:	2330      	movle	r3, #48	; 0x30
 800ecc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ecd0:	1b52      	subs	r2, r2, r5
 800ecd2:	6122      	str	r2, [r4, #16]
 800ecd4:	f8cd a000 	str.w	sl, [sp]
 800ecd8:	464b      	mov	r3, r9
 800ecda:	aa03      	add	r2, sp, #12
 800ecdc:	4621      	mov	r1, r4
 800ecde:	4640      	mov	r0, r8
 800ece0:	f7ff fee2 	bl	800eaa8 <_printf_common>
 800ece4:	3001      	adds	r0, #1
 800ece6:	d14c      	bne.n	800ed82 <_printf_i+0x1fe>
 800ece8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecec:	b004      	add	sp, #16
 800ecee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf2:	4835      	ldr	r0, [pc, #212]	; (800edc8 <_printf_i+0x244>)
 800ecf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ecf8:	6829      	ldr	r1, [r5, #0]
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed00:	6029      	str	r1, [r5, #0]
 800ed02:	061d      	lsls	r5, r3, #24
 800ed04:	d514      	bpl.n	800ed30 <_printf_i+0x1ac>
 800ed06:	07df      	lsls	r7, r3, #31
 800ed08:	bf44      	itt	mi
 800ed0a:	f043 0320 	orrmi.w	r3, r3, #32
 800ed0e:	6023      	strmi	r3, [r4, #0]
 800ed10:	b91e      	cbnz	r6, 800ed1a <_printf_i+0x196>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	f023 0320 	bic.w	r3, r3, #32
 800ed18:	6023      	str	r3, [r4, #0]
 800ed1a:	2310      	movs	r3, #16
 800ed1c:	e7b0      	b.n	800ec80 <_printf_i+0xfc>
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	f043 0320 	orr.w	r3, r3, #32
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	2378      	movs	r3, #120	; 0x78
 800ed28:	4828      	ldr	r0, [pc, #160]	; (800edcc <_printf_i+0x248>)
 800ed2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed2e:	e7e3      	b.n	800ecf8 <_printf_i+0x174>
 800ed30:	0659      	lsls	r1, r3, #25
 800ed32:	bf48      	it	mi
 800ed34:	b2b6      	uxthmi	r6, r6
 800ed36:	e7e6      	b.n	800ed06 <_printf_i+0x182>
 800ed38:	4615      	mov	r5, r2
 800ed3a:	e7bb      	b.n	800ecb4 <_printf_i+0x130>
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	6826      	ldr	r6, [r4, #0]
 800ed40:	6961      	ldr	r1, [r4, #20]
 800ed42:	1d18      	adds	r0, r3, #4
 800ed44:	6028      	str	r0, [r5, #0]
 800ed46:	0635      	lsls	r5, r6, #24
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	d501      	bpl.n	800ed50 <_printf_i+0x1cc>
 800ed4c:	6019      	str	r1, [r3, #0]
 800ed4e:	e002      	b.n	800ed56 <_printf_i+0x1d2>
 800ed50:	0670      	lsls	r0, r6, #25
 800ed52:	d5fb      	bpl.n	800ed4c <_printf_i+0x1c8>
 800ed54:	8019      	strh	r1, [r3, #0]
 800ed56:	2300      	movs	r3, #0
 800ed58:	6123      	str	r3, [r4, #16]
 800ed5a:	4615      	mov	r5, r2
 800ed5c:	e7ba      	b.n	800ecd4 <_printf_i+0x150>
 800ed5e:	682b      	ldr	r3, [r5, #0]
 800ed60:	1d1a      	adds	r2, r3, #4
 800ed62:	602a      	str	r2, [r5, #0]
 800ed64:	681d      	ldr	r5, [r3, #0]
 800ed66:	6862      	ldr	r2, [r4, #4]
 800ed68:	2100      	movs	r1, #0
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f7f1 fa38 	bl	80001e0 <memchr>
 800ed70:	b108      	cbz	r0, 800ed76 <_printf_i+0x1f2>
 800ed72:	1b40      	subs	r0, r0, r5
 800ed74:	6060      	str	r0, [r4, #4]
 800ed76:	6863      	ldr	r3, [r4, #4]
 800ed78:	6123      	str	r3, [r4, #16]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed80:	e7a8      	b.n	800ecd4 <_printf_i+0x150>
 800ed82:	6923      	ldr	r3, [r4, #16]
 800ed84:	462a      	mov	r2, r5
 800ed86:	4649      	mov	r1, r9
 800ed88:	4640      	mov	r0, r8
 800ed8a:	47d0      	blx	sl
 800ed8c:	3001      	adds	r0, #1
 800ed8e:	d0ab      	beq.n	800ece8 <_printf_i+0x164>
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	079b      	lsls	r3, r3, #30
 800ed94:	d413      	bmi.n	800edbe <_printf_i+0x23a>
 800ed96:	68e0      	ldr	r0, [r4, #12]
 800ed98:	9b03      	ldr	r3, [sp, #12]
 800ed9a:	4298      	cmp	r0, r3
 800ed9c:	bfb8      	it	lt
 800ed9e:	4618      	movlt	r0, r3
 800eda0:	e7a4      	b.n	800ecec <_printf_i+0x168>
 800eda2:	2301      	movs	r3, #1
 800eda4:	4632      	mov	r2, r6
 800eda6:	4649      	mov	r1, r9
 800eda8:	4640      	mov	r0, r8
 800edaa:	47d0      	blx	sl
 800edac:	3001      	adds	r0, #1
 800edae:	d09b      	beq.n	800ece8 <_printf_i+0x164>
 800edb0:	3501      	adds	r5, #1
 800edb2:	68e3      	ldr	r3, [r4, #12]
 800edb4:	9903      	ldr	r1, [sp, #12]
 800edb6:	1a5b      	subs	r3, r3, r1
 800edb8:	42ab      	cmp	r3, r5
 800edba:	dcf2      	bgt.n	800eda2 <_printf_i+0x21e>
 800edbc:	e7eb      	b.n	800ed96 <_printf_i+0x212>
 800edbe:	2500      	movs	r5, #0
 800edc0:	f104 0619 	add.w	r6, r4, #25
 800edc4:	e7f5      	b.n	800edb2 <_printf_i+0x22e>
 800edc6:	bf00      	nop
 800edc8:	080115b6 	.word	0x080115b6
 800edcc:	080115c7 	.word	0x080115c7

0800edd0 <_sbrk_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4d06      	ldr	r5, [pc, #24]	; (800edec <_sbrk_r+0x1c>)
 800edd4:	2300      	movs	r3, #0
 800edd6:	4604      	mov	r4, r0
 800edd8:	4608      	mov	r0, r1
 800edda:	602b      	str	r3, [r5, #0]
 800eddc:	f7f6 fcc2 	bl	8005764 <_sbrk>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d102      	bne.n	800edea <_sbrk_r+0x1a>
 800ede4:	682b      	ldr	r3, [r5, #0]
 800ede6:	b103      	cbz	r3, 800edea <_sbrk_r+0x1a>
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	bd38      	pop	{r3, r4, r5, pc}
 800edec:	20001538 	.word	0x20001538

0800edf0 <siprintf>:
 800edf0:	b40e      	push	{r1, r2, r3}
 800edf2:	b500      	push	{lr}
 800edf4:	b09c      	sub	sp, #112	; 0x70
 800edf6:	ab1d      	add	r3, sp, #116	; 0x74
 800edf8:	9002      	str	r0, [sp, #8]
 800edfa:	9006      	str	r0, [sp, #24]
 800edfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee00:	4809      	ldr	r0, [pc, #36]	; (800ee28 <siprintf+0x38>)
 800ee02:	9107      	str	r1, [sp, #28]
 800ee04:	9104      	str	r1, [sp, #16]
 800ee06:	4909      	ldr	r1, [pc, #36]	; (800ee2c <siprintf+0x3c>)
 800ee08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee0c:	9105      	str	r1, [sp, #20]
 800ee0e:	6800      	ldr	r0, [r0, #0]
 800ee10:	9301      	str	r3, [sp, #4]
 800ee12:	a902      	add	r1, sp, #8
 800ee14:	f001 fa8c 	bl	8010330 <_svfiprintf_r>
 800ee18:	9b02      	ldr	r3, [sp, #8]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	701a      	strb	r2, [r3, #0]
 800ee1e:	b01c      	add	sp, #112	; 0x70
 800ee20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee24:	b003      	add	sp, #12
 800ee26:	4770      	bx	lr
 800ee28:	2000032c 	.word	0x2000032c
 800ee2c:	ffff0208 	.word	0xffff0208

0800ee30 <quorem>:
 800ee30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	6903      	ldr	r3, [r0, #16]
 800ee36:	690c      	ldr	r4, [r1, #16]
 800ee38:	42a3      	cmp	r3, r4
 800ee3a:	4607      	mov	r7, r0
 800ee3c:	f2c0 8081 	blt.w	800ef42 <quorem+0x112>
 800ee40:	3c01      	subs	r4, #1
 800ee42:	f101 0814 	add.w	r8, r1, #20
 800ee46:	f100 0514 	add.w	r5, r0, #20
 800ee4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee4e:	9301      	str	r3, [sp, #4]
 800ee50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ee60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee64:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee68:	d331      	bcc.n	800eece <quorem+0x9e>
 800ee6a:	f04f 0e00 	mov.w	lr, #0
 800ee6e:	4640      	mov	r0, r8
 800ee70:	46ac      	mov	ip, r5
 800ee72:	46f2      	mov	sl, lr
 800ee74:	f850 2b04 	ldr.w	r2, [r0], #4
 800ee78:	b293      	uxth	r3, r2
 800ee7a:	fb06 e303 	mla	r3, r6, r3, lr
 800ee7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	ebaa 0303 	sub.w	r3, sl, r3
 800ee88:	f8dc a000 	ldr.w	sl, [ip]
 800ee8c:	0c12      	lsrs	r2, r2, #16
 800ee8e:	fa13 f38a 	uxtah	r3, r3, sl
 800ee92:	fb06 e202 	mla	r2, r6, r2, lr
 800ee96:	9300      	str	r3, [sp, #0]
 800ee98:	9b00      	ldr	r3, [sp, #0]
 800ee9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ee9e:	b292      	uxth	r2, r2
 800eea0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eea8:	f8bd 3000 	ldrh.w	r3, [sp]
 800eeac:	4581      	cmp	r9, r0
 800eeae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eeb2:	f84c 3b04 	str.w	r3, [ip], #4
 800eeb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eeba:	d2db      	bcs.n	800ee74 <quorem+0x44>
 800eebc:	f855 300b 	ldr.w	r3, [r5, fp]
 800eec0:	b92b      	cbnz	r3, 800eece <quorem+0x9e>
 800eec2:	9b01      	ldr	r3, [sp, #4]
 800eec4:	3b04      	subs	r3, #4
 800eec6:	429d      	cmp	r5, r3
 800eec8:	461a      	mov	r2, r3
 800eeca:	d32e      	bcc.n	800ef2a <quorem+0xfa>
 800eecc:	613c      	str	r4, [r7, #16]
 800eece:	4638      	mov	r0, r7
 800eed0:	f001 f8ba 	bl	8010048 <__mcmp>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	db24      	blt.n	800ef22 <quorem+0xf2>
 800eed8:	3601      	adds	r6, #1
 800eeda:	4628      	mov	r0, r5
 800eedc:	f04f 0c00 	mov.w	ip, #0
 800eee0:	f858 2b04 	ldr.w	r2, [r8], #4
 800eee4:	f8d0 e000 	ldr.w	lr, [r0]
 800eee8:	b293      	uxth	r3, r2
 800eeea:	ebac 0303 	sub.w	r3, ip, r3
 800eeee:	0c12      	lsrs	r2, r2, #16
 800eef0:	fa13 f38e 	uxtah	r3, r3, lr
 800eef4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef02:	45c1      	cmp	r9, r8
 800ef04:	f840 3b04 	str.w	r3, [r0], #4
 800ef08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ef0c:	d2e8      	bcs.n	800eee0 <quorem+0xb0>
 800ef0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef16:	b922      	cbnz	r2, 800ef22 <quorem+0xf2>
 800ef18:	3b04      	subs	r3, #4
 800ef1a:	429d      	cmp	r5, r3
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	d30a      	bcc.n	800ef36 <quorem+0x106>
 800ef20:	613c      	str	r4, [r7, #16]
 800ef22:	4630      	mov	r0, r6
 800ef24:	b003      	add	sp, #12
 800ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2a:	6812      	ldr	r2, [r2, #0]
 800ef2c:	3b04      	subs	r3, #4
 800ef2e:	2a00      	cmp	r2, #0
 800ef30:	d1cc      	bne.n	800eecc <quorem+0x9c>
 800ef32:	3c01      	subs	r4, #1
 800ef34:	e7c7      	b.n	800eec6 <quorem+0x96>
 800ef36:	6812      	ldr	r2, [r2, #0]
 800ef38:	3b04      	subs	r3, #4
 800ef3a:	2a00      	cmp	r2, #0
 800ef3c:	d1f0      	bne.n	800ef20 <quorem+0xf0>
 800ef3e:	3c01      	subs	r4, #1
 800ef40:	e7eb      	b.n	800ef1a <quorem+0xea>
 800ef42:	2000      	movs	r0, #0
 800ef44:	e7ee      	b.n	800ef24 <quorem+0xf4>
	...

0800ef48 <_dtoa_r>:
 800ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	ed2d 8b04 	vpush	{d8-d9}
 800ef50:	ec57 6b10 	vmov	r6, r7, d0
 800ef54:	b093      	sub	sp, #76	; 0x4c
 800ef56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ef58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ef5c:	9106      	str	r1, [sp, #24]
 800ef5e:	ee10 aa10 	vmov	sl, s0
 800ef62:	4604      	mov	r4, r0
 800ef64:	9209      	str	r2, [sp, #36]	; 0x24
 800ef66:	930c      	str	r3, [sp, #48]	; 0x30
 800ef68:	46bb      	mov	fp, r7
 800ef6a:	b975      	cbnz	r5, 800ef8a <_dtoa_r+0x42>
 800ef6c:	2010      	movs	r0, #16
 800ef6e:	f7ff f9bf 	bl	800e2f0 <malloc>
 800ef72:	4602      	mov	r2, r0
 800ef74:	6260      	str	r0, [r4, #36]	; 0x24
 800ef76:	b920      	cbnz	r0, 800ef82 <_dtoa_r+0x3a>
 800ef78:	4ba7      	ldr	r3, [pc, #668]	; (800f218 <_dtoa_r+0x2d0>)
 800ef7a:	21ea      	movs	r1, #234	; 0xea
 800ef7c:	48a7      	ldr	r0, [pc, #668]	; (800f21c <_dtoa_r+0x2d4>)
 800ef7e:	f001 fad7 	bl	8010530 <__assert_func>
 800ef82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ef86:	6005      	str	r5, [r0, #0]
 800ef88:	60c5      	str	r5, [r0, #12]
 800ef8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef8c:	6819      	ldr	r1, [r3, #0]
 800ef8e:	b151      	cbz	r1, 800efa6 <_dtoa_r+0x5e>
 800ef90:	685a      	ldr	r2, [r3, #4]
 800ef92:	604a      	str	r2, [r1, #4]
 800ef94:	2301      	movs	r3, #1
 800ef96:	4093      	lsls	r3, r2
 800ef98:	608b      	str	r3, [r1, #8]
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f000 fe12 	bl	800fbc4 <_Bfree>
 800efa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efa2:	2200      	movs	r2, #0
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	1e3b      	subs	r3, r7, #0
 800efa8:	bfaa      	itet	ge
 800efaa:	2300      	movge	r3, #0
 800efac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800efb0:	f8c8 3000 	strge.w	r3, [r8]
 800efb4:	4b9a      	ldr	r3, [pc, #616]	; (800f220 <_dtoa_r+0x2d8>)
 800efb6:	bfbc      	itt	lt
 800efb8:	2201      	movlt	r2, #1
 800efba:	f8c8 2000 	strlt.w	r2, [r8]
 800efbe:	ea33 030b 	bics.w	r3, r3, fp
 800efc2:	d11b      	bne.n	800effc <_dtoa_r+0xb4>
 800efc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efc6:	f242 730f 	movw	r3, #9999	; 0x270f
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efd0:	4333      	orrs	r3, r6
 800efd2:	f000 8592 	beq.w	800fafa <_dtoa_r+0xbb2>
 800efd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efd8:	b963      	cbnz	r3, 800eff4 <_dtoa_r+0xac>
 800efda:	4b92      	ldr	r3, [pc, #584]	; (800f224 <_dtoa_r+0x2dc>)
 800efdc:	e022      	b.n	800f024 <_dtoa_r+0xdc>
 800efde:	4b92      	ldr	r3, [pc, #584]	; (800f228 <_dtoa_r+0x2e0>)
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	3308      	adds	r3, #8
 800efe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	9801      	ldr	r0, [sp, #4]
 800efea:	b013      	add	sp, #76	; 0x4c
 800efec:	ecbd 8b04 	vpop	{d8-d9}
 800eff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff4:	4b8b      	ldr	r3, [pc, #556]	; (800f224 <_dtoa_r+0x2dc>)
 800eff6:	9301      	str	r3, [sp, #4]
 800eff8:	3303      	adds	r3, #3
 800effa:	e7f3      	b.n	800efe4 <_dtoa_r+0x9c>
 800effc:	2200      	movs	r2, #0
 800effe:	2300      	movs	r3, #0
 800f000:	4650      	mov	r0, sl
 800f002:	4659      	mov	r1, fp
 800f004:	f7f1 fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 800f008:	ec4b ab19 	vmov	d9, sl, fp
 800f00c:	4680      	mov	r8, r0
 800f00e:	b158      	cbz	r0, 800f028 <_dtoa_r+0xe0>
 800f010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f012:	2301      	movs	r3, #1
 800f014:	6013      	str	r3, [r2, #0]
 800f016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f000 856b 	beq.w	800faf4 <_dtoa_r+0xbac>
 800f01e:	4883      	ldr	r0, [pc, #524]	; (800f22c <_dtoa_r+0x2e4>)
 800f020:	6018      	str	r0, [r3, #0]
 800f022:	1e43      	subs	r3, r0, #1
 800f024:	9301      	str	r3, [sp, #4]
 800f026:	e7df      	b.n	800efe8 <_dtoa_r+0xa0>
 800f028:	ec4b ab10 	vmov	d0, sl, fp
 800f02c:	aa10      	add	r2, sp, #64	; 0x40
 800f02e:	a911      	add	r1, sp, #68	; 0x44
 800f030:	4620      	mov	r0, r4
 800f032:	f001 f8af 	bl	8010194 <__d2b>
 800f036:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f03a:	ee08 0a10 	vmov	s16, r0
 800f03e:	2d00      	cmp	r5, #0
 800f040:	f000 8084 	beq.w	800f14c <_dtoa_r+0x204>
 800f044:	ee19 3a90 	vmov	r3, s19
 800f048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f04c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f050:	4656      	mov	r6, sl
 800f052:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f056:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f05a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f05e:	4b74      	ldr	r3, [pc, #464]	; (800f230 <_dtoa_r+0x2e8>)
 800f060:	2200      	movs	r2, #0
 800f062:	4630      	mov	r0, r6
 800f064:	4639      	mov	r1, r7
 800f066:	f7f1 f90f 	bl	8000288 <__aeabi_dsub>
 800f06a:	a365      	add	r3, pc, #404	; (adr r3, 800f200 <_dtoa_r+0x2b8>)
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	f7f1 fac2 	bl	80005f8 <__aeabi_dmul>
 800f074:	a364      	add	r3, pc, #400	; (adr r3, 800f208 <_dtoa_r+0x2c0>)
 800f076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07a:	f7f1 f907 	bl	800028c <__adddf3>
 800f07e:	4606      	mov	r6, r0
 800f080:	4628      	mov	r0, r5
 800f082:	460f      	mov	r7, r1
 800f084:	f7f1 fa4e 	bl	8000524 <__aeabi_i2d>
 800f088:	a361      	add	r3, pc, #388	; (adr r3, 800f210 <_dtoa_r+0x2c8>)
 800f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08e:	f7f1 fab3 	bl	80005f8 <__aeabi_dmul>
 800f092:	4602      	mov	r2, r0
 800f094:	460b      	mov	r3, r1
 800f096:	4630      	mov	r0, r6
 800f098:	4639      	mov	r1, r7
 800f09a:	f7f1 f8f7 	bl	800028c <__adddf3>
 800f09e:	4606      	mov	r6, r0
 800f0a0:	460f      	mov	r7, r1
 800f0a2:	f7f1 fd59 	bl	8000b58 <__aeabi_d2iz>
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	9000      	str	r0, [sp, #0]
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	4639      	mov	r1, r7
 800f0b0:	f7f1 fd14 	bl	8000adc <__aeabi_dcmplt>
 800f0b4:	b150      	cbz	r0, 800f0cc <_dtoa_r+0x184>
 800f0b6:	9800      	ldr	r0, [sp, #0]
 800f0b8:	f7f1 fa34 	bl	8000524 <__aeabi_i2d>
 800f0bc:	4632      	mov	r2, r6
 800f0be:	463b      	mov	r3, r7
 800f0c0:	f7f1 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0c4:	b910      	cbnz	r0, 800f0cc <_dtoa_r+0x184>
 800f0c6:	9b00      	ldr	r3, [sp, #0]
 800f0c8:	3b01      	subs	r3, #1
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	9b00      	ldr	r3, [sp, #0]
 800f0ce:	2b16      	cmp	r3, #22
 800f0d0:	d85a      	bhi.n	800f188 <_dtoa_r+0x240>
 800f0d2:	9a00      	ldr	r2, [sp, #0]
 800f0d4:	4b57      	ldr	r3, [pc, #348]	; (800f234 <_dtoa_r+0x2ec>)
 800f0d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	ec51 0b19 	vmov	r0, r1, d9
 800f0e2:	f7f1 fcfb 	bl	8000adc <__aeabi_dcmplt>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d050      	beq.n	800f18c <_dtoa_r+0x244>
 800f0ea:	9b00      	ldr	r3, [sp, #0]
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0f6:	1b5d      	subs	r5, r3, r5
 800f0f8:	1e6b      	subs	r3, r5, #1
 800f0fa:	9305      	str	r3, [sp, #20]
 800f0fc:	bf45      	ittet	mi
 800f0fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800f102:	9304      	strmi	r3, [sp, #16]
 800f104:	2300      	movpl	r3, #0
 800f106:	2300      	movmi	r3, #0
 800f108:	bf4c      	ite	mi
 800f10a:	9305      	strmi	r3, [sp, #20]
 800f10c:	9304      	strpl	r3, [sp, #16]
 800f10e:	9b00      	ldr	r3, [sp, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	db3d      	blt.n	800f190 <_dtoa_r+0x248>
 800f114:	9b05      	ldr	r3, [sp, #20]
 800f116:	9a00      	ldr	r2, [sp, #0]
 800f118:	920a      	str	r2, [sp, #40]	; 0x28
 800f11a:	4413      	add	r3, r2
 800f11c:	9305      	str	r3, [sp, #20]
 800f11e:	2300      	movs	r3, #0
 800f120:	9307      	str	r3, [sp, #28]
 800f122:	9b06      	ldr	r3, [sp, #24]
 800f124:	2b09      	cmp	r3, #9
 800f126:	f200 8089 	bhi.w	800f23c <_dtoa_r+0x2f4>
 800f12a:	2b05      	cmp	r3, #5
 800f12c:	bfc4      	itt	gt
 800f12e:	3b04      	subgt	r3, #4
 800f130:	9306      	strgt	r3, [sp, #24]
 800f132:	9b06      	ldr	r3, [sp, #24]
 800f134:	f1a3 0302 	sub.w	r3, r3, #2
 800f138:	bfcc      	ite	gt
 800f13a:	2500      	movgt	r5, #0
 800f13c:	2501      	movle	r5, #1
 800f13e:	2b03      	cmp	r3, #3
 800f140:	f200 8087 	bhi.w	800f252 <_dtoa_r+0x30a>
 800f144:	e8df f003 	tbb	[pc, r3]
 800f148:	59383a2d 	.word	0x59383a2d
 800f14c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f150:	441d      	add	r5, r3
 800f152:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f156:	2b20      	cmp	r3, #32
 800f158:	bfc1      	itttt	gt
 800f15a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f15e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f162:	fa0b f303 	lslgt.w	r3, fp, r3
 800f166:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f16a:	bfda      	itte	le
 800f16c:	f1c3 0320 	rsble	r3, r3, #32
 800f170:	fa06 f003 	lslle.w	r0, r6, r3
 800f174:	4318      	orrgt	r0, r3
 800f176:	f7f1 f9c5 	bl	8000504 <__aeabi_ui2d>
 800f17a:	2301      	movs	r3, #1
 800f17c:	4606      	mov	r6, r0
 800f17e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f182:	3d01      	subs	r5, #1
 800f184:	930e      	str	r3, [sp, #56]	; 0x38
 800f186:	e76a      	b.n	800f05e <_dtoa_r+0x116>
 800f188:	2301      	movs	r3, #1
 800f18a:	e7b2      	b.n	800f0f2 <_dtoa_r+0x1aa>
 800f18c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f18e:	e7b1      	b.n	800f0f4 <_dtoa_r+0x1ac>
 800f190:	9b04      	ldr	r3, [sp, #16]
 800f192:	9a00      	ldr	r2, [sp, #0]
 800f194:	1a9b      	subs	r3, r3, r2
 800f196:	9304      	str	r3, [sp, #16]
 800f198:	4253      	negs	r3, r2
 800f19a:	9307      	str	r3, [sp, #28]
 800f19c:	2300      	movs	r3, #0
 800f19e:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a0:	e7bf      	b.n	800f122 <_dtoa_r+0x1da>
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	9308      	str	r3, [sp, #32]
 800f1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	dc55      	bgt.n	800f258 <_dtoa_r+0x310>
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800f1b6:	e00c      	b.n	800f1d2 <_dtoa_r+0x28a>
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e7f3      	b.n	800f1a4 <_dtoa_r+0x25c>
 800f1bc:	2300      	movs	r3, #0
 800f1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1c0:	9308      	str	r3, [sp, #32]
 800f1c2:	9b00      	ldr	r3, [sp, #0]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	9302      	str	r3, [sp, #8]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	9303      	str	r3, [sp, #12]
 800f1ce:	bfb8      	it	lt
 800f1d0:	2301      	movlt	r3, #1
 800f1d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	6042      	str	r2, [r0, #4]
 800f1d8:	2204      	movs	r2, #4
 800f1da:	f102 0614 	add.w	r6, r2, #20
 800f1de:	429e      	cmp	r6, r3
 800f1e0:	6841      	ldr	r1, [r0, #4]
 800f1e2:	d93d      	bls.n	800f260 <_dtoa_r+0x318>
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 fcad 	bl	800fb44 <_Balloc>
 800f1ea:	9001      	str	r0, [sp, #4]
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	d13b      	bne.n	800f268 <_dtoa_r+0x320>
 800f1f0:	4b11      	ldr	r3, [pc, #68]	; (800f238 <_dtoa_r+0x2f0>)
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f1f8:	e6c0      	b.n	800ef7c <_dtoa_r+0x34>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	e7df      	b.n	800f1be <_dtoa_r+0x276>
 800f1fe:	bf00      	nop
 800f200:	636f4361 	.word	0x636f4361
 800f204:	3fd287a7 	.word	0x3fd287a7
 800f208:	8b60c8b3 	.word	0x8b60c8b3
 800f20c:	3fc68a28 	.word	0x3fc68a28
 800f210:	509f79fb 	.word	0x509f79fb
 800f214:	3fd34413 	.word	0x3fd34413
 800f218:	080115e5 	.word	0x080115e5
 800f21c:	080115fc 	.word	0x080115fc
 800f220:	7ff00000 	.word	0x7ff00000
 800f224:	080115e1 	.word	0x080115e1
 800f228:	080115d8 	.word	0x080115d8
 800f22c:	080115b5 	.word	0x080115b5
 800f230:	3ff80000 	.word	0x3ff80000
 800f234:	080116f0 	.word	0x080116f0
 800f238:	08011657 	.word	0x08011657
 800f23c:	2501      	movs	r5, #1
 800f23e:	2300      	movs	r3, #0
 800f240:	9306      	str	r3, [sp, #24]
 800f242:	9508      	str	r5, [sp, #32]
 800f244:	f04f 33ff 	mov.w	r3, #4294967295
 800f248:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f24c:	2200      	movs	r2, #0
 800f24e:	2312      	movs	r3, #18
 800f250:	e7b0      	b.n	800f1b4 <_dtoa_r+0x26c>
 800f252:	2301      	movs	r3, #1
 800f254:	9308      	str	r3, [sp, #32]
 800f256:	e7f5      	b.n	800f244 <_dtoa_r+0x2fc>
 800f258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f25e:	e7b8      	b.n	800f1d2 <_dtoa_r+0x28a>
 800f260:	3101      	adds	r1, #1
 800f262:	6041      	str	r1, [r0, #4]
 800f264:	0052      	lsls	r2, r2, #1
 800f266:	e7b8      	b.n	800f1da <_dtoa_r+0x292>
 800f268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f26a:	9a01      	ldr	r2, [sp, #4]
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	9b03      	ldr	r3, [sp, #12]
 800f270:	2b0e      	cmp	r3, #14
 800f272:	f200 809d 	bhi.w	800f3b0 <_dtoa_r+0x468>
 800f276:	2d00      	cmp	r5, #0
 800f278:	f000 809a 	beq.w	800f3b0 <_dtoa_r+0x468>
 800f27c:	9b00      	ldr	r3, [sp, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	dd32      	ble.n	800f2e8 <_dtoa_r+0x3a0>
 800f282:	4ab7      	ldr	r2, [pc, #732]	; (800f560 <_dtoa_r+0x618>)
 800f284:	f003 030f 	and.w	r3, r3, #15
 800f288:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f28c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f290:	9b00      	ldr	r3, [sp, #0]
 800f292:	05d8      	lsls	r0, r3, #23
 800f294:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f298:	d516      	bpl.n	800f2c8 <_dtoa_r+0x380>
 800f29a:	4bb2      	ldr	r3, [pc, #712]	; (800f564 <_dtoa_r+0x61c>)
 800f29c:	ec51 0b19 	vmov	r0, r1, d9
 800f2a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f2a4:	f7f1 fad2 	bl	800084c <__aeabi_ddiv>
 800f2a8:	f007 070f 	and.w	r7, r7, #15
 800f2ac:	4682      	mov	sl, r0
 800f2ae:	468b      	mov	fp, r1
 800f2b0:	2503      	movs	r5, #3
 800f2b2:	4eac      	ldr	r6, [pc, #688]	; (800f564 <_dtoa_r+0x61c>)
 800f2b4:	b957      	cbnz	r7, 800f2cc <_dtoa_r+0x384>
 800f2b6:	4642      	mov	r2, r8
 800f2b8:	464b      	mov	r3, r9
 800f2ba:	4650      	mov	r0, sl
 800f2bc:	4659      	mov	r1, fp
 800f2be:	f7f1 fac5 	bl	800084c <__aeabi_ddiv>
 800f2c2:	4682      	mov	sl, r0
 800f2c4:	468b      	mov	fp, r1
 800f2c6:	e028      	b.n	800f31a <_dtoa_r+0x3d2>
 800f2c8:	2502      	movs	r5, #2
 800f2ca:	e7f2      	b.n	800f2b2 <_dtoa_r+0x36a>
 800f2cc:	07f9      	lsls	r1, r7, #31
 800f2ce:	d508      	bpl.n	800f2e2 <_dtoa_r+0x39a>
 800f2d0:	4640      	mov	r0, r8
 800f2d2:	4649      	mov	r1, r9
 800f2d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f2d8:	f7f1 f98e 	bl	80005f8 <__aeabi_dmul>
 800f2dc:	3501      	adds	r5, #1
 800f2de:	4680      	mov	r8, r0
 800f2e0:	4689      	mov	r9, r1
 800f2e2:	107f      	asrs	r7, r7, #1
 800f2e4:	3608      	adds	r6, #8
 800f2e6:	e7e5      	b.n	800f2b4 <_dtoa_r+0x36c>
 800f2e8:	f000 809b 	beq.w	800f422 <_dtoa_r+0x4da>
 800f2ec:	9b00      	ldr	r3, [sp, #0]
 800f2ee:	4f9d      	ldr	r7, [pc, #628]	; (800f564 <_dtoa_r+0x61c>)
 800f2f0:	425e      	negs	r6, r3
 800f2f2:	4b9b      	ldr	r3, [pc, #620]	; (800f560 <_dtoa_r+0x618>)
 800f2f4:	f006 020f 	and.w	r2, r6, #15
 800f2f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f300:	ec51 0b19 	vmov	r0, r1, d9
 800f304:	f7f1 f978 	bl	80005f8 <__aeabi_dmul>
 800f308:	1136      	asrs	r6, r6, #4
 800f30a:	4682      	mov	sl, r0
 800f30c:	468b      	mov	fp, r1
 800f30e:	2300      	movs	r3, #0
 800f310:	2502      	movs	r5, #2
 800f312:	2e00      	cmp	r6, #0
 800f314:	d17a      	bne.n	800f40c <_dtoa_r+0x4c4>
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1d3      	bne.n	800f2c2 <_dtoa_r+0x37a>
 800f31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 8082 	beq.w	800f426 <_dtoa_r+0x4de>
 800f322:	4b91      	ldr	r3, [pc, #580]	; (800f568 <_dtoa_r+0x620>)
 800f324:	2200      	movs	r2, #0
 800f326:	4650      	mov	r0, sl
 800f328:	4659      	mov	r1, fp
 800f32a:	f7f1 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d079      	beq.n	800f426 <_dtoa_r+0x4de>
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d076      	beq.n	800f426 <_dtoa_r+0x4de>
 800f338:	9b02      	ldr	r3, [sp, #8]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	dd36      	ble.n	800f3ac <_dtoa_r+0x464>
 800f33e:	9b00      	ldr	r3, [sp, #0]
 800f340:	4650      	mov	r0, sl
 800f342:	4659      	mov	r1, fp
 800f344:	1e5f      	subs	r7, r3, #1
 800f346:	2200      	movs	r2, #0
 800f348:	4b88      	ldr	r3, [pc, #544]	; (800f56c <_dtoa_r+0x624>)
 800f34a:	f7f1 f955 	bl	80005f8 <__aeabi_dmul>
 800f34e:	9e02      	ldr	r6, [sp, #8]
 800f350:	4682      	mov	sl, r0
 800f352:	468b      	mov	fp, r1
 800f354:	3501      	adds	r5, #1
 800f356:	4628      	mov	r0, r5
 800f358:	f7f1 f8e4 	bl	8000524 <__aeabi_i2d>
 800f35c:	4652      	mov	r2, sl
 800f35e:	465b      	mov	r3, fp
 800f360:	f7f1 f94a 	bl	80005f8 <__aeabi_dmul>
 800f364:	4b82      	ldr	r3, [pc, #520]	; (800f570 <_dtoa_r+0x628>)
 800f366:	2200      	movs	r2, #0
 800f368:	f7f0 ff90 	bl	800028c <__adddf3>
 800f36c:	46d0      	mov	r8, sl
 800f36e:	46d9      	mov	r9, fp
 800f370:	4682      	mov	sl, r0
 800f372:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f376:	2e00      	cmp	r6, #0
 800f378:	d158      	bne.n	800f42c <_dtoa_r+0x4e4>
 800f37a:	4b7e      	ldr	r3, [pc, #504]	; (800f574 <_dtoa_r+0x62c>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	4640      	mov	r0, r8
 800f380:	4649      	mov	r1, r9
 800f382:	f7f0 ff81 	bl	8000288 <__aeabi_dsub>
 800f386:	4652      	mov	r2, sl
 800f388:	465b      	mov	r3, fp
 800f38a:	4680      	mov	r8, r0
 800f38c:	4689      	mov	r9, r1
 800f38e:	f7f1 fbc3 	bl	8000b18 <__aeabi_dcmpgt>
 800f392:	2800      	cmp	r0, #0
 800f394:	f040 8295 	bne.w	800f8c2 <_dtoa_r+0x97a>
 800f398:	4652      	mov	r2, sl
 800f39a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f39e:	4640      	mov	r0, r8
 800f3a0:	4649      	mov	r1, r9
 800f3a2:	f7f1 fb9b 	bl	8000adc <__aeabi_dcmplt>
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f040 8289 	bne.w	800f8be <_dtoa_r+0x976>
 800f3ac:	ec5b ab19 	vmov	sl, fp, d9
 800f3b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f2c0 8148 	blt.w	800f648 <_dtoa_r+0x700>
 800f3b8:	9a00      	ldr	r2, [sp, #0]
 800f3ba:	2a0e      	cmp	r2, #14
 800f3bc:	f300 8144 	bgt.w	800f648 <_dtoa_r+0x700>
 800f3c0:	4b67      	ldr	r3, [pc, #412]	; (800f560 <_dtoa_r+0x618>)
 800f3c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f280 80d5 	bge.w	800f57c <_dtoa_r+0x634>
 800f3d2:	9b03      	ldr	r3, [sp, #12]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f300 80d1 	bgt.w	800f57c <_dtoa_r+0x634>
 800f3da:	f040 826f 	bne.w	800f8bc <_dtoa_r+0x974>
 800f3de:	4b65      	ldr	r3, [pc, #404]	; (800f574 <_dtoa_r+0x62c>)
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	4640      	mov	r0, r8
 800f3e4:	4649      	mov	r1, r9
 800f3e6:	f7f1 f907 	bl	80005f8 <__aeabi_dmul>
 800f3ea:	4652      	mov	r2, sl
 800f3ec:	465b      	mov	r3, fp
 800f3ee:	f7f1 fb89 	bl	8000b04 <__aeabi_dcmpge>
 800f3f2:	9e03      	ldr	r6, [sp, #12]
 800f3f4:	4637      	mov	r7, r6
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	f040 8245 	bne.w	800f886 <_dtoa_r+0x93e>
 800f3fc:	9d01      	ldr	r5, [sp, #4]
 800f3fe:	2331      	movs	r3, #49	; 0x31
 800f400:	f805 3b01 	strb.w	r3, [r5], #1
 800f404:	9b00      	ldr	r3, [sp, #0]
 800f406:	3301      	adds	r3, #1
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	e240      	b.n	800f88e <_dtoa_r+0x946>
 800f40c:	07f2      	lsls	r2, r6, #31
 800f40e:	d505      	bpl.n	800f41c <_dtoa_r+0x4d4>
 800f410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f414:	f7f1 f8f0 	bl	80005f8 <__aeabi_dmul>
 800f418:	3501      	adds	r5, #1
 800f41a:	2301      	movs	r3, #1
 800f41c:	1076      	asrs	r6, r6, #1
 800f41e:	3708      	adds	r7, #8
 800f420:	e777      	b.n	800f312 <_dtoa_r+0x3ca>
 800f422:	2502      	movs	r5, #2
 800f424:	e779      	b.n	800f31a <_dtoa_r+0x3d2>
 800f426:	9f00      	ldr	r7, [sp, #0]
 800f428:	9e03      	ldr	r6, [sp, #12]
 800f42a:	e794      	b.n	800f356 <_dtoa_r+0x40e>
 800f42c:	9901      	ldr	r1, [sp, #4]
 800f42e:	4b4c      	ldr	r3, [pc, #304]	; (800f560 <_dtoa_r+0x618>)
 800f430:	4431      	add	r1, r6
 800f432:	910d      	str	r1, [sp, #52]	; 0x34
 800f434:	9908      	ldr	r1, [sp, #32]
 800f436:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f43a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f43e:	2900      	cmp	r1, #0
 800f440:	d043      	beq.n	800f4ca <_dtoa_r+0x582>
 800f442:	494d      	ldr	r1, [pc, #308]	; (800f578 <_dtoa_r+0x630>)
 800f444:	2000      	movs	r0, #0
 800f446:	f7f1 fa01 	bl	800084c <__aeabi_ddiv>
 800f44a:	4652      	mov	r2, sl
 800f44c:	465b      	mov	r3, fp
 800f44e:	f7f0 ff1b 	bl	8000288 <__aeabi_dsub>
 800f452:	9d01      	ldr	r5, [sp, #4]
 800f454:	4682      	mov	sl, r0
 800f456:	468b      	mov	fp, r1
 800f458:	4649      	mov	r1, r9
 800f45a:	4640      	mov	r0, r8
 800f45c:	f7f1 fb7c 	bl	8000b58 <__aeabi_d2iz>
 800f460:	4606      	mov	r6, r0
 800f462:	f7f1 f85f 	bl	8000524 <__aeabi_i2d>
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	4640      	mov	r0, r8
 800f46c:	4649      	mov	r1, r9
 800f46e:	f7f0 ff0b 	bl	8000288 <__aeabi_dsub>
 800f472:	3630      	adds	r6, #48	; 0x30
 800f474:	f805 6b01 	strb.w	r6, [r5], #1
 800f478:	4652      	mov	r2, sl
 800f47a:	465b      	mov	r3, fp
 800f47c:	4680      	mov	r8, r0
 800f47e:	4689      	mov	r9, r1
 800f480:	f7f1 fb2c 	bl	8000adc <__aeabi_dcmplt>
 800f484:	2800      	cmp	r0, #0
 800f486:	d163      	bne.n	800f550 <_dtoa_r+0x608>
 800f488:	4642      	mov	r2, r8
 800f48a:	464b      	mov	r3, r9
 800f48c:	4936      	ldr	r1, [pc, #216]	; (800f568 <_dtoa_r+0x620>)
 800f48e:	2000      	movs	r0, #0
 800f490:	f7f0 fefa 	bl	8000288 <__aeabi_dsub>
 800f494:	4652      	mov	r2, sl
 800f496:	465b      	mov	r3, fp
 800f498:	f7f1 fb20 	bl	8000adc <__aeabi_dcmplt>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	f040 80b5 	bne.w	800f60c <_dtoa_r+0x6c4>
 800f4a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4a4:	429d      	cmp	r5, r3
 800f4a6:	d081      	beq.n	800f3ac <_dtoa_r+0x464>
 800f4a8:	4b30      	ldr	r3, [pc, #192]	; (800f56c <_dtoa_r+0x624>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4650      	mov	r0, sl
 800f4ae:	4659      	mov	r1, fp
 800f4b0:	f7f1 f8a2 	bl	80005f8 <__aeabi_dmul>
 800f4b4:	4b2d      	ldr	r3, [pc, #180]	; (800f56c <_dtoa_r+0x624>)
 800f4b6:	4682      	mov	sl, r0
 800f4b8:	468b      	mov	fp, r1
 800f4ba:	4640      	mov	r0, r8
 800f4bc:	4649      	mov	r1, r9
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f7f1 f89a 	bl	80005f8 <__aeabi_dmul>
 800f4c4:	4680      	mov	r8, r0
 800f4c6:	4689      	mov	r9, r1
 800f4c8:	e7c6      	b.n	800f458 <_dtoa_r+0x510>
 800f4ca:	4650      	mov	r0, sl
 800f4cc:	4659      	mov	r1, fp
 800f4ce:	f7f1 f893 	bl	80005f8 <__aeabi_dmul>
 800f4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4d4:	9d01      	ldr	r5, [sp, #4]
 800f4d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4d8:	4682      	mov	sl, r0
 800f4da:	468b      	mov	fp, r1
 800f4dc:	4649      	mov	r1, r9
 800f4de:	4640      	mov	r0, r8
 800f4e0:	f7f1 fb3a 	bl	8000b58 <__aeabi_d2iz>
 800f4e4:	4606      	mov	r6, r0
 800f4e6:	f7f1 f81d 	bl	8000524 <__aeabi_i2d>
 800f4ea:	3630      	adds	r6, #48	; 0x30
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	4640      	mov	r0, r8
 800f4f2:	4649      	mov	r1, r9
 800f4f4:	f7f0 fec8 	bl	8000288 <__aeabi_dsub>
 800f4f8:	f805 6b01 	strb.w	r6, [r5], #1
 800f4fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4fe:	429d      	cmp	r5, r3
 800f500:	4680      	mov	r8, r0
 800f502:	4689      	mov	r9, r1
 800f504:	f04f 0200 	mov.w	r2, #0
 800f508:	d124      	bne.n	800f554 <_dtoa_r+0x60c>
 800f50a:	4b1b      	ldr	r3, [pc, #108]	; (800f578 <_dtoa_r+0x630>)
 800f50c:	4650      	mov	r0, sl
 800f50e:	4659      	mov	r1, fp
 800f510:	f7f0 febc 	bl	800028c <__adddf3>
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	4640      	mov	r0, r8
 800f51a:	4649      	mov	r1, r9
 800f51c:	f7f1 fafc 	bl	8000b18 <__aeabi_dcmpgt>
 800f520:	2800      	cmp	r0, #0
 800f522:	d173      	bne.n	800f60c <_dtoa_r+0x6c4>
 800f524:	4652      	mov	r2, sl
 800f526:	465b      	mov	r3, fp
 800f528:	4913      	ldr	r1, [pc, #76]	; (800f578 <_dtoa_r+0x630>)
 800f52a:	2000      	movs	r0, #0
 800f52c:	f7f0 feac 	bl	8000288 <__aeabi_dsub>
 800f530:	4602      	mov	r2, r0
 800f532:	460b      	mov	r3, r1
 800f534:	4640      	mov	r0, r8
 800f536:	4649      	mov	r1, r9
 800f538:	f7f1 fad0 	bl	8000adc <__aeabi_dcmplt>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	f43f af35 	beq.w	800f3ac <_dtoa_r+0x464>
 800f542:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f544:	1e6b      	subs	r3, r5, #1
 800f546:	930f      	str	r3, [sp, #60]	; 0x3c
 800f548:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f54c:	2b30      	cmp	r3, #48	; 0x30
 800f54e:	d0f8      	beq.n	800f542 <_dtoa_r+0x5fa>
 800f550:	9700      	str	r7, [sp, #0]
 800f552:	e049      	b.n	800f5e8 <_dtoa_r+0x6a0>
 800f554:	4b05      	ldr	r3, [pc, #20]	; (800f56c <_dtoa_r+0x624>)
 800f556:	f7f1 f84f 	bl	80005f8 <__aeabi_dmul>
 800f55a:	4680      	mov	r8, r0
 800f55c:	4689      	mov	r9, r1
 800f55e:	e7bd      	b.n	800f4dc <_dtoa_r+0x594>
 800f560:	080116f0 	.word	0x080116f0
 800f564:	080116c8 	.word	0x080116c8
 800f568:	3ff00000 	.word	0x3ff00000
 800f56c:	40240000 	.word	0x40240000
 800f570:	401c0000 	.word	0x401c0000
 800f574:	40140000 	.word	0x40140000
 800f578:	3fe00000 	.word	0x3fe00000
 800f57c:	9d01      	ldr	r5, [sp, #4]
 800f57e:	4656      	mov	r6, sl
 800f580:	465f      	mov	r7, fp
 800f582:	4642      	mov	r2, r8
 800f584:	464b      	mov	r3, r9
 800f586:	4630      	mov	r0, r6
 800f588:	4639      	mov	r1, r7
 800f58a:	f7f1 f95f 	bl	800084c <__aeabi_ddiv>
 800f58e:	f7f1 fae3 	bl	8000b58 <__aeabi_d2iz>
 800f592:	4682      	mov	sl, r0
 800f594:	f7f0 ffc6 	bl	8000524 <__aeabi_i2d>
 800f598:	4642      	mov	r2, r8
 800f59a:	464b      	mov	r3, r9
 800f59c:	f7f1 f82c 	bl	80005f8 <__aeabi_dmul>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	4639      	mov	r1, r7
 800f5a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f5ac:	f7f0 fe6c 	bl	8000288 <__aeabi_dsub>
 800f5b0:	f805 6b01 	strb.w	r6, [r5], #1
 800f5b4:	9e01      	ldr	r6, [sp, #4]
 800f5b6:	9f03      	ldr	r7, [sp, #12]
 800f5b8:	1bae      	subs	r6, r5, r6
 800f5ba:	42b7      	cmp	r7, r6
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	d135      	bne.n	800f62e <_dtoa_r+0x6e6>
 800f5c2:	f7f0 fe63 	bl	800028c <__adddf3>
 800f5c6:	4642      	mov	r2, r8
 800f5c8:	464b      	mov	r3, r9
 800f5ca:	4606      	mov	r6, r0
 800f5cc:	460f      	mov	r7, r1
 800f5ce:	f7f1 faa3 	bl	8000b18 <__aeabi_dcmpgt>
 800f5d2:	b9d0      	cbnz	r0, 800f60a <_dtoa_r+0x6c2>
 800f5d4:	4642      	mov	r2, r8
 800f5d6:	464b      	mov	r3, r9
 800f5d8:	4630      	mov	r0, r6
 800f5da:	4639      	mov	r1, r7
 800f5dc:	f7f1 fa74 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5e0:	b110      	cbz	r0, 800f5e8 <_dtoa_r+0x6a0>
 800f5e2:	f01a 0f01 	tst.w	sl, #1
 800f5e6:	d110      	bne.n	800f60a <_dtoa_r+0x6c2>
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	ee18 1a10 	vmov	r1, s16
 800f5ee:	f000 fae9 	bl	800fbc4 <_Bfree>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	9800      	ldr	r0, [sp, #0]
 800f5f6:	702b      	strb	r3, [r5, #0]
 800f5f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5fa:	3001      	adds	r0, #1
 800f5fc:	6018      	str	r0, [r3, #0]
 800f5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f600:	2b00      	cmp	r3, #0
 800f602:	f43f acf1 	beq.w	800efe8 <_dtoa_r+0xa0>
 800f606:	601d      	str	r5, [r3, #0]
 800f608:	e4ee      	b.n	800efe8 <_dtoa_r+0xa0>
 800f60a:	9f00      	ldr	r7, [sp, #0]
 800f60c:	462b      	mov	r3, r5
 800f60e:	461d      	mov	r5, r3
 800f610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f614:	2a39      	cmp	r2, #57	; 0x39
 800f616:	d106      	bne.n	800f626 <_dtoa_r+0x6de>
 800f618:	9a01      	ldr	r2, [sp, #4]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d1f7      	bne.n	800f60e <_dtoa_r+0x6c6>
 800f61e:	9901      	ldr	r1, [sp, #4]
 800f620:	2230      	movs	r2, #48	; 0x30
 800f622:	3701      	adds	r7, #1
 800f624:	700a      	strb	r2, [r1, #0]
 800f626:	781a      	ldrb	r2, [r3, #0]
 800f628:	3201      	adds	r2, #1
 800f62a:	701a      	strb	r2, [r3, #0]
 800f62c:	e790      	b.n	800f550 <_dtoa_r+0x608>
 800f62e:	4ba6      	ldr	r3, [pc, #664]	; (800f8c8 <_dtoa_r+0x980>)
 800f630:	2200      	movs	r2, #0
 800f632:	f7f0 ffe1 	bl	80005f8 <__aeabi_dmul>
 800f636:	2200      	movs	r2, #0
 800f638:	2300      	movs	r3, #0
 800f63a:	4606      	mov	r6, r0
 800f63c:	460f      	mov	r7, r1
 800f63e:	f7f1 fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 800f642:	2800      	cmp	r0, #0
 800f644:	d09d      	beq.n	800f582 <_dtoa_r+0x63a>
 800f646:	e7cf      	b.n	800f5e8 <_dtoa_r+0x6a0>
 800f648:	9a08      	ldr	r2, [sp, #32]
 800f64a:	2a00      	cmp	r2, #0
 800f64c:	f000 80d7 	beq.w	800f7fe <_dtoa_r+0x8b6>
 800f650:	9a06      	ldr	r2, [sp, #24]
 800f652:	2a01      	cmp	r2, #1
 800f654:	f300 80ba 	bgt.w	800f7cc <_dtoa_r+0x884>
 800f658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f65a:	2a00      	cmp	r2, #0
 800f65c:	f000 80b2 	beq.w	800f7c4 <_dtoa_r+0x87c>
 800f660:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f664:	9e07      	ldr	r6, [sp, #28]
 800f666:	9d04      	ldr	r5, [sp, #16]
 800f668:	9a04      	ldr	r2, [sp, #16]
 800f66a:	441a      	add	r2, r3
 800f66c:	9204      	str	r2, [sp, #16]
 800f66e:	9a05      	ldr	r2, [sp, #20]
 800f670:	2101      	movs	r1, #1
 800f672:	441a      	add	r2, r3
 800f674:	4620      	mov	r0, r4
 800f676:	9205      	str	r2, [sp, #20]
 800f678:	f000 fb5c 	bl	800fd34 <__i2b>
 800f67c:	4607      	mov	r7, r0
 800f67e:	2d00      	cmp	r5, #0
 800f680:	dd0c      	ble.n	800f69c <_dtoa_r+0x754>
 800f682:	9b05      	ldr	r3, [sp, #20]
 800f684:	2b00      	cmp	r3, #0
 800f686:	dd09      	ble.n	800f69c <_dtoa_r+0x754>
 800f688:	42ab      	cmp	r3, r5
 800f68a:	9a04      	ldr	r2, [sp, #16]
 800f68c:	bfa8      	it	ge
 800f68e:	462b      	movge	r3, r5
 800f690:	1ad2      	subs	r2, r2, r3
 800f692:	9204      	str	r2, [sp, #16]
 800f694:	9a05      	ldr	r2, [sp, #20]
 800f696:	1aed      	subs	r5, r5, r3
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	9305      	str	r3, [sp, #20]
 800f69c:	9b07      	ldr	r3, [sp, #28]
 800f69e:	b31b      	cbz	r3, 800f6e8 <_dtoa_r+0x7a0>
 800f6a0:	9b08      	ldr	r3, [sp, #32]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f000 80af 	beq.w	800f806 <_dtoa_r+0x8be>
 800f6a8:	2e00      	cmp	r6, #0
 800f6aa:	dd13      	ble.n	800f6d4 <_dtoa_r+0x78c>
 800f6ac:	4639      	mov	r1, r7
 800f6ae:	4632      	mov	r2, r6
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f000 fbff 	bl	800feb4 <__pow5mult>
 800f6b6:	ee18 2a10 	vmov	r2, s16
 800f6ba:	4601      	mov	r1, r0
 800f6bc:	4607      	mov	r7, r0
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f000 fb4e 	bl	800fd60 <__multiply>
 800f6c4:	ee18 1a10 	vmov	r1, s16
 800f6c8:	4680      	mov	r8, r0
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f000 fa7a 	bl	800fbc4 <_Bfree>
 800f6d0:	ee08 8a10 	vmov	s16, r8
 800f6d4:	9b07      	ldr	r3, [sp, #28]
 800f6d6:	1b9a      	subs	r2, r3, r6
 800f6d8:	d006      	beq.n	800f6e8 <_dtoa_r+0x7a0>
 800f6da:	ee18 1a10 	vmov	r1, s16
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 fbe8 	bl	800feb4 <__pow5mult>
 800f6e4:	ee08 0a10 	vmov	s16, r0
 800f6e8:	2101      	movs	r1, #1
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f000 fb22 	bl	800fd34 <__i2b>
 800f6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	f340 8088 	ble.w	800f80a <_dtoa_r+0x8c2>
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	4601      	mov	r1, r0
 800f6fe:	4620      	mov	r0, r4
 800f700:	f000 fbd8 	bl	800feb4 <__pow5mult>
 800f704:	9b06      	ldr	r3, [sp, #24]
 800f706:	2b01      	cmp	r3, #1
 800f708:	4606      	mov	r6, r0
 800f70a:	f340 8081 	ble.w	800f810 <_dtoa_r+0x8c8>
 800f70e:	f04f 0800 	mov.w	r8, #0
 800f712:	6933      	ldr	r3, [r6, #16]
 800f714:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f718:	6918      	ldr	r0, [r3, #16]
 800f71a:	f000 fabb 	bl	800fc94 <__hi0bits>
 800f71e:	f1c0 0020 	rsb	r0, r0, #32
 800f722:	9b05      	ldr	r3, [sp, #20]
 800f724:	4418      	add	r0, r3
 800f726:	f010 001f 	ands.w	r0, r0, #31
 800f72a:	f000 8092 	beq.w	800f852 <_dtoa_r+0x90a>
 800f72e:	f1c0 0320 	rsb	r3, r0, #32
 800f732:	2b04      	cmp	r3, #4
 800f734:	f340 808a 	ble.w	800f84c <_dtoa_r+0x904>
 800f738:	f1c0 001c 	rsb	r0, r0, #28
 800f73c:	9b04      	ldr	r3, [sp, #16]
 800f73e:	4403      	add	r3, r0
 800f740:	9304      	str	r3, [sp, #16]
 800f742:	9b05      	ldr	r3, [sp, #20]
 800f744:	4403      	add	r3, r0
 800f746:	4405      	add	r5, r0
 800f748:	9305      	str	r3, [sp, #20]
 800f74a:	9b04      	ldr	r3, [sp, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	dd07      	ble.n	800f760 <_dtoa_r+0x818>
 800f750:	ee18 1a10 	vmov	r1, s16
 800f754:	461a      	mov	r2, r3
 800f756:	4620      	mov	r0, r4
 800f758:	f000 fc06 	bl	800ff68 <__lshift>
 800f75c:	ee08 0a10 	vmov	s16, r0
 800f760:	9b05      	ldr	r3, [sp, #20]
 800f762:	2b00      	cmp	r3, #0
 800f764:	dd05      	ble.n	800f772 <_dtoa_r+0x82a>
 800f766:	4631      	mov	r1, r6
 800f768:	461a      	mov	r2, r3
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 fbfc 	bl	800ff68 <__lshift>
 800f770:	4606      	mov	r6, r0
 800f772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f774:	2b00      	cmp	r3, #0
 800f776:	d06e      	beq.n	800f856 <_dtoa_r+0x90e>
 800f778:	ee18 0a10 	vmov	r0, s16
 800f77c:	4631      	mov	r1, r6
 800f77e:	f000 fc63 	bl	8010048 <__mcmp>
 800f782:	2800      	cmp	r0, #0
 800f784:	da67      	bge.n	800f856 <_dtoa_r+0x90e>
 800f786:	9b00      	ldr	r3, [sp, #0]
 800f788:	3b01      	subs	r3, #1
 800f78a:	ee18 1a10 	vmov	r1, s16
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	220a      	movs	r2, #10
 800f792:	2300      	movs	r3, #0
 800f794:	4620      	mov	r0, r4
 800f796:	f000 fa37 	bl	800fc08 <__multadd>
 800f79a:	9b08      	ldr	r3, [sp, #32]
 800f79c:	ee08 0a10 	vmov	s16, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f000 81b1 	beq.w	800fb08 <_dtoa_r+0xbc0>
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	4639      	mov	r1, r7
 800f7aa:	220a      	movs	r2, #10
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f000 fa2b 	bl	800fc08 <__multadd>
 800f7b2:	9b02      	ldr	r3, [sp, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	4607      	mov	r7, r0
 800f7b8:	f300 808e 	bgt.w	800f8d8 <_dtoa_r+0x990>
 800f7bc:	9b06      	ldr	r3, [sp, #24]
 800f7be:	2b02      	cmp	r3, #2
 800f7c0:	dc51      	bgt.n	800f866 <_dtoa_r+0x91e>
 800f7c2:	e089      	b.n	800f8d8 <_dtoa_r+0x990>
 800f7c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f7ca:	e74b      	b.n	800f664 <_dtoa_r+0x71c>
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	1e5e      	subs	r6, r3, #1
 800f7d0:	9b07      	ldr	r3, [sp, #28]
 800f7d2:	42b3      	cmp	r3, r6
 800f7d4:	bfbf      	itttt	lt
 800f7d6:	9b07      	ldrlt	r3, [sp, #28]
 800f7d8:	9607      	strlt	r6, [sp, #28]
 800f7da:	1af2      	sublt	r2, r6, r3
 800f7dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f7de:	bfb6      	itet	lt
 800f7e0:	189b      	addlt	r3, r3, r2
 800f7e2:	1b9e      	subge	r6, r3, r6
 800f7e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f7e6:	9b03      	ldr	r3, [sp, #12]
 800f7e8:	bfb8      	it	lt
 800f7ea:	2600      	movlt	r6, #0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	bfb7      	itett	lt
 800f7f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f7f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f7f8:	1a9d      	sublt	r5, r3, r2
 800f7fa:	2300      	movlt	r3, #0
 800f7fc:	e734      	b.n	800f668 <_dtoa_r+0x720>
 800f7fe:	9e07      	ldr	r6, [sp, #28]
 800f800:	9d04      	ldr	r5, [sp, #16]
 800f802:	9f08      	ldr	r7, [sp, #32]
 800f804:	e73b      	b.n	800f67e <_dtoa_r+0x736>
 800f806:	9a07      	ldr	r2, [sp, #28]
 800f808:	e767      	b.n	800f6da <_dtoa_r+0x792>
 800f80a:	9b06      	ldr	r3, [sp, #24]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	dc18      	bgt.n	800f842 <_dtoa_r+0x8fa>
 800f810:	f1ba 0f00 	cmp.w	sl, #0
 800f814:	d115      	bne.n	800f842 <_dtoa_r+0x8fa>
 800f816:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f81a:	b993      	cbnz	r3, 800f842 <_dtoa_r+0x8fa>
 800f81c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f820:	0d1b      	lsrs	r3, r3, #20
 800f822:	051b      	lsls	r3, r3, #20
 800f824:	b183      	cbz	r3, 800f848 <_dtoa_r+0x900>
 800f826:	9b04      	ldr	r3, [sp, #16]
 800f828:	3301      	adds	r3, #1
 800f82a:	9304      	str	r3, [sp, #16]
 800f82c:	9b05      	ldr	r3, [sp, #20]
 800f82e:	3301      	adds	r3, #1
 800f830:	9305      	str	r3, [sp, #20]
 800f832:	f04f 0801 	mov.w	r8, #1
 800f836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f47f af6a 	bne.w	800f712 <_dtoa_r+0x7ca>
 800f83e:	2001      	movs	r0, #1
 800f840:	e76f      	b.n	800f722 <_dtoa_r+0x7da>
 800f842:	f04f 0800 	mov.w	r8, #0
 800f846:	e7f6      	b.n	800f836 <_dtoa_r+0x8ee>
 800f848:	4698      	mov	r8, r3
 800f84a:	e7f4      	b.n	800f836 <_dtoa_r+0x8ee>
 800f84c:	f43f af7d 	beq.w	800f74a <_dtoa_r+0x802>
 800f850:	4618      	mov	r0, r3
 800f852:	301c      	adds	r0, #28
 800f854:	e772      	b.n	800f73c <_dtoa_r+0x7f4>
 800f856:	9b03      	ldr	r3, [sp, #12]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dc37      	bgt.n	800f8cc <_dtoa_r+0x984>
 800f85c:	9b06      	ldr	r3, [sp, #24]
 800f85e:	2b02      	cmp	r3, #2
 800f860:	dd34      	ble.n	800f8cc <_dtoa_r+0x984>
 800f862:	9b03      	ldr	r3, [sp, #12]
 800f864:	9302      	str	r3, [sp, #8]
 800f866:	9b02      	ldr	r3, [sp, #8]
 800f868:	b96b      	cbnz	r3, 800f886 <_dtoa_r+0x93e>
 800f86a:	4631      	mov	r1, r6
 800f86c:	2205      	movs	r2, #5
 800f86e:	4620      	mov	r0, r4
 800f870:	f000 f9ca 	bl	800fc08 <__multadd>
 800f874:	4601      	mov	r1, r0
 800f876:	4606      	mov	r6, r0
 800f878:	ee18 0a10 	vmov	r0, s16
 800f87c:	f000 fbe4 	bl	8010048 <__mcmp>
 800f880:	2800      	cmp	r0, #0
 800f882:	f73f adbb 	bgt.w	800f3fc <_dtoa_r+0x4b4>
 800f886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f888:	9d01      	ldr	r5, [sp, #4]
 800f88a:	43db      	mvns	r3, r3
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	f04f 0800 	mov.w	r8, #0
 800f892:	4631      	mov	r1, r6
 800f894:	4620      	mov	r0, r4
 800f896:	f000 f995 	bl	800fbc4 <_Bfree>
 800f89a:	2f00      	cmp	r7, #0
 800f89c:	f43f aea4 	beq.w	800f5e8 <_dtoa_r+0x6a0>
 800f8a0:	f1b8 0f00 	cmp.w	r8, #0
 800f8a4:	d005      	beq.n	800f8b2 <_dtoa_r+0x96a>
 800f8a6:	45b8      	cmp	r8, r7
 800f8a8:	d003      	beq.n	800f8b2 <_dtoa_r+0x96a>
 800f8aa:	4641      	mov	r1, r8
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	f000 f989 	bl	800fbc4 <_Bfree>
 800f8b2:	4639      	mov	r1, r7
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f000 f985 	bl	800fbc4 <_Bfree>
 800f8ba:	e695      	b.n	800f5e8 <_dtoa_r+0x6a0>
 800f8bc:	2600      	movs	r6, #0
 800f8be:	4637      	mov	r7, r6
 800f8c0:	e7e1      	b.n	800f886 <_dtoa_r+0x93e>
 800f8c2:	9700      	str	r7, [sp, #0]
 800f8c4:	4637      	mov	r7, r6
 800f8c6:	e599      	b.n	800f3fc <_dtoa_r+0x4b4>
 800f8c8:	40240000 	.word	0x40240000
 800f8cc:	9b08      	ldr	r3, [sp, #32]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f000 80ca 	beq.w	800fa68 <_dtoa_r+0xb20>
 800f8d4:	9b03      	ldr	r3, [sp, #12]
 800f8d6:	9302      	str	r3, [sp, #8]
 800f8d8:	2d00      	cmp	r5, #0
 800f8da:	dd05      	ble.n	800f8e8 <_dtoa_r+0x9a0>
 800f8dc:	4639      	mov	r1, r7
 800f8de:	462a      	mov	r2, r5
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f000 fb41 	bl	800ff68 <__lshift>
 800f8e6:	4607      	mov	r7, r0
 800f8e8:	f1b8 0f00 	cmp.w	r8, #0
 800f8ec:	d05b      	beq.n	800f9a6 <_dtoa_r+0xa5e>
 800f8ee:	6879      	ldr	r1, [r7, #4]
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	f000 f927 	bl	800fb44 <_Balloc>
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	b928      	cbnz	r0, 800f906 <_dtoa_r+0x9be>
 800f8fa:	4b87      	ldr	r3, [pc, #540]	; (800fb18 <_dtoa_r+0xbd0>)
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f902:	f7ff bb3b 	b.w	800ef7c <_dtoa_r+0x34>
 800f906:	693a      	ldr	r2, [r7, #16]
 800f908:	3202      	adds	r2, #2
 800f90a:	0092      	lsls	r2, r2, #2
 800f90c:	f107 010c 	add.w	r1, r7, #12
 800f910:	300c      	adds	r0, #12
 800f912:	f7fe fcfd 	bl	800e310 <memcpy>
 800f916:	2201      	movs	r2, #1
 800f918:	4629      	mov	r1, r5
 800f91a:	4620      	mov	r0, r4
 800f91c:	f000 fb24 	bl	800ff68 <__lshift>
 800f920:	9b01      	ldr	r3, [sp, #4]
 800f922:	f103 0901 	add.w	r9, r3, #1
 800f926:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f92a:	4413      	add	r3, r2
 800f92c:	9305      	str	r3, [sp, #20]
 800f92e:	f00a 0301 	and.w	r3, sl, #1
 800f932:	46b8      	mov	r8, r7
 800f934:	9304      	str	r3, [sp, #16]
 800f936:	4607      	mov	r7, r0
 800f938:	4631      	mov	r1, r6
 800f93a:	ee18 0a10 	vmov	r0, s16
 800f93e:	f7ff fa77 	bl	800ee30 <quorem>
 800f942:	4641      	mov	r1, r8
 800f944:	9002      	str	r0, [sp, #8]
 800f946:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f94a:	ee18 0a10 	vmov	r0, s16
 800f94e:	f000 fb7b 	bl	8010048 <__mcmp>
 800f952:	463a      	mov	r2, r7
 800f954:	9003      	str	r0, [sp, #12]
 800f956:	4631      	mov	r1, r6
 800f958:	4620      	mov	r0, r4
 800f95a:	f000 fb91 	bl	8010080 <__mdiff>
 800f95e:	68c2      	ldr	r2, [r0, #12]
 800f960:	f109 3bff 	add.w	fp, r9, #4294967295
 800f964:	4605      	mov	r5, r0
 800f966:	bb02      	cbnz	r2, 800f9aa <_dtoa_r+0xa62>
 800f968:	4601      	mov	r1, r0
 800f96a:	ee18 0a10 	vmov	r0, s16
 800f96e:	f000 fb6b 	bl	8010048 <__mcmp>
 800f972:	4602      	mov	r2, r0
 800f974:	4629      	mov	r1, r5
 800f976:	4620      	mov	r0, r4
 800f978:	9207      	str	r2, [sp, #28]
 800f97a:	f000 f923 	bl	800fbc4 <_Bfree>
 800f97e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f982:	ea43 0102 	orr.w	r1, r3, r2
 800f986:	9b04      	ldr	r3, [sp, #16]
 800f988:	430b      	orrs	r3, r1
 800f98a:	464d      	mov	r5, r9
 800f98c:	d10f      	bne.n	800f9ae <_dtoa_r+0xa66>
 800f98e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f992:	d02a      	beq.n	800f9ea <_dtoa_r+0xaa2>
 800f994:	9b03      	ldr	r3, [sp, #12]
 800f996:	2b00      	cmp	r3, #0
 800f998:	dd02      	ble.n	800f9a0 <_dtoa_r+0xa58>
 800f99a:	9b02      	ldr	r3, [sp, #8]
 800f99c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f9a0:	f88b a000 	strb.w	sl, [fp]
 800f9a4:	e775      	b.n	800f892 <_dtoa_r+0x94a>
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	e7ba      	b.n	800f920 <_dtoa_r+0x9d8>
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	e7e2      	b.n	800f974 <_dtoa_r+0xa2c>
 800f9ae:	9b03      	ldr	r3, [sp, #12]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	db04      	blt.n	800f9be <_dtoa_r+0xa76>
 800f9b4:	9906      	ldr	r1, [sp, #24]
 800f9b6:	430b      	orrs	r3, r1
 800f9b8:	9904      	ldr	r1, [sp, #16]
 800f9ba:	430b      	orrs	r3, r1
 800f9bc:	d122      	bne.n	800fa04 <_dtoa_r+0xabc>
 800f9be:	2a00      	cmp	r2, #0
 800f9c0:	ddee      	ble.n	800f9a0 <_dtoa_r+0xa58>
 800f9c2:	ee18 1a10 	vmov	r1, s16
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	f000 facd 	bl	800ff68 <__lshift>
 800f9ce:	4631      	mov	r1, r6
 800f9d0:	ee08 0a10 	vmov	s16, r0
 800f9d4:	f000 fb38 	bl	8010048 <__mcmp>
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	dc03      	bgt.n	800f9e4 <_dtoa_r+0xa9c>
 800f9dc:	d1e0      	bne.n	800f9a0 <_dtoa_r+0xa58>
 800f9de:	f01a 0f01 	tst.w	sl, #1
 800f9e2:	d0dd      	beq.n	800f9a0 <_dtoa_r+0xa58>
 800f9e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f9e8:	d1d7      	bne.n	800f99a <_dtoa_r+0xa52>
 800f9ea:	2339      	movs	r3, #57	; 0x39
 800f9ec:	f88b 3000 	strb.w	r3, [fp]
 800f9f0:	462b      	mov	r3, r5
 800f9f2:	461d      	mov	r5, r3
 800f9f4:	3b01      	subs	r3, #1
 800f9f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f9fa:	2a39      	cmp	r2, #57	; 0x39
 800f9fc:	d071      	beq.n	800fae2 <_dtoa_r+0xb9a>
 800f9fe:	3201      	adds	r2, #1
 800fa00:	701a      	strb	r2, [r3, #0]
 800fa02:	e746      	b.n	800f892 <_dtoa_r+0x94a>
 800fa04:	2a00      	cmp	r2, #0
 800fa06:	dd07      	ble.n	800fa18 <_dtoa_r+0xad0>
 800fa08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa0c:	d0ed      	beq.n	800f9ea <_dtoa_r+0xaa2>
 800fa0e:	f10a 0301 	add.w	r3, sl, #1
 800fa12:	f88b 3000 	strb.w	r3, [fp]
 800fa16:	e73c      	b.n	800f892 <_dtoa_r+0x94a>
 800fa18:	9b05      	ldr	r3, [sp, #20]
 800fa1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fa1e:	4599      	cmp	r9, r3
 800fa20:	d047      	beq.n	800fab2 <_dtoa_r+0xb6a>
 800fa22:	ee18 1a10 	vmov	r1, s16
 800fa26:	2300      	movs	r3, #0
 800fa28:	220a      	movs	r2, #10
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f000 f8ec 	bl	800fc08 <__multadd>
 800fa30:	45b8      	cmp	r8, r7
 800fa32:	ee08 0a10 	vmov	s16, r0
 800fa36:	f04f 0300 	mov.w	r3, #0
 800fa3a:	f04f 020a 	mov.w	r2, #10
 800fa3e:	4641      	mov	r1, r8
 800fa40:	4620      	mov	r0, r4
 800fa42:	d106      	bne.n	800fa52 <_dtoa_r+0xb0a>
 800fa44:	f000 f8e0 	bl	800fc08 <__multadd>
 800fa48:	4680      	mov	r8, r0
 800fa4a:	4607      	mov	r7, r0
 800fa4c:	f109 0901 	add.w	r9, r9, #1
 800fa50:	e772      	b.n	800f938 <_dtoa_r+0x9f0>
 800fa52:	f000 f8d9 	bl	800fc08 <__multadd>
 800fa56:	4639      	mov	r1, r7
 800fa58:	4680      	mov	r8, r0
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	220a      	movs	r2, #10
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f000 f8d2 	bl	800fc08 <__multadd>
 800fa64:	4607      	mov	r7, r0
 800fa66:	e7f1      	b.n	800fa4c <_dtoa_r+0xb04>
 800fa68:	9b03      	ldr	r3, [sp, #12]
 800fa6a:	9302      	str	r3, [sp, #8]
 800fa6c:	9d01      	ldr	r5, [sp, #4]
 800fa6e:	ee18 0a10 	vmov	r0, s16
 800fa72:	4631      	mov	r1, r6
 800fa74:	f7ff f9dc 	bl	800ee30 <quorem>
 800fa78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fa7c:	9b01      	ldr	r3, [sp, #4]
 800fa7e:	f805 ab01 	strb.w	sl, [r5], #1
 800fa82:	1aea      	subs	r2, r5, r3
 800fa84:	9b02      	ldr	r3, [sp, #8]
 800fa86:	4293      	cmp	r3, r2
 800fa88:	dd09      	ble.n	800fa9e <_dtoa_r+0xb56>
 800fa8a:	ee18 1a10 	vmov	r1, s16
 800fa8e:	2300      	movs	r3, #0
 800fa90:	220a      	movs	r2, #10
 800fa92:	4620      	mov	r0, r4
 800fa94:	f000 f8b8 	bl	800fc08 <__multadd>
 800fa98:	ee08 0a10 	vmov	s16, r0
 800fa9c:	e7e7      	b.n	800fa6e <_dtoa_r+0xb26>
 800fa9e:	9b02      	ldr	r3, [sp, #8]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	bfc8      	it	gt
 800faa4:	461d      	movgt	r5, r3
 800faa6:	9b01      	ldr	r3, [sp, #4]
 800faa8:	bfd8      	it	le
 800faaa:	2501      	movle	r5, #1
 800faac:	441d      	add	r5, r3
 800faae:	f04f 0800 	mov.w	r8, #0
 800fab2:	ee18 1a10 	vmov	r1, s16
 800fab6:	2201      	movs	r2, #1
 800fab8:	4620      	mov	r0, r4
 800faba:	f000 fa55 	bl	800ff68 <__lshift>
 800fabe:	4631      	mov	r1, r6
 800fac0:	ee08 0a10 	vmov	s16, r0
 800fac4:	f000 fac0 	bl	8010048 <__mcmp>
 800fac8:	2800      	cmp	r0, #0
 800faca:	dc91      	bgt.n	800f9f0 <_dtoa_r+0xaa8>
 800facc:	d102      	bne.n	800fad4 <_dtoa_r+0xb8c>
 800face:	f01a 0f01 	tst.w	sl, #1
 800fad2:	d18d      	bne.n	800f9f0 <_dtoa_r+0xaa8>
 800fad4:	462b      	mov	r3, r5
 800fad6:	461d      	mov	r5, r3
 800fad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fadc:	2a30      	cmp	r2, #48	; 0x30
 800fade:	d0fa      	beq.n	800fad6 <_dtoa_r+0xb8e>
 800fae0:	e6d7      	b.n	800f892 <_dtoa_r+0x94a>
 800fae2:	9a01      	ldr	r2, [sp, #4]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d184      	bne.n	800f9f2 <_dtoa_r+0xaaa>
 800fae8:	9b00      	ldr	r3, [sp, #0]
 800faea:	3301      	adds	r3, #1
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	2331      	movs	r3, #49	; 0x31
 800faf0:	7013      	strb	r3, [r2, #0]
 800faf2:	e6ce      	b.n	800f892 <_dtoa_r+0x94a>
 800faf4:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <_dtoa_r+0xbd4>)
 800faf6:	f7ff ba95 	b.w	800f024 <_dtoa_r+0xdc>
 800fafa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f47f aa6e 	bne.w	800efde <_dtoa_r+0x96>
 800fb02:	4b07      	ldr	r3, [pc, #28]	; (800fb20 <_dtoa_r+0xbd8>)
 800fb04:	f7ff ba8e 	b.w	800f024 <_dtoa_r+0xdc>
 800fb08:	9b02      	ldr	r3, [sp, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	dcae      	bgt.n	800fa6c <_dtoa_r+0xb24>
 800fb0e:	9b06      	ldr	r3, [sp, #24]
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	f73f aea8 	bgt.w	800f866 <_dtoa_r+0x91e>
 800fb16:	e7a9      	b.n	800fa6c <_dtoa_r+0xb24>
 800fb18:	08011657 	.word	0x08011657
 800fb1c:	080115b4 	.word	0x080115b4
 800fb20:	080115d8 	.word	0x080115d8

0800fb24 <_localeconv_r>:
 800fb24:	4800      	ldr	r0, [pc, #0]	; (800fb28 <_localeconv_r+0x4>)
 800fb26:	4770      	bx	lr
 800fb28:	20000480 	.word	0x20000480

0800fb2c <__malloc_lock>:
 800fb2c:	4801      	ldr	r0, [pc, #4]	; (800fb34 <__malloc_lock+0x8>)
 800fb2e:	f000 bd30 	b.w	8010592 <__retarget_lock_acquire_recursive>
 800fb32:	bf00      	nop
 800fb34:	2000153c 	.word	0x2000153c

0800fb38 <__malloc_unlock>:
 800fb38:	4801      	ldr	r0, [pc, #4]	; (800fb40 <__malloc_unlock+0x8>)
 800fb3a:	f000 bd2b 	b.w	8010594 <__retarget_lock_release_recursive>
 800fb3e:	bf00      	nop
 800fb40:	2000153c 	.word	0x2000153c

0800fb44 <_Balloc>:
 800fb44:	b570      	push	{r4, r5, r6, lr}
 800fb46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb48:	4604      	mov	r4, r0
 800fb4a:	460d      	mov	r5, r1
 800fb4c:	b976      	cbnz	r6, 800fb6c <_Balloc+0x28>
 800fb4e:	2010      	movs	r0, #16
 800fb50:	f7fe fbce 	bl	800e2f0 <malloc>
 800fb54:	4602      	mov	r2, r0
 800fb56:	6260      	str	r0, [r4, #36]	; 0x24
 800fb58:	b920      	cbnz	r0, 800fb64 <_Balloc+0x20>
 800fb5a:	4b18      	ldr	r3, [pc, #96]	; (800fbbc <_Balloc+0x78>)
 800fb5c:	4818      	ldr	r0, [pc, #96]	; (800fbc0 <_Balloc+0x7c>)
 800fb5e:	2166      	movs	r1, #102	; 0x66
 800fb60:	f000 fce6 	bl	8010530 <__assert_func>
 800fb64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb68:	6006      	str	r6, [r0, #0]
 800fb6a:	60c6      	str	r6, [r0, #12]
 800fb6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fb6e:	68f3      	ldr	r3, [r6, #12]
 800fb70:	b183      	cbz	r3, 800fb94 <_Balloc+0x50>
 800fb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb7a:	b9b8      	cbnz	r0, 800fbac <_Balloc+0x68>
 800fb7c:	2101      	movs	r1, #1
 800fb7e:	fa01 f605 	lsl.w	r6, r1, r5
 800fb82:	1d72      	adds	r2, r6, #5
 800fb84:	0092      	lsls	r2, r2, #2
 800fb86:	4620      	mov	r0, r4
 800fb88:	f000 fb60 	bl	801024c <_calloc_r>
 800fb8c:	b160      	cbz	r0, 800fba8 <_Balloc+0x64>
 800fb8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb92:	e00e      	b.n	800fbb2 <_Balloc+0x6e>
 800fb94:	2221      	movs	r2, #33	; 0x21
 800fb96:	2104      	movs	r1, #4
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f000 fb57 	bl	801024c <_calloc_r>
 800fb9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fba0:	60f0      	str	r0, [r6, #12]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d1e4      	bne.n	800fb72 <_Balloc+0x2e>
 800fba8:	2000      	movs	r0, #0
 800fbaa:	bd70      	pop	{r4, r5, r6, pc}
 800fbac:	6802      	ldr	r2, [r0, #0]
 800fbae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fbb8:	e7f7      	b.n	800fbaa <_Balloc+0x66>
 800fbba:	bf00      	nop
 800fbbc:	080115e5 	.word	0x080115e5
 800fbc0:	08011668 	.word	0x08011668

0800fbc4 <_Bfree>:
 800fbc4:	b570      	push	{r4, r5, r6, lr}
 800fbc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fbc8:	4605      	mov	r5, r0
 800fbca:	460c      	mov	r4, r1
 800fbcc:	b976      	cbnz	r6, 800fbec <_Bfree+0x28>
 800fbce:	2010      	movs	r0, #16
 800fbd0:	f7fe fb8e 	bl	800e2f0 <malloc>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	6268      	str	r0, [r5, #36]	; 0x24
 800fbd8:	b920      	cbnz	r0, 800fbe4 <_Bfree+0x20>
 800fbda:	4b09      	ldr	r3, [pc, #36]	; (800fc00 <_Bfree+0x3c>)
 800fbdc:	4809      	ldr	r0, [pc, #36]	; (800fc04 <_Bfree+0x40>)
 800fbde:	218a      	movs	r1, #138	; 0x8a
 800fbe0:	f000 fca6 	bl	8010530 <__assert_func>
 800fbe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbe8:	6006      	str	r6, [r0, #0]
 800fbea:	60c6      	str	r6, [r0, #12]
 800fbec:	b13c      	cbz	r4, 800fbfe <_Bfree+0x3a>
 800fbee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fbf0:	6862      	ldr	r2, [r4, #4]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbf8:	6021      	str	r1, [r4, #0]
 800fbfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fbfe:	bd70      	pop	{r4, r5, r6, pc}
 800fc00:	080115e5 	.word	0x080115e5
 800fc04:	08011668 	.word	0x08011668

0800fc08 <__multadd>:
 800fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0c:	690d      	ldr	r5, [r1, #16]
 800fc0e:	4607      	mov	r7, r0
 800fc10:	460c      	mov	r4, r1
 800fc12:	461e      	mov	r6, r3
 800fc14:	f101 0c14 	add.w	ip, r1, #20
 800fc18:	2000      	movs	r0, #0
 800fc1a:	f8dc 3000 	ldr.w	r3, [ip]
 800fc1e:	b299      	uxth	r1, r3
 800fc20:	fb02 6101 	mla	r1, r2, r1, r6
 800fc24:	0c1e      	lsrs	r6, r3, #16
 800fc26:	0c0b      	lsrs	r3, r1, #16
 800fc28:	fb02 3306 	mla	r3, r2, r6, r3
 800fc2c:	b289      	uxth	r1, r1
 800fc2e:	3001      	adds	r0, #1
 800fc30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc34:	4285      	cmp	r5, r0
 800fc36:	f84c 1b04 	str.w	r1, [ip], #4
 800fc3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc3e:	dcec      	bgt.n	800fc1a <__multadd+0x12>
 800fc40:	b30e      	cbz	r6, 800fc86 <__multadd+0x7e>
 800fc42:	68a3      	ldr	r3, [r4, #8]
 800fc44:	42ab      	cmp	r3, r5
 800fc46:	dc19      	bgt.n	800fc7c <__multadd+0x74>
 800fc48:	6861      	ldr	r1, [r4, #4]
 800fc4a:	4638      	mov	r0, r7
 800fc4c:	3101      	adds	r1, #1
 800fc4e:	f7ff ff79 	bl	800fb44 <_Balloc>
 800fc52:	4680      	mov	r8, r0
 800fc54:	b928      	cbnz	r0, 800fc62 <__multadd+0x5a>
 800fc56:	4602      	mov	r2, r0
 800fc58:	4b0c      	ldr	r3, [pc, #48]	; (800fc8c <__multadd+0x84>)
 800fc5a:	480d      	ldr	r0, [pc, #52]	; (800fc90 <__multadd+0x88>)
 800fc5c:	21b5      	movs	r1, #181	; 0xb5
 800fc5e:	f000 fc67 	bl	8010530 <__assert_func>
 800fc62:	6922      	ldr	r2, [r4, #16]
 800fc64:	3202      	adds	r2, #2
 800fc66:	f104 010c 	add.w	r1, r4, #12
 800fc6a:	0092      	lsls	r2, r2, #2
 800fc6c:	300c      	adds	r0, #12
 800fc6e:	f7fe fb4f 	bl	800e310 <memcpy>
 800fc72:	4621      	mov	r1, r4
 800fc74:	4638      	mov	r0, r7
 800fc76:	f7ff ffa5 	bl	800fbc4 <_Bfree>
 800fc7a:	4644      	mov	r4, r8
 800fc7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc80:	3501      	adds	r5, #1
 800fc82:	615e      	str	r6, [r3, #20]
 800fc84:	6125      	str	r5, [r4, #16]
 800fc86:	4620      	mov	r0, r4
 800fc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc8c:	08011657 	.word	0x08011657
 800fc90:	08011668 	.word	0x08011668

0800fc94 <__hi0bits>:
 800fc94:	0c03      	lsrs	r3, r0, #16
 800fc96:	041b      	lsls	r3, r3, #16
 800fc98:	b9d3      	cbnz	r3, 800fcd0 <__hi0bits+0x3c>
 800fc9a:	0400      	lsls	r0, r0, #16
 800fc9c:	2310      	movs	r3, #16
 800fc9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fca2:	bf04      	itt	eq
 800fca4:	0200      	lsleq	r0, r0, #8
 800fca6:	3308      	addeq	r3, #8
 800fca8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fcac:	bf04      	itt	eq
 800fcae:	0100      	lsleq	r0, r0, #4
 800fcb0:	3304      	addeq	r3, #4
 800fcb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fcb6:	bf04      	itt	eq
 800fcb8:	0080      	lsleq	r0, r0, #2
 800fcba:	3302      	addeq	r3, #2
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	db05      	blt.n	800fccc <__hi0bits+0x38>
 800fcc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fcc4:	f103 0301 	add.w	r3, r3, #1
 800fcc8:	bf08      	it	eq
 800fcca:	2320      	moveq	r3, #32
 800fccc:	4618      	mov	r0, r3
 800fcce:	4770      	bx	lr
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	e7e4      	b.n	800fc9e <__hi0bits+0xa>

0800fcd4 <__lo0bits>:
 800fcd4:	6803      	ldr	r3, [r0, #0]
 800fcd6:	f013 0207 	ands.w	r2, r3, #7
 800fcda:	4601      	mov	r1, r0
 800fcdc:	d00b      	beq.n	800fcf6 <__lo0bits+0x22>
 800fcde:	07da      	lsls	r2, r3, #31
 800fce0:	d423      	bmi.n	800fd2a <__lo0bits+0x56>
 800fce2:	0798      	lsls	r0, r3, #30
 800fce4:	bf49      	itett	mi
 800fce6:	085b      	lsrmi	r3, r3, #1
 800fce8:	089b      	lsrpl	r3, r3, #2
 800fcea:	2001      	movmi	r0, #1
 800fcec:	600b      	strmi	r3, [r1, #0]
 800fcee:	bf5c      	itt	pl
 800fcf0:	600b      	strpl	r3, [r1, #0]
 800fcf2:	2002      	movpl	r0, #2
 800fcf4:	4770      	bx	lr
 800fcf6:	b298      	uxth	r0, r3
 800fcf8:	b9a8      	cbnz	r0, 800fd26 <__lo0bits+0x52>
 800fcfa:	0c1b      	lsrs	r3, r3, #16
 800fcfc:	2010      	movs	r0, #16
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	b90a      	cbnz	r2, 800fd06 <__lo0bits+0x32>
 800fd02:	3008      	adds	r0, #8
 800fd04:	0a1b      	lsrs	r3, r3, #8
 800fd06:	071a      	lsls	r2, r3, #28
 800fd08:	bf04      	itt	eq
 800fd0a:	091b      	lsreq	r3, r3, #4
 800fd0c:	3004      	addeq	r0, #4
 800fd0e:	079a      	lsls	r2, r3, #30
 800fd10:	bf04      	itt	eq
 800fd12:	089b      	lsreq	r3, r3, #2
 800fd14:	3002      	addeq	r0, #2
 800fd16:	07da      	lsls	r2, r3, #31
 800fd18:	d403      	bmi.n	800fd22 <__lo0bits+0x4e>
 800fd1a:	085b      	lsrs	r3, r3, #1
 800fd1c:	f100 0001 	add.w	r0, r0, #1
 800fd20:	d005      	beq.n	800fd2e <__lo0bits+0x5a>
 800fd22:	600b      	str	r3, [r1, #0]
 800fd24:	4770      	bx	lr
 800fd26:	4610      	mov	r0, r2
 800fd28:	e7e9      	b.n	800fcfe <__lo0bits+0x2a>
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	4770      	bx	lr
 800fd2e:	2020      	movs	r0, #32
 800fd30:	4770      	bx	lr
	...

0800fd34 <__i2b>:
 800fd34:	b510      	push	{r4, lr}
 800fd36:	460c      	mov	r4, r1
 800fd38:	2101      	movs	r1, #1
 800fd3a:	f7ff ff03 	bl	800fb44 <_Balloc>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	b928      	cbnz	r0, 800fd4e <__i2b+0x1a>
 800fd42:	4b05      	ldr	r3, [pc, #20]	; (800fd58 <__i2b+0x24>)
 800fd44:	4805      	ldr	r0, [pc, #20]	; (800fd5c <__i2b+0x28>)
 800fd46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd4a:	f000 fbf1 	bl	8010530 <__assert_func>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	6144      	str	r4, [r0, #20]
 800fd52:	6103      	str	r3, [r0, #16]
 800fd54:	bd10      	pop	{r4, pc}
 800fd56:	bf00      	nop
 800fd58:	08011657 	.word	0x08011657
 800fd5c:	08011668 	.word	0x08011668

0800fd60 <__multiply>:
 800fd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd64:	4691      	mov	r9, r2
 800fd66:	690a      	ldr	r2, [r1, #16]
 800fd68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	bfb8      	it	lt
 800fd70:	460b      	movlt	r3, r1
 800fd72:	460c      	mov	r4, r1
 800fd74:	bfbc      	itt	lt
 800fd76:	464c      	movlt	r4, r9
 800fd78:	4699      	movlt	r9, r3
 800fd7a:	6927      	ldr	r7, [r4, #16]
 800fd7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd80:	68a3      	ldr	r3, [r4, #8]
 800fd82:	6861      	ldr	r1, [r4, #4]
 800fd84:	eb07 060a 	add.w	r6, r7, sl
 800fd88:	42b3      	cmp	r3, r6
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	bfb8      	it	lt
 800fd8e:	3101      	addlt	r1, #1
 800fd90:	f7ff fed8 	bl	800fb44 <_Balloc>
 800fd94:	b930      	cbnz	r0, 800fda4 <__multiply+0x44>
 800fd96:	4602      	mov	r2, r0
 800fd98:	4b44      	ldr	r3, [pc, #272]	; (800feac <__multiply+0x14c>)
 800fd9a:	4845      	ldr	r0, [pc, #276]	; (800feb0 <__multiply+0x150>)
 800fd9c:	f240 115d 	movw	r1, #349	; 0x15d
 800fda0:	f000 fbc6 	bl	8010530 <__assert_func>
 800fda4:	f100 0514 	add.w	r5, r0, #20
 800fda8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fdac:	462b      	mov	r3, r5
 800fdae:	2200      	movs	r2, #0
 800fdb0:	4543      	cmp	r3, r8
 800fdb2:	d321      	bcc.n	800fdf8 <__multiply+0x98>
 800fdb4:	f104 0314 	add.w	r3, r4, #20
 800fdb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fdbc:	f109 0314 	add.w	r3, r9, #20
 800fdc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fdc4:	9202      	str	r2, [sp, #8]
 800fdc6:	1b3a      	subs	r2, r7, r4
 800fdc8:	3a15      	subs	r2, #21
 800fdca:	f022 0203 	bic.w	r2, r2, #3
 800fdce:	3204      	adds	r2, #4
 800fdd0:	f104 0115 	add.w	r1, r4, #21
 800fdd4:	428f      	cmp	r7, r1
 800fdd6:	bf38      	it	cc
 800fdd8:	2204      	movcc	r2, #4
 800fdda:	9201      	str	r2, [sp, #4]
 800fddc:	9a02      	ldr	r2, [sp, #8]
 800fdde:	9303      	str	r3, [sp, #12]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d80c      	bhi.n	800fdfe <__multiply+0x9e>
 800fde4:	2e00      	cmp	r6, #0
 800fde6:	dd03      	ble.n	800fdf0 <__multiply+0x90>
 800fde8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d05a      	beq.n	800fea6 <__multiply+0x146>
 800fdf0:	6106      	str	r6, [r0, #16]
 800fdf2:	b005      	add	sp, #20
 800fdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf8:	f843 2b04 	str.w	r2, [r3], #4
 800fdfc:	e7d8      	b.n	800fdb0 <__multiply+0x50>
 800fdfe:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe02:	f1ba 0f00 	cmp.w	sl, #0
 800fe06:	d024      	beq.n	800fe52 <__multiply+0xf2>
 800fe08:	f104 0e14 	add.w	lr, r4, #20
 800fe0c:	46a9      	mov	r9, r5
 800fe0e:	f04f 0c00 	mov.w	ip, #0
 800fe12:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe16:	f8d9 1000 	ldr.w	r1, [r9]
 800fe1a:	fa1f fb82 	uxth.w	fp, r2
 800fe1e:	b289      	uxth	r1, r1
 800fe20:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fe28:	f8d9 2000 	ldr.w	r2, [r9]
 800fe2c:	4461      	add	r1, ip
 800fe2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe32:	fb0a c20b 	mla	r2, sl, fp, ip
 800fe36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fe3a:	b289      	uxth	r1, r1
 800fe3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe40:	4577      	cmp	r7, lr
 800fe42:	f849 1b04 	str.w	r1, [r9], #4
 800fe46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe4a:	d8e2      	bhi.n	800fe12 <__multiply+0xb2>
 800fe4c:	9a01      	ldr	r2, [sp, #4]
 800fe4e:	f845 c002 	str.w	ip, [r5, r2]
 800fe52:	9a03      	ldr	r2, [sp, #12]
 800fe54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fe58:	3304      	adds	r3, #4
 800fe5a:	f1b9 0f00 	cmp.w	r9, #0
 800fe5e:	d020      	beq.n	800fea2 <__multiply+0x142>
 800fe60:	6829      	ldr	r1, [r5, #0]
 800fe62:	f104 0c14 	add.w	ip, r4, #20
 800fe66:	46ae      	mov	lr, r5
 800fe68:	f04f 0a00 	mov.w	sl, #0
 800fe6c:	f8bc b000 	ldrh.w	fp, [ip]
 800fe70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fe74:	fb09 220b 	mla	r2, r9, fp, r2
 800fe78:	4492      	add	sl, r2
 800fe7a:	b289      	uxth	r1, r1
 800fe7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fe80:	f84e 1b04 	str.w	r1, [lr], #4
 800fe84:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fe88:	f8be 1000 	ldrh.w	r1, [lr]
 800fe8c:	0c12      	lsrs	r2, r2, #16
 800fe8e:	fb09 1102 	mla	r1, r9, r2, r1
 800fe92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fe96:	4567      	cmp	r7, ip
 800fe98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fe9c:	d8e6      	bhi.n	800fe6c <__multiply+0x10c>
 800fe9e:	9a01      	ldr	r2, [sp, #4]
 800fea0:	50a9      	str	r1, [r5, r2]
 800fea2:	3504      	adds	r5, #4
 800fea4:	e79a      	b.n	800fddc <__multiply+0x7c>
 800fea6:	3e01      	subs	r6, #1
 800fea8:	e79c      	b.n	800fde4 <__multiply+0x84>
 800feaa:	bf00      	nop
 800feac:	08011657 	.word	0x08011657
 800feb0:	08011668 	.word	0x08011668

0800feb4 <__pow5mult>:
 800feb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feb8:	4615      	mov	r5, r2
 800feba:	f012 0203 	ands.w	r2, r2, #3
 800febe:	4606      	mov	r6, r0
 800fec0:	460f      	mov	r7, r1
 800fec2:	d007      	beq.n	800fed4 <__pow5mult+0x20>
 800fec4:	4c25      	ldr	r4, [pc, #148]	; (800ff5c <__pow5mult+0xa8>)
 800fec6:	3a01      	subs	r2, #1
 800fec8:	2300      	movs	r3, #0
 800feca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fece:	f7ff fe9b 	bl	800fc08 <__multadd>
 800fed2:	4607      	mov	r7, r0
 800fed4:	10ad      	asrs	r5, r5, #2
 800fed6:	d03d      	beq.n	800ff54 <__pow5mult+0xa0>
 800fed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800feda:	b97c      	cbnz	r4, 800fefc <__pow5mult+0x48>
 800fedc:	2010      	movs	r0, #16
 800fede:	f7fe fa07 	bl	800e2f0 <malloc>
 800fee2:	4602      	mov	r2, r0
 800fee4:	6270      	str	r0, [r6, #36]	; 0x24
 800fee6:	b928      	cbnz	r0, 800fef4 <__pow5mult+0x40>
 800fee8:	4b1d      	ldr	r3, [pc, #116]	; (800ff60 <__pow5mult+0xac>)
 800feea:	481e      	ldr	r0, [pc, #120]	; (800ff64 <__pow5mult+0xb0>)
 800feec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fef0:	f000 fb1e 	bl	8010530 <__assert_func>
 800fef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fef8:	6004      	str	r4, [r0, #0]
 800fefa:	60c4      	str	r4, [r0, #12]
 800fefc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff04:	b94c      	cbnz	r4, 800ff1a <__pow5mult+0x66>
 800ff06:	f240 2171 	movw	r1, #625	; 0x271
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	f7ff ff12 	bl	800fd34 <__i2b>
 800ff10:	2300      	movs	r3, #0
 800ff12:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff16:	4604      	mov	r4, r0
 800ff18:	6003      	str	r3, [r0, #0]
 800ff1a:	f04f 0900 	mov.w	r9, #0
 800ff1e:	07eb      	lsls	r3, r5, #31
 800ff20:	d50a      	bpl.n	800ff38 <__pow5mult+0x84>
 800ff22:	4639      	mov	r1, r7
 800ff24:	4622      	mov	r2, r4
 800ff26:	4630      	mov	r0, r6
 800ff28:	f7ff ff1a 	bl	800fd60 <__multiply>
 800ff2c:	4639      	mov	r1, r7
 800ff2e:	4680      	mov	r8, r0
 800ff30:	4630      	mov	r0, r6
 800ff32:	f7ff fe47 	bl	800fbc4 <_Bfree>
 800ff36:	4647      	mov	r7, r8
 800ff38:	106d      	asrs	r5, r5, #1
 800ff3a:	d00b      	beq.n	800ff54 <__pow5mult+0xa0>
 800ff3c:	6820      	ldr	r0, [r4, #0]
 800ff3e:	b938      	cbnz	r0, 800ff50 <__pow5mult+0x9c>
 800ff40:	4622      	mov	r2, r4
 800ff42:	4621      	mov	r1, r4
 800ff44:	4630      	mov	r0, r6
 800ff46:	f7ff ff0b 	bl	800fd60 <__multiply>
 800ff4a:	6020      	str	r0, [r4, #0]
 800ff4c:	f8c0 9000 	str.w	r9, [r0]
 800ff50:	4604      	mov	r4, r0
 800ff52:	e7e4      	b.n	800ff1e <__pow5mult+0x6a>
 800ff54:	4638      	mov	r0, r7
 800ff56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff5a:	bf00      	nop
 800ff5c:	080117b8 	.word	0x080117b8
 800ff60:	080115e5 	.word	0x080115e5
 800ff64:	08011668 	.word	0x08011668

0800ff68 <__lshift>:
 800ff68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	6849      	ldr	r1, [r1, #4]
 800ff70:	6923      	ldr	r3, [r4, #16]
 800ff72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff76:	68a3      	ldr	r3, [r4, #8]
 800ff78:	4607      	mov	r7, r0
 800ff7a:	4691      	mov	r9, r2
 800ff7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff80:	f108 0601 	add.w	r6, r8, #1
 800ff84:	42b3      	cmp	r3, r6
 800ff86:	db0b      	blt.n	800ffa0 <__lshift+0x38>
 800ff88:	4638      	mov	r0, r7
 800ff8a:	f7ff fddb 	bl	800fb44 <_Balloc>
 800ff8e:	4605      	mov	r5, r0
 800ff90:	b948      	cbnz	r0, 800ffa6 <__lshift+0x3e>
 800ff92:	4602      	mov	r2, r0
 800ff94:	4b2a      	ldr	r3, [pc, #168]	; (8010040 <__lshift+0xd8>)
 800ff96:	482b      	ldr	r0, [pc, #172]	; (8010044 <__lshift+0xdc>)
 800ff98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ff9c:	f000 fac8 	bl	8010530 <__assert_func>
 800ffa0:	3101      	adds	r1, #1
 800ffa2:	005b      	lsls	r3, r3, #1
 800ffa4:	e7ee      	b.n	800ff84 <__lshift+0x1c>
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	f100 0114 	add.w	r1, r0, #20
 800ffac:	f100 0210 	add.w	r2, r0, #16
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	4553      	cmp	r3, sl
 800ffb4:	db37      	blt.n	8010026 <__lshift+0xbe>
 800ffb6:	6920      	ldr	r0, [r4, #16]
 800ffb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffbc:	f104 0314 	add.w	r3, r4, #20
 800ffc0:	f019 091f 	ands.w	r9, r9, #31
 800ffc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ffcc:	d02f      	beq.n	801002e <__lshift+0xc6>
 800ffce:	f1c9 0e20 	rsb	lr, r9, #32
 800ffd2:	468a      	mov	sl, r1
 800ffd4:	f04f 0c00 	mov.w	ip, #0
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	fa02 f209 	lsl.w	r2, r2, r9
 800ffde:	ea42 020c 	orr.w	r2, r2, ip
 800ffe2:	f84a 2b04 	str.w	r2, [sl], #4
 800ffe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffea:	4298      	cmp	r0, r3
 800ffec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fff0:	d8f2      	bhi.n	800ffd8 <__lshift+0x70>
 800fff2:	1b03      	subs	r3, r0, r4
 800fff4:	3b15      	subs	r3, #21
 800fff6:	f023 0303 	bic.w	r3, r3, #3
 800fffa:	3304      	adds	r3, #4
 800fffc:	f104 0215 	add.w	r2, r4, #21
 8010000:	4290      	cmp	r0, r2
 8010002:	bf38      	it	cc
 8010004:	2304      	movcc	r3, #4
 8010006:	f841 c003 	str.w	ip, [r1, r3]
 801000a:	f1bc 0f00 	cmp.w	ip, #0
 801000e:	d001      	beq.n	8010014 <__lshift+0xac>
 8010010:	f108 0602 	add.w	r6, r8, #2
 8010014:	3e01      	subs	r6, #1
 8010016:	4638      	mov	r0, r7
 8010018:	612e      	str	r6, [r5, #16]
 801001a:	4621      	mov	r1, r4
 801001c:	f7ff fdd2 	bl	800fbc4 <_Bfree>
 8010020:	4628      	mov	r0, r5
 8010022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010026:	f842 0f04 	str.w	r0, [r2, #4]!
 801002a:	3301      	adds	r3, #1
 801002c:	e7c1      	b.n	800ffb2 <__lshift+0x4a>
 801002e:	3904      	subs	r1, #4
 8010030:	f853 2b04 	ldr.w	r2, [r3], #4
 8010034:	f841 2f04 	str.w	r2, [r1, #4]!
 8010038:	4298      	cmp	r0, r3
 801003a:	d8f9      	bhi.n	8010030 <__lshift+0xc8>
 801003c:	e7ea      	b.n	8010014 <__lshift+0xac>
 801003e:	bf00      	nop
 8010040:	08011657 	.word	0x08011657
 8010044:	08011668 	.word	0x08011668

08010048 <__mcmp>:
 8010048:	b530      	push	{r4, r5, lr}
 801004a:	6902      	ldr	r2, [r0, #16]
 801004c:	690c      	ldr	r4, [r1, #16]
 801004e:	1b12      	subs	r2, r2, r4
 8010050:	d10e      	bne.n	8010070 <__mcmp+0x28>
 8010052:	f100 0314 	add.w	r3, r0, #20
 8010056:	3114      	adds	r1, #20
 8010058:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801005c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010060:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010064:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010068:	42a5      	cmp	r5, r4
 801006a:	d003      	beq.n	8010074 <__mcmp+0x2c>
 801006c:	d305      	bcc.n	801007a <__mcmp+0x32>
 801006e:	2201      	movs	r2, #1
 8010070:	4610      	mov	r0, r2
 8010072:	bd30      	pop	{r4, r5, pc}
 8010074:	4283      	cmp	r3, r0
 8010076:	d3f3      	bcc.n	8010060 <__mcmp+0x18>
 8010078:	e7fa      	b.n	8010070 <__mcmp+0x28>
 801007a:	f04f 32ff 	mov.w	r2, #4294967295
 801007e:	e7f7      	b.n	8010070 <__mcmp+0x28>

08010080 <__mdiff>:
 8010080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010084:	460c      	mov	r4, r1
 8010086:	4606      	mov	r6, r0
 8010088:	4611      	mov	r1, r2
 801008a:	4620      	mov	r0, r4
 801008c:	4690      	mov	r8, r2
 801008e:	f7ff ffdb 	bl	8010048 <__mcmp>
 8010092:	1e05      	subs	r5, r0, #0
 8010094:	d110      	bne.n	80100b8 <__mdiff+0x38>
 8010096:	4629      	mov	r1, r5
 8010098:	4630      	mov	r0, r6
 801009a:	f7ff fd53 	bl	800fb44 <_Balloc>
 801009e:	b930      	cbnz	r0, 80100ae <__mdiff+0x2e>
 80100a0:	4b3a      	ldr	r3, [pc, #232]	; (801018c <__mdiff+0x10c>)
 80100a2:	4602      	mov	r2, r0
 80100a4:	f240 2132 	movw	r1, #562	; 0x232
 80100a8:	4839      	ldr	r0, [pc, #228]	; (8010190 <__mdiff+0x110>)
 80100aa:	f000 fa41 	bl	8010530 <__assert_func>
 80100ae:	2301      	movs	r3, #1
 80100b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b8:	bfa4      	itt	ge
 80100ba:	4643      	movge	r3, r8
 80100bc:	46a0      	movge	r8, r4
 80100be:	4630      	mov	r0, r6
 80100c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80100c4:	bfa6      	itte	ge
 80100c6:	461c      	movge	r4, r3
 80100c8:	2500      	movge	r5, #0
 80100ca:	2501      	movlt	r5, #1
 80100cc:	f7ff fd3a 	bl	800fb44 <_Balloc>
 80100d0:	b920      	cbnz	r0, 80100dc <__mdiff+0x5c>
 80100d2:	4b2e      	ldr	r3, [pc, #184]	; (801018c <__mdiff+0x10c>)
 80100d4:	4602      	mov	r2, r0
 80100d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80100da:	e7e5      	b.n	80100a8 <__mdiff+0x28>
 80100dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80100e0:	6926      	ldr	r6, [r4, #16]
 80100e2:	60c5      	str	r5, [r0, #12]
 80100e4:	f104 0914 	add.w	r9, r4, #20
 80100e8:	f108 0514 	add.w	r5, r8, #20
 80100ec:	f100 0e14 	add.w	lr, r0, #20
 80100f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80100f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80100f8:	f108 0210 	add.w	r2, r8, #16
 80100fc:	46f2      	mov	sl, lr
 80100fe:	2100      	movs	r1, #0
 8010100:	f859 3b04 	ldr.w	r3, [r9], #4
 8010104:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010108:	fa1f f883 	uxth.w	r8, r3
 801010c:	fa11 f18b 	uxtah	r1, r1, fp
 8010110:	0c1b      	lsrs	r3, r3, #16
 8010112:	eba1 0808 	sub.w	r8, r1, r8
 8010116:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801011a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801011e:	fa1f f888 	uxth.w	r8, r8
 8010122:	1419      	asrs	r1, r3, #16
 8010124:	454e      	cmp	r6, r9
 8010126:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801012a:	f84a 3b04 	str.w	r3, [sl], #4
 801012e:	d8e7      	bhi.n	8010100 <__mdiff+0x80>
 8010130:	1b33      	subs	r3, r6, r4
 8010132:	3b15      	subs	r3, #21
 8010134:	f023 0303 	bic.w	r3, r3, #3
 8010138:	3304      	adds	r3, #4
 801013a:	3415      	adds	r4, #21
 801013c:	42a6      	cmp	r6, r4
 801013e:	bf38      	it	cc
 8010140:	2304      	movcc	r3, #4
 8010142:	441d      	add	r5, r3
 8010144:	4473      	add	r3, lr
 8010146:	469e      	mov	lr, r3
 8010148:	462e      	mov	r6, r5
 801014a:	4566      	cmp	r6, ip
 801014c:	d30e      	bcc.n	801016c <__mdiff+0xec>
 801014e:	f10c 0203 	add.w	r2, ip, #3
 8010152:	1b52      	subs	r2, r2, r5
 8010154:	f022 0203 	bic.w	r2, r2, #3
 8010158:	3d03      	subs	r5, #3
 801015a:	45ac      	cmp	ip, r5
 801015c:	bf38      	it	cc
 801015e:	2200      	movcc	r2, #0
 8010160:	441a      	add	r2, r3
 8010162:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010166:	b17b      	cbz	r3, 8010188 <__mdiff+0x108>
 8010168:	6107      	str	r7, [r0, #16]
 801016a:	e7a3      	b.n	80100b4 <__mdiff+0x34>
 801016c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010170:	fa11 f288 	uxtah	r2, r1, r8
 8010174:	1414      	asrs	r4, r2, #16
 8010176:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801017a:	b292      	uxth	r2, r2
 801017c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010180:	f84e 2b04 	str.w	r2, [lr], #4
 8010184:	1421      	asrs	r1, r4, #16
 8010186:	e7e0      	b.n	801014a <__mdiff+0xca>
 8010188:	3f01      	subs	r7, #1
 801018a:	e7ea      	b.n	8010162 <__mdiff+0xe2>
 801018c:	08011657 	.word	0x08011657
 8010190:	08011668 	.word	0x08011668

08010194 <__d2b>:
 8010194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010198:	4689      	mov	r9, r1
 801019a:	2101      	movs	r1, #1
 801019c:	ec57 6b10 	vmov	r6, r7, d0
 80101a0:	4690      	mov	r8, r2
 80101a2:	f7ff fccf 	bl	800fb44 <_Balloc>
 80101a6:	4604      	mov	r4, r0
 80101a8:	b930      	cbnz	r0, 80101b8 <__d2b+0x24>
 80101aa:	4602      	mov	r2, r0
 80101ac:	4b25      	ldr	r3, [pc, #148]	; (8010244 <__d2b+0xb0>)
 80101ae:	4826      	ldr	r0, [pc, #152]	; (8010248 <__d2b+0xb4>)
 80101b0:	f240 310a 	movw	r1, #778	; 0x30a
 80101b4:	f000 f9bc 	bl	8010530 <__assert_func>
 80101b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80101bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80101c0:	bb35      	cbnz	r5, 8010210 <__d2b+0x7c>
 80101c2:	2e00      	cmp	r6, #0
 80101c4:	9301      	str	r3, [sp, #4]
 80101c6:	d028      	beq.n	801021a <__d2b+0x86>
 80101c8:	4668      	mov	r0, sp
 80101ca:	9600      	str	r6, [sp, #0]
 80101cc:	f7ff fd82 	bl	800fcd4 <__lo0bits>
 80101d0:	9900      	ldr	r1, [sp, #0]
 80101d2:	b300      	cbz	r0, 8010216 <__d2b+0x82>
 80101d4:	9a01      	ldr	r2, [sp, #4]
 80101d6:	f1c0 0320 	rsb	r3, r0, #32
 80101da:	fa02 f303 	lsl.w	r3, r2, r3
 80101de:	430b      	orrs	r3, r1
 80101e0:	40c2      	lsrs	r2, r0
 80101e2:	6163      	str	r3, [r4, #20]
 80101e4:	9201      	str	r2, [sp, #4]
 80101e6:	9b01      	ldr	r3, [sp, #4]
 80101e8:	61a3      	str	r3, [r4, #24]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	bf14      	ite	ne
 80101ee:	2202      	movne	r2, #2
 80101f0:	2201      	moveq	r2, #1
 80101f2:	6122      	str	r2, [r4, #16]
 80101f4:	b1d5      	cbz	r5, 801022c <__d2b+0x98>
 80101f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80101fa:	4405      	add	r5, r0
 80101fc:	f8c9 5000 	str.w	r5, [r9]
 8010200:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010204:	f8c8 0000 	str.w	r0, [r8]
 8010208:	4620      	mov	r0, r4
 801020a:	b003      	add	sp, #12
 801020c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010214:	e7d5      	b.n	80101c2 <__d2b+0x2e>
 8010216:	6161      	str	r1, [r4, #20]
 8010218:	e7e5      	b.n	80101e6 <__d2b+0x52>
 801021a:	a801      	add	r0, sp, #4
 801021c:	f7ff fd5a 	bl	800fcd4 <__lo0bits>
 8010220:	9b01      	ldr	r3, [sp, #4]
 8010222:	6163      	str	r3, [r4, #20]
 8010224:	2201      	movs	r2, #1
 8010226:	6122      	str	r2, [r4, #16]
 8010228:	3020      	adds	r0, #32
 801022a:	e7e3      	b.n	80101f4 <__d2b+0x60>
 801022c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010230:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010234:	f8c9 0000 	str.w	r0, [r9]
 8010238:	6918      	ldr	r0, [r3, #16]
 801023a:	f7ff fd2b 	bl	800fc94 <__hi0bits>
 801023e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010242:	e7df      	b.n	8010204 <__d2b+0x70>
 8010244:	08011657 	.word	0x08011657
 8010248:	08011668 	.word	0x08011668

0801024c <_calloc_r>:
 801024c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801024e:	fba1 2402 	umull	r2, r4, r1, r2
 8010252:	b94c      	cbnz	r4, 8010268 <_calloc_r+0x1c>
 8010254:	4611      	mov	r1, r2
 8010256:	9201      	str	r2, [sp, #4]
 8010258:	f7fe f8dc 	bl	800e414 <_malloc_r>
 801025c:	9a01      	ldr	r2, [sp, #4]
 801025e:	4605      	mov	r5, r0
 8010260:	b930      	cbnz	r0, 8010270 <_calloc_r+0x24>
 8010262:	4628      	mov	r0, r5
 8010264:	b003      	add	sp, #12
 8010266:	bd30      	pop	{r4, r5, pc}
 8010268:	220c      	movs	r2, #12
 801026a:	6002      	str	r2, [r0, #0]
 801026c:	2500      	movs	r5, #0
 801026e:	e7f8      	b.n	8010262 <_calloc_r+0x16>
 8010270:	4621      	mov	r1, r4
 8010272:	f7fe f85b 	bl	800e32c <memset>
 8010276:	e7f4      	b.n	8010262 <_calloc_r+0x16>

08010278 <__ssputs_r>:
 8010278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801027c:	688e      	ldr	r6, [r1, #8]
 801027e:	429e      	cmp	r6, r3
 8010280:	4682      	mov	sl, r0
 8010282:	460c      	mov	r4, r1
 8010284:	4690      	mov	r8, r2
 8010286:	461f      	mov	r7, r3
 8010288:	d838      	bhi.n	80102fc <__ssputs_r+0x84>
 801028a:	898a      	ldrh	r2, [r1, #12]
 801028c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010290:	d032      	beq.n	80102f8 <__ssputs_r+0x80>
 8010292:	6825      	ldr	r5, [r4, #0]
 8010294:	6909      	ldr	r1, [r1, #16]
 8010296:	eba5 0901 	sub.w	r9, r5, r1
 801029a:	6965      	ldr	r5, [r4, #20]
 801029c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102a4:	3301      	adds	r3, #1
 80102a6:	444b      	add	r3, r9
 80102a8:	106d      	asrs	r5, r5, #1
 80102aa:	429d      	cmp	r5, r3
 80102ac:	bf38      	it	cc
 80102ae:	461d      	movcc	r5, r3
 80102b0:	0553      	lsls	r3, r2, #21
 80102b2:	d531      	bpl.n	8010318 <__ssputs_r+0xa0>
 80102b4:	4629      	mov	r1, r5
 80102b6:	f7fe f8ad 	bl	800e414 <_malloc_r>
 80102ba:	4606      	mov	r6, r0
 80102bc:	b950      	cbnz	r0, 80102d4 <__ssputs_r+0x5c>
 80102be:	230c      	movs	r3, #12
 80102c0:	f8ca 3000 	str.w	r3, [sl]
 80102c4:	89a3      	ldrh	r3, [r4, #12]
 80102c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102ca:	81a3      	strh	r3, [r4, #12]
 80102cc:	f04f 30ff 	mov.w	r0, #4294967295
 80102d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102d4:	6921      	ldr	r1, [r4, #16]
 80102d6:	464a      	mov	r2, r9
 80102d8:	f7fe f81a 	bl	800e310 <memcpy>
 80102dc:	89a3      	ldrh	r3, [r4, #12]
 80102de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80102e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102e6:	81a3      	strh	r3, [r4, #12]
 80102e8:	6126      	str	r6, [r4, #16]
 80102ea:	6165      	str	r5, [r4, #20]
 80102ec:	444e      	add	r6, r9
 80102ee:	eba5 0509 	sub.w	r5, r5, r9
 80102f2:	6026      	str	r6, [r4, #0]
 80102f4:	60a5      	str	r5, [r4, #8]
 80102f6:	463e      	mov	r6, r7
 80102f8:	42be      	cmp	r6, r7
 80102fa:	d900      	bls.n	80102fe <__ssputs_r+0x86>
 80102fc:	463e      	mov	r6, r7
 80102fe:	6820      	ldr	r0, [r4, #0]
 8010300:	4632      	mov	r2, r6
 8010302:	4641      	mov	r1, r8
 8010304:	f000 f959 	bl	80105ba <memmove>
 8010308:	68a3      	ldr	r3, [r4, #8]
 801030a:	1b9b      	subs	r3, r3, r6
 801030c:	60a3      	str	r3, [r4, #8]
 801030e:	6823      	ldr	r3, [r4, #0]
 8010310:	4433      	add	r3, r6
 8010312:	6023      	str	r3, [r4, #0]
 8010314:	2000      	movs	r0, #0
 8010316:	e7db      	b.n	80102d0 <__ssputs_r+0x58>
 8010318:	462a      	mov	r2, r5
 801031a:	f000 f968 	bl	80105ee <_realloc_r>
 801031e:	4606      	mov	r6, r0
 8010320:	2800      	cmp	r0, #0
 8010322:	d1e1      	bne.n	80102e8 <__ssputs_r+0x70>
 8010324:	6921      	ldr	r1, [r4, #16]
 8010326:	4650      	mov	r0, sl
 8010328:	f7fe f808 	bl	800e33c <_free_r>
 801032c:	e7c7      	b.n	80102be <__ssputs_r+0x46>
	...

08010330 <_svfiprintf_r>:
 8010330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010334:	4698      	mov	r8, r3
 8010336:	898b      	ldrh	r3, [r1, #12]
 8010338:	061b      	lsls	r3, r3, #24
 801033a:	b09d      	sub	sp, #116	; 0x74
 801033c:	4607      	mov	r7, r0
 801033e:	460d      	mov	r5, r1
 8010340:	4614      	mov	r4, r2
 8010342:	d50e      	bpl.n	8010362 <_svfiprintf_r+0x32>
 8010344:	690b      	ldr	r3, [r1, #16]
 8010346:	b963      	cbnz	r3, 8010362 <_svfiprintf_r+0x32>
 8010348:	2140      	movs	r1, #64	; 0x40
 801034a:	f7fe f863 	bl	800e414 <_malloc_r>
 801034e:	6028      	str	r0, [r5, #0]
 8010350:	6128      	str	r0, [r5, #16]
 8010352:	b920      	cbnz	r0, 801035e <_svfiprintf_r+0x2e>
 8010354:	230c      	movs	r3, #12
 8010356:	603b      	str	r3, [r7, #0]
 8010358:	f04f 30ff 	mov.w	r0, #4294967295
 801035c:	e0d1      	b.n	8010502 <_svfiprintf_r+0x1d2>
 801035e:	2340      	movs	r3, #64	; 0x40
 8010360:	616b      	str	r3, [r5, #20]
 8010362:	2300      	movs	r3, #0
 8010364:	9309      	str	r3, [sp, #36]	; 0x24
 8010366:	2320      	movs	r3, #32
 8010368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801036c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010370:	2330      	movs	r3, #48	; 0x30
 8010372:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801051c <_svfiprintf_r+0x1ec>
 8010376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801037a:	f04f 0901 	mov.w	r9, #1
 801037e:	4623      	mov	r3, r4
 8010380:	469a      	mov	sl, r3
 8010382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010386:	b10a      	cbz	r2, 801038c <_svfiprintf_r+0x5c>
 8010388:	2a25      	cmp	r2, #37	; 0x25
 801038a:	d1f9      	bne.n	8010380 <_svfiprintf_r+0x50>
 801038c:	ebba 0b04 	subs.w	fp, sl, r4
 8010390:	d00b      	beq.n	80103aa <_svfiprintf_r+0x7a>
 8010392:	465b      	mov	r3, fp
 8010394:	4622      	mov	r2, r4
 8010396:	4629      	mov	r1, r5
 8010398:	4638      	mov	r0, r7
 801039a:	f7ff ff6d 	bl	8010278 <__ssputs_r>
 801039e:	3001      	adds	r0, #1
 80103a0:	f000 80aa 	beq.w	80104f8 <_svfiprintf_r+0x1c8>
 80103a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103a6:	445a      	add	r2, fp
 80103a8:	9209      	str	r2, [sp, #36]	; 0x24
 80103aa:	f89a 3000 	ldrb.w	r3, [sl]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f000 80a2 	beq.w	80104f8 <_svfiprintf_r+0x1c8>
 80103b4:	2300      	movs	r3, #0
 80103b6:	f04f 32ff 	mov.w	r2, #4294967295
 80103ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103be:	f10a 0a01 	add.w	sl, sl, #1
 80103c2:	9304      	str	r3, [sp, #16]
 80103c4:	9307      	str	r3, [sp, #28]
 80103c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80103ca:	931a      	str	r3, [sp, #104]	; 0x68
 80103cc:	4654      	mov	r4, sl
 80103ce:	2205      	movs	r2, #5
 80103d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103d4:	4851      	ldr	r0, [pc, #324]	; (801051c <_svfiprintf_r+0x1ec>)
 80103d6:	f7ef ff03 	bl	80001e0 <memchr>
 80103da:	9a04      	ldr	r2, [sp, #16]
 80103dc:	b9d8      	cbnz	r0, 8010416 <_svfiprintf_r+0xe6>
 80103de:	06d0      	lsls	r0, r2, #27
 80103e0:	bf44      	itt	mi
 80103e2:	2320      	movmi	r3, #32
 80103e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103e8:	0711      	lsls	r1, r2, #28
 80103ea:	bf44      	itt	mi
 80103ec:	232b      	movmi	r3, #43	; 0x2b
 80103ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103f2:	f89a 3000 	ldrb.w	r3, [sl]
 80103f6:	2b2a      	cmp	r3, #42	; 0x2a
 80103f8:	d015      	beq.n	8010426 <_svfiprintf_r+0xf6>
 80103fa:	9a07      	ldr	r2, [sp, #28]
 80103fc:	4654      	mov	r4, sl
 80103fe:	2000      	movs	r0, #0
 8010400:	f04f 0c0a 	mov.w	ip, #10
 8010404:	4621      	mov	r1, r4
 8010406:	f811 3b01 	ldrb.w	r3, [r1], #1
 801040a:	3b30      	subs	r3, #48	; 0x30
 801040c:	2b09      	cmp	r3, #9
 801040e:	d94e      	bls.n	80104ae <_svfiprintf_r+0x17e>
 8010410:	b1b0      	cbz	r0, 8010440 <_svfiprintf_r+0x110>
 8010412:	9207      	str	r2, [sp, #28]
 8010414:	e014      	b.n	8010440 <_svfiprintf_r+0x110>
 8010416:	eba0 0308 	sub.w	r3, r0, r8
 801041a:	fa09 f303 	lsl.w	r3, r9, r3
 801041e:	4313      	orrs	r3, r2
 8010420:	9304      	str	r3, [sp, #16]
 8010422:	46a2      	mov	sl, r4
 8010424:	e7d2      	b.n	80103cc <_svfiprintf_r+0x9c>
 8010426:	9b03      	ldr	r3, [sp, #12]
 8010428:	1d19      	adds	r1, r3, #4
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	9103      	str	r1, [sp, #12]
 801042e:	2b00      	cmp	r3, #0
 8010430:	bfbb      	ittet	lt
 8010432:	425b      	neglt	r3, r3
 8010434:	f042 0202 	orrlt.w	r2, r2, #2
 8010438:	9307      	strge	r3, [sp, #28]
 801043a:	9307      	strlt	r3, [sp, #28]
 801043c:	bfb8      	it	lt
 801043e:	9204      	strlt	r2, [sp, #16]
 8010440:	7823      	ldrb	r3, [r4, #0]
 8010442:	2b2e      	cmp	r3, #46	; 0x2e
 8010444:	d10c      	bne.n	8010460 <_svfiprintf_r+0x130>
 8010446:	7863      	ldrb	r3, [r4, #1]
 8010448:	2b2a      	cmp	r3, #42	; 0x2a
 801044a:	d135      	bne.n	80104b8 <_svfiprintf_r+0x188>
 801044c:	9b03      	ldr	r3, [sp, #12]
 801044e:	1d1a      	adds	r2, r3, #4
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	9203      	str	r2, [sp, #12]
 8010454:	2b00      	cmp	r3, #0
 8010456:	bfb8      	it	lt
 8010458:	f04f 33ff 	movlt.w	r3, #4294967295
 801045c:	3402      	adds	r4, #2
 801045e:	9305      	str	r3, [sp, #20]
 8010460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801052c <_svfiprintf_r+0x1fc>
 8010464:	7821      	ldrb	r1, [r4, #0]
 8010466:	2203      	movs	r2, #3
 8010468:	4650      	mov	r0, sl
 801046a:	f7ef feb9 	bl	80001e0 <memchr>
 801046e:	b140      	cbz	r0, 8010482 <_svfiprintf_r+0x152>
 8010470:	2340      	movs	r3, #64	; 0x40
 8010472:	eba0 000a 	sub.w	r0, r0, sl
 8010476:	fa03 f000 	lsl.w	r0, r3, r0
 801047a:	9b04      	ldr	r3, [sp, #16]
 801047c:	4303      	orrs	r3, r0
 801047e:	3401      	adds	r4, #1
 8010480:	9304      	str	r3, [sp, #16]
 8010482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010486:	4826      	ldr	r0, [pc, #152]	; (8010520 <_svfiprintf_r+0x1f0>)
 8010488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801048c:	2206      	movs	r2, #6
 801048e:	f7ef fea7 	bl	80001e0 <memchr>
 8010492:	2800      	cmp	r0, #0
 8010494:	d038      	beq.n	8010508 <_svfiprintf_r+0x1d8>
 8010496:	4b23      	ldr	r3, [pc, #140]	; (8010524 <_svfiprintf_r+0x1f4>)
 8010498:	bb1b      	cbnz	r3, 80104e2 <_svfiprintf_r+0x1b2>
 801049a:	9b03      	ldr	r3, [sp, #12]
 801049c:	3307      	adds	r3, #7
 801049e:	f023 0307 	bic.w	r3, r3, #7
 80104a2:	3308      	adds	r3, #8
 80104a4:	9303      	str	r3, [sp, #12]
 80104a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104a8:	4433      	add	r3, r6
 80104aa:	9309      	str	r3, [sp, #36]	; 0x24
 80104ac:	e767      	b.n	801037e <_svfiprintf_r+0x4e>
 80104ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80104b2:	460c      	mov	r4, r1
 80104b4:	2001      	movs	r0, #1
 80104b6:	e7a5      	b.n	8010404 <_svfiprintf_r+0xd4>
 80104b8:	2300      	movs	r3, #0
 80104ba:	3401      	adds	r4, #1
 80104bc:	9305      	str	r3, [sp, #20]
 80104be:	4619      	mov	r1, r3
 80104c0:	f04f 0c0a 	mov.w	ip, #10
 80104c4:	4620      	mov	r0, r4
 80104c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104ca:	3a30      	subs	r2, #48	; 0x30
 80104cc:	2a09      	cmp	r2, #9
 80104ce:	d903      	bls.n	80104d8 <_svfiprintf_r+0x1a8>
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d0c5      	beq.n	8010460 <_svfiprintf_r+0x130>
 80104d4:	9105      	str	r1, [sp, #20]
 80104d6:	e7c3      	b.n	8010460 <_svfiprintf_r+0x130>
 80104d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80104dc:	4604      	mov	r4, r0
 80104de:	2301      	movs	r3, #1
 80104e0:	e7f0      	b.n	80104c4 <_svfiprintf_r+0x194>
 80104e2:	ab03      	add	r3, sp, #12
 80104e4:	9300      	str	r3, [sp, #0]
 80104e6:	462a      	mov	r2, r5
 80104e8:	4b0f      	ldr	r3, [pc, #60]	; (8010528 <_svfiprintf_r+0x1f8>)
 80104ea:	a904      	add	r1, sp, #16
 80104ec:	4638      	mov	r0, r7
 80104ee:	f7fe f8a5 	bl	800e63c <_printf_float>
 80104f2:	1c42      	adds	r2, r0, #1
 80104f4:	4606      	mov	r6, r0
 80104f6:	d1d6      	bne.n	80104a6 <_svfiprintf_r+0x176>
 80104f8:	89ab      	ldrh	r3, [r5, #12]
 80104fa:	065b      	lsls	r3, r3, #25
 80104fc:	f53f af2c 	bmi.w	8010358 <_svfiprintf_r+0x28>
 8010500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010502:	b01d      	add	sp, #116	; 0x74
 8010504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010508:	ab03      	add	r3, sp, #12
 801050a:	9300      	str	r3, [sp, #0]
 801050c:	462a      	mov	r2, r5
 801050e:	4b06      	ldr	r3, [pc, #24]	; (8010528 <_svfiprintf_r+0x1f8>)
 8010510:	a904      	add	r1, sp, #16
 8010512:	4638      	mov	r0, r7
 8010514:	f7fe fb36 	bl	800eb84 <_printf_i>
 8010518:	e7eb      	b.n	80104f2 <_svfiprintf_r+0x1c2>
 801051a:	bf00      	nop
 801051c:	080117c4 	.word	0x080117c4
 8010520:	080117ce 	.word	0x080117ce
 8010524:	0800e63d 	.word	0x0800e63d
 8010528:	08010279 	.word	0x08010279
 801052c:	080117ca 	.word	0x080117ca

08010530 <__assert_func>:
 8010530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010532:	4614      	mov	r4, r2
 8010534:	461a      	mov	r2, r3
 8010536:	4b09      	ldr	r3, [pc, #36]	; (801055c <__assert_func+0x2c>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	4605      	mov	r5, r0
 801053c:	68d8      	ldr	r0, [r3, #12]
 801053e:	b14c      	cbz	r4, 8010554 <__assert_func+0x24>
 8010540:	4b07      	ldr	r3, [pc, #28]	; (8010560 <__assert_func+0x30>)
 8010542:	9100      	str	r1, [sp, #0]
 8010544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010548:	4906      	ldr	r1, [pc, #24]	; (8010564 <__assert_func+0x34>)
 801054a:	462b      	mov	r3, r5
 801054c:	f000 f80e 	bl	801056c <fiprintf>
 8010550:	f000 faa4 	bl	8010a9c <abort>
 8010554:	4b04      	ldr	r3, [pc, #16]	; (8010568 <__assert_func+0x38>)
 8010556:	461c      	mov	r4, r3
 8010558:	e7f3      	b.n	8010542 <__assert_func+0x12>
 801055a:	bf00      	nop
 801055c:	2000032c 	.word	0x2000032c
 8010560:	080117d5 	.word	0x080117d5
 8010564:	080117e2 	.word	0x080117e2
 8010568:	08011810 	.word	0x08011810

0801056c <fiprintf>:
 801056c:	b40e      	push	{r1, r2, r3}
 801056e:	b503      	push	{r0, r1, lr}
 8010570:	4601      	mov	r1, r0
 8010572:	ab03      	add	r3, sp, #12
 8010574:	4805      	ldr	r0, [pc, #20]	; (801058c <fiprintf+0x20>)
 8010576:	f853 2b04 	ldr.w	r2, [r3], #4
 801057a:	6800      	ldr	r0, [r0, #0]
 801057c:	9301      	str	r3, [sp, #4]
 801057e:	f000 f88f 	bl	80106a0 <_vfiprintf_r>
 8010582:	b002      	add	sp, #8
 8010584:	f85d eb04 	ldr.w	lr, [sp], #4
 8010588:	b003      	add	sp, #12
 801058a:	4770      	bx	lr
 801058c:	2000032c 	.word	0x2000032c

08010590 <__retarget_lock_init_recursive>:
 8010590:	4770      	bx	lr

08010592 <__retarget_lock_acquire_recursive>:
 8010592:	4770      	bx	lr

08010594 <__retarget_lock_release_recursive>:
 8010594:	4770      	bx	lr

08010596 <__ascii_mbtowc>:
 8010596:	b082      	sub	sp, #8
 8010598:	b901      	cbnz	r1, 801059c <__ascii_mbtowc+0x6>
 801059a:	a901      	add	r1, sp, #4
 801059c:	b142      	cbz	r2, 80105b0 <__ascii_mbtowc+0x1a>
 801059e:	b14b      	cbz	r3, 80105b4 <__ascii_mbtowc+0x1e>
 80105a0:	7813      	ldrb	r3, [r2, #0]
 80105a2:	600b      	str	r3, [r1, #0]
 80105a4:	7812      	ldrb	r2, [r2, #0]
 80105a6:	1e10      	subs	r0, r2, #0
 80105a8:	bf18      	it	ne
 80105aa:	2001      	movne	r0, #1
 80105ac:	b002      	add	sp, #8
 80105ae:	4770      	bx	lr
 80105b0:	4610      	mov	r0, r2
 80105b2:	e7fb      	b.n	80105ac <__ascii_mbtowc+0x16>
 80105b4:	f06f 0001 	mvn.w	r0, #1
 80105b8:	e7f8      	b.n	80105ac <__ascii_mbtowc+0x16>

080105ba <memmove>:
 80105ba:	4288      	cmp	r0, r1
 80105bc:	b510      	push	{r4, lr}
 80105be:	eb01 0402 	add.w	r4, r1, r2
 80105c2:	d902      	bls.n	80105ca <memmove+0x10>
 80105c4:	4284      	cmp	r4, r0
 80105c6:	4623      	mov	r3, r4
 80105c8:	d807      	bhi.n	80105da <memmove+0x20>
 80105ca:	1e43      	subs	r3, r0, #1
 80105cc:	42a1      	cmp	r1, r4
 80105ce:	d008      	beq.n	80105e2 <memmove+0x28>
 80105d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105d8:	e7f8      	b.n	80105cc <memmove+0x12>
 80105da:	4402      	add	r2, r0
 80105dc:	4601      	mov	r1, r0
 80105de:	428a      	cmp	r2, r1
 80105e0:	d100      	bne.n	80105e4 <memmove+0x2a>
 80105e2:	bd10      	pop	{r4, pc}
 80105e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105ec:	e7f7      	b.n	80105de <memmove+0x24>

080105ee <_realloc_r>:
 80105ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f2:	4680      	mov	r8, r0
 80105f4:	4614      	mov	r4, r2
 80105f6:	460e      	mov	r6, r1
 80105f8:	b921      	cbnz	r1, 8010604 <_realloc_r+0x16>
 80105fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105fe:	4611      	mov	r1, r2
 8010600:	f7fd bf08 	b.w	800e414 <_malloc_r>
 8010604:	b92a      	cbnz	r2, 8010612 <_realloc_r+0x24>
 8010606:	f7fd fe99 	bl	800e33c <_free_r>
 801060a:	4625      	mov	r5, r4
 801060c:	4628      	mov	r0, r5
 801060e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010612:	f000 fc67 	bl	8010ee4 <_malloc_usable_size_r>
 8010616:	4284      	cmp	r4, r0
 8010618:	4607      	mov	r7, r0
 801061a:	d802      	bhi.n	8010622 <_realloc_r+0x34>
 801061c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010620:	d812      	bhi.n	8010648 <_realloc_r+0x5a>
 8010622:	4621      	mov	r1, r4
 8010624:	4640      	mov	r0, r8
 8010626:	f7fd fef5 	bl	800e414 <_malloc_r>
 801062a:	4605      	mov	r5, r0
 801062c:	2800      	cmp	r0, #0
 801062e:	d0ed      	beq.n	801060c <_realloc_r+0x1e>
 8010630:	42bc      	cmp	r4, r7
 8010632:	4622      	mov	r2, r4
 8010634:	4631      	mov	r1, r6
 8010636:	bf28      	it	cs
 8010638:	463a      	movcs	r2, r7
 801063a:	f7fd fe69 	bl	800e310 <memcpy>
 801063e:	4631      	mov	r1, r6
 8010640:	4640      	mov	r0, r8
 8010642:	f7fd fe7b 	bl	800e33c <_free_r>
 8010646:	e7e1      	b.n	801060c <_realloc_r+0x1e>
 8010648:	4635      	mov	r5, r6
 801064a:	e7df      	b.n	801060c <_realloc_r+0x1e>

0801064c <__sfputc_r>:
 801064c:	6893      	ldr	r3, [r2, #8]
 801064e:	3b01      	subs	r3, #1
 8010650:	2b00      	cmp	r3, #0
 8010652:	b410      	push	{r4}
 8010654:	6093      	str	r3, [r2, #8]
 8010656:	da08      	bge.n	801066a <__sfputc_r+0x1e>
 8010658:	6994      	ldr	r4, [r2, #24]
 801065a:	42a3      	cmp	r3, r4
 801065c:	db01      	blt.n	8010662 <__sfputc_r+0x16>
 801065e:	290a      	cmp	r1, #10
 8010660:	d103      	bne.n	801066a <__sfputc_r+0x1e>
 8010662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010666:	f000 b94b 	b.w	8010900 <__swbuf_r>
 801066a:	6813      	ldr	r3, [r2, #0]
 801066c:	1c58      	adds	r0, r3, #1
 801066e:	6010      	str	r0, [r2, #0]
 8010670:	7019      	strb	r1, [r3, #0]
 8010672:	4608      	mov	r0, r1
 8010674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010678:	4770      	bx	lr

0801067a <__sfputs_r>:
 801067a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067c:	4606      	mov	r6, r0
 801067e:	460f      	mov	r7, r1
 8010680:	4614      	mov	r4, r2
 8010682:	18d5      	adds	r5, r2, r3
 8010684:	42ac      	cmp	r4, r5
 8010686:	d101      	bne.n	801068c <__sfputs_r+0x12>
 8010688:	2000      	movs	r0, #0
 801068a:	e007      	b.n	801069c <__sfputs_r+0x22>
 801068c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010690:	463a      	mov	r2, r7
 8010692:	4630      	mov	r0, r6
 8010694:	f7ff ffda 	bl	801064c <__sfputc_r>
 8010698:	1c43      	adds	r3, r0, #1
 801069a:	d1f3      	bne.n	8010684 <__sfputs_r+0xa>
 801069c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106a0 <_vfiprintf_r>:
 80106a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a4:	460d      	mov	r5, r1
 80106a6:	b09d      	sub	sp, #116	; 0x74
 80106a8:	4614      	mov	r4, r2
 80106aa:	4698      	mov	r8, r3
 80106ac:	4606      	mov	r6, r0
 80106ae:	b118      	cbz	r0, 80106b8 <_vfiprintf_r+0x18>
 80106b0:	6983      	ldr	r3, [r0, #24]
 80106b2:	b90b      	cbnz	r3, 80106b8 <_vfiprintf_r+0x18>
 80106b4:	f000 fb14 	bl	8010ce0 <__sinit>
 80106b8:	4b89      	ldr	r3, [pc, #548]	; (80108e0 <_vfiprintf_r+0x240>)
 80106ba:	429d      	cmp	r5, r3
 80106bc:	d11b      	bne.n	80106f6 <_vfiprintf_r+0x56>
 80106be:	6875      	ldr	r5, [r6, #4]
 80106c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106c2:	07d9      	lsls	r1, r3, #31
 80106c4:	d405      	bmi.n	80106d2 <_vfiprintf_r+0x32>
 80106c6:	89ab      	ldrh	r3, [r5, #12]
 80106c8:	059a      	lsls	r2, r3, #22
 80106ca:	d402      	bmi.n	80106d2 <_vfiprintf_r+0x32>
 80106cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106ce:	f7ff ff60 	bl	8010592 <__retarget_lock_acquire_recursive>
 80106d2:	89ab      	ldrh	r3, [r5, #12]
 80106d4:	071b      	lsls	r3, r3, #28
 80106d6:	d501      	bpl.n	80106dc <_vfiprintf_r+0x3c>
 80106d8:	692b      	ldr	r3, [r5, #16]
 80106da:	b9eb      	cbnz	r3, 8010718 <_vfiprintf_r+0x78>
 80106dc:	4629      	mov	r1, r5
 80106de:	4630      	mov	r0, r6
 80106e0:	f000 f96e 	bl	80109c0 <__swsetup_r>
 80106e4:	b1c0      	cbz	r0, 8010718 <_vfiprintf_r+0x78>
 80106e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106e8:	07dc      	lsls	r4, r3, #31
 80106ea:	d50e      	bpl.n	801070a <_vfiprintf_r+0x6a>
 80106ec:	f04f 30ff 	mov.w	r0, #4294967295
 80106f0:	b01d      	add	sp, #116	; 0x74
 80106f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f6:	4b7b      	ldr	r3, [pc, #492]	; (80108e4 <_vfiprintf_r+0x244>)
 80106f8:	429d      	cmp	r5, r3
 80106fa:	d101      	bne.n	8010700 <_vfiprintf_r+0x60>
 80106fc:	68b5      	ldr	r5, [r6, #8]
 80106fe:	e7df      	b.n	80106c0 <_vfiprintf_r+0x20>
 8010700:	4b79      	ldr	r3, [pc, #484]	; (80108e8 <_vfiprintf_r+0x248>)
 8010702:	429d      	cmp	r5, r3
 8010704:	bf08      	it	eq
 8010706:	68f5      	ldreq	r5, [r6, #12]
 8010708:	e7da      	b.n	80106c0 <_vfiprintf_r+0x20>
 801070a:	89ab      	ldrh	r3, [r5, #12]
 801070c:	0598      	lsls	r0, r3, #22
 801070e:	d4ed      	bmi.n	80106ec <_vfiprintf_r+0x4c>
 8010710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010712:	f7ff ff3f 	bl	8010594 <__retarget_lock_release_recursive>
 8010716:	e7e9      	b.n	80106ec <_vfiprintf_r+0x4c>
 8010718:	2300      	movs	r3, #0
 801071a:	9309      	str	r3, [sp, #36]	; 0x24
 801071c:	2320      	movs	r3, #32
 801071e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010722:	f8cd 800c 	str.w	r8, [sp, #12]
 8010726:	2330      	movs	r3, #48	; 0x30
 8010728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80108ec <_vfiprintf_r+0x24c>
 801072c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010730:	f04f 0901 	mov.w	r9, #1
 8010734:	4623      	mov	r3, r4
 8010736:	469a      	mov	sl, r3
 8010738:	f813 2b01 	ldrb.w	r2, [r3], #1
 801073c:	b10a      	cbz	r2, 8010742 <_vfiprintf_r+0xa2>
 801073e:	2a25      	cmp	r2, #37	; 0x25
 8010740:	d1f9      	bne.n	8010736 <_vfiprintf_r+0x96>
 8010742:	ebba 0b04 	subs.w	fp, sl, r4
 8010746:	d00b      	beq.n	8010760 <_vfiprintf_r+0xc0>
 8010748:	465b      	mov	r3, fp
 801074a:	4622      	mov	r2, r4
 801074c:	4629      	mov	r1, r5
 801074e:	4630      	mov	r0, r6
 8010750:	f7ff ff93 	bl	801067a <__sfputs_r>
 8010754:	3001      	adds	r0, #1
 8010756:	f000 80aa 	beq.w	80108ae <_vfiprintf_r+0x20e>
 801075a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801075c:	445a      	add	r2, fp
 801075e:	9209      	str	r2, [sp, #36]	; 0x24
 8010760:	f89a 3000 	ldrb.w	r3, [sl]
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 80a2 	beq.w	80108ae <_vfiprintf_r+0x20e>
 801076a:	2300      	movs	r3, #0
 801076c:	f04f 32ff 	mov.w	r2, #4294967295
 8010770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010774:	f10a 0a01 	add.w	sl, sl, #1
 8010778:	9304      	str	r3, [sp, #16]
 801077a:	9307      	str	r3, [sp, #28]
 801077c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010780:	931a      	str	r3, [sp, #104]	; 0x68
 8010782:	4654      	mov	r4, sl
 8010784:	2205      	movs	r2, #5
 8010786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801078a:	4858      	ldr	r0, [pc, #352]	; (80108ec <_vfiprintf_r+0x24c>)
 801078c:	f7ef fd28 	bl	80001e0 <memchr>
 8010790:	9a04      	ldr	r2, [sp, #16]
 8010792:	b9d8      	cbnz	r0, 80107cc <_vfiprintf_r+0x12c>
 8010794:	06d1      	lsls	r1, r2, #27
 8010796:	bf44      	itt	mi
 8010798:	2320      	movmi	r3, #32
 801079a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801079e:	0713      	lsls	r3, r2, #28
 80107a0:	bf44      	itt	mi
 80107a2:	232b      	movmi	r3, #43	; 0x2b
 80107a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107a8:	f89a 3000 	ldrb.w	r3, [sl]
 80107ac:	2b2a      	cmp	r3, #42	; 0x2a
 80107ae:	d015      	beq.n	80107dc <_vfiprintf_r+0x13c>
 80107b0:	9a07      	ldr	r2, [sp, #28]
 80107b2:	4654      	mov	r4, sl
 80107b4:	2000      	movs	r0, #0
 80107b6:	f04f 0c0a 	mov.w	ip, #10
 80107ba:	4621      	mov	r1, r4
 80107bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107c0:	3b30      	subs	r3, #48	; 0x30
 80107c2:	2b09      	cmp	r3, #9
 80107c4:	d94e      	bls.n	8010864 <_vfiprintf_r+0x1c4>
 80107c6:	b1b0      	cbz	r0, 80107f6 <_vfiprintf_r+0x156>
 80107c8:	9207      	str	r2, [sp, #28]
 80107ca:	e014      	b.n	80107f6 <_vfiprintf_r+0x156>
 80107cc:	eba0 0308 	sub.w	r3, r0, r8
 80107d0:	fa09 f303 	lsl.w	r3, r9, r3
 80107d4:	4313      	orrs	r3, r2
 80107d6:	9304      	str	r3, [sp, #16]
 80107d8:	46a2      	mov	sl, r4
 80107da:	e7d2      	b.n	8010782 <_vfiprintf_r+0xe2>
 80107dc:	9b03      	ldr	r3, [sp, #12]
 80107de:	1d19      	adds	r1, r3, #4
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	9103      	str	r1, [sp, #12]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	bfbb      	ittet	lt
 80107e8:	425b      	neglt	r3, r3
 80107ea:	f042 0202 	orrlt.w	r2, r2, #2
 80107ee:	9307      	strge	r3, [sp, #28]
 80107f0:	9307      	strlt	r3, [sp, #28]
 80107f2:	bfb8      	it	lt
 80107f4:	9204      	strlt	r2, [sp, #16]
 80107f6:	7823      	ldrb	r3, [r4, #0]
 80107f8:	2b2e      	cmp	r3, #46	; 0x2e
 80107fa:	d10c      	bne.n	8010816 <_vfiprintf_r+0x176>
 80107fc:	7863      	ldrb	r3, [r4, #1]
 80107fe:	2b2a      	cmp	r3, #42	; 0x2a
 8010800:	d135      	bne.n	801086e <_vfiprintf_r+0x1ce>
 8010802:	9b03      	ldr	r3, [sp, #12]
 8010804:	1d1a      	adds	r2, r3, #4
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	9203      	str	r2, [sp, #12]
 801080a:	2b00      	cmp	r3, #0
 801080c:	bfb8      	it	lt
 801080e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010812:	3402      	adds	r4, #2
 8010814:	9305      	str	r3, [sp, #20]
 8010816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80108fc <_vfiprintf_r+0x25c>
 801081a:	7821      	ldrb	r1, [r4, #0]
 801081c:	2203      	movs	r2, #3
 801081e:	4650      	mov	r0, sl
 8010820:	f7ef fcde 	bl	80001e0 <memchr>
 8010824:	b140      	cbz	r0, 8010838 <_vfiprintf_r+0x198>
 8010826:	2340      	movs	r3, #64	; 0x40
 8010828:	eba0 000a 	sub.w	r0, r0, sl
 801082c:	fa03 f000 	lsl.w	r0, r3, r0
 8010830:	9b04      	ldr	r3, [sp, #16]
 8010832:	4303      	orrs	r3, r0
 8010834:	3401      	adds	r4, #1
 8010836:	9304      	str	r3, [sp, #16]
 8010838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801083c:	482c      	ldr	r0, [pc, #176]	; (80108f0 <_vfiprintf_r+0x250>)
 801083e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010842:	2206      	movs	r2, #6
 8010844:	f7ef fccc 	bl	80001e0 <memchr>
 8010848:	2800      	cmp	r0, #0
 801084a:	d03f      	beq.n	80108cc <_vfiprintf_r+0x22c>
 801084c:	4b29      	ldr	r3, [pc, #164]	; (80108f4 <_vfiprintf_r+0x254>)
 801084e:	bb1b      	cbnz	r3, 8010898 <_vfiprintf_r+0x1f8>
 8010850:	9b03      	ldr	r3, [sp, #12]
 8010852:	3307      	adds	r3, #7
 8010854:	f023 0307 	bic.w	r3, r3, #7
 8010858:	3308      	adds	r3, #8
 801085a:	9303      	str	r3, [sp, #12]
 801085c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801085e:	443b      	add	r3, r7
 8010860:	9309      	str	r3, [sp, #36]	; 0x24
 8010862:	e767      	b.n	8010734 <_vfiprintf_r+0x94>
 8010864:	fb0c 3202 	mla	r2, ip, r2, r3
 8010868:	460c      	mov	r4, r1
 801086a:	2001      	movs	r0, #1
 801086c:	e7a5      	b.n	80107ba <_vfiprintf_r+0x11a>
 801086e:	2300      	movs	r3, #0
 8010870:	3401      	adds	r4, #1
 8010872:	9305      	str	r3, [sp, #20]
 8010874:	4619      	mov	r1, r3
 8010876:	f04f 0c0a 	mov.w	ip, #10
 801087a:	4620      	mov	r0, r4
 801087c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010880:	3a30      	subs	r2, #48	; 0x30
 8010882:	2a09      	cmp	r2, #9
 8010884:	d903      	bls.n	801088e <_vfiprintf_r+0x1ee>
 8010886:	2b00      	cmp	r3, #0
 8010888:	d0c5      	beq.n	8010816 <_vfiprintf_r+0x176>
 801088a:	9105      	str	r1, [sp, #20]
 801088c:	e7c3      	b.n	8010816 <_vfiprintf_r+0x176>
 801088e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010892:	4604      	mov	r4, r0
 8010894:	2301      	movs	r3, #1
 8010896:	e7f0      	b.n	801087a <_vfiprintf_r+0x1da>
 8010898:	ab03      	add	r3, sp, #12
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	462a      	mov	r2, r5
 801089e:	4b16      	ldr	r3, [pc, #88]	; (80108f8 <_vfiprintf_r+0x258>)
 80108a0:	a904      	add	r1, sp, #16
 80108a2:	4630      	mov	r0, r6
 80108a4:	f7fd feca 	bl	800e63c <_printf_float>
 80108a8:	4607      	mov	r7, r0
 80108aa:	1c78      	adds	r0, r7, #1
 80108ac:	d1d6      	bne.n	801085c <_vfiprintf_r+0x1bc>
 80108ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108b0:	07d9      	lsls	r1, r3, #31
 80108b2:	d405      	bmi.n	80108c0 <_vfiprintf_r+0x220>
 80108b4:	89ab      	ldrh	r3, [r5, #12]
 80108b6:	059a      	lsls	r2, r3, #22
 80108b8:	d402      	bmi.n	80108c0 <_vfiprintf_r+0x220>
 80108ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108bc:	f7ff fe6a 	bl	8010594 <__retarget_lock_release_recursive>
 80108c0:	89ab      	ldrh	r3, [r5, #12]
 80108c2:	065b      	lsls	r3, r3, #25
 80108c4:	f53f af12 	bmi.w	80106ec <_vfiprintf_r+0x4c>
 80108c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108ca:	e711      	b.n	80106f0 <_vfiprintf_r+0x50>
 80108cc:	ab03      	add	r3, sp, #12
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	462a      	mov	r2, r5
 80108d2:	4b09      	ldr	r3, [pc, #36]	; (80108f8 <_vfiprintf_r+0x258>)
 80108d4:	a904      	add	r1, sp, #16
 80108d6:	4630      	mov	r0, r6
 80108d8:	f7fe f954 	bl	800eb84 <_printf_i>
 80108dc:	e7e4      	b.n	80108a8 <_vfiprintf_r+0x208>
 80108de:	bf00      	nop
 80108e0:	0801193c 	.word	0x0801193c
 80108e4:	0801195c 	.word	0x0801195c
 80108e8:	0801191c 	.word	0x0801191c
 80108ec:	080117c4 	.word	0x080117c4
 80108f0:	080117ce 	.word	0x080117ce
 80108f4:	0800e63d 	.word	0x0800e63d
 80108f8:	0801067b 	.word	0x0801067b
 80108fc:	080117ca 	.word	0x080117ca

08010900 <__swbuf_r>:
 8010900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010902:	460e      	mov	r6, r1
 8010904:	4614      	mov	r4, r2
 8010906:	4605      	mov	r5, r0
 8010908:	b118      	cbz	r0, 8010912 <__swbuf_r+0x12>
 801090a:	6983      	ldr	r3, [r0, #24]
 801090c:	b90b      	cbnz	r3, 8010912 <__swbuf_r+0x12>
 801090e:	f000 f9e7 	bl	8010ce0 <__sinit>
 8010912:	4b21      	ldr	r3, [pc, #132]	; (8010998 <__swbuf_r+0x98>)
 8010914:	429c      	cmp	r4, r3
 8010916:	d12b      	bne.n	8010970 <__swbuf_r+0x70>
 8010918:	686c      	ldr	r4, [r5, #4]
 801091a:	69a3      	ldr	r3, [r4, #24]
 801091c:	60a3      	str	r3, [r4, #8]
 801091e:	89a3      	ldrh	r3, [r4, #12]
 8010920:	071a      	lsls	r2, r3, #28
 8010922:	d52f      	bpl.n	8010984 <__swbuf_r+0x84>
 8010924:	6923      	ldr	r3, [r4, #16]
 8010926:	b36b      	cbz	r3, 8010984 <__swbuf_r+0x84>
 8010928:	6923      	ldr	r3, [r4, #16]
 801092a:	6820      	ldr	r0, [r4, #0]
 801092c:	1ac0      	subs	r0, r0, r3
 801092e:	6963      	ldr	r3, [r4, #20]
 8010930:	b2f6      	uxtb	r6, r6
 8010932:	4283      	cmp	r3, r0
 8010934:	4637      	mov	r7, r6
 8010936:	dc04      	bgt.n	8010942 <__swbuf_r+0x42>
 8010938:	4621      	mov	r1, r4
 801093a:	4628      	mov	r0, r5
 801093c:	f000 f93c 	bl	8010bb8 <_fflush_r>
 8010940:	bb30      	cbnz	r0, 8010990 <__swbuf_r+0x90>
 8010942:	68a3      	ldr	r3, [r4, #8]
 8010944:	3b01      	subs	r3, #1
 8010946:	60a3      	str	r3, [r4, #8]
 8010948:	6823      	ldr	r3, [r4, #0]
 801094a:	1c5a      	adds	r2, r3, #1
 801094c:	6022      	str	r2, [r4, #0]
 801094e:	701e      	strb	r6, [r3, #0]
 8010950:	6963      	ldr	r3, [r4, #20]
 8010952:	3001      	adds	r0, #1
 8010954:	4283      	cmp	r3, r0
 8010956:	d004      	beq.n	8010962 <__swbuf_r+0x62>
 8010958:	89a3      	ldrh	r3, [r4, #12]
 801095a:	07db      	lsls	r3, r3, #31
 801095c:	d506      	bpl.n	801096c <__swbuf_r+0x6c>
 801095e:	2e0a      	cmp	r6, #10
 8010960:	d104      	bne.n	801096c <__swbuf_r+0x6c>
 8010962:	4621      	mov	r1, r4
 8010964:	4628      	mov	r0, r5
 8010966:	f000 f927 	bl	8010bb8 <_fflush_r>
 801096a:	b988      	cbnz	r0, 8010990 <__swbuf_r+0x90>
 801096c:	4638      	mov	r0, r7
 801096e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010970:	4b0a      	ldr	r3, [pc, #40]	; (801099c <__swbuf_r+0x9c>)
 8010972:	429c      	cmp	r4, r3
 8010974:	d101      	bne.n	801097a <__swbuf_r+0x7a>
 8010976:	68ac      	ldr	r4, [r5, #8]
 8010978:	e7cf      	b.n	801091a <__swbuf_r+0x1a>
 801097a:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <__swbuf_r+0xa0>)
 801097c:	429c      	cmp	r4, r3
 801097e:	bf08      	it	eq
 8010980:	68ec      	ldreq	r4, [r5, #12]
 8010982:	e7ca      	b.n	801091a <__swbuf_r+0x1a>
 8010984:	4621      	mov	r1, r4
 8010986:	4628      	mov	r0, r5
 8010988:	f000 f81a 	bl	80109c0 <__swsetup_r>
 801098c:	2800      	cmp	r0, #0
 801098e:	d0cb      	beq.n	8010928 <__swbuf_r+0x28>
 8010990:	f04f 37ff 	mov.w	r7, #4294967295
 8010994:	e7ea      	b.n	801096c <__swbuf_r+0x6c>
 8010996:	bf00      	nop
 8010998:	0801193c 	.word	0x0801193c
 801099c:	0801195c 	.word	0x0801195c
 80109a0:	0801191c 	.word	0x0801191c

080109a4 <__ascii_wctomb>:
 80109a4:	b149      	cbz	r1, 80109ba <__ascii_wctomb+0x16>
 80109a6:	2aff      	cmp	r2, #255	; 0xff
 80109a8:	bf85      	ittet	hi
 80109aa:	238a      	movhi	r3, #138	; 0x8a
 80109ac:	6003      	strhi	r3, [r0, #0]
 80109ae:	700a      	strbls	r2, [r1, #0]
 80109b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80109b4:	bf98      	it	ls
 80109b6:	2001      	movls	r0, #1
 80109b8:	4770      	bx	lr
 80109ba:	4608      	mov	r0, r1
 80109bc:	4770      	bx	lr
	...

080109c0 <__swsetup_r>:
 80109c0:	4b32      	ldr	r3, [pc, #200]	; (8010a8c <__swsetup_r+0xcc>)
 80109c2:	b570      	push	{r4, r5, r6, lr}
 80109c4:	681d      	ldr	r5, [r3, #0]
 80109c6:	4606      	mov	r6, r0
 80109c8:	460c      	mov	r4, r1
 80109ca:	b125      	cbz	r5, 80109d6 <__swsetup_r+0x16>
 80109cc:	69ab      	ldr	r3, [r5, #24]
 80109ce:	b913      	cbnz	r3, 80109d6 <__swsetup_r+0x16>
 80109d0:	4628      	mov	r0, r5
 80109d2:	f000 f985 	bl	8010ce0 <__sinit>
 80109d6:	4b2e      	ldr	r3, [pc, #184]	; (8010a90 <__swsetup_r+0xd0>)
 80109d8:	429c      	cmp	r4, r3
 80109da:	d10f      	bne.n	80109fc <__swsetup_r+0x3c>
 80109dc:	686c      	ldr	r4, [r5, #4]
 80109de:	89a3      	ldrh	r3, [r4, #12]
 80109e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109e4:	0719      	lsls	r1, r3, #28
 80109e6:	d42c      	bmi.n	8010a42 <__swsetup_r+0x82>
 80109e8:	06dd      	lsls	r5, r3, #27
 80109ea:	d411      	bmi.n	8010a10 <__swsetup_r+0x50>
 80109ec:	2309      	movs	r3, #9
 80109ee:	6033      	str	r3, [r6, #0]
 80109f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80109f4:	81a3      	strh	r3, [r4, #12]
 80109f6:	f04f 30ff 	mov.w	r0, #4294967295
 80109fa:	e03e      	b.n	8010a7a <__swsetup_r+0xba>
 80109fc:	4b25      	ldr	r3, [pc, #148]	; (8010a94 <__swsetup_r+0xd4>)
 80109fe:	429c      	cmp	r4, r3
 8010a00:	d101      	bne.n	8010a06 <__swsetup_r+0x46>
 8010a02:	68ac      	ldr	r4, [r5, #8]
 8010a04:	e7eb      	b.n	80109de <__swsetup_r+0x1e>
 8010a06:	4b24      	ldr	r3, [pc, #144]	; (8010a98 <__swsetup_r+0xd8>)
 8010a08:	429c      	cmp	r4, r3
 8010a0a:	bf08      	it	eq
 8010a0c:	68ec      	ldreq	r4, [r5, #12]
 8010a0e:	e7e6      	b.n	80109de <__swsetup_r+0x1e>
 8010a10:	0758      	lsls	r0, r3, #29
 8010a12:	d512      	bpl.n	8010a3a <__swsetup_r+0x7a>
 8010a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a16:	b141      	cbz	r1, 8010a2a <__swsetup_r+0x6a>
 8010a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a1c:	4299      	cmp	r1, r3
 8010a1e:	d002      	beq.n	8010a26 <__swsetup_r+0x66>
 8010a20:	4630      	mov	r0, r6
 8010a22:	f7fd fc8b 	bl	800e33c <_free_r>
 8010a26:	2300      	movs	r3, #0
 8010a28:	6363      	str	r3, [r4, #52]	; 0x34
 8010a2a:	89a3      	ldrh	r3, [r4, #12]
 8010a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a30:	81a3      	strh	r3, [r4, #12]
 8010a32:	2300      	movs	r3, #0
 8010a34:	6063      	str	r3, [r4, #4]
 8010a36:	6923      	ldr	r3, [r4, #16]
 8010a38:	6023      	str	r3, [r4, #0]
 8010a3a:	89a3      	ldrh	r3, [r4, #12]
 8010a3c:	f043 0308 	orr.w	r3, r3, #8
 8010a40:	81a3      	strh	r3, [r4, #12]
 8010a42:	6923      	ldr	r3, [r4, #16]
 8010a44:	b94b      	cbnz	r3, 8010a5a <__swsetup_r+0x9a>
 8010a46:	89a3      	ldrh	r3, [r4, #12]
 8010a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a50:	d003      	beq.n	8010a5a <__swsetup_r+0x9a>
 8010a52:	4621      	mov	r1, r4
 8010a54:	4630      	mov	r0, r6
 8010a56:	f000 fa05 	bl	8010e64 <__smakebuf_r>
 8010a5a:	89a0      	ldrh	r0, [r4, #12]
 8010a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a60:	f010 0301 	ands.w	r3, r0, #1
 8010a64:	d00a      	beq.n	8010a7c <__swsetup_r+0xbc>
 8010a66:	2300      	movs	r3, #0
 8010a68:	60a3      	str	r3, [r4, #8]
 8010a6a:	6963      	ldr	r3, [r4, #20]
 8010a6c:	425b      	negs	r3, r3
 8010a6e:	61a3      	str	r3, [r4, #24]
 8010a70:	6923      	ldr	r3, [r4, #16]
 8010a72:	b943      	cbnz	r3, 8010a86 <__swsetup_r+0xc6>
 8010a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a78:	d1ba      	bne.n	80109f0 <__swsetup_r+0x30>
 8010a7a:	bd70      	pop	{r4, r5, r6, pc}
 8010a7c:	0781      	lsls	r1, r0, #30
 8010a7e:	bf58      	it	pl
 8010a80:	6963      	ldrpl	r3, [r4, #20]
 8010a82:	60a3      	str	r3, [r4, #8]
 8010a84:	e7f4      	b.n	8010a70 <__swsetup_r+0xb0>
 8010a86:	2000      	movs	r0, #0
 8010a88:	e7f7      	b.n	8010a7a <__swsetup_r+0xba>
 8010a8a:	bf00      	nop
 8010a8c:	2000032c 	.word	0x2000032c
 8010a90:	0801193c 	.word	0x0801193c
 8010a94:	0801195c 	.word	0x0801195c
 8010a98:	0801191c 	.word	0x0801191c

08010a9c <abort>:
 8010a9c:	b508      	push	{r3, lr}
 8010a9e:	2006      	movs	r0, #6
 8010aa0:	f000 fa50 	bl	8010f44 <raise>
 8010aa4:	2001      	movs	r0, #1
 8010aa6:	f7f4 fde6 	bl	8005676 <_exit>
	...

08010aac <__sflush_r>:
 8010aac:	898a      	ldrh	r2, [r1, #12]
 8010aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab2:	4605      	mov	r5, r0
 8010ab4:	0710      	lsls	r0, r2, #28
 8010ab6:	460c      	mov	r4, r1
 8010ab8:	d458      	bmi.n	8010b6c <__sflush_r+0xc0>
 8010aba:	684b      	ldr	r3, [r1, #4]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	dc05      	bgt.n	8010acc <__sflush_r+0x20>
 8010ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	dc02      	bgt.n	8010acc <__sflush_r+0x20>
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ace:	2e00      	cmp	r6, #0
 8010ad0:	d0f9      	beq.n	8010ac6 <__sflush_r+0x1a>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ad8:	682f      	ldr	r7, [r5, #0]
 8010ada:	602b      	str	r3, [r5, #0]
 8010adc:	d032      	beq.n	8010b44 <__sflush_r+0x98>
 8010ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ae0:	89a3      	ldrh	r3, [r4, #12]
 8010ae2:	075a      	lsls	r2, r3, #29
 8010ae4:	d505      	bpl.n	8010af2 <__sflush_r+0x46>
 8010ae6:	6863      	ldr	r3, [r4, #4]
 8010ae8:	1ac0      	subs	r0, r0, r3
 8010aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010aec:	b10b      	cbz	r3, 8010af2 <__sflush_r+0x46>
 8010aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010af0:	1ac0      	subs	r0, r0, r3
 8010af2:	2300      	movs	r3, #0
 8010af4:	4602      	mov	r2, r0
 8010af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010af8:	6a21      	ldr	r1, [r4, #32]
 8010afa:	4628      	mov	r0, r5
 8010afc:	47b0      	blx	r6
 8010afe:	1c43      	adds	r3, r0, #1
 8010b00:	89a3      	ldrh	r3, [r4, #12]
 8010b02:	d106      	bne.n	8010b12 <__sflush_r+0x66>
 8010b04:	6829      	ldr	r1, [r5, #0]
 8010b06:	291d      	cmp	r1, #29
 8010b08:	d82c      	bhi.n	8010b64 <__sflush_r+0xb8>
 8010b0a:	4a2a      	ldr	r2, [pc, #168]	; (8010bb4 <__sflush_r+0x108>)
 8010b0c:	40ca      	lsrs	r2, r1
 8010b0e:	07d6      	lsls	r6, r2, #31
 8010b10:	d528      	bpl.n	8010b64 <__sflush_r+0xb8>
 8010b12:	2200      	movs	r2, #0
 8010b14:	6062      	str	r2, [r4, #4]
 8010b16:	04d9      	lsls	r1, r3, #19
 8010b18:	6922      	ldr	r2, [r4, #16]
 8010b1a:	6022      	str	r2, [r4, #0]
 8010b1c:	d504      	bpl.n	8010b28 <__sflush_r+0x7c>
 8010b1e:	1c42      	adds	r2, r0, #1
 8010b20:	d101      	bne.n	8010b26 <__sflush_r+0x7a>
 8010b22:	682b      	ldr	r3, [r5, #0]
 8010b24:	b903      	cbnz	r3, 8010b28 <__sflush_r+0x7c>
 8010b26:	6560      	str	r0, [r4, #84]	; 0x54
 8010b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b2a:	602f      	str	r7, [r5, #0]
 8010b2c:	2900      	cmp	r1, #0
 8010b2e:	d0ca      	beq.n	8010ac6 <__sflush_r+0x1a>
 8010b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b34:	4299      	cmp	r1, r3
 8010b36:	d002      	beq.n	8010b3e <__sflush_r+0x92>
 8010b38:	4628      	mov	r0, r5
 8010b3a:	f7fd fbff 	bl	800e33c <_free_r>
 8010b3e:	2000      	movs	r0, #0
 8010b40:	6360      	str	r0, [r4, #52]	; 0x34
 8010b42:	e7c1      	b.n	8010ac8 <__sflush_r+0x1c>
 8010b44:	6a21      	ldr	r1, [r4, #32]
 8010b46:	2301      	movs	r3, #1
 8010b48:	4628      	mov	r0, r5
 8010b4a:	47b0      	blx	r6
 8010b4c:	1c41      	adds	r1, r0, #1
 8010b4e:	d1c7      	bne.n	8010ae0 <__sflush_r+0x34>
 8010b50:	682b      	ldr	r3, [r5, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d0c4      	beq.n	8010ae0 <__sflush_r+0x34>
 8010b56:	2b1d      	cmp	r3, #29
 8010b58:	d001      	beq.n	8010b5e <__sflush_r+0xb2>
 8010b5a:	2b16      	cmp	r3, #22
 8010b5c:	d101      	bne.n	8010b62 <__sflush_r+0xb6>
 8010b5e:	602f      	str	r7, [r5, #0]
 8010b60:	e7b1      	b.n	8010ac6 <__sflush_r+0x1a>
 8010b62:	89a3      	ldrh	r3, [r4, #12]
 8010b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b68:	81a3      	strh	r3, [r4, #12]
 8010b6a:	e7ad      	b.n	8010ac8 <__sflush_r+0x1c>
 8010b6c:	690f      	ldr	r7, [r1, #16]
 8010b6e:	2f00      	cmp	r7, #0
 8010b70:	d0a9      	beq.n	8010ac6 <__sflush_r+0x1a>
 8010b72:	0793      	lsls	r3, r2, #30
 8010b74:	680e      	ldr	r6, [r1, #0]
 8010b76:	bf08      	it	eq
 8010b78:	694b      	ldreq	r3, [r1, #20]
 8010b7a:	600f      	str	r7, [r1, #0]
 8010b7c:	bf18      	it	ne
 8010b7e:	2300      	movne	r3, #0
 8010b80:	eba6 0807 	sub.w	r8, r6, r7
 8010b84:	608b      	str	r3, [r1, #8]
 8010b86:	f1b8 0f00 	cmp.w	r8, #0
 8010b8a:	dd9c      	ble.n	8010ac6 <__sflush_r+0x1a>
 8010b8c:	6a21      	ldr	r1, [r4, #32]
 8010b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b90:	4643      	mov	r3, r8
 8010b92:	463a      	mov	r2, r7
 8010b94:	4628      	mov	r0, r5
 8010b96:	47b0      	blx	r6
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	dc06      	bgt.n	8010baa <__sflush_r+0xfe>
 8010b9c:	89a3      	ldrh	r3, [r4, #12]
 8010b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ba2:	81a3      	strh	r3, [r4, #12]
 8010ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba8:	e78e      	b.n	8010ac8 <__sflush_r+0x1c>
 8010baa:	4407      	add	r7, r0
 8010bac:	eba8 0800 	sub.w	r8, r8, r0
 8010bb0:	e7e9      	b.n	8010b86 <__sflush_r+0xda>
 8010bb2:	bf00      	nop
 8010bb4:	20400001 	.word	0x20400001

08010bb8 <_fflush_r>:
 8010bb8:	b538      	push	{r3, r4, r5, lr}
 8010bba:	690b      	ldr	r3, [r1, #16]
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	460c      	mov	r4, r1
 8010bc0:	b913      	cbnz	r3, 8010bc8 <_fflush_r+0x10>
 8010bc2:	2500      	movs	r5, #0
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	bd38      	pop	{r3, r4, r5, pc}
 8010bc8:	b118      	cbz	r0, 8010bd2 <_fflush_r+0x1a>
 8010bca:	6983      	ldr	r3, [r0, #24]
 8010bcc:	b90b      	cbnz	r3, 8010bd2 <_fflush_r+0x1a>
 8010bce:	f000 f887 	bl	8010ce0 <__sinit>
 8010bd2:	4b14      	ldr	r3, [pc, #80]	; (8010c24 <_fflush_r+0x6c>)
 8010bd4:	429c      	cmp	r4, r3
 8010bd6:	d11b      	bne.n	8010c10 <_fflush_r+0x58>
 8010bd8:	686c      	ldr	r4, [r5, #4]
 8010bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d0ef      	beq.n	8010bc2 <_fflush_r+0xa>
 8010be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010be4:	07d0      	lsls	r0, r2, #31
 8010be6:	d404      	bmi.n	8010bf2 <_fflush_r+0x3a>
 8010be8:	0599      	lsls	r1, r3, #22
 8010bea:	d402      	bmi.n	8010bf2 <_fflush_r+0x3a>
 8010bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bee:	f7ff fcd0 	bl	8010592 <__retarget_lock_acquire_recursive>
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	4621      	mov	r1, r4
 8010bf6:	f7ff ff59 	bl	8010aac <__sflush_r>
 8010bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bfc:	07da      	lsls	r2, r3, #31
 8010bfe:	4605      	mov	r5, r0
 8010c00:	d4e0      	bmi.n	8010bc4 <_fflush_r+0xc>
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	059b      	lsls	r3, r3, #22
 8010c06:	d4dd      	bmi.n	8010bc4 <_fflush_r+0xc>
 8010c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c0a:	f7ff fcc3 	bl	8010594 <__retarget_lock_release_recursive>
 8010c0e:	e7d9      	b.n	8010bc4 <_fflush_r+0xc>
 8010c10:	4b05      	ldr	r3, [pc, #20]	; (8010c28 <_fflush_r+0x70>)
 8010c12:	429c      	cmp	r4, r3
 8010c14:	d101      	bne.n	8010c1a <_fflush_r+0x62>
 8010c16:	68ac      	ldr	r4, [r5, #8]
 8010c18:	e7df      	b.n	8010bda <_fflush_r+0x22>
 8010c1a:	4b04      	ldr	r3, [pc, #16]	; (8010c2c <_fflush_r+0x74>)
 8010c1c:	429c      	cmp	r4, r3
 8010c1e:	bf08      	it	eq
 8010c20:	68ec      	ldreq	r4, [r5, #12]
 8010c22:	e7da      	b.n	8010bda <_fflush_r+0x22>
 8010c24:	0801193c 	.word	0x0801193c
 8010c28:	0801195c 	.word	0x0801195c
 8010c2c:	0801191c 	.word	0x0801191c

08010c30 <std>:
 8010c30:	2300      	movs	r3, #0
 8010c32:	b510      	push	{r4, lr}
 8010c34:	4604      	mov	r4, r0
 8010c36:	e9c0 3300 	strd	r3, r3, [r0]
 8010c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c3e:	6083      	str	r3, [r0, #8]
 8010c40:	8181      	strh	r1, [r0, #12]
 8010c42:	6643      	str	r3, [r0, #100]	; 0x64
 8010c44:	81c2      	strh	r2, [r0, #14]
 8010c46:	6183      	str	r3, [r0, #24]
 8010c48:	4619      	mov	r1, r3
 8010c4a:	2208      	movs	r2, #8
 8010c4c:	305c      	adds	r0, #92	; 0x5c
 8010c4e:	f7fd fb6d 	bl	800e32c <memset>
 8010c52:	4b05      	ldr	r3, [pc, #20]	; (8010c68 <std+0x38>)
 8010c54:	6263      	str	r3, [r4, #36]	; 0x24
 8010c56:	4b05      	ldr	r3, [pc, #20]	; (8010c6c <std+0x3c>)
 8010c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c5a:	4b05      	ldr	r3, [pc, #20]	; (8010c70 <std+0x40>)
 8010c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c5e:	4b05      	ldr	r3, [pc, #20]	; (8010c74 <std+0x44>)
 8010c60:	6224      	str	r4, [r4, #32]
 8010c62:	6323      	str	r3, [r4, #48]	; 0x30
 8010c64:	bd10      	pop	{r4, pc}
 8010c66:	bf00      	nop
 8010c68:	08010f7d 	.word	0x08010f7d
 8010c6c:	08010f9f 	.word	0x08010f9f
 8010c70:	08010fd7 	.word	0x08010fd7
 8010c74:	08010ffb 	.word	0x08010ffb

08010c78 <_cleanup_r>:
 8010c78:	4901      	ldr	r1, [pc, #4]	; (8010c80 <_cleanup_r+0x8>)
 8010c7a:	f000 b8af 	b.w	8010ddc <_fwalk_reent>
 8010c7e:	bf00      	nop
 8010c80:	08010bb9 	.word	0x08010bb9

08010c84 <__sfmoreglue>:
 8010c84:	b570      	push	{r4, r5, r6, lr}
 8010c86:	2268      	movs	r2, #104	; 0x68
 8010c88:	1e4d      	subs	r5, r1, #1
 8010c8a:	4355      	muls	r5, r2
 8010c8c:	460e      	mov	r6, r1
 8010c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c92:	f7fd fbbf 	bl	800e414 <_malloc_r>
 8010c96:	4604      	mov	r4, r0
 8010c98:	b140      	cbz	r0, 8010cac <__sfmoreglue+0x28>
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8010ca0:	300c      	adds	r0, #12
 8010ca2:	60a0      	str	r0, [r4, #8]
 8010ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010ca8:	f7fd fb40 	bl	800e32c <memset>
 8010cac:	4620      	mov	r0, r4
 8010cae:	bd70      	pop	{r4, r5, r6, pc}

08010cb0 <__sfp_lock_acquire>:
 8010cb0:	4801      	ldr	r0, [pc, #4]	; (8010cb8 <__sfp_lock_acquire+0x8>)
 8010cb2:	f7ff bc6e 	b.w	8010592 <__retarget_lock_acquire_recursive>
 8010cb6:	bf00      	nop
 8010cb8:	2000153d 	.word	0x2000153d

08010cbc <__sfp_lock_release>:
 8010cbc:	4801      	ldr	r0, [pc, #4]	; (8010cc4 <__sfp_lock_release+0x8>)
 8010cbe:	f7ff bc69 	b.w	8010594 <__retarget_lock_release_recursive>
 8010cc2:	bf00      	nop
 8010cc4:	2000153d 	.word	0x2000153d

08010cc8 <__sinit_lock_acquire>:
 8010cc8:	4801      	ldr	r0, [pc, #4]	; (8010cd0 <__sinit_lock_acquire+0x8>)
 8010cca:	f7ff bc62 	b.w	8010592 <__retarget_lock_acquire_recursive>
 8010cce:	bf00      	nop
 8010cd0:	2000153e 	.word	0x2000153e

08010cd4 <__sinit_lock_release>:
 8010cd4:	4801      	ldr	r0, [pc, #4]	; (8010cdc <__sinit_lock_release+0x8>)
 8010cd6:	f7ff bc5d 	b.w	8010594 <__retarget_lock_release_recursive>
 8010cda:	bf00      	nop
 8010cdc:	2000153e 	.word	0x2000153e

08010ce0 <__sinit>:
 8010ce0:	b510      	push	{r4, lr}
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	f7ff fff0 	bl	8010cc8 <__sinit_lock_acquire>
 8010ce8:	69a3      	ldr	r3, [r4, #24]
 8010cea:	b11b      	cbz	r3, 8010cf4 <__sinit+0x14>
 8010cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cf0:	f7ff bff0 	b.w	8010cd4 <__sinit_lock_release>
 8010cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8010cfa:	4b13      	ldr	r3, [pc, #76]	; (8010d48 <__sinit+0x68>)
 8010cfc:	4a13      	ldr	r2, [pc, #76]	; (8010d4c <__sinit+0x6c>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8010d02:	42a3      	cmp	r3, r4
 8010d04:	bf04      	itt	eq
 8010d06:	2301      	moveq	r3, #1
 8010d08:	61a3      	streq	r3, [r4, #24]
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	f000 f820 	bl	8010d50 <__sfp>
 8010d10:	6060      	str	r0, [r4, #4]
 8010d12:	4620      	mov	r0, r4
 8010d14:	f000 f81c 	bl	8010d50 <__sfp>
 8010d18:	60a0      	str	r0, [r4, #8]
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f000 f818 	bl	8010d50 <__sfp>
 8010d20:	2200      	movs	r2, #0
 8010d22:	60e0      	str	r0, [r4, #12]
 8010d24:	2104      	movs	r1, #4
 8010d26:	6860      	ldr	r0, [r4, #4]
 8010d28:	f7ff ff82 	bl	8010c30 <std>
 8010d2c:	68a0      	ldr	r0, [r4, #8]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	2109      	movs	r1, #9
 8010d32:	f7ff ff7d 	bl	8010c30 <std>
 8010d36:	68e0      	ldr	r0, [r4, #12]
 8010d38:	2202      	movs	r2, #2
 8010d3a:	2112      	movs	r1, #18
 8010d3c:	f7ff ff78 	bl	8010c30 <std>
 8010d40:	2301      	movs	r3, #1
 8010d42:	61a3      	str	r3, [r4, #24]
 8010d44:	e7d2      	b.n	8010cec <__sinit+0xc>
 8010d46:	bf00      	nop
 8010d48:	080115a0 	.word	0x080115a0
 8010d4c:	08010c79 	.word	0x08010c79

08010d50 <__sfp>:
 8010d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d52:	4607      	mov	r7, r0
 8010d54:	f7ff ffac 	bl	8010cb0 <__sfp_lock_acquire>
 8010d58:	4b1e      	ldr	r3, [pc, #120]	; (8010dd4 <__sfp+0x84>)
 8010d5a:	681e      	ldr	r6, [r3, #0]
 8010d5c:	69b3      	ldr	r3, [r6, #24]
 8010d5e:	b913      	cbnz	r3, 8010d66 <__sfp+0x16>
 8010d60:	4630      	mov	r0, r6
 8010d62:	f7ff ffbd 	bl	8010ce0 <__sinit>
 8010d66:	3648      	adds	r6, #72	; 0x48
 8010d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010d6c:	3b01      	subs	r3, #1
 8010d6e:	d503      	bpl.n	8010d78 <__sfp+0x28>
 8010d70:	6833      	ldr	r3, [r6, #0]
 8010d72:	b30b      	cbz	r3, 8010db8 <__sfp+0x68>
 8010d74:	6836      	ldr	r6, [r6, #0]
 8010d76:	e7f7      	b.n	8010d68 <__sfp+0x18>
 8010d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010d7c:	b9d5      	cbnz	r5, 8010db4 <__sfp+0x64>
 8010d7e:	4b16      	ldr	r3, [pc, #88]	; (8010dd8 <__sfp+0x88>)
 8010d80:	60e3      	str	r3, [r4, #12]
 8010d82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010d86:	6665      	str	r5, [r4, #100]	; 0x64
 8010d88:	f7ff fc02 	bl	8010590 <__retarget_lock_init_recursive>
 8010d8c:	f7ff ff96 	bl	8010cbc <__sfp_lock_release>
 8010d90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010d98:	6025      	str	r5, [r4, #0]
 8010d9a:	61a5      	str	r5, [r4, #24]
 8010d9c:	2208      	movs	r2, #8
 8010d9e:	4629      	mov	r1, r5
 8010da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010da4:	f7fd fac2 	bl	800e32c <memset>
 8010da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010db0:	4620      	mov	r0, r4
 8010db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010db4:	3468      	adds	r4, #104	; 0x68
 8010db6:	e7d9      	b.n	8010d6c <__sfp+0x1c>
 8010db8:	2104      	movs	r1, #4
 8010dba:	4638      	mov	r0, r7
 8010dbc:	f7ff ff62 	bl	8010c84 <__sfmoreglue>
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	6030      	str	r0, [r6, #0]
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d1d5      	bne.n	8010d74 <__sfp+0x24>
 8010dc8:	f7ff ff78 	bl	8010cbc <__sfp_lock_release>
 8010dcc:	230c      	movs	r3, #12
 8010dce:	603b      	str	r3, [r7, #0]
 8010dd0:	e7ee      	b.n	8010db0 <__sfp+0x60>
 8010dd2:	bf00      	nop
 8010dd4:	080115a0 	.word	0x080115a0
 8010dd8:	ffff0001 	.word	0xffff0001

08010ddc <_fwalk_reent>:
 8010ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010de0:	4606      	mov	r6, r0
 8010de2:	4688      	mov	r8, r1
 8010de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010de8:	2700      	movs	r7, #0
 8010dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010dee:	f1b9 0901 	subs.w	r9, r9, #1
 8010df2:	d505      	bpl.n	8010e00 <_fwalk_reent+0x24>
 8010df4:	6824      	ldr	r4, [r4, #0]
 8010df6:	2c00      	cmp	r4, #0
 8010df8:	d1f7      	bne.n	8010dea <_fwalk_reent+0xe>
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e00:	89ab      	ldrh	r3, [r5, #12]
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d907      	bls.n	8010e16 <_fwalk_reent+0x3a>
 8010e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	d003      	beq.n	8010e16 <_fwalk_reent+0x3a>
 8010e0e:	4629      	mov	r1, r5
 8010e10:	4630      	mov	r0, r6
 8010e12:	47c0      	blx	r8
 8010e14:	4307      	orrs	r7, r0
 8010e16:	3568      	adds	r5, #104	; 0x68
 8010e18:	e7e9      	b.n	8010dee <_fwalk_reent+0x12>

08010e1a <__swhatbuf_r>:
 8010e1a:	b570      	push	{r4, r5, r6, lr}
 8010e1c:	460e      	mov	r6, r1
 8010e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e22:	2900      	cmp	r1, #0
 8010e24:	b096      	sub	sp, #88	; 0x58
 8010e26:	4614      	mov	r4, r2
 8010e28:	461d      	mov	r5, r3
 8010e2a:	da08      	bge.n	8010e3e <__swhatbuf_r+0x24>
 8010e2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e30:	2200      	movs	r2, #0
 8010e32:	602a      	str	r2, [r5, #0]
 8010e34:	061a      	lsls	r2, r3, #24
 8010e36:	d410      	bmi.n	8010e5a <__swhatbuf_r+0x40>
 8010e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e3c:	e00e      	b.n	8010e5c <__swhatbuf_r+0x42>
 8010e3e:	466a      	mov	r2, sp
 8010e40:	f000 f902 	bl	8011048 <_fstat_r>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	dbf1      	blt.n	8010e2c <__swhatbuf_r+0x12>
 8010e48:	9a01      	ldr	r2, [sp, #4]
 8010e4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e52:	425a      	negs	r2, r3
 8010e54:	415a      	adcs	r2, r3
 8010e56:	602a      	str	r2, [r5, #0]
 8010e58:	e7ee      	b.n	8010e38 <__swhatbuf_r+0x1e>
 8010e5a:	2340      	movs	r3, #64	; 0x40
 8010e5c:	2000      	movs	r0, #0
 8010e5e:	6023      	str	r3, [r4, #0]
 8010e60:	b016      	add	sp, #88	; 0x58
 8010e62:	bd70      	pop	{r4, r5, r6, pc}

08010e64 <__smakebuf_r>:
 8010e64:	898b      	ldrh	r3, [r1, #12]
 8010e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e68:	079d      	lsls	r5, r3, #30
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	460c      	mov	r4, r1
 8010e6e:	d507      	bpl.n	8010e80 <__smakebuf_r+0x1c>
 8010e70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	6123      	str	r3, [r4, #16]
 8010e78:	2301      	movs	r3, #1
 8010e7a:	6163      	str	r3, [r4, #20]
 8010e7c:	b002      	add	sp, #8
 8010e7e:	bd70      	pop	{r4, r5, r6, pc}
 8010e80:	ab01      	add	r3, sp, #4
 8010e82:	466a      	mov	r2, sp
 8010e84:	f7ff ffc9 	bl	8010e1a <__swhatbuf_r>
 8010e88:	9900      	ldr	r1, [sp, #0]
 8010e8a:	4605      	mov	r5, r0
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f7fd fac1 	bl	800e414 <_malloc_r>
 8010e92:	b948      	cbnz	r0, 8010ea8 <__smakebuf_r+0x44>
 8010e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e98:	059a      	lsls	r2, r3, #22
 8010e9a:	d4ef      	bmi.n	8010e7c <__smakebuf_r+0x18>
 8010e9c:	f023 0303 	bic.w	r3, r3, #3
 8010ea0:	f043 0302 	orr.w	r3, r3, #2
 8010ea4:	81a3      	strh	r3, [r4, #12]
 8010ea6:	e7e3      	b.n	8010e70 <__smakebuf_r+0xc>
 8010ea8:	4b0d      	ldr	r3, [pc, #52]	; (8010ee0 <__smakebuf_r+0x7c>)
 8010eaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	6020      	str	r0, [r4, #0]
 8010eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eb4:	81a3      	strh	r3, [r4, #12]
 8010eb6:	9b00      	ldr	r3, [sp, #0]
 8010eb8:	6163      	str	r3, [r4, #20]
 8010eba:	9b01      	ldr	r3, [sp, #4]
 8010ebc:	6120      	str	r0, [r4, #16]
 8010ebe:	b15b      	cbz	r3, 8010ed8 <__smakebuf_r+0x74>
 8010ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	f000 f8d1 	bl	801106c <_isatty_r>
 8010eca:	b128      	cbz	r0, 8010ed8 <__smakebuf_r+0x74>
 8010ecc:	89a3      	ldrh	r3, [r4, #12]
 8010ece:	f023 0303 	bic.w	r3, r3, #3
 8010ed2:	f043 0301 	orr.w	r3, r3, #1
 8010ed6:	81a3      	strh	r3, [r4, #12]
 8010ed8:	89a0      	ldrh	r0, [r4, #12]
 8010eda:	4305      	orrs	r5, r0
 8010edc:	81a5      	strh	r5, [r4, #12]
 8010ede:	e7cd      	b.n	8010e7c <__smakebuf_r+0x18>
 8010ee0:	08010c79 	.word	0x08010c79

08010ee4 <_malloc_usable_size_r>:
 8010ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ee8:	1f18      	subs	r0, r3, #4
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	bfbc      	itt	lt
 8010eee:	580b      	ldrlt	r3, [r1, r0]
 8010ef0:	18c0      	addlt	r0, r0, r3
 8010ef2:	4770      	bx	lr

08010ef4 <_raise_r>:
 8010ef4:	291f      	cmp	r1, #31
 8010ef6:	b538      	push	{r3, r4, r5, lr}
 8010ef8:	4604      	mov	r4, r0
 8010efa:	460d      	mov	r5, r1
 8010efc:	d904      	bls.n	8010f08 <_raise_r+0x14>
 8010efe:	2316      	movs	r3, #22
 8010f00:	6003      	str	r3, [r0, #0]
 8010f02:	f04f 30ff 	mov.w	r0, #4294967295
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f0a:	b112      	cbz	r2, 8010f12 <_raise_r+0x1e>
 8010f0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f10:	b94b      	cbnz	r3, 8010f26 <_raise_r+0x32>
 8010f12:	4620      	mov	r0, r4
 8010f14:	f000 f830 	bl	8010f78 <_getpid_r>
 8010f18:	462a      	mov	r2, r5
 8010f1a:	4601      	mov	r1, r0
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f22:	f000 b817 	b.w	8010f54 <_kill_r>
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d00a      	beq.n	8010f40 <_raise_r+0x4c>
 8010f2a:	1c59      	adds	r1, r3, #1
 8010f2c:	d103      	bne.n	8010f36 <_raise_r+0x42>
 8010f2e:	2316      	movs	r3, #22
 8010f30:	6003      	str	r3, [r0, #0]
 8010f32:	2001      	movs	r0, #1
 8010f34:	e7e7      	b.n	8010f06 <_raise_r+0x12>
 8010f36:	2400      	movs	r4, #0
 8010f38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	4798      	blx	r3
 8010f40:	2000      	movs	r0, #0
 8010f42:	e7e0      	b.n	8010f06 <_raise_r+0x12>

08010f44 <raise>:
 8010f44:	4b02      	ldr	r3, [pc, #8]	; (8010f50 <raise+0xc>)
 8010f46:	4601      	mov	r1, r0
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	f7ff bfd3 	b.w	8010ef4 <_raise_r>
 8010f4e:	bf00      	nop
 8010f50:	2000032c 	.word	0x2000032c

08010f54 <_kill_r>:
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	4d07      	ldr	r5, [pc, #28]	; (8010f74 <_kill_r+0x20>)
 8010f58:	2300      	movs	r3, #0
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	4608      	mov	r0, r1
 8010f5e:	4611      	mov	r1, r2
 8010f60:	602b      	str	r3, [r5, #0]
 8010f62:	f7f4 fb78 	bl	8005656 <_kill>
 8010f66:	1c43      	adds	r3, r0, #1
 8010f68:	d102      	bne.n	8010f70 <_kill_r+0x1c>
 8010f6a:	682b      	ldr	r3, [r5, #0]
 8010f6c:	b103      	cbz	r3, 8010f70 <_kill_r+0x1c>
 8010f6e:	6023      	str	r3, [r4, #0]
 8010f70:	bd38      	pop	{r3, r4, r5, pc}
 8010f72:	bf00      	nop
 8010f74:	20001538 	.word	0x20001538

08010f78 <_getpid_r>:
 8010f78:	f7f4 bb65 	b.w	8005646 <_getpid>

08010f7c <__sread>:
 8010f7c:	b510      	push	{r4, lr}
 8010f7e:	460c      	mov	r4, r1
 8010f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f84:	f000 f894 	bl	80110b0 <_read_r>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	bfab      	itete	ge
 8010f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8010f90:	181b      	addge	r3, r3, r0
 8010f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f96:	bfac      	ite	ge
 8010f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f9a:	81a3      	strhlt	r3, [r4, #12]
 8010f9c:	bd10      	pop	{r4, pc}

08010f9e <__swrite>:
 8010f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa2:	461f      	mov	r7, r3
 8010fa4:	898b      	ldrh	r3, [r1, #12]
 8010fa6:	05db      	lsls	r3, r3, #23
 8010fa8:	4605      	mov	r5, r0
 8010faa:	460c      	mov	r4, r1
 8010fac:	4616      	mov	r6, r2
 8010fae:	d505      	bpl.n	8010fbc <__swrite+0x1e>
 8010fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fb4:	2302      	movs	r3, #2
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f000 f868 	bl	801108c <_lseek_r>
 8010fbc:	89a3      	ldrh	r3, [r4, #12]
 8010fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fc6:	81a3      	strh	r3, [r4, #12]
 8010fc8:	4632      	mov	r2, r6
 8010fca:	463b      	mov	r3, r7
 8010fcc:	4628      	mov	r0, r5
 8010fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd2:	f000 b817 	b.w	8011004 <_write_r>

08010fd6 <__sseek>:
 8010fd6:	b510      	push	{r4, lr}
 8010fd8:	460c      	mov	r4, r1
 8010fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fde:	f000 f855 	bl	801108c <_lseek_r>
 8010fe2:	1c43      	adds	r3, r0, #1
 8010fe4:	89a3      	ldrh	r3, [r4, #12]
 8010fe6:	bf15      	itete	ne
 8010fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ff2:	81a3      	strheq	r3, [r4, #12]
 8010ff4:	bf18      	it	ne
 8010ff6:	81a3      	strhne	r3, [r4, #12]
 8010ff8:	bd10      	pop	{r4, pc}

08010ffa <__sclose>:
 8010ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ffe:	f000 b813 	b.w	8011028 <_close_r>
	...

08011004 <_write_r>:
 8011004:	b538      	push	{r3, r4, r5, lr}
 8011006:	4d07      	ldr	r5, [pc, #28]	; (8011024 <_write_r+0x20>)
 8011008:	4604      	mov	r4, r0
 801100a:	4608      	mov	r0, r1
 801100c:	4611      	mov	r1, r2
 801100e:	2200      	movs	r2, #0
 8011010:	602a      	str	r2, [r5, #0]
 8011012:	461a      	mov	r2, r3
 8011014:	f7f4 fb56 	bl	80056c4 <_write>
 8011018:	1c43      	adds	r3, r0, #1
 801101a:	d102      	bne.n	8011022 <_write_r+0x1e>
 801101c:	682b      	ldr	r3, [r5, #0]
 801101e:	b103      	cbz	r3, 8011022 <_write_r+0x1e>
 8011020:	6023      	str	r3, [r4, #0]
 8011022:	bd38      	pop	{r3, r4, r5, pc}
 8011024:	20001538 	.word	0x20001538

08011028 <_close_r>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	4d06      	ldr	r5, [pc, #24]	; (8011044 <_close_r+0x1c>)
 801102c:	2300      	movs	r3, #0
 801102e:	4604      	mov	r4, r0
 8011030:	4608      	mov	r0, r1
 8011032:	602b      	str	r3, [r5, #0]
 8011034:	f7f4 fb62 	bl	80056fc <_close>
 8011038:	1c43      	adds	r3, r0, #1
 801103a:	d102      	bne.n	8011042 <_close_r+0x1a>
 801103c:	682b      	ldr	r3, [r5, #0]
 801103e:	b103      	cbz	r3, 8011042 <_close_r+0x1a>
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	bd38      	pop	{r3, r4, r5, pc}
 8011044:	20001538 	.word	0x20001538

08011048 <_fstat_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4d07      	ldr	r5, [pc, #28]	; (8011068 <_fstat_r+0x20>)
 801104c:	2300      	movs	r3, #0
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	4611      	mov	r1, r2
 8011054:	602b      	str	r3, [r5, #0]
 8011056:	f7f4 fb5d 	bl	8005714 <_fstat>
 801105a:	1c43      	adds	r3, r0, #1
 801105c:	d102      	bne.n	8011064 <_fstat_r+0x1c>
 801105e:	682b      	ldr	r3, [r5, #0]
 8011060:	b103      	cbz	r3, 8011064 <_fstat_r+0x1c>
 8011062:	6023      	str	r3, [r4, #0]
 8011064:	bd38      	pop	{r3, r4, r5, pc}
 8011066:	bf00      	nop
 8011068:	20001538 	.word	0x20001538

0801106c <_isatty_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4d06      	ldr	r5, [pc, #24]	; (8011088 <_isatty_r+0x1c>)
 8011070:	2300      	movs	r3, #0
 8011072:	4604      	mov	r4, r0
 8011074:	4608      	mov	r0, r1
 8011076:	602b      	str	r3, [r5, #0]
 8011078:	f7f4 fb5c 	bl	8005734 <_isatty>
 801107c:	1c43      	adds	r3, r0, #1
 801107e:	d102      	bne.n	8011086 <_isatty_r+0x1a>
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	b103      	cbz	r3, 8011086 <_isatty_r+0x1a>
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	bd38      	pop	{r3, r4, r5, pc}
 8011088:	20001538 	.word	0x20001538

0801108c <_lseek_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4d07      	ldr	r5, [pc, #28]	; (80110ac <_lseek_r+0x20>)
 8011090:	4604      	mov	r4, r0
 8011092:	4608      	mov	r0, r1
 8011094:	4611      	mov	r1, r2
 8011096:	2200      	movs	r2, #0
 8011098:	602a      	str	r2, [r5, #0]
 801109a:	461a      	mov	r2, r3
 801109c:	f7f4 fb55 	bl	800574a <_lseek>
 80110a0:	1c43      	adds	r3, r0, #1
 80110a2:	d102      	bne.n	80110aa <_lseek_r+0x1e>
 80110a4:	682b      	ldr	r3, [r5, #0]
 80110a6:	b103      	cbz	r3, 80110aa <_lseek_r+0x1e>
 80110a8:	6023      	str	r3, [r4, #0]
 80110aa:	bd38      	pop	{r3, r4, r5, pc}
 80110ac:	20001538 	.word	0x20001538

080110b0 <_read_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	4d07      	ldr	r5, [pc, #28]	; (80110d0 <_read_r+0x20>)
 80110b4:	4604      	mov	r4, r0
 80110b6:	4608      	mov	r0, r1
 80110b8:	4611      	mov	r1, r2
 80110ba:	2200      	movs	r2, #0
 80110bc:	602a      	str	r2, [r5, #0]
 80110be:	461a      	mov	r2, r3
 80110c0:	f7f4 fae3 	bl	800568a <_read>
 80110c4:	1c43      	adds	r3, r0, #1
 80110c6:	d102      	bne.n	80110ce <_read_r+0x1e>
 80110c8:	682b      	ldr	r3, [r5, #0]
 80110ca:	b103      	cbz	r3, 80110ce <_read_r+0x1e>
 80110cc:	6023      	str	r3, [r4, #0]
 80110ce:	bd38      	pop	{r3, r4, r5, pc}
 80110d0:	20001538 	.word	0x20001538

080110d4 <_init>:
 80110d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d6:	bf00      	nop
 80110d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110da:	bc08      	pop	{r3}
 80110dc:	469e      	mov	lr, r3
 80110de:	4770      	bx	lr

080110e0 <_fini>:
 80110e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e2:	bf00      	nop
 80110e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110e6:	bc08      	pop	{r3}
 80110e8:	469e      	mov	lr, r3
 80110ea:	4770      	bx	lr
