
lf-001-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011da4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  08011f38  08011f38  00021f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801279c  0801279c  000304fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801279c  0801279c  0002279c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127a4  080127a4  000304fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127a4  080127a4  000227a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127a8  080127a8  000227a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004fc  20000000  080127ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304fc  2**0
                  CONTENTS
 10 .bss          0000136c  200004fc  200004fc  000304fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001868  20001868  000304fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003052c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e479  00000000  00000000  0003056f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004e34  00000000  00000000  0004e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a80  00000000  00000000  00053820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014a8  00000000  00000000  000552a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000229af  00000000  00000000  00056748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026ce6  00000000  00000000  000790f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00131a50  00000000  00000000  0009fddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000080a8  00000000  00000000  001d1830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001d98d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004fc 	.word	0x200004fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f1c 	.word	0x08011f1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000500 	.word	0x20000500
 80001cc:	08011f1c 	.word	0x08011f1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b7e      	ldr	r3, [pc, #504]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000f98:	4a7e      	ldr	r2, [pc, #504]	; (8001194 <MX_ADC1_Init+0x210>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f9c:	4b7c      	ldr	r3, [pc, #496]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fa8:	4b79      	ldr	r3, [pc, #484]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fae:	4b78      	ldr	r3, [pc, #480]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb4:	4b76      	ldr	r3, [pc, #472]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbc:	4b74      	ldr	r3, [pc, #464]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc2:	4b73      	ldr	r3, [pc, #460]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fc4:	4a74      	ldr	r2, [pc, #464]	; (8001198 <MX_ADC1_Init+0x214>)
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b71      	ldr	r3, [pc, #452]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000fce:	4b70      	ldr	r3, [pc, #448]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fd0:	220e      	movs	r2, #14
 8000fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd4:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe2:	486b      	ldr	r0, [pc, #428]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fe4:	f009 f89c 	bl	800a120 <HAL_ADC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f001 f99e 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4863      	ldr	r0, [pc, #396]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001004:	f009 fb0e 	bl	800a624 <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100e:	f001 f98e 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001012:	230a      	movs	r3, #10
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	485c      	ldr	r0, [pc, #368]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001020:	f009 fb00 	bl	800a624 <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800102a:	f001 f980 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800102e:	230e      	movs	r3, #14
 8001030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001032:	2303      	movs	r3, #3
 8001034:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4855      	ldr	r0, [pc, #340]	; (8001190 <MX_ADC1_Init+0x20c>)
 800103c:	f009 faf2 	bl	800a624 <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001046:	f001 f972 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800104a:	230b      	movs	r3, #11
 800104c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800104e:	2304      	movs	r3, #4
 8001050:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	484e      	ldr	r0, [pc, #312]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001058:	f009 fae4 	bl	800a624 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001062:	f001 f964 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001066:	2307      	movs	r3, #7
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800106a:	2305      	movs	r3, #5
 800106c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4847      	ldr	r0, [pc, #284]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001074:	f009 fad6 	bl	800a624 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800107e:	f001 f956 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001082:	230c      	movs	r3, #12
 8001084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001086:	2306      	movs	r3, #6
 8001088:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	4619      	mov	r1, r3
 800108e:	4840      	ldr	r0, [pc, #256]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001090:	f009 fac8 	bl	800a624 <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800109a:	f001 f948 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800109e:	2306      	movs	r3, #6
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4838      	ldr	r0, [pc, #224]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010b0:	f009 fab8 	bl	800a624 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010ba:	f001 f938 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010be:	230d      	movs	r3, #13
 80010c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010c2:	2308      	movs	r3, #8
 80010c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010c6:	2303      	movs	r3, #3
 80010c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4830      	ldr	r0, [pc, #192]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010d0:	f009 faa8 	bl	800a624 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80010da:	f001 f928 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010de:	2305      	movs	r3, #5
 80010e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80010e2:	2309      	movs	r3, #9
 80010e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4829      	ldr	r0, [pc, #164]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010ec:	f009 fa9a 	bl	800a624 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80010f6:	f001 f91a 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80010fe:	230a      	movs	r3, #10
 8001100:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4619      	mov	r1, r3
 8001106:	4822      	ldr	r0, [pc, #136]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001108:	f009 fa8c 	bl	800a624 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8001112:	f001 f90c 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001116:	2304      	movs	r3, #4
 8001118:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800111a:	230b      	movs	r3, #11
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001124:	f009 fa7e 	bl	800a624 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800112e:	f001 f8fe 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001132:	2301      	movs	r3, #1
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001136:	230c      	movs	r3, #12
 8001138:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001140:	f009 fa70 	bl	800a624 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800114a:	f001 f8f0 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800114e:	2303      	movs	r3, #3
 8001150:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001152:	230d      	movs	r3, #13
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_ADC1_Init+0x20c>)
 800115c:	f009 fa62 	bl	800a624 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8001166:	f001 f8e2 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800116a:	2302      	movs	r3, #2
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800116e:	230e      	movs	r3, #14
 8001170:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001178:	f009 fa54 	bl	800a624 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 8001182:	f001 f8d4 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000518 	.word	0x20000518
 8001194:	40012000 	.word	0x40012000
 8001198:	0f000001 	.word	0x0f000001

0800119c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_ADC_MspInit+0x11c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d178      	bne.n	80012b0 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a36      	ldr	r2, [pc, #216]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <HAL_ADC_MspInit+0x120>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_ADC_MspInit+0x120>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001212:	233f      	movs	r3, #63	; 0x3f
 8001214:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001216:	2303      	movs	r3, #3
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4826      	ldr	r0, [pc, #152]	; (80012c0 <HAL_ADC_MspInit+0x124>)
 8001226:	f00a f943 	bl	800b4b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <HAL_ADC_MspInit+0x128>)
 800123e:	f00a f937 	bl	800b4b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x130>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800125c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001260:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001268:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800126c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001270:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001286:	f009 fda3 	bl	800add0 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001290:	f001 f84d 	bl	800232e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2012      	movs	r0, #18
 80012a6:	f009 fd58 	bl	800ad5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012aa:	2012      	movs	r0, #18
 80012ac:	f009 fd71 	bl	800ad92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40012000 	.word	0x40012000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	20000560 	.word	0x20000560
 80012cc:	40026410 	.word	0x40026410

080012d0 <DISP_ClearBuff>:
#include "stdlib.h"
#include "memory.h"

uint8_t disp_buff[OLED_HEIGHT/8][OLED_WIDTH];

void DISP_ClearBuff() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	memset(disp_buff, 0x00, OLED_WIDTH*OLED_HEIGHT/8);
 80012d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d8:	2100      	movs	r1, #0
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DISP_ClearBuff+0x14>)
 80012dc:	f00e fdd9 	bl	800fe92 <memset>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200005c0 	.word	0x200005c0

080012e8 <DISP_DrawPixel>:

void DISP_DrawPixel(uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	460b      	mov	r3, r1
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	73bb      	strb	r3, [r7, #14]

	switch(color) {
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d03a      	beq.n	8001384 <DISP_DrawPixel+0x9c>
 800130e:	2b02      	cmp	r3, #2
 8001310:	dc39      	bgt.n	8001386 <DISP_DrawPixel+0x9e>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <DISP_DrawPixel+0x34>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d019      	beq.n	800134e <DISP_DrawPixel+0x66>
		disp_buff[page][x] &=~(1<<seg);
		break;
	case DISP_COLOR_TRANS:
		break;
	}
}
 800131a:	e034      	b.n	8001386 <DISP_DrawPixel+0x9e>
		disp_buff[page][x] |= (1<<seg);
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	491c      	ldr	r1, [pc, #112]	; (8001394 <DISP_DrawPixel+0xac>)
 8001322:	01d2      	lsls	r2, r2, #7
 8001324:	440a      	add	r2, r1
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25a      	sxtb	r2, r3
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b259      	sxtb	r1, r3
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	b2c8      	uxtb	r0, r1
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <DISP_DrawPixel+0xac>)
 8001342:	01d2      	lsls	r2, r2, #7
 8001344:	440a      	add	r2, r1
 8001346:	4413      	add	r3, r2
 8001348:	4602      	mov	r2, r0
 800134a:	701a      	strb	r2, [r3, #0]
		break;
 800134c:	e01b      	b.n	8001386 <DISP_DrawPixel+0x9e>
		disp_buff[page][x] &=~(1<<seg);
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4910      	ldr	r1, [pc, #64]	; (8001394 <DISP_DrawPixel+0xac>)
 8001354:	01d2      	lsls	r2, r2, #7
 8001356:	440a      	add	r2, r1
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25a      	sxtb	r2, r3
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	b25b      	sxtb	r3, r3
 800136c:	4013      	ands	r3, r2
 800136e:	b259      	sxtb	r1, r3
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	b2c8      	uxtb	r0, r1
 8001376:	4907      	ldr	r1, [pc, #28]	; (8001394 <DISP_DrawPixel+0xac>)
 8001378:	01d2      	lsls	r2, r2, #7
 800137a:	440a      	add	r2, r1
 800137c:	4413      	add	r3, r2
 800137e:	4602      	mov	r2, r0
 8001380:	701a      	strb	r2, [r3, #0]
		break;
 8001382:	e000      	b.n	8001386 <DISP_DrawPixel+0x9e>
		break;
 8001384:	bf00      	nop
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200005c0 	.word	0x200005c0

08001398 <DISP_DrawChar>:

uint8_t DISP_DrawChar(char c, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001398:	b490      	push	{r4, r7}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	4603      	mov	r3, r0
 80013ac:	71bb      	strb	r3, [r7, #6]
 80013ae:	460b      	mov	r3, r1
 80013b0:	717b      	strb	r3, [r7, #5]
 80013b2:	4613      	mov	r3, r2
 80013b4:	713b      	strb	r3, [r7, #4]
	uint8_t page = (y/8)%(OLED_HEIGHT/8);
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	73bb      	strb	r3, [r7, #14]

	for(int i=0; i<5; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e08d      	b.n	80014ec <DISP_DrawChar+0x154>
		if(x+i >= OLED_WIDTH) return 1;
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	4413      	add	r3, r2
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	dd01      	ble.n	80013de <DISP_DrawChar+0x46>
 80013da:	2301      	movs	r3, #1
 80013dc:	e08b      	b.n	80014f6 <DISP_DrawChar+0x15e>
		uint8_t bit_char[2];
		bit_char[0] = Font5x7[((uint8_t)c - 0x20)*5 + i] << seg;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f1a3 0220 	sub.w	r2, r3, #32
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	441a      	add	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a44      	ldr	r2, [pc, #272]	; (8001500 <DISP_DrawChar+0x168>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	461a      	mov	r2, r3
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	733b      	strb	r3, [r7, #12]
		bit_char[1] = Font5x7[((uint8_t)c - 0x20)*5 + i] >> (8-seg);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f1a3 0220 	sub.w	r2, r3, #32
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	441a      	add	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	4413      	add	r3, r2
 800140e:	4a3c      	ldr	r2, [pc, #240]	; (8001500 <DISP_DrawChar+0x168>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	461a      	mov	r2, r3
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	f1c3 0308 	rsb	r3, r3, #8
 800141a:	fa42 f303 	asr.w	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	737b      	strb	r3, [r7, #13]

		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	e050      	b.n	80014ca <DISP_DrawChar+0x132>
			switch(color) {
 8001428:	793b      	ldrb	r3, [r7, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d049      	beq.n	80014c2 <DISP_DrawChar+0x12a>
 800142e:	2b02      	cmp	r3, #2
 8001430:	dc48      	bgt.n	80014c4 <DISP_DrawChar+0x12c>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <DISP_DrawChar+0xa4>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d01f      	beq.n	800147a <DISP_DrawChar+0xe2>
 800143a:	e043      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_WHITE:
				disp_buff[page+j][x+i] |= bit_char[j];
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	441a      	add	r2, r3
 8001442:	79b9      	ldrb	r1, [r7, #6]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	440b      	add	r3, r1
 8001448:	492e      	ldr	r1, [pc, #184]	; (8001504 <DISP_DrawChar+0x16c>)
 800144a:	01d2      	lsls	r2, r2, #7
 800144c:	440a      	add	r2, r1
 800144e:	4413      	add	r3, r2
 8001450:	7818      	ldrb	r0, [r3, #0]
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4413      	add	r3, r2
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	441a      	add	r2, r3
 8001462:	79bc      	ldrb	r4, [r7, #6]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	4423      	add	r3, r4
 8001468:	4301      	orrs	r1, r0
 800146a:	b2c8      	uxtb	r0, r1
 800146c:	4925      	ldr	r1, [pc, #148]	; (8001504 <DISP_DrawChar+0x16c>)
 800146e:	01d2      	lsls	r2, r2, #7
 8001470:	440a      	add	r2, r1
 8001472:	4413      	add	r3, r2
 8001474:	4602      	mov	r2, r0
 8001476:	701a      	strb	r2, [r3, #0]
				break;
 8001478:	e024      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_BLACK:
				disp_buff[page+j][x+i] &=~bit_char[j];
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	441a      	add	r2, r3
 8001480:	79b9      	ldrb	r1, [r7, #6]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	440b      	add	r3, r1
 8001486:	491f      	ldr	r1, [pc, #124]	; (8001504 <DISP_DrawChar+0x16c>)
 8001488:	01d2      	lsls	r2, r2, #7
 800148a:	440a      	add	r2, r1
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25a      	sxtb	r2, r3
 8001492:	f107 010c 	add.w	r1, r7, #12
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	b258      	sxtb	r0, r3
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	441a      	add	r2, r3
 80014ac:	79b9      	ldrb	r1, [r7, #6]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	440b      	add	r3, r1
 80014b2:	b2c0      	uxtb	r0, r0
 80014b4:	4913      	ldr	r1, [pc, #76]	; (8001504 <DISP_DrawChar+0x16c>)
 80014b6:	01d2      	lsls	r2, r2, #7
 80014b8:	440a      	add	r2, r1
 80014ba:	4413      	add	r3, r2
 80014bc:	4602      	mov	r2, r0
 80014be:	701a      	strb	r2, [r3, #0]
				break;
 80014c0:	e000      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_TRANS:
				break;
 80014c2:	bf00      	nop
		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <DISP_DrawChar+0x13c>
 80014d0:	2202      	movs	r2, #2
 80014d2:	e000      	b.n	80014d6 <DISP_DrawChar+0x13e>
 80014d4:	2201      	movs	r2, #1
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dd04      	ble.n	80014e6 <DISP_DrawChar+0x14e>
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4413      	add	r3, r2
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	dda0      	ble.n	8001428 <DISP_DrawChar+0x90>
	for(int i=0; i<5; i++) {
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	f77f af6e 	ble.w	80013d0 <DISP_DrawChar+0x38>
			}
		}
	}
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc90      	pop	{r4, r7}
 80014fe:	4770      	bx	lr
 8001500:	20000000 	.word	0x20000000
 8001504:	200005c0 	.word	0x200005c0

08001508 <DISP_DrawText>:

void DISP_DrawText(char* text, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4608      	mov	r0, r1
 8001512:	4611      	mov	r1, r2
 8001514:	461a      	mov	r2, r3
 8001516:	4603      	mov	r3, r0
 8001518:	70fb      	strb	r3, [r7, #3]
 800151a:	460b      	mov	r3, r1
 800151c:	70bb      	strb	r3, [r7, #2]
 800151e:	4613      	mov	r3, r2
 8001520:	707b      	strb	r3, [r7, #1]
	uint8_t char_num = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
	while(*text)
 8001526:	e015      	b.n	8001554 <DISP_DrawText+0x4c>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	7818      	ldrb	r0, [r3, #0]
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	73fa      	strb	r2, [r7, #15]
 8001536:	461a      	mov	r2, r3
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	4413      	add	r3, r2
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	787b      	ldrb	r3, [r7, #1]
 8001548:	78ba      	ldrb	r2, [r7, #2]
 800154a:	f7ff ff25 	bl	8001398 <DISP_DrawChar>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <DISP_DrawText+0x56>
	while(*text)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e5      	bne.n	8001528 <DISP_DrawText+0x20>
}
 800155c:	e000      	b.n	8001560 <DISP_DrawText+0x58>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 800155e:	bf00      	nop
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <DISP_DrawLineSimple>:

void DISP_DrawLineSimple(	uint8_t x1,
							uint8_t y1,
							uint8_t x2,
							uint8_t y2,
							DISP_Color_Typedef color) {
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	4604      	mov	r4, r0
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	4603      	mov	r3, r0
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	460b      	mov	r3, r1
 8001580:	717b      	strb	r3, [r7, #5]
 8001582:	4613      	mov	r3, r2
 8001584:	713b      	strb	r3, [r7, #4]
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 8001586:	793a      	ldrb	r2, [r7, #4]
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	429a      	cmp	r2, r3
 800158c:	d104      	bne.n	8001598 <DISP_DrawLineSimple+0x30>
 800158e:	797a      	ldrb	r2, [r7, #5]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	429a      	cmp	r2, r3
 8001594:	f000 8086 	beq.w	80016a4 <DISP_DrawLineSimple+0x13c>

	if(x2-x1 >= y2-y1) {
 8001598:	797a      	ldrb	r2, [r7, #5]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	1ad2      	subs	r2, r2, r3
 800159e:	7939      	ldrb	r1, [r7, #4]
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	1acb      	subs	r3, r1, r3
 80015a4:	429a      	cmp	r2, r3
 80015a6:	db3e      	blt.n	8001626 <DISP_DrawLineSimple+0xbe>
		float m = (float)(y2-y1)/(x2-x1);
 80015a8:	793a      	ldrb	r2, [r7, #4]
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015b6:	797a      	ldrb	r2, [r7, #5]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c8:	edc7 7a02 	vstr	s15, [r7, #8]
		for(int i=0; i<=x2-x1; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e022      	b.n	8001618 <DISP_DrawLineSimple+0xb0>
			DISP_DrawPixel(x1+i, (m*i)+y1, color);
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4413      	add	r3, r2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	ee07 2a90 	vmov	s15, r2
 80015e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ee:	79ba      	ldrb	r2, [r7, #6]
 80015f0:	ee07 2a90 	vmov	s15, r2
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001600:	edc7 7a00 	vstr	s15, [r7]
 8001604:	783a      	ldrb	r2, [r7, #0]
 8001606:	b2d1      	uxtb	r1, r2
 8001608:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe6b 	bl	80012e8 <DISP_DrawPixel>
		for(int i=0; i<=x2-x1; i++) {
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	797a      	ldrb	r2, [r7, #5]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	ddd6      	ble.n	80015d2 <DISP_DrawLineSimple+0x6a>
 8001624:	e03f      	b.n	80016a6 <DISP_DrawLineSimple+0x13e>
		}
	} else {
		float m = (float)(x2-x1)/(y2-y1);
 8001626:	797a      	ldrb	r2, [r7, #5]
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001634:	793a      	ldrb	r2, [r7, #4]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001646:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0; i<=y2-y1; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	e022      	b.n	8001696 <DISP_DrawLineSimple+0x12e>
			DISP_DrawPixel((m*i)+x1, i+y1, color);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	edd7 7a03 	vldr	s15, [r7, #12]
 800165e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	edc7 7a00 	vstr	s15, [r7]
 8001678:	783b      	ldrb	r3, [r7, #0]
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	4413      	add	r3, r2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fe2c 	bl	80012e8 <DISP_DrawPixel>
		for(int i=0; i<=y2-y1; i++) {
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	3301      	adds	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	793a      	ldrb	r2, [r7, #4]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	429a      	cmp	r2, r3
 80016a0:	ddd6      	ble.n	8001650 <DISP_DrawLineSimple+0xe8>
 80016a2:	e000      	b.n	80016a6 <DISP_DrawLineSimple+0x13e>
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 80016a4:	bf00      	nop
		}
	}
}
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}

080016ac <DISP_DrawRect>:

void DISP_DrawRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	4603      	mov	r3, r0
 80016c0:	71bb      	strb	r3, [r7, #6]
 80016c2:	460b      	mov	r3, r1
 80016c4:	717b      	strb	r3, [r7, #5]
 80016c6:	4613      	mov	r3, r2
 80016c8:	713b      	strb	r3, [r7, #4]
	DISP_DrawLineSimple(x1, y1, x2, y1, color);
 80016ca:	79bc      	ldrb	r4, [r7, #6]
 80016cc:	797a      	ldrb	r2, [r7, #5]
 80016ce:	79b9      	ldrb	r1, [r7, #6]
 80016d0:	79f8      	ldrb	r0, [r7, #7]
 80016d2:	7e3b      	ldrb	r3, [r7, #24]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7ff ff46 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y1, x1, y2, color);
 80016dc:	793c      	ldrb	r4, [r7, #4]
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	79b9      	ldrb	r1, [r7, #6]
 80016e2:	79f8      	ldrb	r0, [r7, #7]
 80016e4:	7e3b      	ldrb	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	f7ff ff3d 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x2, y1, x2, y2, color);
 80016ee:	793c      	ldrb	r4, [r7, #4]
 80016f0:	797a      	ldrb	r2, [r7, #5]
 80016f2:	79b9      	ldrb	r1, [r7, #6]
 80016f4:	7978      	ldrb	r0, [r7, #5]
 80016f6:	7e3b      	ldrb	r3, [r7, #24]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	4623      	mov	r3, r4
 80016fc:	f7ff ff34 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y2, x2, y2, color);
 8001700:	793c      	ldrb	r4, [r7, #4]
 8001702:	797a      	ldrb	r2, [r7, #5]
 8001704:	7939      	ldrb	r1, [r7, #4]
 8001706:	79f8      	ldrb	r0, [r7, #7]
 8001708:	7e3b      	ldrb	r3, [r7, #24]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4623      	mov	r3, r4
 800170e:	f7ff ff2b 	bl	8001568 <DISP_DrawLineSimple>
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}
	...

0800171c <DISP_FillRect>:

void DISP_FillRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 800171c:	b490      	push	{r4, r7}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4623      	mov	r3, r4
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	4603      	mov	r3, r0
 8001730:	71bb      	strb	r3, [r7, #6]
 8001732:	460b      	mov	r3, r1
 8001734:	717b      	strb	r3, [r7, #5]
 8001736:	4613      	mov	r3, r2
 8001738:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	73bb      	strb	r3, [r7, #14]
	uint8_t seg1 = y1%8;
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	737b      	strb	r3, [r7, #13]
	uint8_t page2 = y2/8;
 8001748:	793b      	ldrb	r3, [r7, #4]
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	733b      	strb	r3, [r7, #12]
	uint8_t seg2 = y2%8;
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	72fb      	strb	r3, [r7, #11]

	for(int i=page1; i<=page2; i++) {
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e074      	b.n	8001846 <DISP_FillRect+0x12a>
		for(int j=x1; j<=x2; j++) {
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e06a      	b.n	8001838 <DISP_FillRect+0x11c>
			uint8_t bit;

			if(i==page1 && i!=page2) {
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	429a      	cmp	r2, r3
 8001768:	d109      	bne.n	800177e <DISP_FillRect+0x62>
 800176a:	7b3b      	ldrb	r3, [r7, #12]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d005      	beq.n	800177e <DISP_FillRect+0x62>
				bit = (0xFF << seg1);
 8001772:	7b7b      	ldrb	r3, [r7, #13]
 8001774:	22ff      	movs	r2, #255	; 0xff
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e022      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else if(page1==page2) {
 800177e:	7bba      	ldrb	r2, [r7, #14]
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	429a      	cmp	r2, r3
 8001784:	d110      	bne.n	80017a8 <DISP_FillRect+0x8c>
				bit = (0xFF >> (7-seg2)) - (0xFF >> (8-seg1));
 8001786:	7afb      	ldrb	r3, [r7, #11]
 8001788:	f1c3 0307 	rsb	r3, r3, #7
 800178c:	22ff      	movs	r2, #255	; 0xff
 800178e:	fa42 f303 	asr.w	r3, r2, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	7b7b      	ldrb	r3, [r7, #13]
 8001796:	f1c3 0308 	rsb	r3, r3, #8
 800179a:	21ff      	movs	r1, #255	; 0xff
 800179c:	fa41 f303 	asr.w	r3, r1, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e00d      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else if(i==page2) {
 80017a8:	7b3b      	ldrb	r3, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <DISP_FillRect+0xa4>
				bit = (0xFF >> (7-seg2));
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	fa42 f303 	asr.w	r3, r2, r3
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e001      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else {
				bit = 0xFF;
 80017c0:	23ff      	movs	r3, #255	; 0xff
 80017c2:	73fb      	strb	r3, [r7, #15]
			}

			switch(color) {
 80017c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d031      	beq.n	8001830 <DISP_FillRect+0x114>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	dc30      	bgt.n	8001832 <DISP_FillRect+0x116>
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <DISP_FillRect+0xbe>
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d013      	beq.n	8001800 <DISP_FillRect+0xe4>
 80017d8:	e02b      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_WHITE:
				disp_buff[i][j] |= bit;
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <DISP_FillRect+0x140>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	01db      	lsls	r3, r3, #7
 80017e0:	441a      	add	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4413      	add	r3, r2
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b2d9      	uxtb	r1, r3
 80017ee:	4a1b      	ldr	r2, [pc, #108]	; (800185c <DISP_FillRect+0x140>)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	01db      	lsls	r3, r3, #7
 80017f4:	441a      	add	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	460a      	mov	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
				break;
 80017fe:	e018      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_BLACK:
				disp_buff[i][j] &=~bit;
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <DISP_FillRect+0x140>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	01db      	lsls	r3, r3, #7
 8001806:	441a      	add	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b25a      	sxtb	r2, r3
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	43db      	mvns	r3, r3
 8001816:	b25b      	sxtb	r3, r3
 8001818:	4013      	ands	r3, r2
 800181a:	b25b      	sxtb	r3, r3
 800181c:	b2d9      	uxtb	r1, r3
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <DISP_FillRect+0x140>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	441a      	add	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4413      	add	r3, r2
 800182a:	460a      	mov	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
				break;
 800182e:	e000      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_TRANS:
				break;
 8001830:	bf00      	nop
		for(int j=x1; j<=x2; j++) {
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3301      	adds	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	797b      	ldrb	r3, [r7, #5]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	dd90      	ble.n	8001762 <DISP_FillRect+0x46>
	for(int i=page1; i<=page2; i++) {
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	7b3b      	ldrb	r3, [r7, #12]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	429a      	cmp	r2, r3
 800184c:	dd86      	ble.n	800175c <DISP_FillRect+0x40>
			}
		}
	}
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bc90      	pop	{r4, r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200005c0 	.word	0x200005c0

08001860 <DISP_CountCharString>:

uint8_t DISP_CountCharString(char* str) {
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	int ct;
	for(ct=0; str[ct]!=0; ct++);
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e002      	b.n	8001874 <DISP_CountCharString+0x14>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f6      	bne.n	800186e <DISP_CountCharString+0xe>
	return ct;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	b2db      	uxtb	r3, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DISP_DisplayText>:

void DISP_DisplayText(DISP_Text_Typedef *s, char* text) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af02      	add	r7, sp, #8
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	uint8_t len_char = DISP_CountCharString(text);
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f7ff ffe0 	bl	8001860 <DISP_CountCharString>
 80018a0:	4603      	mov	r3, r0
 80018a2:	72fb      	strb	r3, [r7, #11]
	uint8_t len_bit = len_char*6-1;
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	461a      	mov	r2, r3
 80018a8:	0052      	lsls	r2, r2, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	72bb      	strb	r3, [r7, #10]
	uint8_t x, y;
	uint8_t fx2, fy2;

	if(s->size_x == 0)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	78db      	ldrb	r3, [r3, #3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <DISP_DisplayText+0x3c>
		fx2 = s->origin_x+len_bit+1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	7abb      	ldrb	r3, [r7, #10]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	757b      	strb	r3, [r7, #21]
 80018ca:	e005      	b.n	80018d8 <DISP_DisplayText+0x48>
	else
		fx2 = s->origin_x+s->size_x;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	4413      	add	r3, r2
 80018d6:	757b      	strb	r3, [r7, #21]

	if(s->size_y < 8)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	2b07      	cmp	r3, #7
 80018de:	d804      	bhi.n	80018ea <DISP_DisplayText+0x5a>
		fy2 = s->origin_y+8;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	3308      	adds	r3, #8
 80018e6:	753b      	strb	r3, [r7, #20]
 80018e8:	e005      	b.n	80018f6 <DISP_DisplayText+0x66>
	else
		fy2 = s->origin_y+s->size_y;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	785a      	ldrb	r2, [r3, #1]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	753b      	strb	r3, [r7, #20]

	DISP_FillRect(
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7818      	ldrb	r0, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			fx2,
			fy2,
			(s->color==DISP_COLOR_BLACK)?DISP_COLOR_WHITE:DISP_COLOR_BLACK);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	789b      	ldrb	r3, [r3, #2]
	DISP_FillRect(
 8001902:	2b01      	cmp	r3, #1
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461c      	mov	r4, r3
 800190e:	7d3b      	ldrb	r3, [r7, #20]
 8001910:	7d7a      	ldrb	r2, [r7, #21]
 8001912:	9400      	str	r4, [sp, #0]
 8001914:	f7ff ff02 	bl	800171c <DISP_FillRect>

	switch(s->align_x) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	795b      	ldrb	r3, [r3, #5]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d010      	beq.n	8001942 <DISP_DisplayText+0xb2>
 8001920:	2b02      	cmp	r3, #2
 8001922:	dc20      	bgt.n	8001966 <DISP_DisplayText+0xd6>
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <DISP_DisplayText+0x9e>
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <DISP_DisplayText+0xa8>
 800192c:	e01b      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_LEFT:
		x = s->origin_x + 1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
		break;
 8001936:	e016      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_RIGHT:
		x = fx2 - len_bit;
 8001938:	7d7a      	ldrb	r2, [r7, #21]
 800193a:	7abb      	ldrb	r3, [r7, #10]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	75fb      	strb	r3, [r7, #23]
		break;
 8001940:	e011      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_CENTER:
		x = s->origin_x+((fx2-s->origin_x)/2)-(len_bit/2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	7d7b      	ldrb	r3, [r7, #21]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	7809      	ldrb	r1, [r1, #0]
 800194c:	1a5b      	subs	r3, r3, r1
 800194e:	0fd9      	lsrs	r1, r3, #31
 8001950:	440b      	add	r3, r1
 8001952:	105b      	asrs	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4413      	add	r3, r2
 8001958:	b2da      	uxtb	r2, r3
 800195a:	7abb      	ldrb	r3, [r7, #10]
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	75fb      	strb	r3, [r7, #23]
		break;
 8001964:	bf00      	nop
	}

	switch(s->align_y) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	799b      	ldrb	r3, [r3, #6]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d00f      	beq.n	800198e <DISP_DisplayText+0xfe>
 800196e:	2b02      	cmp	r3, #2
 8001970:	dc1c      	bgt.n	80019ac <DISP_DisplayText+0x11c>
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <DISP_DisplayText+0xec>
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <DISP_DisplayText+0xf6>
 800197a:	e017      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_LEFT:
		y = s->origin_y + 1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	3301      	adds	r3, #1
 8001982:	75bb      	strb	r3, [r7, #22]
		break;
 8001984:	e012      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_RIGHT:
		y = fy2 - 7;
 8001986:	7d3b      	ldrb	r3, [r7, #20]
 8001988:	3b07      	subs	r3, #7
 800198a:	75bb      	strb	r3, [r7, #22]
		break;
 800198c:	e00e      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_CENTER:
		y = s->origin_y+((fy2-s->origin_y)/2)-3;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	7d3b      	ldrb	r3, [r7, #20]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	7849      	ldrb	r1, [r1, #1]
 8001998:	1a5b      	subs	r3, r3, r1
 800199a:	0fd9      	lsrs	r1, r3, #31
 800199c:	440b      	add	r3, r1
 800199e:	105b      	asrs	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b03      	subs	r3, #3
 80019a8:	75bb      	strb	r3, [r7, #22]
		break;
 80019aa:	bf00      	nop
	}

	DISP_DrawText(text, x, y, s->color);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	789b      	ldrb	r3, [r3, #2]
 80019b0:	7dba      	ldrb	r2, [r7, #22]
 80019b2:	7df9      	ldrb	r1, [r7, #23]
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f7ff fda7 	bl	8001508 <DISP_DrawText>

	uint8_t page1 = s->origin_y/8;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	08db      	lsrs	r3, r3, #3
 80019c0:	727b      	strb	r3, [r7, #9]
	uint8_t page2 = fy2/8;
 80019c2:	7d3b      	ldrb	r3, [r7, #20]
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	723b      	strb	r3, [r7, #8]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 80019c8:	7a7b      	ldrb	r3, [r7, #9]
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e024      	b.n	8001a18 <DISP_DisplayText+0x188>
		OLED_SetPageAddr(i);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fed8 	bl	8002788 <OLED_SetPageAddr>
		OLED_SetColumn(s->origin_x);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fee8 	bl	80027b2 <OLED_SetColumn>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e00c      	b.n	8001a04 <DISP_DisplayText+0x174>
			OLED_Data(disp_buff[i][j]);
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <DISP_DisplayText+0x1a0>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	441a      	add	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fead 	bl	8002758 <OLED_Data>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	7d7b      	ldrb	r3, [r7, #21]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dc02      	bgt.n	8001a12 <DISP_DisplayText+0x182>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a10:	ddeb      	ble.n	80019ea <DISP_DisplayText+0x15a>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	7a3b      	ldrb	r3, [r7, #8]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dc02      	bgt.n	8001a26 <DISP_DisplayText+0x196>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	ddd3      	ble.n	80019ce <DISP_DisplayText+0x13e>
		}
	}

}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd90      	pop	{r4, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200005c0 	.word	0x200005c0

08001a34 <DISP_OLEDUpdate>:

void DISP_OLEDUpdate(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4623      	mov	r3, r4
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	4603      	mov	r3, r0
 8001a48:	71bb      	strb	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	717b      	strb	r3, [r7, #5]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	73fb      	strb	r3, [r7, #15]
	uint8_t page2 = y2/8;
 8001a58:	793b      	ldrb	r3, [r7, #4]
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	73bb      	strb	r3, [r7, #14]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e022      	b.n	8001aaa <DISP_OLEDUpdate+0x76>
		OLED_SetPageAddr(i);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fe8d 	bl	8002788 <OLED_SetPageAddr>
		OLED_SetColumn(x1);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fe9e 	bl	80027b2 <OLED_SetColumn>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e00c      	b.n	8001a96 <DISP_OLEDUpdate+0x62>
			OLED_Data(disp_buff[i][j]);
 8001a7c:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <DISP_OLEDUpdate+0x8c>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	01db      	lsls	r3, r3, #7
 8001a82:	441a      	add	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fe64 	bl	8002758 <OLED_Data>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	3301      	adds	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	797b      	ldrb	r3, [r7, #5]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dc02      	bgt.n	8001aa4 <DISP_OLEDUpdate+0x70>
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa2:	ddeb      	ble.n	8001a7c <DISP_OLEDUpdate+0x48>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dc02      	bgt.n	8001ab8 <DISP_OLEDUpdate+0x84>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b07      	cmp	r3, #7
 8001ab6:	ddd5      	ble.n	8001a64 <DISP_OLEDUpdate+0x30>
		}
	}
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	200005c0 	.word	0x200005c0

08001ac4 <DISP_FillRect2>:

void DISP_FillRect2(DISP_Shape_Typedef* s) {
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
	DISP_FillRect(
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7818      	ldrb	r0, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			s->origin_x+s->size_x,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	78db      	ldrb	r3, [r3, #3]
	DISP_FillRect(
 8001adc:	4413      	add	r3, r2
 8001ade:	b2dc      	uxtb	r4, r3
			s->origin_y+s->size_y,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	785a      	ldrb	r2, [r3, #1]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
	DISP_FillRect(
 8001ae8:	4413      	add	r3, r2
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	789b      	ldrb	r3, [r3, #2]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4613      	mov	r3, r2
 8001af4:	4622      	mov	r2, r4
 8001af6:	f7ff fe11 	bl	800171c <DISP_FillRect>
			s->color);
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}
	...

08001b04 <DISP_Test>:
			s->origin_y,
			s->origin_x+s->size_x,
			s->origin_y+s->size_y);
}

void DISP_Test() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
	DISP_DrawText ("OK! Rownle. Now, I", 0, 0, DISP_COLOR_WHITE);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	483e      	ldr	r0, [pc, #248]	; (8001c0c <DISP_Test+0x108>)
 8001b12:	f7ff fcf9 	bl	8001508 <DISP_DrawText>
	DISP_DrawText ("want to eat your", 0, 8, DISP_COLOR_WHITE);
 8001b16:	2300      	movs	r3, #0
 8001b18:	2208      	movs	r2, #8
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	483c      	ldr	r0, [pc, #240]	; (8001c10 <DISP_Test+0x10c>)
 8001b1e:	f7ff fcf3 	bl	8001508 <DISP_DrawText>
	DISP_DrawText ("brain!", 0, 16, DISP_COLOR_WHITE);
 8001b22:	2300      	movs	r3, #0
 8001b24:	2210      	movs	r2, #16
 8001b26:	2100      	movs	r1, #0
 8001b28:	483a      	ldr	r0, [pc, #232]	; (8001c14 <DISP_Test+0x110>)
 8001b2a:	f7ff fced 	bl	8001508 <DISP_DrawText>
	DISP_DrawRect(62, 30, 122, 62, DISP_COLOR_WHITE);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	233e      	movs	r3, #62	; 0x3e
 8001b34:	227a      	movs	r2, #122	; 0x7a
 8001b36:	211e      	movs	r1, #30
 8001b38:	203e      	movs	r0, #62	; 0x3e
 8001b3a:	f7ff fdb7 	bl	80016ac <DISP_DrawRect>
	DISP_FillRect(64, 32, 120, 60, DISP_COLOR_WHITE);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	233c      	movs	r3, #60	; 0x3c
 8001b44:	2278      	movs	r2, #120	; 0x78
 8001b46:	2120      	movs	r1, #32
 8001b48:	2040      	movs	r0, #64	; 0x40
 8001b4a:	f7ff fde7 	bl	800171c <DISP_FillRect>
	DISP_DrawText ("HOW?", 81, 42, DISP_COLOR_BLACK);
 8001b4e:	2301      	movs	r3, #1
 8001b50:	222a      	movs	r2, #42	; 0x2a
 8001b52:	2151      	movs	r1, #81	; 0x51
 8001b54:	4830      	ldr	r0, [pc, #192]	; (8001c18 <DISP_Test+0x114>)
 8001b56:	f7ff fcd7 	bl	8001508 <DISP_DrawText>
	for(int i=0; i<8; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e01d      	b.n	8001b9c <DISP_Test+0x98>
		OLED_SetPageAddr(i);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fe0f 	bl	8002788 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 fe21 	bl	80027b2 <OLED_SetColumn>
		for(int j=0; j<128; j++) {
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	e00c      	b.n	8001b90 <DISP_Test+0x8c>
			OLED_Data(disp_buff[i][j]);
 8001b76:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <DISP_Test+0x118>)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	01db      	lsls	r3, r3, #7
 8001b7c:	441a      	add	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fde7 	bl	8002758 <OLED_Data>
		for(int j=0; j<128; j++) {
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b7f      	cmp	r3, #127	; 0x7f
 8001b94:	ddef      	ble.n	8001b76 <DISP_Test+0x72>
	for(int i=0; i<8; i++) {
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	ddde      	ble.n	8001b60 <DISP_Test+0x5c>
		}
	}
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	e022      	b.n	8001bee <DISP_Test+0xea>
		OLED_SetPageAddr(i+4);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	3304      	adds	r3, #4
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fde9 	bl	8002788 <OLED_SetPageAddr>
		OLED_SetColumn(2);
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f000 fdfb 	bl	80027b2 <OLED_SetColumn>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	e00f      	b.n	8001be2 <DISP_Test+0xde>
			OLED_Data(itsr_logo[j+i*ITSR_ARRAY_WIDTH]);
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <DISP_Test+0x11c>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fdbe 	bl	8002758 <OLED_Data>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b27      	cmp	r3, #39	; 0x27
 8001be6:	ddec      	ble.n	8001bc2 <DISP_Test+0xbe>
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	ddd9      	ble.n	8001ba8 <DISP_Test+0xa4>
		}
	}

	HAL_Delay(500);
 8001bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf8:	f008 fa6e 	bl	800a0d8 <HAL_Delay>
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001bfc:	f000 fdf3 	bl	80027e6 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c00:	f7ff fb66 	bl	80012d0 <DISP_ClearBuff>
//		sprintf(tbuff, "%i", b);
//		DISP_DisplayText(&fix2, tbuff);
//		b++;
//		HAL_Delay(100);
//	}
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	08011f38 	.word	0x08011f38
 8001c10:	08011f4c 	.word	0x08011f4c
 8001c14:	08011f60 	.word	0x08011f60
 8001c18:	08011f68 	.word	0x08011f68
 8001c1c:	200005c0 	.word	0x200005c0
 8001c20:	200001e8 	.word	0x200001e8

08001c24 <DISP_ClearAll>:

void DISP_ClearAll() {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c28:	f000 fddd 	bl	80027e6 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c2c:	f7ff fb50 	bl	80012d0 <DISP_ClearBuff>
	OLED_Command(OLED_DISP_ON);
 8001c30:	20af      	movs	r0, #175	; 0xaf
 8001c32:	f000 fd65 	bl	8002700 <OLED_Command>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2101      	movs	r1, #1
 8001c62:	2038      	movs	r0, #56	; 0x38
 8001c64:	f009 f879 	bl	800ad5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c68:	2038      	movs	r0, #56	; 0x38
 8001c6a:	f009 f892 	bl	800ad92 <HAL_NVIC_EnableIRQ>

}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <EEP_Init>:

uint32_t last_tick = 0;

uint16_t last_mem;

void EEP_Init(I2C_HandleTypeDef* hi2c) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	eep_hi2c = hi2c;
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <EEP_Init+0x1c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200009c0 	.word	0x200009c0

08001c9c <EEP_WritePage>:

void EEP_WritePage(uint16_t page_addr, uint8_t* data) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af04      	add	r7, sp, #16
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <EEP_WritePage+0x40>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	89fa      	ldrh	r2, [r7, #14]
 8001cb4:	2364      	movs	r3, #100	; 0x64
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	21a0      	movs	r1, #160	; 0xa0
 8001cc4:	f009 ff06 	bl	800bad4 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001cc8:	f008 f9fa 	bl	800a0c0 <HAL_GetTick>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <EEP_WritePage+0x44>)
 8001cd0:	6013      	str	r3, [r2, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200009c0 	.word	0x200009c0
 8001ce0:	200009c4 	.word	0x200009c4

08001ce4 <EEP_WriteMem>:

void EEP_WriteMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af04      	add	r7, sp, #16
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	80fb      	strh	r3, [r7, #6]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <EEP_WriteMem+0x40>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	797b      	ldrb	r3, [r7, #5]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	2164      	movs	r1, #100	; 0x64
 8001d00:	9102      	str	r1, [sp, #8]
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	21a0      	movs	r1, #160	; 0xa0
 8001d0c:	f009 fee2 	bl	800bad4 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001d10:	f008 f9d6 	bl	800a0c0 <HAL_GetTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <EEP_WriteMem+0x44>)
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200009c0 	.word	0x200009c0
 8001d28:	200009c4 	.word	0x200009c4

08001d2c <EEP_ReadPage>:

void EEP_ReadPage(uint16_t page_addr, uint8_t* data) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af04      	add	r7, sp, #16
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	019b      	lsls	r3, r3, #6
 8001d3c:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <EEP_ReadPage+0x40>)
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	89fa      	ldrh	r2, [r7, #14]
 8001d44:	2364      	movs	r3, #100	; 0x64
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2340      	movs	r3, #64	; 0x40
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	21a0      	movs	r1, #160	; 0xa0
 8001d54:	f009 ffb8 	bl	800bcc8 <HAL_I2C_Mem_Read>
	last_mem = mem_addr+PAGE_SIZE;
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	3340      	adds	r3, #64	; 0x40
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <EEP_ReadPage+0x44>)
 8001d60:	801a      	strh	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200009c0 	.word	0x200009c0
 8001d70:	200009c8 	.word	0x200009c8

08001d74 <EEP_ReadMem>:

void EEP_ReadMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4613      	mov	r3, r2
 8001d82:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <EEP_ReadMem+0x44>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	797b      	ldrb	r3, [r7, #5]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	2164      	movs	r1, #100	; 0x64
 8001d90:	9102      	str	r1, [sp, #8]
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	21a0      	movs	r1, #160	; 0xa0
 8001d9c:	f009 ff94 	bl	800bcc8 <HAL_I2C_Mem_Read>
	last_mem = mem_addr+size;
 8001da0:	797b      	ldrb	r3, [r7, #5]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	4413      	add	r3, r2
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <EEP_ReadMem+0x48>)
 8001dac:	801a      	strh	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200009c0 	.word	0x200009c0
 8001dbc:	200009c8 	.word	0x200009c8

08001dc0 <EEP_ReadyToWrite>:

uint8_t EEP_ReadyToWrite() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_tick > 5) return 1; else return 0;
 8001dc4:	f008 f97c 	bl	800a0c0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <EEP_ReadyToWrite+0x20>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d901      	bls.n	8001dd8 <EEP_ReadyToWrite+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <EEP_ReadyToWrite+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200009c4 	.word	0x200009c4

08001de4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a37      	ldr	r2, [pc, #220]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SEN_EN_Pin|LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e70:	482a      	ldr	r0, [pc, #168]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001e72:	f009 fcd1 	bl	800b818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7c:	4828      	ldr	r0, [pc, #160]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001e7e:	f009 fccb 	bl	800b818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW_RG_Pin|SW_UP_Pin;
 8001e82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4821      	ldr	r0, [pc, #132]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001e98:	f009 fb0a 	bl	800b4b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SEN_EN_Pin;
 8001e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SEN_EN_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4819      	ldr	r0, [pc, #100]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001eb6:	f009 fafb 	bl	800b4b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ec0:	2311      	movs	r3, #17
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4813      	ldr	r0, [pc, #76]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001ed4:	f009 faec 	bl	800b4b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW_HM_Pin|SW_OK_Pin|SW_BK_Pin|SW_DW_Pin
 8001ed8:	f24e 0330 	movw	r3, #57392	; 0xe030
 8001edc:	617b      	str	r3, [r7, #20]
                          |SW_LF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001eee:	f009 fadf 	bl	800b4b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4804      	ldr	r0, [pc, #16]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001f0c:	f009 fad0 	bl	800b4b0 <HAL_GPIO_Init>

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020400 	.word	0x40020400

08001f24 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <MX_I2C1_Init+0x58>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <MX_I2C1_Init+0x5c>)
 8001f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f64:	f009 fc72 	bl	800b84c <HAL_I2C_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001f6e:	f000 f9de 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200009cc 	.word	0x200009cc
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	00061a80 	.word	0x00061a80

08001f84 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f8a:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <MX_I2C2_Init+0x54>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x58>)
 8001f92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fc2:	f009 fc43 	bl	800b84c <HAL_I2C_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fcc:	f000 f9af 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000a20 	.word	0x20000a20
 8001fd8:	40005800 	.word	0x40005800
 8001fdc:	000186a0 	.word	0x000186a0

08001fe0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_I2C_MspInit+0xec>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d12d      	bne.n	800205e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800201e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002024:	2312      	movs	r3, #18
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002030:	2304      	movs	r3, #4
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4826      	ldr	r0, [pc, #152]	; (80020d4 <HAL_I2C_MspInit+0xf4>)
 800203c:	f009 fa38 	bl	800b4b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800204a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800205c:	e031      	b.n	80020c2 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_I2C_MspInit+0xf8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12c      	bne.n	80020c2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002084:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208a:	2312      	movs	r3, #18
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002096:	2304      	movs	r3, #4
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <HAL_I2C_MspInit+0xf4>)
 80020a2:	f009 fa05 	bl	800b4b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
}
 80020c2:	bf00      	nop
 80020c4:	3730      	adds	r7, #48	; 0x30
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40005400 	.word	0x40005400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40005800 	.word	0x40005800

080020dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e0:	f007 ff88 	bl	8009ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f868 	bl	80021b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f7ff fe7c 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ec:	f7ff fda6 	bl	8001c3c <MX_DMA_Init>
  MX_ADC1_Init();
 80020f0:	f7fe ff48 	bl	8000f84 <MX_ADC1_Init>
  MX_I2C1_Init();
 80020f4:	f7ff ff16 	bl	8001f24 <MX_I2C1_Init>
  MX_I2C2_Init();
 80020f8:	f7ff ff44 	bl	8001f84 <MX_I2C2_Init>
  MX_TIM1_Init();
 80020fc:	f004 f964 	bl	80063c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002100:	f004 fa1a 	bl	8006538 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002104:	f004 fa6c 	bl	80065e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002108:	f004 fae4 	bl	80066d4 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800210c:	f007 fece 	bl	8009eac <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8002110:	f007 fe5a 	bl	8009dc8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002114:	f004 fb32 	bl	800677c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  EEP_Init(&hi2c2);
 8002118:	481e      	ldr	r0, [pc, #120]	; (8002194 <main+0xb8>)
 800211a:	f7ff fdaf 	bl	8001c7c <EEP_Init>
  SEN_Init(&hadc1);
 800211e:	481e      	ldr	r0, [pc, #120]	; (8002198 <main+0xbc>)
 8002120:	f002 ffd4 	bl	80050cc <SEN_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002124:	213c      	movs	r1, #60	; 0x3c
 8002126:	481d      	ldr	r0, [pc, #116]	; (800219c <main+0xc0>)
 8002128:	f00b fb80 	bl	800d82c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800212c:	213c      	movs	r1, #60	; 0x3c
 800212e:	481c      	ldr	r0, [pc, #112]	; (80021a0 <main+0xc4>)
 8002130:	f00b fb7c 	bl	800d82c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002134:	2100      	movs	r1, #0
 8002136:	481b      	ldr	r0, [pc, #108]	; (80021a4 <main+0xc8>)
 8002138:	f00b fa0a 	bl	800d550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800213c:	2104      	movs	r1, #4
 800213e:	4819      	ldr	r0, [pc, #100]	; (80021a4 <main+0xc8>)
 8002140:	f00b fa06 	bl	800d550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002144:	2108      	movs	r1, #8
 8002146:	4817      	ldr	r0, [pc, #92]	; (80021a4 <main+0xc8>)
 8002148:	f00b fa02 	bl	800d550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800214c:	210c      	movs	r1, #12
 800214e:	4815      	ldr	r0, [pc, #84]	; (80021a4 <main+0xc8>)
 8002150:	f00b f9fe 	bl	800d550 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 8002154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002158:	f007 ffbe 	bl	800a0d8 <HAL_Delay>
  Run_Init();
 800215c:	f001 ff92 	bl	8004084 <Run_Init>
  OLED_Init(&hi2c1);
 8002160:	4811      	ldr	r0, [pc, #68]	; (80021a8 <main+0xcc>)
 8002162:	f000 fb65 	bl	8002830 <OLED_Init>
  DISP_Test();
 8002166:	f7ff fccd 	bl	8001b04 <DISP_Test>
  HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <main+0xd0>)
 8002172:	f009 fb51 	bl	800b818 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800217c:	480c      	ldr	r0, [pc, #48]	; (80021b0 <main+0xd4>)
 800217e:	f009 fb4b 	bl	800b818 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <main+0xd8>)
 8002184:	f00b f924 	bl	800d3d0 <HAL_TIM_Base_Start_IT>
  UI_Init();
 8002188:	f007 fd92 	bl	8009cb0 <UI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//	  OLED_Test();
	  UI_Main();
 800218c:	f007 fd9e 	bl	8009ccc <UI_Main>
 8002190:	e7fc      	b.n	800218c <main+0xb0>
 8002192:	bf00      	nop
 8002194:	20000a20 	.word	0x20000a20
 8002198:	20000518 	.word	0x20000518
 800219c:	20000fb4 	.word	0x20000fb4
 80021a0:	20001044 	.word	0x20001044
 80021a4:	20000ffc 	.word	0x20000ffc
 80021a8:	200009cc 	.word	0x200009cc
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40020400 	.word	0x40020400
 80021b4:	2000108c 	.word	0x2000108c

080021b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b094      	sub	sp, #80	; 0x50
 80021bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021be:	f107 0320 	add.w	r3, r7, #32
 80021c2:	2230      	movs	r2, #48	; 0x30
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00d fe63 	bl	800fe92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <SystemClock_Config+0xcc>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <SystemClock_Config+0xcc>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	; 0x40
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <SystemClock_Config+0xcc>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <SystemClock_Config+0xd0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a21      	ldr	r2, [pc, #132]	; (8002288 <SystemClock_Config+0xd0>)
 8002202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <SystemClock_Config+0xd0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002214:	2301      	movs	r3, #1
 8002216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221e:	2302      	movs	r3, #2
 8002220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002228:	2308      	movs	r3, #8
 800222a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800222c:	23a8      	movs	r3, #168	; 0xa8
 800222e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002230:	2302      	movs	r3, #2
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002234:	2307      	movs	r3, #7
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f00a fbe1 	bl	800ca04 <HAL_RCC_OscConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002248:	f000 f871 	bl	800232e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224c:	230f      	movs	r3, #15
 800224e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800225e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2105      	movs	r1, #5
 800226a:	4618      	mov	r0, r3
 800226c:	f00a fe42 	bl	800cef4 <HAL_RCC_ClockConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002276:	f000 f85a 	bl	800232e <Error_Handler>
  }
}
 800227a:	bf00      	nop
 800227c:	3750      	adds	r7, #80	; 0x50
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000

0800228c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

float coy = 50;;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d12d      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x6e>
		//1ms
		static int counter = 0;
		counter++;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a18      	ldr	r2, [pc, #96]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a6:	6013      	str	r3, [r2, #0]
//			HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
//		kp = plan.kpid[0];
//		ki = plan.kpid[1];
//		kd = plan.kpid[2];
//		Run_LineTracing(coy, 0.001, 0);
		Run_MotorRoutine(0.001);
 80022a8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800230c <HAL_TIM_PeriodElapsedCallback+0x80>
 80022ac:	f001 ff56 	bl	800415c <Run_MotorRoutine>
		if(counter >= 10) {
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	dd09      	ble.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x40>
			main_flag |= MAIN_FLAG_DISP;
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022c4:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
		}
		Plan_Main(0.001);
 80022cc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800230c <HAL_TIM_PeriodElapsedCallback+0x80>
 80022d0:	f001 fc5e 	bl	8003b90 <Plan_Main>
		Run_MotorRoutine2(0.001);
 80022d4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800230c <HAL_TIM_PeriodElapsedCallback+0x80>
 80022d8:	f001 ffa4 	bl	8004224 <Run_MotorRoutine2>
//			// 10ms
//			Run_MotorRoutine(0.01);
//			counter = 0;
//		}
		if((sensor_flag & 2) != 2) {
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x6e>
			SEN_StartReadSensor();
 80022e8:	f002 ff80 	bl	80051ec <SEN_StartReadSensor>
			sensor_flag |= 2;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022f8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40001000 	.word	0x40001000
 8002308:	20000a78 	.word	0x20000a78
 800230c:	3a83126f 	.word	0x3a83126f
 8002310:	20000a74 	.word	0x20000a74
 8002314:	20000c2d 	.word	0x20000c2d

08002318 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	SEN_CallbackRoutine(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f002 ff73 	bl	800520c <SEN_CallbackRoutine>
//	HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_RESET);
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002332:	b672      	cpsid	i
}
 8002334:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002336:	e7fe      	b.n	8002336 <Error_Handler+0x8>

08002338 <Motor_SetPWM>:

//void Motor_SetAccl(Motor_typedef* hmot, float value) {
//	hmot->acc = value;
//}

void Motor_SetPWM(Motor_typedef* hmot, float value) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	ed87 0a00 	vstr	s0, [r7]
	if(value > 99) value = 99;
 8002344:	edd7 7a00 	vldr	s15, [r7]
 8002348:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002384 <Motor_SetPWM+0x4c>
 800234c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	dd02      	ble.n	800235c <Motor_SetPWM+0x24>
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <Motor_SetPWM+0x50>)
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	e00a      	b.n	8002372 <Motor_SetPWM+0x3a>
	else if(value < -99) value = -99;
 800235c:	edd7 7a00 	vldr	s15, [r7]
 8002360:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800238c <Motor_SetPWM+0x54>
 8002364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	d501      	bpl.n	8002372 <Motor_SetPWM+0x3a>
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <Motor_SetPWM+0x58>)
 8002370:	603b      	str	r3, [r7, #0]
	hmot->pwm = value;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	621a      	str	r2, [r3, #32]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	42c60000 	.word	0x42c60000
 8002388:	42c60000 	.word	0x42c60000
 800238c:	c2c60000 	.word	0xc2c60000
 8002390:	c2c60000 	.word	0xc2c60000

08002394 <Motor_SetVel>:

void Motor_SetVel(Motor_typedef* hmot, float value) {
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	ed87 0a00 	vstr	s0, [r7]
	value *= hmot->vel_factor;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80023a6:	ed97 7a00 	vldr	s14, [r7]
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	edc7 7a00 	vstr	s15, [r7]
	hmot->vel_sp = value;
 80023b2:	edd7 7a00 	vldr	s15, [r7]
 80023b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ba:	ee17 3a90 	vmov	r3, s15
 80023be:	b21a      	sxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <Motor_SetPoint>:
		Motor_SetVel(hmot, value);
		break;
	}
}

void Motor_SetPoint(Motor_typedef* hmot, float value) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	ed87 0a00 	vstr	s0, [r7]
	switch(hmot->mode) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <Motor_SetPoint+0x1a>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d006      	beq.n	80023f6 <Motor_SetPoint+0x26>
		break;
	case MOTOR_MODE_CLOSE:
		Motor_SetVel(hmot, value);
		break;
	}
}
 80023e8:	e00b      	b.n	8002402 <Motor_SetPoint+0x32>
		Motor_SetPWM(hmot, value);
 80023ea:	ed97 0a00 	vldr	s0, [r7]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <Motor_SetPWM>
		break;
 80023f4:	e005      	b.n	8002402 <Motor_SetPoint+0x32>
		Motor_SetVel(hmot, value);
 80023f6:	ed97 0a00 	vldr	s0, [r7]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffca 	bl	8002394 <Motor_SetVel>
		break;
 8002400:	bf00      	nop
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <Motor_GetPoint>:

float Motor_GetPoint(Motor_typedef* hmot) {
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	switch(hmot->mode) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10c      	bne.n	8002434 <Motor_GetPoint+0x2a>
	case MOTOR_MODE_CLOSE:
		return (hmot->vel_sp/hmot->vel_factor);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800242e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002432:	e002      	b.n	800243a <Motor_GetPoint+0x30>
		break;
	case MOTOR_MODE_OPEN:
	default:
		return hmot->pwm;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	edd3 7a08 	vldr	s15, [r3, #32]
		break;
	}
}
 800243a:	eeb0 0a67 	vmov.f32	s0, s15
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <Motor_ApplyPWM>:

void Motor_ApplyPWM(Motor_typedef* hmot) {
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
//	range /= hmot->acc;
//
//	if(hmot->acc_last_val < hmot->pwm) hmot->acc_last_val = hmot->pwm + range;
//	else if(hmot->acc_last_val > hmot->pwm) hmot->acc_last_val = hmot->pwm - range;

	int16_t tim_period = (hmot->pwm * hmot->pwm_factor) * hmot->pwm_htim->Init.Period;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	ed93 7a08 	vldr	s14, [r3, #32]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800245c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	ee17 3a90 	vmov	r3, s15
 800247a:	81fb      	strh	r3, [r7, #14]
	uint8_t pwm_sign = tim_period < 0;
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	0bdb      	lsrs	r3, r3, #15
 8002480:	b2db      	uxtb	r3, r3
 8002482:	737b      	strb	r3, [r7, #13]
//	uint8_t dir_sign = hmot->dir < 0;

	if(pwm_sign) tim_period*=-1;
 8002484:	7b7b      	ldrb	r3, [r7, #13]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <Motor_ApplyPWM+0x4a>
 800248a:	89fb      	ldrh	r3, [r7, #14]
 800248c:	425b      	negs	r3, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	81fb      	strh	r3, [r7, #14]
	if(tim_period > hmot->pwm_htim->Init.Period) {
 8002492:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d903      	bls.n	80024a8 <Motor_ApplyPWM+0x60>
		tim_period = (hmot->pwm_htim->Init.Period);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	81fb      	strh	r3, [r7, #14]
	}

	if(pwm_sign) {
 80024a8:	7b7b      	ldrb	r3, [r7, #13]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d04a      	beq.n	8002544 <Motor_ApplyPWM+0xfc>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, 0);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	891b      	ldrh	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d105      	bne.n	80024c2 <Motor_ApplyPWM+0x7a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
 80024c0:	e018      	b.n	80024f4 <Motor_ApplyPWM+0xac>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	891b      	ldrh	r3, [r3, #8]
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d105      	bne.n	80024d6 <Motor_ApplyPWM+0x8e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2300      	movs	r3, #0
 80024d2:	6393      	str	r3, [r2, #56]	; 0x38
 80024d4:	e00e      	b.n	80024f4 <Motor_ApplyPWM+0xac>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	891b      	ldrh	r3, [r3, #8]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d105      	bne.n	80024ea <Motor_ApplyPWM+0xa2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024e8:	e004      	b.n	80024f4 <Motor_ApplyPWM+0xac>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2300      	movs	r3, #0
 80024f2:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	895b      	ldrh	r3, [r3, #10]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <Motor_ApplyPWM+0xc2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002506:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
	}
}
 8002508:	e067      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	895b      	ldrh	r3, [r3, #10]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d106      	bne.n	8002520 <Motor_ApplyPWM+0xd8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251c:	6393      	str	r3, [r2, #56]	; 0x38
 800251e:	e05c      	b.n	80025da <Motor_ApplyPWM+0x192>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	895b      	ldrh	r3, [r3, #10]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d106      	bne.n	8002536 <Motor_ApplyPWM+0xee>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002532:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002534:	e051      	b.n	80025da <Motor_ApplyPWM+0x192>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002542:	e04a      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	891b      	ldrh	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <Motor_ApplyPWM+0x112>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002556:	635a      	str	r2, [r3, #52]	; 0x34
 8002558:	e01b      	b.n	8002592 <Motor_ApplyPWM+0x14a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	891b      	ldrh	r3, [r3, #8]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d106      	bne.n	8002570 <Motor_ApplyPWM+0x128>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800256c:	6393      	str	r3, [r2, #56]	; 0x38
 800256e:	e010      	b.n	8002592 <Motor_ApplyPWM+0x14a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	891b      	ldrh	r3, [r3, #8]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d106      	bne.n	8002586 <Motor_ApplyPWM+0x13e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002582:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002584:	e005      	b.n	8002592 <Motor_ApplyPWM+0x14a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	895b      	ldrh	r3, [r3, #10]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <Motor_ApplyPWM+0x15e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025a4:	e019      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	895b      	ldrh	r3, [r3, #10]
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d105      	bne.n	80025ba <Motor_ApplyPWM+0x172>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025b8:	e00f      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	895b      	ldrh	r3, [r3, #10]
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d105      	bne.n	80025ce <Motor_ApplyPWM+0x186>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2300      	movs	r3, #0
 80025ca:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80025cc:	e005      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80025d8:	e7ff      	b.n	80025da <Motor_ApplyPWM+0x192>
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <Motor_EnocderRoutine>:

void Motor_EnocderRoutine(Motor_typedef* hmot, float period) {
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	ed87 0a00 	vstr	s0, [r7]
	int16_t tim_cnt_now = (int16_t)__HAL_TIM_GET_COUNTER(hmot->enc_htim) * hmot->dir;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002602:	b29b      	uxth	r3, r3
 8002604:	fb12 f303 	smulbb	r3, r2, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	81fb      	strh	r3, [r7, #14]
	hmot->enc_vel =  (int16_t)(tim_cnt_now - hmot->enc_last_cnt);
 800260c:	89fa      	ldrh	r2, [r7, #14]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002614:	b29b      	uxth	r3, r3
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	b29b      	uxth	r3, r3
 800261a:	b21b      	sxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	61da      	str	r2, [r3, #28]
	hmot->enc_last_cnt = tim_cnt_now;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	89fa      	ldrh	r2, [r7, #14]
 8002626:	829a      	strh	r2, [r3, #20]
	hmot->enc_cnt += hmot->enc_vel;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <Motor_ControlRoutine>:

void Motor_ControlRoutine(Motor_typedef* hmot, float __period) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	ed87 0a00 	vstr	s0, [r7]
	float error, mv;
	switch(hmot->mode) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d047      	beq.n	80026e8 <Motor_ControlRoutine+0xa4>
 8002658:	2b01      	cmp	r3, #1
 800265a:	d148      	bne.n	80026ee <Motor_ControlRoutine+0xaa>
	case MOTOR_MODE_CLOSE:
		error = hmot->vel_sp - hmot->enc_vel;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002662:	461a      	mov	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	edc7 7a03 	vstr	s15, [r7, #12]
//		if(hmot->vel_sp == 0) hmot->sum_error=0;
//		if((hmot->vel_sp > 0 && hmot->pwm < 0)||(hmot->vel_sp < 0 && hmot->pwm > 0)) hmot->sum_error=0;
		mv = (hmot->kp * error) + (hmot->ki*hmot->sum_error*__period);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800267c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002690:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002694:	edd7 7a00 	vldr	s15, [r7]
 8002698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a0:	edc7 7a02 	vstr	s15, [r7, #8]
		if(mv>90 || mv<-90) {
 80026a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026a8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80026f8 <Motor_ControlRoutine+0xb4>
 80026ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	dc12      	bgt.n	80026dc <Motor_ControlRoutine+0x98>
 80026b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80026fc <Motor_ControlRoutine+0xb8>
 80026be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	d409      	bmi.n	80026dc <Motor_ControlRoutine+0x98>
//			hmot->sum_error*=0.9;
		}
		else {
			hmot->sum_error += error;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80026ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
		hmot->pwm = mv;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	621a      	str	r2, [r3, #32]
		hmot->last_error = error;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38

//		hmot->filter = hmot->filter*(1-hmot->filter_alpha) + hmot->pwm*hmot->filter_alpha;
//		hmot->pwm = hmot->filter;

	case MOTOR_MODE_OPEN:
		Motor_ApplyPWM(hmot);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fead 	bl	8002448 <Motor_ApplyPWM>
	}
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	42b40000 	.word	0x42b40000
 80026fc:	c2b40000 	.word	0xc2b40000

08002700 <OLED_Command>:
#include "oled.h"

I2C_HandleTypeDef* oled_hi2c;

void OLED_Command(uint8_t byte)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af04      	add	r7, sp, #16
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x00, 1, &byte, 1, 10);
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <OLED_Command+0x2c>)
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	230a      	movs	r3, #10
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	2301      	movs	r3, #1
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	1dfb      	adds	r3, r7, #7
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2301      	movs	r3, #1
 800271c:	2200      	movs	r2, #0
 800271e:	2178      	movs	r1, #120	; 0x78
 8002720:	f009 f9d8 	bl	800bad4 <HAL_I2C_Mem_Write>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000a7c 	.word	0x20000a7c

08002730 <OLED_DoubleCommand>:

void OLED_DoubleCommand(uint8_t byte1, uint8_t byte2)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	460a      	mov	r2, r1
 800273a:	71fb      	strb	r3, [r7, #7]
 800273c:	4613      	mov	r3, r2
 800273e:	71bb      	strb	r3, [r7, #6]
	OLED_Command(byte1);
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ffdc 	bl	8002700 <OLED_Command>
	OLED_Command(byte2);
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ffd8 	bl	8002700 <OLED_Command>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <OLED_Data>:

void OLED_Data(uint8_t byte)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af04      	add	r7, sp, #16
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x40, 1, &byte, 1, 10);
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <OLED_Data+0x2c>)
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	230a      	movs	r3, #10
 8002768:	9302      	str	r3, [sp, #8]
 800276a:	2301      	movs	r3, #1
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2301      	movs	r3, #1
 8002774:	2240      	movs	r2, #64	; 0x40
 8002776:	2178      	movs	r1, #120	; 0x78
 8002778:	f009 f9ac 	bl	800bad4 <HAL_I2C_Mem_Write>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000a7c 	.word	0x20000a7c

08002788 <OLED_SetPageAddr>:

void OLED_Inverse(uint8_t mode) {
	OLED_Command(0xA6 + (mode>=1));
}

void OLED_SetPageAddr(uint8_t addr) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
	OLED_Command(OLED_PAGE_ADDR | (addr & 0x07));
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	b25b      	sxtb	r3, r3
 800279c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ffab 	bl	8002700 <OLED_Command>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <OLED_SetColumn>:

void OLED_SetColumn(uint8_t col) {
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
	col += OLED_X_OFFSET;
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	3302      	adds	r3, #2
 80027c0:	71fb      	strb	r3, [r7, #7]
	OLED_DoubleCommand(0x00 | (col & 0x0F), 0x10 | (col >> 4));
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0310 	orr.w	r3, r3, #16
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7ff ffa9 	bl	8002730 <OLED_DoubleCommand>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <OLED_ClearRAM>:
			HAL_Delay(10);
		}
	}
}

void OLED_ClearRAM() {
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
	for(int j=0; j<8; j++) {
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	e016      	b.n	8002820 <OLED_ClearRAM+0x3a>
		OLED_SetPageAddr(j);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ffc6 	bl	8002788 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7ff ffd8 	bl	80027b2 <OLED_SetColumn>
			for(int i=0; i<OLED_WIDTH; i++) {
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	e005      	b.n	8002814 <OLED_ClearRAM+0x2e>
				OLED_Data(0x00);
 8002808:	2000      	movs	r0, #0
 800280a:	f7ff ffa5 	bl	8002758 <OLED_Data>
			for(int i=0; i<OLED_WIDTH; i++) {
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b7f      	cmp	r3, #127	; 0x7f
 8002818:	ddf6      	ble.n	8002808 <OLED_ClearRAM+0x22>
	for(int j=0; j<8; j++) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3301      	adds	r3, #1
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b07      	cmp	r3, #7
 8002824:	dde5      	ble.n	80027f2 <OLED_ClearRAM+0xc>
			}
		}
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <OLED_Init>:
//		OLED_MultipleData(&ed, 130);
//	}
//}

void OLED_Init(I2C_HandleTypeDef* hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	oled_hi2c = hi2c;
 8002838:	4a18      	ldr	r2, [pc, #96]	; (800289c <OLED_Init+0x6c>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]

	OLED_Command(OLED_DISP_OFF);
 800283e:	20ae      	movs	r0, #174	; 0xae
 8002840:	f7ff ff5e 	bl	8002700 <OLED_Command>
	OLED_DoubleCommand(OLED_MUX, 0x3F);
 8002844:	213f      	movs	r1, #63	; 0x3f
 8002846:	20a8      	movs	r0, #168	; 0xa8
 8002848:	f7ff ff72 	bl	8002730 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_OFFSET, 0x00);
 800284c:	2100      	movs	r1, #0
 800284e:	20d3      	movs	r0, #211	; 0xd3
 8002850:	f7ff ff6e 	bl	8002730 <OLED_DoubleCommand>
	OLED_Command(OLED_START_LINE);
 8002854:	2040      	movs	r0, #64	; 0x40
 8002856:	f7ff ff53 	bl	8002700 <OLED_Command>
	OLED_Command(OLED_SEG_RMAP | 0x01);
 800285a:	20a1      	movs	r0, #161	; 0xa1
 800285c:	f7ff ff50 	bl	8002700 <OLED_Command>
	OLED_Command(OLED_SCAN_DIR | 0x08);
 8002860:	20c8      	movs	r0, #200	; 0xc8
 8002862:	f7ff ff4d 	bl	8002700 <OLED_Command>
	OLED_DoubleCommand(OLED_COM_PADS,OLED_COM_PADS_MODE|0x10);
 8002866:	2112      	movs	r1, #18
 8002868:	20da      	movs	r0, #218	; 0xda
 800286a:	f7ff ff61 	bl	8002730 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_CONTRAST, 0x60);
 800286e:	2160      	movs	r1, #96	; 0x60
 8002870:	2081      	movs	r0, #129	; 0x81
 8002872:	f7ff ff5d 	bl	8002730 <OLED_DoubleCommand>
	OLED_Command(OLED_FORCE_ON);
 8002876:	20a4      	movs	r0, #164	; 0xa4
 8002878:	f7ff ff42 	bl	8002700 <OLED_Command>
	OLED_Command(OLED_DISP_RV | 0x00);
 800287c:	20a6      	movs	r0, #166	; 0xa6
 800287e:	f7ff ff3f 	bl	8002700 <OLED_Command>
	OLED_DoubleCommand(OLED_CLK_OSC, 0xF0);
 8002882:	21f0      	movs	r1, #240	; 0xf0
 8002884:	20d5      	movs	r0, #213	; 0xd5
 8002886:	f7ff ff53 	bl	8002730 <OLED_DoubleCommand>
//	OLED_Command(OLED_VPP_8V0);
	OLED_ClearRAM();
 800288a:	f7ff ffac 	bl	80027e6 <OLED_ClearRAM>
	OLED_Command(OLED_DISP_ON);
 800288e:	20af      	movs	r0, #175	; 0xaf
 8002890:	f7ff ff36 	bl	8002700 <OLED_Command>
//	OLED_Load();
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000a7c 	.word	0x20000a7c

080028a0 <Plan_SetCounter>:
float speed_ramp;
int speed_ramp_status = 0;

int pid_index_status = 0;

void Plan_SetCounter() {
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
	plan_last_counter = plan_counter;
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <Plan_SetCounter+0x18>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <Plan_SetCounter+0x1c>)
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000a80 	.word	0x20000a80
 80028bc:	20000a84 	.word	0x20000a84

080028c0 <Plan_CheckCounterValue>:

uint8_t Plan_CheckCounterValue(uint32_t value) {
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	return (plan_counter - plan_last_counter) >= value*DELAY_FACTOR;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <Plan_CheckCounterValue+0x34>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <Plan_CheckCounterValue+0x38>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	1ad1      	subs	r1, r2, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4299      	cmp	r1, r3
 80028de:	bf2c      	ite	cs
 80028e0:	2301      	movcs	r3, #1
 80028e2:	2300      	movcc	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000a80 	.word	0x20000a80
 80028f8:	20000a84 	.word	0x20000a84

080028fc <Plan_SetCounter2>:

uint32_t Plan_CounterValue() {
	return (plan_counter - plan_last_counter);
}

void Plan_SetCounter2() {
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
	plan_last_counter2 = plan_counter2;
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <Plan_SetCounter2+0x18>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <Plan_SetCounter2+0x1c>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000a8c 	.word	0x20000a8c
 8002918:	20000a90 	.word	0x20000a90

0800291c <Plan_CheckCounterValue2>:

uint8_t Plan_CheckCounterValue2(uint32_t value) {
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	return (plan_counter2 - plan_last_counter2) >= value*DELAY_FACTOR;
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <Plan_CheckCounterValue2+0x34>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <Plan_CheckCounterValue2+0x38>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1ad1      	subs	r1, r2, r3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4299      	cmp	r1, r3
 800293a:	bf2c      	ite	cs
 800293c:	2301      	movcs	r3, #1
 800293e:	2300      	movcc	r3, #0
 8002940:	b2db      	uxtb	r3, r3
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000a8c 	.word	0x20000a8c
 8002954:	20000a90 	.word	0x20000a90

08002958 <Plan_CheckSensor>:
PlanCounter_t duration_counter;


/**************************************CHECK SENSOR****************************************/

uint8_t Plan_CheckSensor(uint8_t s, uint8_t align) {
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	460a      	mov	r2, r1
 8002962:	71fb      	strb	r3, [r7, #7]
 8002964:	4613      	mov	r3, r2
 8002966:	71bb      	strb	r3, [r7, #6]
	if(s == 0) return 1;
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <Plan_CheckSensor+0x1a>
 800296e:	2301      	movs	r3, #1
 8002970:	e02c      	b.n	80029cc <Plan_CheckSensor+0x74>
	else {
		s-=1;
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	3b01      	subs	r3, #1
 8002976:	71fb      	strb	r3, [r7, #7]
		switch(align) {
 8002978:	79bb      	ldrb	r3, [r7, #6]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <Plan_CheckSensor+0x2c>
 800297e:	2b02      	cmp	r3, #2
 8002980:	d009      	beq.n	8002996 <Plan_CheckSensor+0x3e>
 8002982:	e019      	b.n	80029b8 <Plan_CheckSensor+0x60>
		case RIGHT_ALIGN_SEN:
			return sensor_disp_status[RIGHT_SENSOR(s)] > 0;
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <Plan_CheckSensor+0x80>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf14      	ite	ne
 800298e:	2301      	movne	r3, #1
 8002990:	2300      	moveq	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e01a      	b.n	80029cc <Plan_CheckSensor+0x74>
		case LR_ALIGN_SEN:
			return (sensor_disp_status[RIGHT_SENSOR(s)] > 0) || (sensor_disp_status[LEFT_SENSOR(s)] > 0);
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <Plan_CheckSensor+0x80>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d106      	bne.n	80029ae <Plan_CheckSensor+0x56>
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	f1c3 030d 	rsb	r3, r3, #13
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <Plan_CheckSensor+0x80>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <Plan_CheckSensor+0x5a>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <Plan_CheckSensor+0x5c>
 80029b2:	2300      	movs	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e009      	b.n	80029cc <Plan_CheckSensor+0x74>
		case LEFT_ALIGN_SEN:
		default:
			return sensor_disp_status[LEFT_SENSOR(s)] > 0;
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f1c3 030d 	rsb	r3, r3, #13
 80029be:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <Plan_CheckSensor+0x80>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
		}
	}
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20000bc4 	.word	0x20000bc4
 80029dc:	00000000 	.word	0x00000000

080029e0 <Plan_Left>:
	case ACTION_STATUS_EXECUTE_1 :

	}
}

uint8_t Plan_Left(Action_typedef a) {
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	463c      	mov	r4, r7
 80029e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 0) {
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ffb1 	bl	8002958 <Plan_CheckSensor>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <Plan_Left+0x3e>
 80029fc:	4b7e      	ldr	r3, [pc, #504]	; (8002bf8 <Plan_Left+0x218>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10c      	bne.n	8002a1e <Plan_Left+0x3e>
			Plan_SetCounter();
 8002a04:	f7ff ff4c 	bl	80028a0 <Plan_SetCounter>
			plan_last_enc = MOTOR_R.enc_cnt;
 8002a08:	4b7c      	ldr	r3, [pc, #496]	; (8002bfc <Plan_Left+0x21c>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a7c      	ldr	r2, [pc, #496]	; (8002c00 <Plan_Left+0x220>)
 8002a0e:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 8002a10:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <Plan_Left+0x218>)
 8002a12:	2208      	movs	r2, #8
 8002a14:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002a16:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a1a:	f002 fb29 	bl	8005070 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002a1e:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <Plan_Left+0x218>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d111      	bne.n	8002a4a <Plan_Left+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002a26:	793b      	ldrb	r3, [r7, #4]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	bf28      	it	cs
 8002a2c:	2303      	movcs	r3, #3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff45 	bl	80028c0 <Plan_CheckCounterValue>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <Plan_Left+0x66>
			Plan_SetCounter();
 8002a3c:	f7ff ff30 	bl	80028a0 <Plan_SetCounter>
			counter_status = 1;
 8002a40:	4b6d      	ldr	r3, [pc, #436]	; (8002bf8 <Plan_Left+0x218>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0ca      	b.n	8002be0 <Plan_Left+0x200>
	}
	else if(counter_status == 1) {
 8002a4a:	4b6b      	ldr	r3, [pc, #428]	; (8002bf8 <Plan_Left+0x218>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10d      	bne.n	8002a6e <Plan_Left+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 8002a52:	793b      	ldrb	r3, [r7, #4]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff33 	bl	80028c0 <Plan_CheckCounterValue>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <Plan_Left+0x8a>
			Plan_SetCounter();
 8002a60:	f7ff ff1e 	bl	80028a0 <Plan_SetCounter>
			counter_status = 2;
 8002a64:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <Plan_Left+0x218>)
 8002a66:	2202      	movs	r2, #2
 8002a68:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0b8      	b.n	8002be0 <Plan_Left+0x200>
	}
	else if(counter_status == 2) {
 8002a6e:	4b62      	ldr	r3, [pc, #392]	; (8002bf8 <Plan_Left+0x218>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	f040 80b3 	bne.w	8002bde <Plan_Left+0x1fe>
		if(autoturn_stat == 0) {
 8002a78:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <Plan_Left+0x224>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d134      	bne.n	8002aea <Plan_Left+0x10a>
			Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002a80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b60      	ldr	r3, [pc, #384]	; (8002c08 <Plan_Left+0x228>)
 8002a88:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fd47 	bl	8000524 <__aeabi_i2d>
 8002a96:	a354      	add	r3, pc, #336	; (adr r3, 8002be8 <Plan_Left+0x208>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fd fdac 	bl	80005f8 <__aeabi_dmul>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fe f89e 	bl	8000be8 <__aeabi_d2f>
 8002aac:	4604      	mov	r4, r0
 8002aae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <Plan_Left+0x228>)
 8002ab6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fd30 	bl	8000524 <__aeabi_i2d>
 8002ac4:	a348      	add	r3, pc, #288	; (adr r3, 8002be8 <Plan_Left+0x208>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd fd95 	bl	80005f8 <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fe f887 	bl	8000be8 <__aeabi_d2f>
 8002ada:	4603      	mov	r3, r0
 8002adc:	ee00 3a90 	vmov	s1, r3
 8002ae0:	ee00 4a10 	vmov	s0, r4
 8002ae4:	f002 fa9a 	bl	800501c <Run_SetMotorSpeed>
 8002ae8:	e033      	b.n	8002b52 <Plan_Left+0x172>
		}
		else {
			Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.05, a.forward_speed*plan.turn_speed*0.05);
 8002aea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b45      	ldr	r3, [pc, #276]	; (8002c08 <Plan_Left+0x228>)
 8002af2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fd12 	bl	8000524 <__aeabi_i2d>
 8002b00:	a33b      	add	r3, pc, #236	; (adr r3, 8002bf0 <Plan_Left+0x210>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fd77 	bl	80005f8 <__aeabi_dmul>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7fe f869 	bl	8000be8 <__aeabi_d2f>
 8002b16:	4604      	mov	r4, r0
 8002b18:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <Plan_Left+0x228>)
 8002b20:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fcfb 	bl	8000524 <__aeabi_i2d>
 8002b2e:	a330      	add	r3, pc, #192	; (adr r3, 8002bf0 <Plan_Left+0x210>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd fd60 	bl	80005f8 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fe f852 	bl	8000be8 <__aeabi_d2f>
 8002b44:	4603      	mov	r3, r0
 8002b46:	ee00 3a90 	vmov	s1, r3
 8002b4a:	ee00 4a10 	vmov	s0, r4
 8002b4e:	f002 fa65 	bl	800501c <Run_SetMotorSpeed>
		}
		switch(a.act_mode) {
 8002b52:	78bb      	ldrb	r3, [r7, #2]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d02c      	beq.n	8002bb2 <Plan_Left+0x1d2>
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	dc3e      	bgt.n	8002bda <Plan_Left+0x1fa>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <Plan_Left+0x186>
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d009      	beq.n	8002b78 <Plan_Left+0x198>
 8002b64:	e039      	b.n	8002bda <Plan_Left+0x1fa>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fea9 	bl	80028c0 <Plan_CheckCounterValue>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d02d      	beq.n	8002bd0 <Plan_Left+0x1f0>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e033      	b.n	8002be0 <Plan_Left+0x200>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value)) {
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fea0 	bl	80028c0 <Plan_CheckCounterValue>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d026      	beq.n	8002bd4 <Plan_Left+0x1f4>
				if(Plan_CheckSensor(3, LEFT_ALIGN_SEN)) {autoturn_stat = 1;}
 8002b86:	2100      	movs	r1, #0
 8002b88:	2003      	movs	r0, #3
 8002b8a:	f7ff fee5 	bl	8002958 <Plan_CheckSensor>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <Plan_Left+0x1ba>
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <Plan_Left+0x224>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
				if(Plan_CheckSensor(5, LEFT_ALIGN_SEN)) {autoturn_stat = 0; return 2;}
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	2005      	movs	r0, #5
 8002b9e:	f7ff fedb 	bl	8002958 <Plan_CheckSensor>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <Plan_Left+0x1f4>
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <Plan_Left+0x224>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e016      	b.n	8002be0 <Plan_Left+0x200>
			}
			break;
		case 2:
			if(MOTOR_R.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <Plan_Left+0x21c>)
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <Plan_Left+0x220>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1ad2      	subs	r2, r2, r3
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dd05      	ble.n	8002bd8 <Plan_Left+0x1f8>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e007      	b.n	8002be0 <Plan_Left+0x200>
			break;
 8002bd0:	bf00      	nop
 8002bd2:	e002      	b.n	8002bda <Plan_Left+0x1fa>
			break;
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <Plan_Left+0x1fa>
			break;
 8002bd8:	bf00      	nop
		}
		return 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <Plan_Left+0x200>
	}
	return 0;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	9999999a 	.word	0x9999999a
 8002bec:	3fb99999 	.word	0x3fb99999
 8002bf0:	9999999a 	.word	0x9999999a
 8002bf4:	3fa99999 	.word	0x3fa99999
 8002bf8:	20000a94 	.word	0x20000a94
 8002bfc:	20000ab0 	.word	0x20000ab0
 8002c00:	20000a88 	.word	0x20000a88
 8002c04:	20000a96 	.word	0x20000a96
 8002c08:	20000f2c 	.word	0x20000f2c
 8002c0c:	00000000 	.word	0x00000000

08002c10 <Plan_Right>:

uint8_t Plan_Right(Action_typedef a) {
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	463c      	mov	r4, r7
 8002c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 0) {
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fe99 	bl	8002958 <Plan_CheckSensor>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <Plan_Right+0x3e>
 8002c2c:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <Plan_Right+0x218>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10c      	bne.n	8002c4e <Plan_Right+0x3e>
			Plan_SetCounter();
 8002c34:	f7ff fe34 	bl	80028a0 <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002c38:	4b7c      	ldr	r3, [pc, #496]	; (8002e2c <Plan_Right+0x21c>)
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3c:	4a7c      	ldr	r2, [pc, #496]	; (8002e30 <Plan_Right+0x220>)
 8002c3e:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 8002c40:	4b79      	ldr	r3, [pc, #484]	; (8002e28 <Plan_Right+0x218>)
 8002c42:	2208      	movs	r2, #8
 8002c44:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002c46:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002c4a:	f002 fa11 	bl	8005070 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <Plan_Right+0x218>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d111      	bne.n	8002c7a <Plan_Right+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002c56:	793b      	ldrb	r3, [r7, #4]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	bf28      	it	cs
 8002c5c:	2303      	movcs	r3, #3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fe2d 	bl	80028c0 <Plan_CheckCounterValue>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <Plan_Right+0x66>
			Plan_SetCounter();
 8002c6c:	f7ff fe18 	bl	80028a0 <Plan_SetCounter>
			counter_status = 1;
 8002c70:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <Plan_Right+0x218>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0ca      	b.n	8002e10 <Plan_Right+0x200>
	}
	else if(counter_status == 1) {
 8002c7a:	4b6b      	ldr	r3, [pc, #428]	; (8002e28 <Plan_Right+0x218>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d10d      	bne.n	8002c9e <Plan_Right+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 8002c82:	793b      	ldrb	r3, [r7, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fe1b 	bl	80028c0 <Plan_CheckCounterValue>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <Plan_Right+0x8a>
			Plan_SetCounter();
 8002c90:	f7ff fe06 	bl	80028a0 <Plan_SetCounter>
			counter_status = 2;
 8002c94:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <Plan_Right+0x218>)
 8002c96:	2202      	movs	r2, #2
 8002c98:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0b8      	b.n	8002e10 <Plan_Right+0x200>
	}
	if(counter_status == 2) {
 8002c9e:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <Plan_Right+0x218>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	f040 80b3 	bne.w	8002e0e <Plan_Right+0x1fe>
		if(autoturn_stat == 0) {
 8002ca8:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <Plan_Right+0x224>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d134      	bne.n	8002d1a <Plan_Right+0x10a>
			Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8002cb0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <Plan_Right+0x228>)
 8002cb8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc2f 	bl	8000524 <__aeabi_i2d>
 8002cc6:	a354      	add	r3, pc, #336	; (adr r3, 8002e18 <Plan_Right+0x208>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc94 	bl	80005f8 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd ff86 	bl	8000be8 <__aeabi_d2f>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <Plan_Right+0x228>)
 8002ce6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fc18 	bl	8000524 <__aeabi_i2d>
 8002cf4:	a348      	add	r3, pc, #288	; (adr r3, 8002e18 <Plan_Right+0x208>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd fc7d 	bl	80005f8 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f7fd ff6f 	bl	8000be8 <__aeabi_d2f>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	ee00 3a90 	vmov	s1, r3
 8002d10:	ee00 4a10 	vmov	s0, r4
 8002d14:	f002 f982 	bl	800501c <Run_SetMotorSpeed>
 8002d18:	e033      	b.n	8002d82 <Plan_Right+0x172>
		}
		else {
			Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.05, a.reverse_speed*plan.turn_speed*0.05);
 8002d1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b45      	ldr	r3, [pc, #276]	; (8002e38 <Plan_Right+0x228>)
 8002d22:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fbfa 	bl	8000524 <__aeabi_i2d>
 8002d30:	a33b      	add	r3, pc, #236	; (adr r3, 8002e20 <Plan_Right+0x210>)
 8002d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d36:	f7fd fc5f 	bl	80005f8 <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd ff51 	bl	8000be8 <__aeabi_d2f>
 8002d46:	4604      	mov	r4, r0
 8002d48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <Plan_Right+0x228>)
 8002d50:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fbe3 	bl	8000524 <__aeabi_i2d>
 8002d5e:	a330      	add	r3, pc, #192	; (adr r3, 8002e20 <Plan_Right+0x210>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fc48 	bl	80005f8 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fd ff3a 	bl	8000be8 <__aeabi_d2f>
 8002d74:	4603      	mov	r3, r0
 8002d76:	ee00 3a90 	vmov	s1, r3
 8002d7a:	ee00 4a10 	vmov	s0, r4
 8002d7e:	f002 f94d 	bl	800501c <Run_SetMotorSpeed>
		}
		switch(a.act_mode) {
 8002d82:	78bb      	ldrb	r3, [r7, #2]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d02c      	beq.n	8002de2 <Plan_Right+0x1d2>
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	dc3e      	bgt.n	8002e0a <Plan_Right+0x1fa>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <Plan_Right+0x186>
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d009      	beq.n	8002da8 <Plan_Right+0x198>
 8002d94:	e039      	b.n	8002e0a <Plan_Right+0x1fa>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fd91 	bl	80028c0 <Plan_CheckCounterValue>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02d      	beq.n	8002e00 <Plan_Right+0x1f0>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e033      	b.n	8002e10 <Plan_Right+0x200>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value)) {
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fd88 	bl	80028c0 <Plan_CheckCounterValue>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d026      	beq.n	8002e04 <Plan_Right+0x1f4>
				if(Plan_CheckSensor(3, RIGHT_ALIGN_SEN)) {autoturn_stat = 1;}
 8002db6:	2101      	movs	r1, #1
 8002db8:	2003      	movs	r0, #3
 8002dba:	f7ff fdcd 	bl	8002958 <Plan_CheckSensor>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <Plan_Right+0x1ba>
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <Plan_Right+0x224>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
				if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN)) {autoturn_stat = 0; return 2;}
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2005      	movs	r0, #5
 8002dce:	f7ff fdc3 	bl	8002958 <Plan_CheckSensor>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d015      	beq.n	8002e04 <Plan_Right+0x1f4>
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <Plan_Right+0x224>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	2302      	movs	r3, #2
 8002de0:	e016      	b.n	8002e10 <Plan_Right+0x200>
			}
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <Plan_Right+0x21c>)
 8002de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <Plan_Right+0x220>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	4619      	mov	r1, r3
 8002df0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dd05      	ble.n	8002e08 <Plan_Right+0x1f8>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e007      	b.n	8002e10 <Plan_Right+0x200>
			break;
 8002e00:	bf00      	nop
 8002e02:	e002      	b.n	8002e0a <Plan_Right+0x1fa>
			break;
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <Plan_Right+0x1fa>
			break;
 8002e08:	bf00      	nop
		}
		return 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <Plan_Right+0x200>
	}
	return 0;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	9999999a 	.word	0x9999999a
 8002e1c:	3fb99999 	.word	0x3fb99999
 8002e20:	9999999a 	.word	0x9999999a
 8002e24:	3fa99999 	.word	0x3fa99999
 8002e28:	20000a94 	.word	0x20000a94
 8002e2c:	20000ab0 	.word	0x20000ab0
 8002e30:	20000a88 	.word	0x20000a88
 8002e34:	20000a96 	.word	0x20000a96
 8002e38:	20000f2c 	.word	0x20000f2c

08002e3c <Plan_Forward>:

uint8_t Plan_Forward(Action_typedef a, uint8_t _speed) {
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	463c      	mov	r4, r7
 8002e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fd83 	bl	8002958 <Plan_CheckSensor>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <Plan_Forward+0x3e>
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <Plan_Forward+0x138>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10c      	bne.n	8002e7a <Plan_Forward+0x3e>
			Plan_SetCounter();
 8002e60:	f7ff fd1e 	bl	80028a0 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002e64:	4b44      	ldr	r3, [pc, #272]	; (8002f78 <Plan_Forward+0x13c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a44      	ldr	r2, [pc, #272]	; (8002f7c <Plan_Forward+0x140>)
 8002e6a:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 8002e6c:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <Plan_Forward+0x138>)
 8002e6e:	2208      	movs	r2, #8
 8002e70:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002e72:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002e76:	f002 f8fb 	bl	8005070 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002e7a:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <Plan_Forward+0x138>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d111      	bne.n	8002ea6 <Plan_Forward+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002e82:	793b      	ldrb	r3, [r7, #4]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	bf28      	it	cs
 8002e88:	2303      	movcs	r3, #3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fd17 	bl	80028c0 <Plan_CheckCounterValue>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <Plan_Forward+0x66>
			Plan_SetCounter();
 8002e98:	f7ff fd02 	bl	80028a0 <Plan_SetCounter>
			counter_status = 1;
 8002e9c:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <Plan_Forward+0x138>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e061      	b.n	8002f6a <Plan_Forward+0x12e>
	}
	else if(counter_status == 1) {
 8002ea6:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <Plan_Forward+0x138>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10d      	bne.n	8002eca <Plan_Forward+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 8002eae:	793b      	ldrb	r3, [r7, #4]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fd05 	bl	80028c0 <Plan_CheckCounterValue>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <Plan_Forward+0x8a>
			Plan_SetCounter();
 8002ebc:	f7ff fcf0 	bl	80028a0 <Plan_SetCounter>
			counter_status = 2;
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <Plan_Forward+0x138>)
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e04f      	b.n	8002f6a <Plan_Forward+0x12e>
	}
	if(counter_status == 2) {
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <Plan_Forward+0x138>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d14a      	bne.n	8002f68 <Plan_Forward+0x12c>
		Run_SetMotorSpeed(_speed, _speed);
 8002ed2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ee2:	ee07 3a10 	vmov	s14, r3
 8002ee6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002eea:	eef0 0a47 	vmov.f32	s1, s14
 8002eee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef2:	f002 f893 	bl	800501c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002ef6:	78bb      	ldrb	r3, [r7, #2]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d01f      	beq.n	8002f3c <Plan_Forward+0x100>
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	dc31      	bgt.n	8002f64 <Plan_Forward+0x128>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <Plan_Forward+0xce>
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d009      	beq.n	8002f1c <Plan_Forward+0xe0>
 8002f08:	e02c      	b.n	8002f64 <Plan_Forward+0x128>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fcd7 	bl	80028c0 <Plan_CheckCounterValue>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <Plan_Forward+0x11e>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e026      	b.n	8002f6a <Plan_Forward+0x12e>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fcce 	bl	80028c0 <Plan_CheckCounterValue>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d019      	beq.n	8002f5e <Plan_Forward+0x122>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	2007      	movs	r0, #7
 8002f2e:	f7ff fd13 	bl	8002958 <Plan_CheckSensor>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <Plan_Forward+0x122>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e016      	b.n	8002f6a <Plan_Forward+0x12e>
			break;
		case 2:
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <Plan_Forward+0x13c>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <Plan_Forward+0x140>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1ad2      	subs	r2, r2, r3
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	429a      	cmp	r2, r3
 8002f54:	dd05      	ble.n	8002f62 <Plan_Forward+0x126>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e007      	b.n	8002f6a <Plan_Forward+0x12e>
			break;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <Plan_Forward+0x128>
			break;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <Plan_Forward+0x128>
			break;
 8002f62:	bf00      	nop
		}
		return 1;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <Plan_Forward+0x12e>
	}
	return 0;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000a94 	.word	0x20000a94
 8002f78:	20000b40 	.word	0x20000b40
 8002f7c:	20000a88 	.word	0x20000a88

08002f80 <Plan_Backward>:

uint8_t Plan_Backward(Action_typedef a, uint8_t _speed) {
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	463c      	mov	r4, r7
 8002f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fce1 	bl	8002958 <Plan_CheckSensor>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <Plan_Backward+0x3e>
 8002f9c:	4b47      	ldr	r3, [pc, #284]	; (80030bc <Plan_Backward+0x13c>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10c      	bne.n	8002fbe <Plan_Backward+0x3e>
			Plan_SetCounter();
 8002fa4:	f7ff fc7c 	bl	80028a0 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <Plan_Backward+0x140>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a45      	ldr	r2, [pc, #276]	; (80030c4 <Plan_Backward+0x144>)
 8002fae:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 8002fb0:	4b42      	ldr	r3, [pc, #264]	; (80030bc <Plan_Backward+0x13c>)
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002fb6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002fba:	f002 f859 	bl	8005070 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <Plan_Backward+0x13c>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d111      	bne.n	8002fea <Plan_Backward+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002fc6:	793b      	ldrb	r3, [r7, #4]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	bf28      	it	cs
 8002fcc:	2303      	movcs	r3, #3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fc75 	bl	80028c0 <Plan_CheckCounterValue>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <Plan_Backward+0x66>
			Plan_SetCounter();
 8002fdc:	f7ff fc60 	bl	80028a0 <Plan_SetCounter>
			counter_status = 1;
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <Plan_Backward+0x13c>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e063      	b.n	80030b2 <Plan_Backward+0x132>
	}
	else if(counter_status == 1) {
 8002fea:	4b34      	ldr	r3, [pc, #208]	; (80030bc <Plan_Backward+0x13c>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d10d      	bne.n	800300e <Plan_Backward+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 8002ff2:	793b      	ldrb	r3, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fc63 	bl	80028c0 <Plan_CheckCounterValue>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <Plan_Backward+0x8a>
			Plan_SetCounter();
 8003000:	f7ff fc4e 	bl	80028a0 <Plan_SetCounter>
			counter_status = 2;
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <Plan_Backward+0x13c>)
 8003006:	2202      	movs	r2, #2
 8003008:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800300a:	2301      	movs	r3, #1
 800300c:	e051      	b.n	80030b2 <Plan_Backward+0x132>
	}
	if(counter_status == 2) {
 800300e:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <Plan_Backward+0x13c>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d14c      	bne.n	80030b0 <Plan_Backward+0x130>
		Run_SetMotorSpeed(-_speed, -_speed);
 8003016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800301a:	425b      	negs	r3, r3
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003024:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003028:	425b      	negs	r3, r3
 800302a:	ee07 3a10 	vmov	s14, r3
 800302e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003032:	eef0 0a47 	vmov.f32	s1, s14
 8003036:	eeb0 0a67 	vmov.f32	s0, s15
 800303a:	f001 ffef 	bl	800501c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 800303e:	78bb      	ldrb	r3, [r7, #2]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d01f      	beq.n	8003084 <Plan_Backward+0x104>
 8003044:	2b02      	cmp	r3, #2
 8003046:	dc31      	bgt.n	80030ac <Plan_Backward+0x12c>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <Plan_Backward+0xd2>
 800304c:	2b01      	cmp	r3, #1
 800304e:	d009      	beq.n	8003064 <Plan_Backward+0xe4>
 8003050:	e02c      	b.n	80030ac <Plan_Backward+0x12c>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fc33 	bl	80028c0 <Plan_CheckCounterValue>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <Plan_Backward+0x122>
 8003060:	2302      	movs	r3, #2
 8003062:	e026      	b.n	80030b2 <Plan_Backward+0x132>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fc2a 	bl	80028c0 <Plan_CheckCounterValue>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d019      	beq.n	80030a6 <Plan_Backward+0x126>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8003072:	2102      	movs	r1, #2
 8003074:	2007      	movs	r0, #7
 8003076:	f7ff fc6f 	bl	8002958 <Plan_CheckSensor>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d012      	beq.n	80030a6 <Plan_Backward+0x126>
 8003080:	2302      	movs	r3, #2
 8003082:	e016      	b.n	80030b2 <Plan_Backward+0x132>
			break;
		case 2:
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <Plan_Backward+0x144>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <Plan_Backward+0x140>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	4619      	mov	r1, r3
 8003092:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	429a      	cmp	r2, r3
 800309c:	dd05      	ble.n	80030aa <Plan_Backward+0x12a>
 800309e:	2302      	movs	r3, #2
 80030a0:	e007      	b.n	80030b2 <Plan_Backward+0x132>
			break;
 80030a2:	bf00      	nop
 80030a4:	e002      	b.n	80030ac <Plan_Backward+0x12c>
			break;
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <Plan_Backward+0x12c>
			break;
 80030aa:	bf00      	nop
		}
		return 1;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <Plan_Backward+0x132>
	}
	return 0;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000a94 	.word	0x20000a94
 80030c0:	20000b40 	.word	0x20000b40
 80030c4:	20000a88 	.word	0x20000a88

080030c8 <Plan_Idle>:

uint8_t Plan_Idle(Action_typedef a) {
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	463c      	mov	r4, r7
 80030d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 80030d4:	787b      	ldrb	r3, [r7, #1]
 80030d6:	2102      	movs	r1, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fc3d 	bl	8002958 <Plan_CheckSensor>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <Plan_Idle+0x3e>
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <Plan_Idle+0xcc>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10c      	bne.n	8003106 <Plan_Idle+0x3e>
			Plan_SetCounter();
 80030ec:	f7ff fbd8 	bl	80028a0 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <Plan_Idle+0xd0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a29      	ldr	r2, [pc, #164]	; (800319c <Plan_Idle+0xd4>)
 80030f6:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <Plan_Idle+0xcc>)
 80030fa:	2208      	movs	r2, #8
 80030fc:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 80030fe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003102:	f001 ffb5 	bl	8005070 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8003106:	4b23      	ldr	r3, [pc, #140]	; (8003194 <Plan_Idle+0xcc>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b08      	cmp	r3, #8
 800310c:	d111      	bne.n	8003132 <Plan_Idle+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 800310e:	793b      	ldrb	r3, [r7, #4]
 8003110:	2b03      	cmp	r3, #3
 8003112:	bf28      	it	cs
 8003114:	2303      	movcs	r3, #3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fbd1 	bl	80028c0 <Plan_CheckCounterValue>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <Plan_Idle+0x66>
			Plan_SetCounter();
 8003124:	f7ff fbbc 	bl	80028a0 <Plan_SetCounter>
			counter_status = 1;
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <Plan_Idle+0xcc>)
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800312e:	2301      	movs	r3, #1
 8003130:	e02b      	b.n	800318a <Plan_Idle+0xc2>
	}
	else if(counter_status == 1) {
 8003132:	4b18      	ldr	r3, [pc, #96]	; (8003194 <Plan_Idle+0xcc>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10d      	bne.n	8003156 <Plan_Idle+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 800313a:	793b      	ldrb	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fbbf 	bl	80028c0 <Plan_CheckCounterValue>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <Plan_Idle+0x8a>
			Plan_SetCounter();
 8003148:	f7ff fbaa 	bl	80028a0 <Plan_SetCounter>
			counter_status = 2;
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <Plan_Idle+0xcc>)
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003152:	2301      	movs	r3, #1
 8003154:	e019      	b.n	800318a <Plan_Idle+0xc2>
	}
	if(counter_status == 2) {
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <Plan_Idle+0xcc>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d114      	bne.n	8003188 <Plan_Idle+0xc0>
		Run_SetMotorSpeed(0, 0);
 800315e:	eddf 0a10 	vldr	s1, [pc, #64]	; 80031a0 <Plan_Idle+0xd8>
 8003162:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80031a0 <Plan_Idle+0xd8>
 8003166:	f001 ff59 	bl	800501c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 800316a:	78bb      	ldrb	r3, [r7, #2]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <Plan_Idle+0xbc>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fba4 	bl	80028c0 <Plan_CheckCounterValue>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <Plan_Idle+0xba>
 800317e:	2302      	movs	r3, #2
 8003180:	e003      	b.n	800318a <Plan_Idle+0xc2>
			break;
 8003182:	bf00      	nop
//			break;
//		case 2:
//			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
//			break;
		}
		return 1;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <Plan_Idle+0xc2>
	}
	return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bd90      	pop	{r4, r7, pc}
 8003192:	bf00      	nop
 8003194:	20000a94 	.word	0x20000a94
 8003198:	20000b40 	.word	0x20000b40
 800319c:	20000a88 	.word	0x20000a88
 80031a0:	00000000 	.word	0x00000000

080031a4 <Plan_Follow>:

uint8_t Plan_Follow(Action_typedef a) {
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	463c      	mov	r4, r7
 80031ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(counter_status == 0) {
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <Plan_Follow+0x7c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d108      	bne.n	80031ca <Plan_Follow+0x26>
		Plan_SetCounter();
 80031b8:	f7ff fb72 	bl	80028a0 <Plan_SetCounter>
		robot_enc_pos = MOTOR_L.enc_cnt;
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <Plan_Follow+0x80>)
 80031be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <Plan_Follow+0x84>)
 80031c2:	6013      	str	r3, [r2, #0]
		counter_status = 1;
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <Plan_Follow+0x7c>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
	}
	switch(a.act_mode) {
 80031ca:	78bb      	ldrb	r3, [r7, #2]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <Plan_Follow+0x32>
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d00c      	beq.n	80031ee <Plan_Follow+0x4a>
 80031d4:	e01a      	b.n	800320c <Plan_Follow+0x68>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fb71 	bl	80028c0 <Plan_CheckCounterValue>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <Plan_Follow+0x6c>
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d012      	beq.n	8003210 <Plan_Follow+0x6c>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e014      	b.n	8003218 <Plan_Follow+0x74>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <Plan_Follow+0x84>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <Plan_Follow+0x88>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	1ad2      	subs	r2, r2, r3
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	4619      	mov	r1, r3
 80031fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	429a      	cmp	r2, r3
 8003206:	dd05      	ble.n	8003214 <Plan_Follow+0x70>
 8003208:	2302      	movs	r3, #2
 800320a:	e005      	b.n	8003218 <Plan_Follow+0x74>
		break;
	default: return 2;
 800320c:	2302      	movs	r3, #2
 800320e:	e003      	b.n	8003218 <Plan_Follow+0x74>
		break;
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <Plan_Follow+0x72>
		break;
 8003214:	bf00      	nop
	}
	return 0;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	20000a94 	.word	0x20000a94
 8003224:	20000ab0 	.word	0x20000ab0
 8003228:	20000b40 	.word	0x20000b40
 800322c:	20000a88 	.word	0x20000a88

08003230 <Plan_FollowLeft>:

uint8_t Plan_FollowLeft(Action_typedef a) {
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	463c      	mov	r4, r7
 8003238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(counter_status == 0) {
 800323c:	4bb2      	ldr	r3, [pc, #712]	; (8003508 <Plan_FollowLeft+0x2d8>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d108      	bne.n	8003256 <Plan_FollowLeft+0x26>
		Plan_SetCounter();
 8003244:	f7ff fb2c 	bl	80028a0 <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 8003248:	4bb0      	ldr	r3, [pc, #704]	; (800350c <Plan_FollowLeft+0x2dc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4ab0      	ldr	r2, [pc, #704]	; (8003510 <Plan_FollowLeft+0x2e0>)
 800324e:	6013      	str	r3, [r2, #0]
		counter_status = 1;
 8003250:	4bad      	ldr	r3, [pc, #692]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 1) {
 8003256:	787b      	ldrb	r3, [r7, #1]
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fb7c 	bl	8002958 <Plan_CheckSensor>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <Plan_FollowLeft+0x52>
 8003266:	4ba8      	ldr	r3, [pc, #672]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d109      	bne.n	8003282 <Plan_FollowLeft+0x52>
		counter_status = 3;
 800326e:	4ba6      	ldr	r3, [pc, #664]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003270:	2203      	movs	r2, #3
 8003272:	701a      	strb	r2, [r3, #0]
		Run_SetReverseSpeed(0.5);
 8003274:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003278:	f001 fefa 	bl	8005070 <Run_SetReverseSpeed>
		Plan_SetCounter2();
 800327c:	f7ff fb3e 	bl	80028fc <Plan_SetCounter2>
 8003280:	e00c      	b.n	800329c <Plan_FollowLeft+0x6c>
	}
	else if(sensor_binary == 0 && counter_status == 1) {
 8003282:	4ba4      	ldr	r3, [pc, #656]	; (8003514 <Plan_FollowLeft+0x2e4>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <Plan_FollowLeft+0x6c>
 800328a:	4b9f      	ldr	r3, [pc, #636]	; (8003508 <Plan_FollowLeft+0x2d8>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d104      	bne.n	800329c <Plan_FollowLeft+0x6c>
		counter_status = 16;
 8003292:	4b9d      	ldr	r3, [pc, #628]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003294:	2210      	movs	r2, #16
 8003296:	701a      	strb	r2, [r3, #0]
		Plan_SetCounter2();
 8003298:	f7ff fb30 	bl	80028fc <Plan_SetCounter2>
	}

	if(counter_status == 3) {
 800329c:	4b9a      	ldr	r3, [pc, #616]	; (8003508 <Plan_FollowLeft+0x2d8>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d111      	bne.n	80032c8 <Plan_FollowLeft+0x98>
		if(Plan_CheckCounterValue2((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 80032a4:	793b      	ldrb	r3, [r7, #4]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	bf28      	it	cs
 80032aa:	2303      	movcs	r3, #3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fb34 	bl	800291c <Plan_CheckCounterValue2>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d004      	beq.n	80032c4 <Plan_FollowLeft+0x94>
			Plan_SetCounter2();
 80032ba:	f7ff fb1f 	bl	80028fc <Plan_SetCounter2>
			counter_status = 2;
 80032be:	4b92      	ldr	r3, [pc, #584]	; (8003508 <Plan_FollowLeft+0x2d8>)
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e111      	b.n	80034ec <Plan_FollowLeft+0x2bc>
	}
	else if(counter_status == 2) {
 80032c8:	4b8f      	ldr	r3, [pc, #572]	; (8003508 <Plan_FollowLeft+0x2d8>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d13f      	bne.n	8003350 <Plan_FollowLeft+0x120>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 80032d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b90      	ldr	r3, [pc, #576]	; (8003518 <Plan_FollowLeft+0x2e8>)
 80032d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80032dc:	fb02 f303 	mul.w	r3, r2, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd f91f 	bl	8000524 <__aeabi_i2d>
 80032e6:	a384      	add	r3, pc, #528	; (adr r3, 80034f8 <Plan_FollowLeft+0x2c8>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f7fd f984 	bl	80005f8 <__aeabi_dmul>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	f7fd fc76 	bl	8000be8 <__aeabi_d2f>
 80032fc:	4604      	mov	r4, r0
 80032fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003302:	461a      	mov	r2, r3
 8003304:	4b84      	ldr	r3, [pc, #528]	; (8003518 <Plan_FollowLeft+0x2e8>)
 8003306:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f908 	bl	8000524 <__aeabi_i2d>
 8003314:	a378      	add	r3, pc, #480	; (adr r3, 80034f8 <Plan_FollowLeft+0x2c8>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd f96d 	bl	80005f8 <__aeabi_dmul>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7fd fc5f 	bl	8000be8 <__aeabi_d2f>
 800332a:	4603      	mov	r3, r0
 800332c:	ee00 3a90 	vmov	s1, r3
 8003330:	ee00 4a10 	vmov	s0, r4
 8003334:	f001 fe72 	bl	800501c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(3, LEFT_ALIGN_SEN) > 0) {
 8003338:	2100      	movs	r1, #0
 800333a:	2003      	movs	r0, #3
 800333c:	f7ff fb0c 	bl	8002958 <Plan_CheckSensor>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <Plan_FollowLeft+0x11c>
			counter_status = 4;
 8003346:	4b70      	ldr	r3, [pc, #448]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003348:	2204      	movs	r2, #4
 800334a:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800334c:	2301      	movs	r3, #1
 800334e:	e0cd      	b.n	80034ec <Plan_FollowLeft+0x2bc>
	}
	else if(counter_status == 4) {
 8003350:	4b6d      	ldr	r3, [pc, #436]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d13f      	bne.n	80033d8 <Plan_FollowLeft+0x1a8>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.05, a.forward_speed*plan.turn_speed*0.05);
 8003358:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800335c:	461a      	mov	r2, r3
 800335e:	4b6e      	ldr	r3, [pc, #440]	; (8003518 <Plan_FollowLeft+0x2e8>)
 8003360:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f8db 	bl	8000524 <__aeabi_i2d>
 800336e:	a364      	add	r3, pc, #400	; (adr r3, 8003500 <Plan_FollowLeft+0x2d0>)
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f7fd f940 	bl	80005f8 <__aeabi_dmul>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4610      	mov	r0, r2
 800337e:	4619      	mov	r1, r3
 8003380:	f7fd fc32 	bl	8000be8 <__aeabi_d2f>
 8003384:	4604      	mov	r4, r0
 8003386:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800338a:	461a      	mov	r2, r3
 800338c:	4b62      	ldr	r3, [pc, #392]	; (8003518 <Plan_FollowLeft+0x2e8>)
 800338e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8c4 	bl	8000524 <__aeabi_i2d>
 800339c:	a358      	add	r3, pc, #352	; (adr r3, 8003500 <Plan_FollowLeft+0x2d0>)
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f7fd f929 	bl	80005f8 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f7fd fc1b 	bl	8000be8 <__aeabi_d2f>
 80033b2:	4603      	mov	r3, r0
 80033b4:	ee00 3a90 	vmov	s1, r3
 80033b8:	ee00 4a10 	vmov	s0, r4
 80033bc:	f001 fe2e 	bl	800501c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, LEFT_ALIGN_SEN) > 0) {
 80033c0:	2100      	movs	r1, #0
 80033c2:	2005      	movs	r0, #5
 80033c4:	f7ff fac8 	bl	8002958 <Plan_CheckSensor>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <Plan_FollowLeft+0x1a4>
			counter_status = 1;
 80033ce:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <Plan_FollowLeft+0x2d8>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e089      	b.n	80034ec <Plan_FollowLeft+0x2bc>
	}
	else if(counter_status == 16) {
 80033d8:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <Plan_FollowLeft+0x2d8>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d11a      	bne.n	8003416 <Plan_FollowLeft+0x1e6>
		if(Plan_CheckCounterValue2((a.wait_time<BRAKE_MAX_DELAY)?a.wait_time:BRAKE_MAX_DELAY) && sensor_binary == 0) {
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	bf28      	it	cs
 80033e6:	2303      	movcs	r3, #3
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fa96 	bl	800291c <Plan_CheckCounterValue2>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <Plan_FollowLeft+0x1d4>
 80033f6:	4b47      	ldr	r3, [pc, #284]	; (8003514 <Plan_FollowLeft+0x2e4>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <Plan_FollowLeft+0x1d4>
			counter_status = 17;
 80033fe:	4b42      	ldr	r3, [pc, #264]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003400:	2211      	movs	r2, #17
 8003402:	701a      	strb	r2, [r3, #0]
		}
		if(sensor_binary != 0) counter_status = 1;
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <Plan_FollowLeft+0x2e4>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <Plan_FollowLeft+0x1e2>
 800340c:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <Plan_FollowLeft+0x2d8>)
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
		return 1;
 8003412:	2301      	movs	r3, #1
 8003414:	e06a      	b.n	80034ec <Plan_FollowLeft+0x2bc>
	}
	else if(counter_status == 17) {
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b11      	cmp	r3, #17
 800341c:	d13f      	bne.n	800349e <Plan_FollowLeft+0x26e>
		Run_SetMotorSpeed(-a.reverse_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 800341e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003422:	425b      	negs	r3, r3
 8003424:	4a3c      	ldr	r2, [pc, #240]	; (8003518 <Plan_FollowLeft+0x2e8>)
 8003426:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f878 	bl	8000524 <__aeabi_i2d>
 8003434:	a330      	add	r3, pc, #192	; (adr r3, 80034f8 <Plan_FollowLeft+0x2c8>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd f8dd 	bl	80005f8 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	f7fd fbcf 	bl	8000be8 <__aeabi_d2f>
 800344a:	4604      	mov	r4, r0
 800344c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003450:	461a      	mov	r2, r3
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <Plan_FollowLeft+0x2e8>)
 8003454:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f861 	bl	8000524 <__aeabi_i2d>
 8003462:	a325      	add	r3, pc, #148	; (adr r3, 80034f8 <Plan_FollowLeft+0x2c8>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f7fd f8c6 	bl	80005f8 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	f7fd fbb8 	bl	8000be8 <__aeabi_d2f>
 8003478:	4603      	mov	r3, r0
 800347a:	ee00 3a90 	vmov	s1, r3
 800347e:	ee00 4a10 	vmov	s0, r4
 8003482:	f001 fdcb 	bl	800501c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN) > 0) {
 8003486:	2101      	movs	r1, #1
 8003488:	2005      	movs	r0, #5
 800348a:	f7ff fa65 	bl	8002958 <Plan_CheckSensor>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <Plan_FollowLeft+0x26a>
			counter_status = 1;
 8003494:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <Plan_FollowLeft+0x2d8>)
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800349a:	2301      	movs	r3, #1
 800349c:	e026      	b.n	80034ec <Plan_FollowLeft+0x2bc>
	}
	switch(a.act_mode) {
 800349e:	78bb      	ldrb	r3, [r7, #2]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <Plan_FollowLeft+0x27a>
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d00c      	beq.n	80034c2 <Plan_FollowLeft+0x292>
 80034a8:	e01a      	b.n	80034e0 <Plan_FollowLeft+0x2b0>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fa07 	bl	80028c0 <Plan_CheckCounterValue>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <Plan_FollowLeft+0x2b4>
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d012      	beq.n	80034e4 <Plan_FollowLeft+0x2b4>
 80034be:	2302      	movs	r3, #2
 80034c0:	e014      	b.n	80034ec <Plan_FollowLeft+0x2bc>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <Plan_FollowLeft+0x2dc>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <Plan_FollowLeft+0x2e0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	1ad2      	subs	r2, r2, r3
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	4619      	mov	r1, r3
 80034d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	429a      	cmp	r2, r3
 80034da:	dd05      	ble.n	80034e8 <Plan_FollowLeft+0x2b8>
 80034dc:	2302      	movs	r3, #2
 80034de:	e005      	b.n	80034ec <Plan_FollowLeft+0x2bc>
		break;
	default: return 2;
 80034e0:	2302      	movs	r3, #2
 80034e2:	e003      	b.n	80034ec <Plan_FollowLeft+0x2bc>
		break;
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <Plan_FollowLeft+0x2ba>
		break;
 80034e8:	bf00      	nop
	}
	return 0;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	f3af 8000 	nop.w
 80034f8:	9999999a 	.word	0x9999999a
 80034fc:	3fb99999 	.word	0x3fb99999
 8003500:	9999999a 	.word	0x9999999a
 8003504:	3fa99999 	.word	0x3fa99999
 8003508:	20000a94 	.word	0x20000a94
 800350c:	20000b40 	.word	0x20000b40
 8003510:	20000a88 	.word	0x20000a88
 8003514:	20000bd2 	.word	0x20000bd2
 8003518:	20000f2c 	.word	0x20000f2c
 800351c:	00000000 	.word	0x00000000

08003520 <Plan_FollowRight>:

uint8_t Plan_FollowRight(Action_typedef a) {
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	463c      	mov	r4, r7
 8003528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(counter_status == 0) {
 800352c:	4bb0      	ldr	r3, [pc, #704]	; (80037f0 <Plan_FollowRight+0x2d0>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <Plan_FollowRight+0x26>
		Plan_SetCounter();
 8003534:	f7ff f9b4 	bl	80028a0 <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 8003538:	4bae      	ldr	r3, [pc, #696]	; (80037f4 <Plan_FollowRight+0x2d4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4aae      	ldr	r2, [pc, #696]	; (80037f8 <Plan_FollowRight+0x2d8>)
 800353e:	6013      	str	r3, [r2, #0]
		counter_status = 1;
 8003540:	4bab      	ldr	r3, [pc, #684]	; (80037f0 <Plan_FollowRight+0x2d0>)
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 1) {
 8003546:	787b      	ldrb	r3, [r7, #1]
 8003548:	2101      	movs	r1, #1
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fa04 	bl	8002958 <Plan_CheckSensor>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <Plan_FollowRight+0x52>
 8003556:	4ba6      	ldr	r3, [pc, #664]	; (80037f0 <Plan_FollowRight+0x2d0>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d109      	bne.n	8003572 <Plan_FollowRight+0x52>
		counter_status = 3;
 800355e:	4ba4      	ldr	r3, [pc, #656]	; (80037f0 <Plan_FollowRight+0x2d0>)
 8003560:	2203      	movs	r2, #3
 8003562:	701a      	strb	r2, [r3, #0]
		Run_SetReverseSpeed(0.5);
 8003564:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003568:	f001 fd82 	bl	8005070 <Run_SetReverseSpeed>
		Plan_SetCounter2();
 800356c:	f7ff f9c6 	bl	80028fc <Plan_SetCounter2>
 8003570:	e00c      	b.n	800358c <Plan_FollowRight+0x6c>
	}
	else if(sensor_binary == 0 && counter_status == 1) {
 8003572:	4ba2      	ldr	r3, [pc, #648]	; (80037fc <Plan_FollowRight+0x2dc>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <Plan_FollowRight+0x6c>
 800357a:	4b9d      	ldr	r3, [pc, #628]	; (80037f0 <Plan_FollowRight+0x2d0>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d104      	bne.n	800358c <Plan_FollowRight+0x6c>
		counter_status = 16;
 8003582:	4b9b      	ldr	r3, [pc, #620]	; (80037f0 <Plan_FollowRight+0x2d0>)
 8003584:	2210      	movs	r2, #16
 8003586:	701a      	strb	r2, [r3, #0]
		Plan_SetCounter2();
 8003588:	f7ff f9b8 	bl	80028fc <Plan_SetCounter2>
	}

	if(counter_status == 3) {
 800358c:	4b98      	ldr	r3, [pc, #608]	; (80037f0 <Plan_FollowRight+0x2d0>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d111      	bne.n	80035b8 <Plan_FollowRight+0x98>
		if(Plan_CheckCounterValue2((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8003594:	793b      	ldrb	r3, [r7, #4]
 8003596:	2b03      	cmp	r3, #3
 8003598:	bf28      	it	cs
 800359a:	2303      	movcs	r3, #3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f9bc 	bl	800291c <Plan_CheckCounterValue2>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <Plan_FollowRight+0x94>
			Plan_SetCounter2();
 80035aa:	f7ff f9a7 	bl	80028fc <Plan_SetCounter2>
			counter_status = 2;
 80035ae:	4b90      	ldr	r3, [pc, #576]	; (80037f0 <Plan_FollowRight+0x2d0>)
 80035b0:	2202      	movs	r2, #2
 80035b2:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e10f      	b.n	80037d8 <Plan_FollowRight+0x2b8>
	}
	else if(counter_status == 2) {
 80035b8:	4b8d      	ldr	r3, [pc, #564]	; (80037f0 <Plan_FollowRight+0x2d0>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d13f      	bne.n	8003640 <Plan_FollowRight+0x120>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 80035c0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b8e      	ldr	r3, [pc, #568]	; (8003800 <Plan_FollowRight+0x2e0>)
 80035c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ffa7 	bl	8000524 <__aeabi_i2d>
 80035d6:	a382      	add	r3, pc, #520	; (adr r3, 80037e0 <Plan_FollowRight+0x2c0>)
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f7fd f80c 	bl	80005f8 <__aeabi_dmul>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	f7fd fafe 	bl	8000be8 <__aeabi_d2f>
 80035ec:	4604      	mov	r4, r0
 80035ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b82      	ldr	r3, [pc, #520]	; (8003800 <Plan_FollowRight+0x2e0>)
 80035f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc ff90 	bl	8000524 <__aeabi_i2d>
 8003604:	a376      	add	r3, pc, #472	; (adr r3, 80037e0 <Plan_FollowRight+0x2c0>)
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f7fc fff5 	bl	80005f8 <__aeabi_dmul>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f7fd fae7 	bl	8000be8 <__aeabi_d2f>
 800361a:	4603      	mov	r3, r0
 800361c:	ee00 3a90 	vmov	s1, r3
 8003620:	ee00 4a10 	vmov	s0, r4
 8003624:	f001 fcfa 	bl	800501c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(3, RIGHT_ALIGN_SEN) > 0) {
 8003628:	2101      	movs	r1, #1
 800362a:	2003      	movs	r0, #3
 800362c:	f7ff f994 	bl	8002958 <Plan_CheckSensor>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <Plan_FollowRight+0x11c>
			counter_status = 4;
 8003636:	4b6e      	ldr	r3, [pc, #440]	; (80037f0 <Plan_FollowRight+0x2d0>)
 8003638:	2204      	movs	r2, #4
 800363a:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800363c:	2301      	movs	r3, #1
 800363e:	e0cb      	b.n	80037d8 <Plan_FollowRight+0x2b8>
	}
	else if(counter_status == 4) {
 8003640:	4b6b      	ldr	r3, [pc, #428]	; (80037f0 <Plan_FollowRight+0x2d0>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d13f      	bne.n	80036c8 <Plan_FollowRight+0x1a8>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8003648:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800364c:	461a      	mov	r2, r3
 800364e:	4b6c      	ldr	r3, [pc, #432]	; (8003800 <Plan_FollowRight+0x2e0>)
 8003650:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff63 	bl	8000524 <__aeabi_i2d>
 800365e:	a360      	add	r3, pc, #384	; (adr r3, 80037e0 <Plan_FollowRight+0x2c0>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc ffc8 	bl	80005f8 <__aeabi_dmul>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f7fd faba 	bl	8000be8 <__aeabi_d2f>
 8003674:	4604      	mov	r4, r0
 8003676:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800367a:	461a      	mov	r2, r3
 800367c:	4b60      	ldr	r3, [pc, #384]	; (8003800 <Plan_FollowRight+0x2e0>)
 800367e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff4c 	bl	8000524 <__aeabi_i2d>
 800368c:	a354      	add	r3, pc, #336	; (adr r3, 80037e0 <Plan_FollowRight+0x2c0>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f7fc ffb1 	bl	80005f8 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	f7fd faa3 	bl	8000be8 <__aeabi_d2f>
 80036a2:	4603      	mov	r3, r0
 80036a4:	ee00 3a90 	vmov	s1, r3
 80036a8:	ee00 4a10 	vmov	s0, r4
 80036ac:	f001 fcb6 	bl	800501c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN) > 0) {
 80036b0:	2101      	movs	r1, #1
 80036b2:	2005      	movs	r0, #5
 80036b4:	f7ff f950 	bl	8002958 <Plan_CheckSensor>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <Plan_FollowRight+0x1a4>
			counter_status = 1;
 80036be:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <Plan_FollowRight+0x2d0>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e087      	b.n	80037d8 <Plan_FollowRight+0x2b8>
	}
	else if(counter_status == 16) {
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <Plan_FollowRight+0x2d0>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d11a      	bne.n	8003706 <Plan_FollowRight+0x1e6>
		if(Plan_CheckCounterValue2((a.wait_time<BRAKE_MAX_DELAY)?a.wait_time:BRAKE_MAX_DELAY) && sensor_binary == 0) {
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	bf28      	it	cs
 80036d6:	2303      	movcs	r3, #3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f91e 	bl	800291c <Plan_CheckCounterValue2>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <Plan_FollowRight+0x1d4>
 80036e6:	4b45      	ldr	r3, [pc, #276]	; (80037fc <Plan_FollowRight+0x2dc>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <Plan_FollowRight+0x1d4>
			counter_status = 17;
 80036ee:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <Plan_FollowRight+0x2d0>)
 80036f0:	2211      	movs	r2, #17
 80036f2:	701a      	strb	r2, [r3, #0]
		}
		if(sensor_binary != 0) counter_status = 1;
 80036f4:	4b41      	ldr	r3, [pc, #260]	; (80037fc <Plan_FollowRight+0x2dc>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <Plan_FollowRight+0x1e2>
 80036fc:	4b3c      	ldr	r3, [pc, #240]	; (80037f0 <Plan_FollowRight+0x2d0>)
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]
		return 1;
 8003702:	2301      	movs	r3, #1
 8003704:	e068      	b.n	80037d8 <Plan_FollowRight+0x2b8>
	}
	else if(counter_status == 17) {
 8003706:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <Plan_FollowRight+0x2d0>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b11      	cmp	r3, #17
 800370c:	d13d      	bne.n	800378a <Plan_FollowRight+0x26a>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.05, -a.reverse_speed*plan.turn_speed*0.05);
 800370e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003712:	461a      	mov	r2, r3
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <Plan_FollowRight+0x2e0>)
 8003716:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc ff00 	bl	8000524 <__aeabi_i2d>
 8003724:	a330      	add	r3, pc, #192	; (adr r3, 80037e8 <Plan_FollowRight+0x2c8>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f7fc ff65 	bl	80005f8 <__aeabi_dmul>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	f7fd fa57 	bl	8000be8 <__aeabi_d2f>
 800373a:	4604      	mov	r4, r0
 800373c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003740:	425b      	negs	r3, r3
 8003742:	4a2f      	ldr	r2, [pc, #188]	; (8003800 <Plan_FollowRight+0x2e0>)
 8003744:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	4618      	mov	r0, r3
 800374e:	f7fc fee9 	bl	8000524 <__aeabi_i2d>
 8003752:	a325      	add	r3, pc, #148	; (adr r3, 80037e8 <Plan_FollowRight+0x2c8>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fc ff4e 	bl	80005f8 <__aeabi_dmul>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	f7fd fa40 	bl	8000be8 <__aeabi_d2f>
 8003768:	4603      	mov	r3, r0
 800376a:	ee00 3a90 	vmov	s1, r3
 800376e:	ee00 4a10 	vmov	s0, r4
 8003772:	f001 fc53 	bl	800501c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, LEFT_ALIGN_SEN) > 0) {
 8003776:	2100      	movs	r1, #0
 8003778:	2005      	movs	r0, #5
 800377a:	f7ff f8ed 	bl	8002958 <Plan_CheckSensor>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <Plan_FollowRight+0x26a>
			counter_status = 1;
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <Plan_FollowRight+0x2d0>)
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
		}
	}

	switch(a.act_mode) {
 800378a:	78bb      	ldrb	r3, [r7, #2]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <Plan_FollowRight+0x276>
 8003790:	2b02      	cmp	r3, #2
 8003792:	d00c      	beq.n	80037ae <Plan_FollowRight+0x28e>
 8003794:	e01a      	b.n	80037cc <Plan_FollowRight+0x2ac>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff f891 	bl	80028c0 <Plan_CheckCounterValue>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d015      	beq.n	80037d0 <Plan_FollowRight+0x2b0>
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d012      	beq.n	80037d0 <Plan_FollowRight+0x2b0>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e014      	b.n	80037d8 <Plan_FollowRight+0x2b8>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80037ae:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <Plan_FollowRight+0x2d4>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <Plan_FollowRight+0x2d8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	1ad2      	subs	r2, r2, r3
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	4619      	mov	r1, r3
 80037bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	429a      	cmp	r2, r3
 80037c6:	dd05      	ble.n	80037d4 <Plan_FollowRight+0x2b4>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e005      	b.n	80037d8 <Plan_FollowRight+0x2b8>
		break;
	default: return 2;
 80037cc:	2302      	movs	r3, #2
 80037ce:	e003      	b.n	80037d8 <Plan_FollowRight+0x2b8>
		break;
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <Plan_FollowRight+0x2b6>
		break;
 80037d4:	bf00      	nop
	}
	return 0;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	9999999a 	.word	0x9999999a
 80037e4:	3fb99999 	.word	0x3fb99999
 80037e8:	9999999a 	.word	0x9999999a
 80037ec:	3fa99999 	.word	0x3fa99999
 80037f0:	20000a94 	.word	0x20000a94
 80037f4:	20000b40 	.word	0x20000b40
 80037f8:	20000a88 	.word	0x20000a88
 80037fc:	20000bd2 	.word	0x20000bd2
 8003800:	20000f2c 	.word	0x20000f2c

08003804 <Plan_Invert>:


uint8_t Plan_Invert(Action_typedef a) {
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	463c      	mov	r4, r7
 800380c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN)) {
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f89f 	bl	8002958 <Plan_CheckSensor>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <Plan_Invert+0x24>
		SEN_Invert();
 8003820:	f001 feea 	bl	80055f8 <SEN_Invert>
		return 2;
 8003824:	2302      	movs	r3, #2
 8003826:	e000      	b.n	800382a <Plan_Invert+0x26>
	}
	return 0;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bd90      	pop	{r4, r7, pc}

08003832 <Plan_NextPlan>:

uint8_t Plan_NextPlan(Action_typedef a) {
 8003832:	b490      	push	{r4, r7}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	463c      	mov	r4, r7
 800383a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return 2;
 800383e:	2302      	movs	r3, #2
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bc90      	pop	{r4, r7}
 8003848:	4770      	bx	lr

0800384a <Plan_Null>:


uint8_t Plan_Null(Action_typedef a) {
 800384a:	b490      	push	{r4, r7}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	463c      	mov	r4, r7
 8003852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return 2;
 8003856:	2302      	movs	r3, #2
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bc90      	pop	{r4, r7}
 8003860:	4770      	bx	lr
	...

08003864 <Plan_Jump>:

uint8_t Plan_Jump(Action_typedef a) {
 8003864:	b490      	push	{r4, r7}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	463c      	mov	r4, r7
 800386c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(a.act_value > 0) num_index = a.act_value-1;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <Plan_Jump+0x1a>
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	3b01      	subs	r3, #1
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <Plan_Jump+0x28>)
 800387c:	6013      	str	r3, [r2, #0]
	return 2;
 800387e:	2302      	movs	r3, #2
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bc90      	pop	{r4, r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000c40 	.word	0x20000c40

08003890 <Plan_ActionInit>:

uint8_t Plan_ActionInit(Action_typedef a, float period, uint8_t sp) {
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	f107 0408 	add.w	r4, r7, #8
 800389a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800389e:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t stat = 0;
	static float _speed = 0;
	if(counter_status == 0) {
 80038a2:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <Plan_ActionInit+0x138>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <Plan_ActionInit+0x36>
		Plan_SetCounter();
 80038aa:	f7fe fff9 	bl	80028a0 <Plan_SetCounter>
		counter_status = 1;
 80038ae:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <Plan_ActionInit+0x138>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
		_speed = sp;
 80038b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <Plan_ActionInit+0x13c>)
 80038c2:	edc3 7a00 	vstr	s15, [r3]
	}

	if(Plan_CheckCounterValue(a.wait_time) && stat == 0) {
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe fff9 	bl	80028c0 <Plan_CheckCounterValue>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d014      	beq.n	80038fe <Plan_ActionInit+0x6e>
 80038d4:	4b3e      	ldr	r3, [pc, #248]	; (80039d0 <Plan_ActionInit+0x140>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d110      	bne.n	80038fe <Plan_ActionInit+0x6e>
		counter_status = 0;
 80038dc:	4b3a      	ldr	r3, [pc, #232]	; (80039c8 <Plan_ActionInit+0x138>)
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
		stat = 1;
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <Plan_ActionInit+0x140>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
		_speed = sp;
 80038e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <Plan_ActionInit+0x13c>)
 80038f6:	edc3 7a00 	vstr	s15, [r3]
		return 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e05c      	b.n	80039b8 <Plan_ActionInit+0x128>
	}

	if(stat == 0) return 0;
 80038fe:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <Plan_ActionInit+0x140>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <Plan_ActionInit+0x7a>
 8003906:	2300      	movs	r3, #0
 8003908:	e056      	b.n	80039b8 <Plan_ActionInit+0x128>

	if(Plan_CheckCounterValue(a.boost_time) && stat == 1) {
 800390a:	7c3b      	ldrb	r3, [r7, #16]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe ffd7 	bl	80028c0 <Plan_CheckCounterValue>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <Plan_ActionInit+0xa0>
 8003918:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <Plan_ActionInit+0x140>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <Plan_ActionInit+0xa0>
		counter_status = 0;
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <Plan_ActionInit+0x138>)
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
//		acc_status = 0;
		stat = 0;
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <Plan_ActionInit+0x140>)
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
		return 3;
 800392c:	2303      	movs	r3, #3
 800392e:	e043      	b.n	80039b8 <Plan_ActionInit+0x128>
//			_speed += sp;
//		}
//	}
//	else if(acc_status == 2) {

		float accl = plan.acc * 0.02;
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <Plan_ActionInit+0x144>)
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fe07 	bl	8000548 <__aeabi_f2d>
 800393a:	a321      	add	r3, pc, #132	; (adr r3, 80039c0 <Plan_ActionInit+0x130>)
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f7fc fe5a 	bl	80005f8 <__aeabi_dmul>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f7fd f94c 	bl	8000be8 <__aeabi_d2f>
 8003950:	4603      	mov	r3, r0
 8003952:	61fb      	str	r3, [r7, #28]

		if(a.boost_speed > _speed+accl) {
 8003954:	7c7b      	ldrb	r3, [r7, #17]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <Plan_ActionInit+0x13c>)
 8003960:	edd3 6a00 	vldr	s13, [r3]
 8003964:	edd7 7a07 	vldr	s15, [r7, #28]
 8003968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003974:	dd0a      	ble.n	800398c <Plan_ActionInit+0xfc>
			_speed += accl;
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <Plan_ActionInit+0x13c>)
 8003978:	ed93 7a00 	vldr	s14, [r3]
 800397c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <Plan_ActionInit+0x13c>)
 8003986:	edc3 7a00 	vstr	s15, [r3]
 800398a:	e007      	b.n	800399c <Plan_ActionInit+0x10c>
		}
		else {
			_speed = a.boost_speed;
 800398c:	7c7b      	ldrb	r3, [r7, #17]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <Plan_ActionInit+0x13c>)
 8003998:	edc3 7a00 	vstr	s15, [r3]
//		if(a.boost_speed > _speed) _speed += range;
//		else if(a.boost_speed < _speed) _speed -= range;

//		_speed = a.boost_speed;
//	}
	Run_LineTracing(_speed, period, pid_index_status);
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <Plan_ActionInit+0x13c>)
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <Plan_ActionInit+0x148>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4618      	mov	r0, r3
 80039aa:	edd7 0a01 	vldr	s1, [r7, #4]
 80039ae:	eeb0 0a67 	vmov.f32	s0, s15
 80039b2:	f001 faa5 	bl	8004f00 <Run_LineTracing>
//	Run_LineTracing(a.boost_speed, period, 0);
	return 1;
 80039b6:	2301      	movs	r3, #1
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3724      	adds	r7, #36	; 0x24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd90      	pop	{r4, r7, pc}
 80039c0:	47ae147b 	.word	0x47ae147b
 80039c4:	3f947ae1 	.word	0x3f947ae1
 80039c8:	20000a94 	.word	0x20000a94
 80039cc:	20000aa8 	.word	0x20000aa8
 80039d0:	20000aac 	.word	0x20000aac
 80039d4:	20000f2c 	.word	0x20000f2c
 80039d8:	20000aa0 	.word	0x20000aa0

080039dc <Plan_Stop>:
	}
	return 0;
}


uint8_t Plan_Stop() {
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
	Run_LineTracing(0, 0.001, plan.status_pid);
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <Plan_Stop+0x6c>)
 80039e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039e6:	4618      	mov	r0, r3
 80039e8:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003a4c <Plan_Stop+0x70>
 80039ec:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8003a50 <Plan_Stop+0x74>
 80039f0:	f001 fa86 	bl	8004f00 <Run_LineTracing>
	Run_SetMotorSpeed(0, 0);
 80039f4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003a50 <Plan_Stop+0x74>
 80039f8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003a50 <Plan_Stop+0x74>
 80039fc:	f001 fb0e 	bl	800501c <Run_SetMotorSpeed>
	SEN_BlackLine();
 8003a00:	f001 fde2 	bl	80055c8 <SEN_BlackLine>
	num_checkpoint = 0;
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <Plan_Stop+0x78>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
	num_index = plan.checkpoint[num_checkpoint];
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <Plan_Stop+0x78>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <Plan_Stop+0x6c>)
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	889b      	ldrh	r3, [r3, #4]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <Plan_Stop+0x7c>)
 8003a1a:	601a      	str	r2, [r3, #0]
	main_flag &=~ MAIN_FLAG_RUN;
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <Plan_Stop+0x80>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <Plan_Stop+0x80>)
 8003a28:	701a      	strb	r2, [r3, #0]
	run_counter++;
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <Plan_Stop+0x84>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <Plan_Stop+0x84>)
 8003a34:	701a      	strb	r2, [r3, #0]
	if(run_counter > 30) {
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <Plan_Stop+0x84>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b1e      	cmp	r3, #30
 8003a3c:	d901      	bls.n	8003a42 <Plan_Stop+0x66>
		HAL_NVIC_SystemReset();
 8003a3e:	f007 f9b6 	bl	800adae <HAL_NVIC_SystemReset>
	}
	return 1;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000f2c 	.word	0x20000f2c
 8003a4c:	3a83126f 	.word	0x3a83126f
 8003a50:	00000000 	.word	0x00000000
 8003a54:	20000c3c 	.word	0x20000c3c
 8003a58:	20000c40 	.word	0x20000c40
 8003a5c:	20000a74 	.word	0x20000a74
 8003a60:	20000a75 	.word	0x20000a75

08003a64 <Plan_Start>:

void Plan_Start() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	num_index = plan.checkpoint[num_checkpoint];
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <Plan_Start+0x98>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4a24      	ldr	r2, [pc, #144]	; (8003b00 <Plan_Start+0x9c>)
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	889b      	ldrh	r3, [r3, #4]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <Plan_Start+0xa0>)
 8003a78:	601a      	str	r2, [r3, #0]
	GetActionSequenceInit(num_index);
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <Plan_Start+0xa0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fae8 	bl	8006054 <GetActionSequenceInit>
	action_status = 0;
 8003a84:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <Plan_Start+0xa4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
	plan_counter = 0;
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <Plan_Start+0xa8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
	plan_counter2 = 0;
 8003a90:	4b1f      	ldr	r3, [pc, #124]	; (8003b10 <Plan_Start+0xac>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
	plan_last_counter = 0;
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <Plan_Start+0xb0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
	sum_error = 0;
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <Plan_Start+0xb4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	801a      	strh	r2, [r3, #0]
	kp = plan.kpid[0];
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <Plan_Start+0x9c>)
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <Plan_Start+0xb8>)
 8003aa8:	6013      	str	r3, [r2, #0]
	ki = plan.kpid[1];
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <Plan_Start+0x9c>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <Plan_Start+0xbc>)
 8003ab0:	6013      	str	r3, [r2, #0]
	kd = plan.kpid[2];
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <Plan_Start+0x9c>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <Plan_Start+0xc0>)
 8003ab8:	6013      	str	r3, [r2, #0]
	alpha = plan.alpha;
 8003aba:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <Plan_Start+0x9c>)
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	4a1a      	ldr	r2, [pc, #104]	; (8003b28 <Plan_Start+0xc4>)
 8003ac0:	6013      	str	r3, [r2, #0]
	Run_SetMotorAccl(plan.acc);
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <Plan_Start+0x9c>)
 8003ac4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8003acc:	f001 fac0 	bl	8005050 <Run_SetMotorAccl>
	speed_now = plan.speed;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <Plan_Start+0x9c>)
 8003ad2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <Plan_Start+0xc8>)
 8003ad8:	701a      	strb	r2, [r3, #0]
	main_flag |= MAIN_FLAG_RUN;
 8003ada:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <Plan_Start+0xcc>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <Plan_Start+0xcc>)
 8003ae6:	701a      	strb	r2, [r3, #0]
	speed_ramp_status = 1;
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <Plan_Start+0xd0>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
	speed_ramp = 0;
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <Plan_Start+0xd4>)
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000c3c 	.word	0x20000c3c
 8003b00:	20000f2c 	.word	0x20000f2c
 8003b04:	20000c40 	.word	0x20000c40
 8003b08:	20000a95 	.word	0x20000a95
 8003b0c:	20000a80 	.word	0x20000a80
 8003b10:	20000a8c 	.word	0x20000a8c
 8003b14:	20000a84 	.word	0x20000a84
 8003b18:	20000b64 	.word	0x20000b64
 8003b1c:	20000b54 	.word	0x20000b54
 8003b20:	20000b58 	.word	0x20000b58
 8003b24:	20000b5c 	.word	0x20000b5c
 8003b28:	20000b60 	.word	0x20000b60
 8003b2c:	20000a97 	.word	0x20000a97
 8003b30:	20000a74 	.word	0x20000a74
 8003b34:	20000a9c 	.word	0x20000a9c
 8003b38:	20000a98 	.word	0x20000a98

08003b3c <Plan_UIRoutine>:

void Plan_UIRoutine() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
	if(main_flag & MAIN_FLAG_RUN) {
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <Plan_UIRoutine+0x48>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <Plan_UIRoutine+0x40>
		if(main_flag & MAIN_FLAG_NEXT) {
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <Plan_UIRoutine+0x48>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00e      	beq.n	8003b78 <Plan_UIRoutine+0x3c>
			GetAction(num_index);
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <Plan_UIRoutine+0x4c>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	463b      	mov	r3, r7
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 fdcc 	bl	8005700 <GetAction>
			main_flag &= ~MAIN_FLAG_NEXT;
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <Plan_UIRoutine+0x48>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f023 0302 	bic.w	r3, r3, #2
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <Plan_UIRoutine+0x48>)
 8003b74:	701a      	strb	r2, [r3, #0]
		}
		else {
			GetActionSequenceRoutine();
		}
	}
}
 8003b76:	e001      	b.n	8003b7c <Plan_UIRoutine+0x40>
			GetActionSequenceRoutine();
 8003b78:	f002 f9de 	bl	8005f38 <GetActionSequenceRoutine>
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000a74 	.word	0x20000a74
 8003b88:	20000c40 	.word	0x20000c40
 8003b8c:	00000000 	.word	0x00000000

08003b90 <Plan_Main>:

uint8_t retval;
void Plan_Main(float period) {
 8003b90:	b5b0      	push	{r4, r5, r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	ed87 0a01 	vstr	s0, [r7, #4]
	if(main_flag & MAIN_FLAG_RUN) {
 8003b9a:	4ba9      	ldr	r3, [pc, #676]	; (8003e40 <Plan_Main+0x2b0>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8261 	beq.w	800406a <Plan_Main+0x4da>
		if(main_flag & MAIN_FLAG_NEXT) {
 8003ba8:	4ba5      	ldr	r3, [pc, #660]	; (8003e40 <Plan_Main+0x2b0>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 8250 	bne.w	8004056 <Plan_Main+0x4c6>
//			Run_LineTracing(speed_now, period, plan.status_pid);

		}
		else {

			if(retval == 0) {
 8003bb6:	4ba3      	ldr	r3, [pc, #652]	; (8003e44 <Plan_Main+0x2b4>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d110      	bne.n	8003be0 <Plan_Main+0x50>
				Run_LineTracing(speed_now, period, pid_index_status);
 8003bbe:	4ba2      	ldr	r3, [pc, #648]	; (8003e48 <Plan_Main+0x2b8>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	4ba0      	ldr	r3, [pc, #640]	; (8003e4c <Plan_Main+0x2bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	edd7 0a01 	vldr	s1, [r7, #4]
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	f001 f991 	bl	8004f00 <Run_LineTracing>
 8003bde:	e066      	b.n	8003cae <Plan_Main+0x11e>
			}
			else if(retval == 2){
 8003be0:	4b98      	ldr	r3, [pc, #608]	; (8003e44 <Plan_Main+0x2b4>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d158      	bne.n	8003c9a <Plan_Main+0x10a>
				sum_error = 0;
 8003be8:	4b99      	ldr	r3, [pc, #612]	; (8003e50 <Plan_Main+0x2c0>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	801a      	strh	r2, [r3, #0]
				counter_status = 0;
 8003bee:	4b99      	ldr	r3, [pc, #612]	; (8003e54 <Plan_Main+0x2c4>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
				action_status = 0;
 8003bf4:	4b98      	ldr	r3, [pc, #608]	; (8003e58 <Plan_Main+0x2c8>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
				autoturn_stat = 0;
 8003bfa:	4b98      	ldr	r3, [pc, #608]	; (8003e5c <Plan_Main+0x2cc>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
//				speed_now = plan.speed;
				num_index++;
 8003c00:	4b97      	ldr	r3, [pc, #604]	; (8003e60 <Plan_Main+0x2d0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	4a96      	ldr	r2, [pc, #600]	; (8003e60 <Plan_Main+0x2d0>)
 8003c08:	6013      	str	r3, [r2, #0]
				if(num_index == plan.num_action) {
 8003c0a:	4b96      	ldr	r3, [pc, #600]	; (8003e64 <Plan_Main+0x2d4>)
 8003c0c:	885b      	ldrh	r3, [r3, #2]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4b93      	ldr	r3, [pc, #588]	; (8003e60 <Plan_Main+0x2d0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d102      	bne.n	8003c1e <Plan_Main+0x8e>
					Plan_Stop();
 8003c18:	f7ff fee0 	bl	80039dc <Plan_Stop>
					return;
 8003c1c:	e225      	b.n	800406a <Plan_Main+0x4da>
				}
				if(num_index >= plan.checkpoint[num_checkpoint+1]) {
 8003c1e:	4b92      	ldr	r3, [pc, #584]	; (8003e68 <Plan_Main+0x2d8>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	4a8f      	ldr	r2, [pc, #572]	; (8003e64 <Plan_Main+0x2d4>)
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	889b      	ldrh	r3, [r3, #4]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b8c      	ldr	r3, [pc, #560]	; (8003e60 <Plan_Main+0x2d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	dc05      	bgt.n	8003c42 <Plan_Main+0xb2>
					num_checkpoint++;
 8003c36:	4b8c      	ldr	r3, [pc, #560]	; (8003e68 <Plan_Main+0x2d8>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b8a      	ldr	r3, [pc, #552]	; (8003e68 <Plan_Main+0x2d8>)
 8003c40:	701a      	strb	r2, [r3, #0]
				}
				if(!GetActionSequence())
 8003c42:	f002 f927 	bl	8005e94 <GetActionSequence>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <Plan_Main+0xca>
					main_flag |= MAIN_FLAG_NEXT;
 8003c4c:	4b7c      	ldr	r3, [pc, #496]	; (8003e40 <Plan_Main+0x2b0>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4b7a      	ldr	r3, [pc, #488]	; (8003e40 <Plan_Main+0x2b0>)
 8003c58:	701a      	strb	r2, [r3, #0]

				if(plan_active.kp == 0) {
 8003c5a:	4b84      	ldr	r3, [pc, #528]	; (8003e6c <Plan_Main+0x2dc>)
 8003c5c:	7b1b      	ldrb	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <Plan_Main+0xe8>
					kp = plan.kpid[0];
 8003c62:	4b80      	ldr	r3, [pc, #512]	; (8003e64 <Plan_Main+0x2d4>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	4a82      	ldr	r2, [pc, #520]	; (8003e70 <Plan_Main+0x2e0>)
 8003c68:	6013      	str	r3, [r2, #0]
					pid_index_status = plan.status_pid;
 8003c6a:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <Plan_Main+0x2d4>)
 8003c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <Plan_Main+0x2bc>)
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e01a      	b.n	8003cae <Plan_Main+0x11e>
				}
				else {
					kp = (float)plan_active.kp / 10.00;
 8003c78:	4b7c      	ldr	r3, [pc, #496]	; (8003e6c <Plan_Main+0x2dc>)
 8003c7a:	7b1b      	ldrb	r3, [r3, #12]
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c84:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c8c:	4b78      	ldr	r3, [pc, #480]	; (8003e70 <Plan_Main+0x2e0>)
 8003c8e:	edc3 7a00 	vstr	s15, [r3]
					pid_index_status = 2;
 8003c92:	4b6e      	ldr	r3, [pc, #440]	; (8003e4c <Plan_Main+0x2bc>)
 8003c94:	2202      	movs	r2, #2
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e009      	b.n	8003cae <Plan_Main+0x11e>
				}
			}
			else if(retval == 3){
 8003c9a:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <Plan_Main+0x2b4>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d105      	bne.n	8003cae <Plan_Main+0x11e>
				counter_status = 0;
 8003ca2:	4b6c      	ldr	r3, [pc, #432]	; (8003e54 <Plan_Main+0x2c4>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
				action_status = 2;
 8003ca8:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <Plan_Main+0x2c8>)
 8003caa:	2202      	movs	r2, #2
 8003cac:	701a      	strb	r2, [r3, #0]
			}

			if(speed_ramp_status == 1) {
 8003cae:	4b71      	ldr	r3, [pc, #452]	; (8003e74 <Plan_Main+0x2e4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d11f      	bne.n	8003cf6 <Plan_Main+0x166>
				speed_ramp += plan.acc * 0.01;
 8003cb6:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <Plan_Main+0x2e8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fc44 	bl	8000548 <__aeabi_f2d>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <Plan_Main+0x2d4>)
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fc3d 	bl	8000548 <__aeabi_f2d>
 8003cce:	a35a      	add	r3, pc, #360	; (adr r3, 8003e38 <Plan_Main+0x2a8>)
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f7fc fc90 	bl	80005f8 <__aeabi_dmul>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4620      	mov	r0, r4
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f7fc fad4 	bl	800028c <__adddf3>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fc ff7c 	bl	8000be8 <__aeabi_d2f>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a61      	ldr	r2, [pc, #388]	; (8003e78 <Plan_Main+0x2e8>)
 8003cf4:	6013      	str	r3, [r2, #0]
			}

			if(plan_active.unit_speed==0) speed_now = plan.speed;
 8003cf6:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <Plan_Main+0x2dc>)
 8003cf8:	7a9b      	ldrb	r3, [r3, #10]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <Plan_Main+0x17a>
 8003cfe:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <Plan_Main+0x2d4>)
 8003d00:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <Plan_Main+0x2b8>)
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e003      	b.n	8003d12 <Plan_Main+0x182>
			else speed_now = plan_active.unit_speed;
 8003d0a:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <Plan_Main+0x2dc>)
 8003d0c:	7a9a      	ldrb	r2, [r3, #10]
 8003d0e:	4b4e      	ldr	r3, [pc, #312]	; (8003e48 <Plan_Main+0x2b8>)
 8003d10:	701a      	strb	r2, [r3, #0]

//			speed_now = (plan_active.unit_speed==0)?plan.speed:plan_active.unit_speed;
			if(speed_ramp < (float)speed_now && speed_ramp_status == 1) {
 8003d12:	4b4d      	ldr	r3, [pc, #308]	; (8003e48 <Plan_Main+0x2b8>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d1e:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <Plan_Main+0x2e8>)
 8003d20:	edd3 7a00 	vldr	s15, [r3]
 8003d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	dd0f      	ble.n	8003d4e <Plan_Main+0x1be>
 8003d2e:	4b51      	ldr	r3, [pc, #324]	; (8003e74 <Plan_Main+0x2e4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d10b      	bne.n	8003d4e <Plan_Main+0x1be>
				speed_now = speed_ramp;
 8003d36:	4b50      	ldr	r3, [pc, #320]	; (8003e78 <Plan_Main+0x2e8>)
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d40:	edc7 7a00 	vstr	s15, [r7]
 8003d44:	783b      	ldrb	r3, [r7, #0]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <Plan_Main+0x2b8>)
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e002      	b.n	8003d54 <Plan_Main+0x1c4>
			}
			else {
				speed_ramp_status = 0;
 8003d4e:	4b49      	ldr	r3, [pc, #292]	; (8003e74 <Plan_Main+0x2e4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
			}

			if(action_status == 0) {
 8003d54:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <Plan_Main+0x2c8>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d111      	bne.n	8003d80 <Plan_Main+0x1f0>
				switch(GET_LINE_COLOR_STAT(plan_active.status)) {
 8003d5c:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <Plan_Main+0x2dc>)
 8003d5e:	7adb      	ldrb	r3, [r3, #11]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d002      	beq.n	8003d6e <Plan_Main+0x1de>
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d003      	beq.n	8003d74 <Plan_Main+0x1e4>
 8003d6c:	e005      	b.n	8003d7a <Plan_Main+0x1ea>
				case LINE_COLOR_STAT_BLACK: SEN_BlackLine(); break;
 8003d6e:	f001 fc2b 	bl	80055c8 <SEN_BlackLine>
 8003d72:	e002      	b.n	8003d7a <Plan_Main+0x1ea>
				case LINE_COLOR_STAT_WHITE: SEN_WhiteLine(); break;
 8003d74:	f001 fc34 	bl	80055e0 <SEN_WhiteLine>
 8003d78:	bf00      	nop
				}
				action_status = 1;
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <Plan_Main+0x2c8>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
			}

			if(action_status <= 1 && 				 \
 8003d80:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <Plan_Main+0x2c8>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d82b      	bhi.n	8003de0 <Plan_Main+0x250>
					(plan_active.act != PLAN_STOP && \
 8003d88:	4b38      	ldr	r3, [pc, #224]	; (8003e6c <Plan_Main+0x2dc>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
			if(action_status <= 1 && 				 \
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d027      	beq.n	8003de0 <Plan_Main+0x250>
					 plan_active.act != PLAN_NULL && \
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <Plan_Main+0x2dc>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
					(plan_active.act != PLAN_STOP && \
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d023      	beq.n	8003de0 <Plan_Main+0x250>
					 plan_active.act != PLAN_JUMP && \
 8003d98:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <Plan_Main+0x2dc>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
					 plan_active.act != PLAN_NULL && \
 8003d9c:	2b0b      	cmp	r3, #11
 8003d9e:	d01f      	beq.n	8003de0 <Plan_Main+0x250>
					 plan_active.act != PLAN_FOLLOW_L && \
 8003da0:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <Plan_Main+0x2dc>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
					 plan_active.act != PLAN_JUMP && \
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d01b      	beq.n	8003de0 <Plan_Main+0x250>
					 plan_active.act != PLAN_FOLLOW_R)) {
 8003da8:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <Plan_Main+0x2dc>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
					 plan_active.act != PLAN_FOLLOW_L && \
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d017      	beq.n	8003de0 <Plan_Main+0x250>
				retval = Plan_ActionInit(plan_active, period, speed_now);
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <Plan_Main+0x2b8>)
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <Plan_Main+0x2dc>)
 8003db6:	9200      	str	r2, [sp, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4610      	mov	r0, r2
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	7b1a      	ldrb	r2, [r3, #12]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f362 0307 	bfi	r3, r2, #0, #8
 8003dcc:	ed97 0a01 	vldr	s0, [r7, #4]
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	f7ff fd5d 	bl	8003890 <Plan_ActionInit>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <Plan_Main+0x2b4>)
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e13a      	b.n	8004056 <Plan_Main+0x4c6>
			}
			else {
				switch(plan_active.act) {
 8003de0:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <Plan_Main+0x2dc>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	f200 8133 	bhi.w	8004050 <Plan_Main+0x4c0>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <Plan_Main+0x260>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003e7d 	.word	0x08003e7d
 8003df8:	08003ea3 	.word	0x08003ea3
 8003dfc:	08003ec9 	.word	0x08003ec9
 8003e00:	08003ef5 	.word	0x08003ef5
 8003e04:	08003f1b 	.word	0x08003f1b
 8003e08:	08003f41 	.word	0x08003f41
 8003e0c:	08003f67 	.word	0x08003f67
 8003e10:	08003f8d 	.word	0x08003f8d
 8003e14:	08003fb3 	.word	0x08003fb3
 8003e18:	08003fd9 	.word	0x08003fd9
 8003e1c:	08004005 	.word	0x08004005
 8003e20:	0800402b 	.word	0x0800402b
				case PLAN_STOP: 	retval = Plan_Stop(); 					break;
 8003e24:	f7ff fdda 	bl	80039dc <Plan_Stop>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <Plan_Main+0x2b4>)
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e111      	b.n	8004056 <Plan_Main+0x4c6>
 8003e32:	bf00      	nop
 8003e34:	f3af 8000 	nop.w
 8003e38:	47ae147b 	.word	0x47ae147b
 8003e3c:	3f847ae1 	.word	0x3f847ae1
 8003e40:	20000a74 	.word	0x20000a74
 8003e44:	20000aa4 	.word	0x20000aa4
 8003e48:	20000a97 	.word	0x20000a97
 8003e4c:	20000aa0 	.word	0x20000aa0
 8003e50:	20000b64 	.word	0x20000b64
 8003e54:	20000a94 	.word	0x20000a94
 8003e58:	20000a95 	.word	0x20000a95
 8003e5c:	20000a96 	.word	0x20000a96
 8003e60:	20000c40 	.word	0x20000c40
 8003e64:	20000f2c 	.word	0x20000f2c
 8003e68:	20000c3c 	.word	0x20000c3c
 8003e6c:	20000f1c 	.word	0x20000f1c
 8003e70:	20000b54 	.word	0x20000b54
 8003e74:	20000a9c 	.word	0x20000a9c
 8003e78:	20000a98 	.word	0x20000a98
				case PLAN_LEFT: 	retval = Plan_Left(plan_active); 		break;
 8003e7c:	4b7c      	ldr	r3, [pc, #496]	; (8004070 <Plan_Main+0x4e0>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4610      	mov	r0, r2
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4611      	mov	r1, r2
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	4614      	mov	r4, r2
 8003e8a:	7b1a      	ldrb	r2, [r3, #12]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f362 0307 	bfi	r3, r2, #0, #8
 8003e92:	4622      	mov	r2, r4
 8003e94:	f7fe fda4 	bl	80029e0 <Plan_Left>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b75      	ldr	r3, [pc, #468]	; (8004074 <Plan_Main+0x4e4>)
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e0d9      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_RIGHT: 	retval = Plan_Right(plan_active); 		break;
 8003ea2:	4b73      	ldr	r3, [pc, #460]	; (8004070 <Plan_Main+0x4e0>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	4614      	mov	r4, r2
 8003eb0:	7b1a      	ldrb	r2, [r3, #12]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f362 0307 	bfi	r3, r2, #0, #8
 8003eb8:	4622      	mov	r2, r4
 8003eba:	f7fe fea9 	bl	8002c10 <Plan_Right>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <Plan_Main+0x4e4>)
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	e0c6      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_FORWARD: 	retval = Plan_Forward(plan_active, speed_now); 	break;
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	; (8004078 <Plan_Main+0x4e8>)
 8003eca:	781a      	ldrb	r2, [r3, #0]
 8003ecc:	4b68      	ldr	r3, [pc, #416]	; (8004070 <Plan_Main+0x4e0>)
 8003ece:	9200      	str	r2, [sp, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	4614      	mov	r4, r2
 8003edc:	7b1a      	ldrb	r2, [r3, #12]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f362 0307 	bfi	r3, r2, #0, #8
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	f7fe ffa9 	bl	8002e3c <Plan_Forward>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b61      	ldr	r3, [pc, #388]	; (8004074 <Plan_Main+0x4e4>)
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e0b0      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_FOLLOW: 	retval = Plan_Follow(plan_active); 		break;
 8003ef4:	4b5e      	ldr	r3, [pc, #376]	; (8004070 <Plan_Main+0x4e0>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4610      	mov	r0, r2
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4611      	mov	r1, r2
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4614      	mov	r4, r2
 8003f02:	7b1a      	ldrb	r2, [r3, #12]
 8003f04:	2300      	movs	r3, #0
 8003f06:	f362 0307 	bfi	r3, r2, #0, #8
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	f7ff f94a 	bl	80031a4 <Plan_Follow>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b57      	ldr	r3, [pc, #348]	; (8004074 <Plan_Main+0x4e4>)
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	e09d      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_FOLLOW_L: retval = Plan_FollowLeft(plan_active); 	break;
 8003f1a:	4b55      	ldr	r3, [pc, #340]	; (8004070 <Plan_Main+0x4e0>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4610      	mov	r0, r2
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4611      	mov	r1, r2
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	4614      	mov	r4, r2
 8003f28:	7b1a      	ldrb	r2, [r3, #12]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f362 0307 	bfi	r3, r2, #0, #8
 8003f30:	4622      	mov	r2, r4
 8003f32:	f7ff f97d 	bl	8003230 <Plan_FollowLeft>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <Plan_Main+0x4e4>)
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e08a      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_FOLLOW_R: retval = Plan_FollowRight(plan_active); break;
 8003f40:	4b4b      	ldr	r3, [pc, #300]	; (8004070 <Plan_Main+0x4e0>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4610      	mov	r0, r2
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4611      	mov	r1, r2
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	7b1a      	ldrb	r2, [r3, #12]
 8003f50:	2300      	movs	r3, #0
 8003f52:	f362 0307 	bfi	r3, r2, #0, #8
 8003f56:	4622      	mov	r2, r4
 8003f58:	f7ff fae2 	bl	8003520 <Plan_FollowRight>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b44      	ldr	r3, [pc, #272]	; (8004074 <Plan_Main+0x4e4>)
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e077      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_INVERT: 	retval = Plan_Invert(plan_active); 		break;
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <Plan_Main+0x4e0>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	4611      	mov	r1, r2
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	4614      	mov	r4, r2
 8003f74:	7b1a      	ldrb	r2, [r3, #12]
 8003f76:	2300      	movs	r3, #0
 8003f78:	f362 0307 	bfi	r3, r2, #0, #8
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	f7ff fc41 	bl	8003804 <Plan_Invert>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <Plan_Main+0x4e4>)
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e064      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_NEXT: 	retval = Plan_NextPlan(plan_active); 	break;
 8003f8c:	4b38      	ldr	r3, [pc, #224]	; (8004070 <Plan_Main+0x4e0>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4610      	mov	r0, r2
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4611      	mov	r1, r2
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	4614      	mov	r4, r2
 8003f9a:	7b1a      	ldrb	r2, [r3, #12]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f362 0307 	bfi	r3, r2, #0, #8
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	f7ff fc45 	bl	8003832 <Plan_NextPlan>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b31      	ldr	r3, [pc, #196]	; (8004074 <Plan_Main+0x4e4>)
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e051      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_NULL: 	retval = Plan_Null(plan_active); 		break;
 8003fb2:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <Plan_Main+0x4e0>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	7b1a      	ldrb	r2, [r3, #12]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f362 0307 	bfi	r3, r2, #0, #8
 8003fc8:	4622      	mov	r2, r4
 8003fca:	f7ff fc3e 	bl	800384a <Plan_Null>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b28      	ldr	r3, [pc, #160]	; (8004074 <Plan_Main+0x4e4>)
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e03e      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_BACKWARD:	retval = Plan_Backward(plan_active, speed_now);	break;
 8003fd8:	4b27      	ldr	r3, [pc, #156]	; (8004078 <Plan_Main+0x4e8>)
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <Plan_Main+0x4e0>)
 8003fde:	9200      	str	r2, [sp, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	4614      	mov	r4, r2
 8003fec:	7b1a      	ldrb	r2, [r3, #12]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f362 0307 	bfi	r3, r2, #0, #8
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	f7fe ffc3 	bl	8002f80 <Plan_Backward>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <Plan_Main+0x4e4>)
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e028      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_JUMP: 	retval = Plan_Jump(plan_active); 		break;
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <Plan_Main+0x4e0>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4610      	mov	r0, r2
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	4611      	mov	r1, r2
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	4614      	mov	r4, r2
 8004012:	7b1a      	ldrb	r2, [r3, #12]
 8004014:	2300      	movs	r3, #0
 8004016:	f362 0307 	bfi	r3, r2, #0, #8
 800401a:	4622      	mov	r2, r4
 800401c:	f7ff fc22 	bl	8003864 <Plan_Jump>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	4b13      	ldr	r3, [pc, #76]	; (8004074 <Plan_Main+0x4e4>)
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e015      	b.n	8004056 <Plan_Main+0x4c6>
				case PLAN_IDLE: 	retval = Plan_Idle(plan_active); 		break;
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <Plan_Main+0x4e0>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4610      	mov	r0, r2
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4611      	mov	r1, r2
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	4614      	mov	r4, r2
 8004038:	7b1a      	ldrb	r2, [r3, #12]
 800403a:	2300      	movs	r3, #0
 800403c:	f362 0307 	bfi	r3, r2, #0, #8
 8004040:	4622      	mov	r2, r4
 8004042:	f7ff f841 	bl	80030c8 <Plan_Idle>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <Plan_Main+0x4e4>)
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e002      	b.n	8004056 <Plan_Main+0x4c6>
				default: retval = 2;
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <Plan_Main+0x4e4>)
 8004052:	2202      	movs	r2, #2
 8004054:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		plan_counter++;
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <Plan_Main+0x4ec>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a07      	ldr	r2, [pc, #28]	; (800407c <Plan_Main+0x4ec>)
 800405e:	6013      	str	r3, [r2, #0]
		plan_counter2++;
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <Plan_Main+0x4f0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	4a06      	ldr	r2, [pc, #24]	; (8004080 <Plan_Main+0x4f0>)
 8004068:	6013      	str	r3, [r2, #0]
	}
}
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bdb0      	pop	{r4, r5, r7, pc}
 8004070:	20000f1c 	.word	0x20000f1c
 8004074:	20000aa4 	.word	0x20000aa4
 8004078:	20000a97 	.word	0x20000a97
 800407c:	20000a80 	.word	0x20000a80
 8004080:	20000a8c 	.word	0x20000a8c

08004084 <Run_Init>:
float robot_enc_yawpos = 0;

float temp_yaw_speed;
float this_accl;

void Run_Init() {
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
	memset(motor, 0, sizeof(motor[0])*2);
 8004088:	2290      	movs	r2, #144	; 0x90
 800408a:	2100      	movs	r1, #0
 800408c:	4829      	ldr	r0, [pc, #164]	; (8004134 <Run_Init+0xb0>)
 800408e:	f00b ff00 	bl	800fe92 <memset>

	motor[0].mode = MOTOR_MODE_CLOSE;
 8004092:	4b28      	ldr	r3, [pc, #160]	; (8004134 <Run_Init+0xb0>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
	motor[0].pwm_htim = &htim3;
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <Run_Init+0xb0>)
 800409a:	4a27      	ldr	r2, [pc, #156]	; (8004138 <Run_Init+0xb4>)
 800409c:	605a      	str	r2, [r3, #4]
	motor[0].ch1 = TIM_CHANNEL_1;
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <Run_Init+0xb0>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	811a      	strh	r2, [r3, #8]
	motor[0].ch2 = TIM_CHANNEL_2;
 80040a4:	4b23      	ldr	r3, [pc, #140]	; (8004134 <Run_Init+0xb0>)
 80040a6:	2204      	movs	r2, #4
 80040a8:	815a      	strh	r2, [r3, #10]
	motor[0].enc_htim = &htim2;
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <Run_Init+0xb0>)
 80040ac:	4a23      	ldr	r2, [pc, #140]	; (800413c <Run_Init+0xb8>)
 80040ae:	611a      	str	r2, [r3, #16]
	motor[0].dir = 1;
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <Run_Init+0xb0>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	731a      	strb	r2, [r3, #12]
	motor[0].pwm_factor = 0.01;
 80040b6:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <Run_Init+0xb0>)
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <Run_Init+0xbc>)
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
	motor[0].vel_factor = 20;
 80040bc:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <Run_Init+0xb0>)
 80040be:	4a21      	ldr	r2, [pc, #132]	; (8004144 <Run_Init+0xc0>)
 80040c0:	62da      	str	r2, [r3, #44]	; 0x2c
	motor[0].kp = 0.2;
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <Run_Init+0xb0>)
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <Run_Init+0xc4>)
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
	motor[0].ki = 5;
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <Run_Init+0xb0>)
 80040ca:	4a20      	ldr	r2, [pc, #128]	; (800414c <Run_Init+0xc8>)
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34
	motor[0].filter_alpha = 0.5;
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <Run_Init+0xb0>)
 80040d0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44

	motor[1].mode = motor[0].mode;
 80040d6:	4b17      	ldr	r3, [pc, #92]	; (8004134 <Run_Init+0xb0>)
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	4b16      	ldr	r3, [pc, #88]	; (8004134 <Run_Init+0xb0>)
 80040dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	motor[1].pwm_htim = &htim3;
 80040e0:	4b14      	ldr	r3, [pc, #80]	; (8004134 <Run_Init+0xb0>)
 80040e2:	4a15      	ldr	r2, [pc, #84]	; (8004138 <Run_Init+0xb4>)
 80040e4:	64da      	str	r2, [r3, #76]	; 0x4c
	motor[1].ch1 = TIM_CHANNEL_3;
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <Run_Init+0xb0>)
 80040e8:	2208      	movs	r2, #8
 80040ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	motor[1].ch2 = TIM_CHANNEL_4;
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <Run_Init+0xb0>)
 80040f0:	220c      	movs	r2, #12
 80040f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	motor[1].enc_htim = &htim4;
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <Run_Init+0xb0>)
 80040f8:	4a15      	ldr	r2, [pc, #84]	; (8004150 <Run_Init+0xcc>)
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
	motor[1].dir = -1;
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <Run_Init+0xb0>)
 80040fe:	22ff      	movs	r2, #255	; 0xff
 8004100:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	motor[1].pwm_factor = 0.0097;
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <Run_Init+0xb0>)
 8004106:	4a13      	ldr	r2, [pc, #76]	; (8004154 <Run_Init+0xd0>)
 8004108:	66da      	str	r2, [r3, #108]	; 0x6c
	motor[1].vel_factor = 20;
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <Run_Init+0xb0>)
 800410c:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <Run_Init+0xc0>)
 800410e:	675a      	str	r2, [r3, #116]	; 0x74
	motor[1].kp = 0.2;
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <Run_Init+0xb0>)
 8004112:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <Run_Init+0xc4>)
 8004114:	679a      	str	r2, [r3, #120]	; 0x78
	motor[1].ki = motor[0].ki;
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <Run_Init+0xb0>)
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	4a06      	ldr	r2, [pc, #24]	; (8004134 <Run_Init+0xb0>)
 800411c:	67d3      	str	r3, [r2, #124]	; 0x7c
	motor[1].filter_alpha = motor[0].filter_alpha;
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <Run_Init+0xb0>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <Run_Init+0xb0>)
 8004124:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	robot_enc_pos = 0;
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <Run_Init+0xd4>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000ab0 	.word	0x20000ab0
 8004138:	20000ffc 	.word	0x20000ffc
 800413c:	20000fb4 	.word	0x20000fb4
 8004140:	3c23d70a 	.word	0x3c23d70a
 8004144:	41a00000 	.word	0x41a00000
 8004148:	3e4ccccd 	.word	0x3e4ccccd
 800414c:	40a00000 	.word	0x40a00000
 8004150:	20001044 	.word	0x20001044
 8004154:	3c1eecc0 	.word	0x3c1eecc0
 8004158:	20000b40 	.word	0x20000b40

0800415c <Run_MotorRoutine>:

void Run_MotorRoutine(float period) {
 800415c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_EnocderRoutine(&motor[0], period);
 8004168:	ed97 0a01 	vldr	s0, [r7, #4]
 800416c:	4828      	ldr	r0, [pc, #160]	; (8004210 <Run_MotorRoutine+0xb4>)
 800416e:	f7fe fa3a 	bl	80025e6 <Motor_EnocderRoutine>
	Motor_EnocderRoutine(&motor[1], period);
 8004172:	ed97 0a01 	vldr	s0, [r7, #4]
 8004176:	4827      	ldr	r0, [pc, #156]	; (8004214 <Run_MotorRoutine+0xb8>)
 8004178:	f7fe fa35 	bl	80025e6 <Motor_EnocderRoutine>
	robot_enc_pos += (motor[0].enc_vel*0.5) + (motor[1].enc_vel*0.5);
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <Run_MotorRoutine+0xbc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc f9cf 	bl	8000524 <__aeabi_i2d>
 8004186:	4604      	mov	r4, r0
 8004188:	460d      	mov	r5, r1
 800418a:	4b21      	ldr	r3, [pc, #132]	; (8004210 <Run_MotorRoutine+0xb4>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc f9c8 	bl	8000524 <__aeabi_i2d>
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <Run_MotorRoutine+0xc0>)
 800419a:	f7fc fa2d 	bl	80005f8 <__aeabi_dmul>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4690      	mov	r8, r2
 80041a4:	4699      	mov	r9, r3
 80041a6:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <Run_MotorRoutine+0xb4>)
 80041a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc f9ba 	bl	8000524 <__aeabi_i2d>
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	4b19      	ldr	r3, [pc, #100]	; (800421c <Run_MotorRoutine+0xc0>)
 80041b6:	f7fc fa1f 	bl	80005f8 <__aeabi_dmul>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4640      	mov	r0, r8
 80041c0:	4649      	mov	r1, r9
 80041c2:	f7fc f863 	bl	800028c <__adddf3>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4620      	mov	r0, r4
 80041cc:	4629      	mov	r1, r5
 80041ce:	f7fc f85d 	bl	800028c <__adddf3>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	f7fc fcbd 	bl	8000b58 <__aeabi_d2iz>
 80041de:	4603      	mov	r3, r0
 80041e0:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <Run_MotorRoutine+0xbc>)
 80041e2:	6013      	str	r3, [r2, #0]
	robot_enc_yawpos += (motor[1].enc_vel - motor[0].enc_vel);
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <Run_MotorRoutine+0xb4>)
 80041e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <Run_MotorRoutine+0xb4>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <Run_MotorRoutine+0xc4>)
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <Run_MotorRoutine+0xc4>)
 8004202:	edc3 7a00 	vstr	s15, [r3]
//	Motor_ControlRoutine(&motor[0], period);
//	Motor_ControlRoutine(&motor[1], period);
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004210:	20000ab0 	.word	0x20000ab0
 8004214:	20000af8 	.word	0x20000af8
 8004218:	20000b40 	.word	0x20000b40
 800421c:	3fe00000 	.word	0x3fe00000
 8004220:	20000b44 	.word	0x20000b44

08004224 <Run_MotorRoutine2>:

void Run_MotorRoutine2(float _period) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	ed87 0a01 	vstr	s0, [r7, #4]
//	Motor_EnocderRoutine(&motor[0], period);
//	Motor_EnocderRoutine(&motor[1], period);
	Motor_ControlRoutine(&motor[0], _period);
 800422e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004232:	4806      	ldr	r0, [pc, #24]	; (800424c <Run_MotorRoutine2+0x28>)
 8004234:	f7fe fa06 	bl	8002644 <Motor_ControlRoutine>
	Motor_ControlRoutine(&motor[1], _period);
 8004238:	ed97 0a01 	vldr	s0, [r7, #4]
 800423c:	4804      	ldr	r0, [pc, #16]	; (8004250 <Run_MotorRoutine2+0x2c>)
 800423e:	f7fe fa01 	bl	8002644 <Motor_ControlRoutine>
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000ab0 	.word	0x20000ab0
 8004250:	20000af8 	.word	0x20000af8

08004254 <Run_YawSpeed>:
float ki;
float kd;
float alpha;
int16_t sum_error;

float Run_YawSpeed(float period, float _speed, uint8_t flag) {
 8004254:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004258:	b08c      	sub	sp, #48	; 0x30
 800425a:	af00      	add	r7, sp, #0
 800425c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004260:	edc7 0a02 	vstr	s1, [r7, #8]
 8004264:	4603      	mov	r3, r0
 8004266:	71fb      	strb	r3, [r7, #7]
	static int16_t last_error = 0;
	static int16_t last_div_error = 0;
	static float last_mv = 0;
	int16_t error = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t pr_sensor_bin = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	83fb      	strh	r3, [r7, #30]
	uint16_t mask = (1<<SENSOR_NUM)-1;
 8004270:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8004274:	83bb      	strh	r3, [r7, #28]
	if((flag&0x01)==0x01) {
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <Run_YawSpeed+0x48>
		pr_sensor_bin = (~sensor_binary) & mask;
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <Run_YawSpeed+0x44>)
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b21b      	sxth	r3, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	b21a      	sxth	r2, r3
 800428a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800428e:	4013      	ands	r3, r2
 8004290:	b21b      	sxth	r3, r3
 8004292:	83fb      	strh	r3, [r7, #30]
 8004294:	e007      	b.n	80042a6 <Run_YawSpeed+0x52>
 8004296:	bf00      	nop
 8004298:	20000bd2 	.word	0x20000bd2
	}
	else {
		pr_sensor_bin = sensor_binary & mask;
 800429c:	4bcc      	ldr	r3, [pc, #816]	; (80045d0 <Run_YawSpeed+0x37c>)
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	8bbb      	ldrh	r3, [r7, #28]
 80042a2:	4013      	ands	r3, r2
 80042a4:	83fb      	strh	r3, [r7, #30]
	}

	switch(sensor_binary) {
 80042a6:	4bca      	ldr	r3, [pc, #808]	; (80045d0 <Run_YawSpeed+0x37c>)
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	f643 6201 	movw	r2, #15873	; 0x3e01
 80042ae:	4293      	cmp	r3, r2
 80042b0:	f000 844c 	beq.w	8004b4c <Run_YawSpeed+0x8f8>
 80042b4:	f643 6201 	movw	r2, #15873	; 0x3e01
 80042b8:	4293      	cmp	r3, r2
 80042ba:	f300 84fd 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80042be:	f643 4203 	movw	r2, #15363	; 0x3c03
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f000 844a 	beq.w	8004b5c <Run_YawSpeed+0x908>
 80042c8:	f643 4203 	movw	r2, #15363	; 0x3c03
 80042cc:	4293      	cmp	r3, r2
 80042ce:	f300 84f3 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80042d2:	f5b3 5f67 	cmp.w	r3, #14784	; 0x39c0
 80042d6:	f000 848e 	beq.w	8004bf6 <Run_YawSpeed+0x9a2>
 80042da:	f5b3 5f67 	cmp.w	r3, #14784	; 0x39c0
 80042de:	f300 84eb 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80042e2:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 80042e6:	f000 8492 	beq.w	8004c0e <Run_YawSpeed+0x9ba>
 80042ea:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 80042ee:	f300 84e3 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80042f2:	f643 02e0 	movw	r2, #14560	; 0x38e0
 80042f6:	4293      	cmp	r3, r2
 80042f8:	f000 8466 	beq.w	8004bc8 <Run_YawSpeed+0x974>
 80042fc:	f643 02e0 	movw	r2, #14560	; 0x38e0
 8004300:	4293      	cmp	r3, r2
 8004302:	f300 84d9 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004306:	f5b3 5f63 	cmp.w	r3, #14528	; 0x38c0
 800430a:	f000 8468 	beq.w	8004bde <Run_YawSpeed+0x98a>
 800430e:	f5b3 5f63 	cmp.w	r3, #14528	; 0x38c0
 8004312:	f300 84d1 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004316:	f643 0260 	movw	r2, #14432	; 0x3860
 800431a:	4293      	cmp	r3, r2
 800431c:	f000 8448 	beq.w	8004bb0 <Run_YawSpeed+0x95c>
 8004320:	f643 0260 	movw	r2, #14432	; 0x3860
 8004324:	4293      	cmp	r3, r2
 8004326:	f300 84c7 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800432a:	f643 0207 	movw	r2, #14343	; 0x3807
 800432e:	4293      	cmp	r3, r2
 8004330:	f000 841e 	beq.w	8004b70 <Run_YawSpeed+0x91c>
 8004334:	f643 0207 	movw	r2, #14343	; 0x3807
 8004338:	4293      	cmp	r3, r2
 800433a:	f300 84bd 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800433e:	f643 0201 	movw	r2, #14337	; 0x3801
 8004342:	4293      	cmp	r3, r2
 8004344:	f000 8406 	beq.w	8004b54 <Run_YawSpeed+0x900>
 8004348:	f643 0201 	movw	r2, #14337	; 0x3801
 800434c:	4293      	cmp	r3, r2
 800434e:	f300 84b3 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004352:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8004356:	f000 83c8 	beq.w	8004aea <Run_YawSpeed+0x896>
 800435a:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 800435e:	f300 84ab 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004362:	f5b3 5f47 	cmp.w	r3, #12736	; 0x31c0
 8004366:	f000 8449 	beq.w	8004bfc <Run_YawSpeed+0x9a8>
 800436a:	f5b3 5f47 	cmp.w	r3, #12736	; 0x31c0
 800436e:	f300 84a3 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004372:	f5b3 5f46 	cmp.w	r3, #12672	; 0x3180
 8004376:	f000 844d 	beq.w	8004c14 <Run_YawSpeed+0x9c0>
 800437a:	f5b3 5f46 	cmp.w	r3, #12672	; 0x3180
 800437e:	f300 849b 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004382:	f243 02e0 	movw	r2, #12512	; 0x30e0
 8004386:	4293      	cmp	r3, r2
 8004388:	f000 8422 	beq.w	8004bd0 <Run_YawSpeed+0x97c>
 800438c:	f243 02e0 	movw	r2, #12512	; 0x30e0
 8004390:	4293      	cmp	r3, r2
 8004392:	f300 8491 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004396:	f5b3 5f43 	cmp.w	r3, #12480	; 0x30c0
 800439a:	f000 8423 	beq.w	8004be4 <Run_YawSpeed+0x990>
 800439e:	f5b3 5f43 	cmp.w	r3, #12480	; 0x30c0
 80043a2:	f300 8489 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80043a6:	f243 0260 	movw	r2, #12384	; 0x3060
 80043aa:	4293      	cmp	r3, r2
 80043ac:	f000 83ef 	beq.w	8004b8e <Run_YawSpeed+0x93a>
 80043b0:	f243 0260 	movw	r2, #12384	; 0x3060
 80043b4:	4293      	cmp	r3, r2
 80043b6:	f300 847f 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80043ba:	f243 020f 	movw	r2, #12303	; 0x300f
 80043be:	4293      	cmp	r3, r2
 80043c0:	f000 83dd 	beq.w	8004b7e <Run_YawSpeed+0x92a>
 80043c4:	f243 020f 	movw	r2, #12303	; 0x300f
 80043c8:	4293      	cmp	r3, r2
 80043ca:	f300 8475 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80043ce:	f243 0203 	movw	r2, #12291	; 0x3003
 80043d2:	4293      	cmp	r3, r2
 80043d4:	f000 83c9 	beq.w	8004b6a <Run_YawSpeed+0x916>
 80043d8:	f243 0203 	movw	r2, #12291	; 0x3003
 80043dc:	4293      	cmp	r3, r2
 80043de:	f300 846b 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80043e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043e6:	f000 8383 	beq.w	8004af0 <Run_YawSpeed+0x89c>
 80043ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043ee:	f300 8463 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80043f2:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 80043f6:	f000 8413 	beq.w	8004c20 <Run_YawSpeed+0x9cc>
 80043fa:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 80043fe:	f300 845b 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004402:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8004406:	f000 840e 	beq.w	8004c26 <Run_YawSpeed+0x9d2>
 800440a:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800440e:	f300 8453 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004412:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8004416:	f000 83f4 	beq.w	8004c02 <Run_YawSpeed+0x9ae>
 800441a:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 800441e:	f300 844b 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004422:	f242 1283 	movw	r2, #8579	; 0x2183
 8004426:	4293      	cmp	r3, r2
 8004428:	f000 83bf 	beq.w	8004baa <Run_YawSpeed+0x956>
 800442c:	f242 1283 	movw	r2, #8579	; 0x2183
 8004430:	4293      	cmp	r3, r2
 8004432:	f300 8441 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004436:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 800443a:	f000 83ee 	beq.w	8004c1a <Run_YawSpeed+0x9c6>
 800443e:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 8004442:	f300 8439 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004446:	f242 02e0 	movw	r2, #8416	; 0x20e0
 800444a:	4293      	cmp	r3, r2
 800444c:	f000 83a3 	beq.w	8004b96 <Run_YawSpeed+0x942>
 8004450:	f242 02e0 	movw	r2, #8416	; 0x20e0
 8004454:	4293      	cmp	r3, r2
 8004456:	f300 842f 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800445a:	f242 02c1 	movw	r2, #8385	; 0x20c1
 800445e:	4293      	cmp	r3, r2
 8004460:	f000 839d 	beq.w	8004b9e <Run_YawSpeed+0x94a>
 8004464:	f242 02c1 	movw	r2, #8385	; 0x20c1
 8004468:	4293      	cmp	r3, r2
 800446a:	f300 8425 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800446e:	f5b3 5f03 	cmp.w	r3, #8384	; 0x20c0
 8004472:	f000 83ba 	beq.w	8004bea <Run_YawSpeed+0x996>
 8004476:	f5b3 5f03 	cmp.w	r3, #8384	; 0x20c0
 800447a:	f300 841d 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800447e:	f242 0260 	movw	r2, #8288	; 0x2060
 8004482:	4293      	cmp	r3, r2
 8004484:	f000 839c 	beq.w	8004bc0 <Run_YawSpeed+0x96c>
 8004488:	f242 0260 	movw	r2, #8288	; 0x2060
 800448c:	4293      	cmp	r3, r2
 800448e:	f300 8413 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004492:	f242 021f 	movw	r2, #8223	; 0x201f
 8004496:	4293      	cmp	r3, r2
 8004498:	f300 840e 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800449c:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 80044a0:	4293      	cmp	r3, r2
 80044a2:	f280 80bd 	bge.w	8004620 <Run_YawSpeed+0x3cc>
 80044a6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80044aa:	f000 831b 	beq.w	8004ae4 <Run_YawSpeed+0x890>
 80044ae:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80044b2:	f300 8401 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80044b6:	f5b3 5fce 	cmp.w	r3, #6592	; 0x19c0
 80044ba:	f000 8399 	beq.w	8004bf0 <Run_YawSpeed+0x99c>
 80044be:	f5b3 5fce 	cmp.w	r3, #6592	; 0x19c0
 80044c2:	f300 83f9 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80044c6:	f5b3 5fcc 	cmp.w	r3, #6528	; 0x1980
 80044ca:	f000 839d 	beq.w	8004c08 <Run_YawSpeed+0x9b4>
 80044ce:	f5b3 5fcc 	cmp.w	r3, #6528	; 0x1980
 80044d2:	f300 83f1 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80044d6:	f5b3 5fc6 	cmp.w	r3, #6336	; 0x18c0
 80044da:	f000 837d 	beq.w	8004bd8 <Run_YawSpeed+0x984>
 80044de:	f5b3 5fc6 	cmp.w	r3, #6336	; 0x18c0
 80044e2:	f300 83e9 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80044e6:	f5b3 5fc3 	cmp.w	r3, #6240	; 0x1860
 80044ea:	f000 8365 	beq.w	8004bb8 <Run_YawSpeed+0x964>
 80044ee:	f5b3 5fc3 	cmp.w	r3, #6240	; 0x1860
 80044f2:	f300 83e1 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80044f6:	f640 72fc 	movw	r2, #4092	; 0xffc
 80044fa:	4293      	cmp	r3, r2
 80044fc:	f000 8317 	beq.w	8004b2e <Run_YawSpeed+0x8da>
 8004500:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004504:	4293      	cmp	r3, r2
 8004506:	f300 83d7 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800450a:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800450e:	f000 8317 	beq.w	8004b40 <Run_YawSpeed+0x8ec>
 8004512:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8004516:	f300 83cf 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800451a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800451e:	f000 82db 	beq.w	8004ad8 <Run_YawSpeed+0x884>
 8004522:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004526:	f300 83c7 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800452a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800452e:	f000 82d6 	beq.w	8004ade <Run_YawSpeed+0x88a>
 8004532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004536:	f300 83bf 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800453a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800453e:	4293      	cmp	r3, r2
 8004540:	f000 82e8 	beq.w	8004b14 <Run_YawSpeed+0x8c0>
 8004544:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004548:	4293      	cmp	r3, r2
 800454a:	f300 83b5 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800454e:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8004552:	f000 82e9 	beq.w	8004b28 <Run_YawSpeed+0x8d4>
 8004556:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800455a:	f300 83ad 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800455e:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8004562:	f000 82ea 	beq.w	8004b3a <Run_YawSpeed+0x8e6>
 8004566:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800456a:	f300 83a5 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800456e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004572:	f000 82ab 	beq.w	8004acc <Run_YawSpeed+0x878>
 8004576:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800457a:	f300 839d 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800457e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004582:	f000 82a6 	beq.w	8004ad2 <Run_YawSpeed+0x87e>
 8004586:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800458a:	f300 8395 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800458e:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8004592:	f000 82bb 	beq.w	8004b0c <Run_YawSpeed+0x8b8>
 8004596:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800459a:	f300 838d 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 800459e:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80045a2:	f000 82be 	beq.w	8004b22 <Run_YawSpeed+0x8ce>
 80045a6:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80045aa:	f300 8385 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80045ae:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80045b2:	f000 82bf 	beq.w	8004b34 <Run_YawSpeed+0x8e0>
 80045b6:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80045ba:	f300 837d 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80045be:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80045c2:	f000 827d 	beq.w	8004ac0 <Run_YawSpeed+0x86c>
 80045c6:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80045ca:	f300 8375 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80045ce:	e001      	b.n	80045d4 <Run_YawSpeed+0x380>
 80045d0:	20000bd2 	.word	0x20000bd2
 80045d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d8:	f000 8275 	beq.w	8004ac6 <Run_YawSpeed+0x872>
 80045dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e0:	f300 836a 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80045e4:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80045e8:	f000 828c 	beq.w	8004b04 <Run_YawSpeed+0x8b0>
 80045ec:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80045f0:	f300 8362 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80045f4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80045f8:	f300 835e 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 80045fc:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004600:	da68      	bge.n	80046d4 <Run_YawSpeed+0x480>
 8004602:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8004606:	f280 8357 	bge.w	8004cb8 <Run_YawSpeed+0xa64>
 800460a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800460e:	f280 80ab 	bge.w	8004768 <Run_YawSpeed+0x514>
 8004612:	2b71      	cmp	r3, #113	; 0x71
 8004614:	f300 8214 	bgt.w	8004a40 <Run_YawSpeed+0x7ec>
 8004618:	2b00      	cmp	r3, #0
 800461a:	f300 8127 	bgt.w	800486c <Run_YawSpeed+0x618>
 800461e:	e34b      	b.n	8004cb8 <Run_YawSpeed+0xa64>
 8004620:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8004624:	3b18      	subs	r3, #24
 8004626:	2b27      	cmp	r3, #39	; 0x27
 8004628:	f200 8346 	bhi.w	8004cb8 <Run_YawSpeed+0xa64>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <Run_YawSpeed+0x3e0>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004b47 	.word	0x08004b47
 8004638:	08004cb9 	.word	0x08004cb9
 800463c:	08004cb9 	.word	0x08004cb9
 8004640:	08004cb9 	.word	0x08004cb9
 8004644:	08004cb9 	.word	0x08004cb9
 8004648:	08004cb9 	.word	0x08004cb9
 800464c:	08004cb9 	.word	0x08004cb9
 8004650:	08004cb9 	.word	0x08004cb9
 8004654:	08004af7 	.word	0x08004af7
 8004658:	08004b65 	.word	0x08004b65
 800465c:	08004cb9 	.word	0x08004cb9
 8004660:	08004cb9 	.word	0x08004cb9
 8004664:	08004cb9 	.word	0x08004cb9
 8004668:	08004cb9 	.word	0x08004cb9
 800466c:	08004cb9 	.word	0x08004cb9
 8004670:	08004b77 	.word	0x08004b77
 8004674:	08004cb9 	.word	0x08004cb9
 8004678:	08004cb9 	.word	0x08004cb9
 800467c:	08004cb9 	.word	0x08004cb9
 8004680:	08004cb9 	.word	0x08004cb9
 8004684:	08004cb9 	.word	0x08004cb9
 8004688:	08004cb9 	.word	0x08004cb9
 800468c:	08004cb9 	.word	0x08004cb9
 8004690:	08004cb9 	.word	0x08004cb9
 8004694:	08004cb9 	.word	0x08004cb9
 8004698:	08004cb9 	.word	0x08004cb9
 800469c:	08004cb9 	.word	0x08004cb9
 80046a0:	08004cb9 	.word	0x08004cb9
 80046a4:	08004cb9 	.word	0x08004cb9
 80046a8:	08004cb9 	.word	0x08004cb9
 80046ac:	08004cb9 	.word	0x08004cb9
 80046b0:	08004cb9 	.word	0x08004cb9
 80046b4:	08004cb9 	.word	0x08004cb9
 80046b8:	08004cb9 	.word	0x08004cb9
 80046bc:	08004cb9 	.word	0x08004cb9
 80046c0:	08004cb9 	.word	0x08004cb9
 80046c4:	08004cb9 	.word	0x08004cb9
 80046c8:	08004cb9 	.word	0x08004cb9
 80046cc:	08004cb9 	.word	0x08004cb9
 80046d0:	08004b87 	.word	0x08004b87
 80046d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046d8:	2b20      	cmp	r3, #32
 80046da:	f200 82ed 	bhi.w	8004cb8 <Run_YawSpeed+0xa64>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <Run_YawSpeed+0x490>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004ab5 	.word	0x08004ab5
 80046e8:	08004ba5 	.word	0x08004ba5
 80046ec:	08004cb9 	.word	0x08004cb9
 80046f0:	08004c4b 	.word	0x08004c4b
 80046f4:	08004cb9 	.word	0x08004cb9
 80046f8:	08004cb9 	.word	0x08004cb9
 80046fc:	08004cb9 	.word	0x08004cb9
 8004700:	08004c45 	.word	0x08004c45
 8004704:	08004cb9 	.word	0x08004cb9
 8004708:	08004cb9 	.word	0x08004cb9
 800470c:	08004cb9 	.word	0x08004cb9
 8004710:	08004cb9 	.word	0x08004cb9
 8004714:	08004cb9 	.word	0x08004cb9
 8004718:	08004cb9 	.word	0x08004cb9
 800471c:	08004cb9 	.word	0x08004cb9
 8004720:	08004cb9 	.word	0x08004cb9
 8004724:	08004cb9 	.word	0x08004cb9
 8004728:	08004cb9 	.word	0x08004cb9
 800472c:	08004cb9 	.word	0x08004cb9
 8004730:	08004cb9 	.word	0x08004cb9
 8004734:	08004cb9 	.word	0x08004cb9
 8004738:	08004cb9 	.word	0x08004cb9
 800473c:	08004cb9 	.word	0x08004cb9
 8004740:	08004cb9 	.word	0x08004cb9
 8004744:	08004cb9 	.word	0x08004cb9
 8004748:	08004cb9 	.word	0x08004cb9
 800474c:	08004cb9 	.word	0x08004cb9
 8004750:	08004cb9 	.word	0x08004cb9
 8004754:	08004cb9 	.word	0x08004cb9
 8004758:	08004cb9 	.word	0x08004cb9
 800475c:	08004cb9 	.word	0x08004cb9
 8004760:	08004cb9 	.word	0x08004cb9
 8004764:	08004b1d 	.word	0x08004b1d
 8004768:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800476c:	2b07      	cmp	r3, #7
 800476e:	f200 82a3 	bhi.w	8004cb8 <Run_YawSpeed+0xa64>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <Run_YawSpeed+0x524>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	08004abb 	.word	0x08004abb
 800477c:	08004c3f 	.word	0x08004c3f
 8004780:	08004cb9 	.word	0x08004cb9
 8004784:	08004c39 	.word	0x08004c39
 8004788:	08004cb9 	.word	0x08004cb9
 800478c:	08004cb9 	.word	0x08004cb9
 8004790:	08004c2d 	.word	0x08004c2d
 8004794:	08004c33 	.word	0x08004c33
 8004798:	3bc0      	subs	r3, #192	; 0xc0
 800479a:	2b30      	cmp	r3, #48	; 0x30
 800479c:	f200 828c 	bhi.w	8004cb8 <Run_YawSpeed+0xa64>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <Run_YawSpeed+0x554>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	08004aaf 	.word	0x08004aaf
 80047ac:	08004c63 	.word	0x08004c63
 80047b0:	08004cb9 	.word	0x08004cb9
 80047b4:	08004c5d 	.word	0x08004c5d
 80047b8:	08004cb9 	.word	0x08004cb9
 80047bc:	08004cb9 	.word	0x08004cb9
 80047c0:	08004c51 	.word	0x08004c51
 80047c4:	08004c57 	.word	0x08004c57
 80047c8:	08004cb9 	.word	0x08004cb9
 80047cc:	08004cb9 	.word	0x08004cb9
 80047d0:	08004cb9 	.word	0x08004cb9
 80047d4:	08004cb9 	.word	0x08004cb9
 80047d8:	08004cb9 	.word	0x08004cb9
 80047dc:	08004cb9 	.word	0x08004cb9
 80047e0:	08004cb9 	.word	0x08004cb9
 80047e4:	08004cb9 	.word	0x08004cb9
 80047e8:	08004cb9 	.word	0x08004cb9
 80047ec:	08004cb9 	.word	0x08004cb9
 80047f0:	08004cb9 	.word	0x08004cb9
 80047f4:	08004cb9 	.word	0x08004cb9
 80047f8:	08004cb9 	.word	0x08004cb9
 80047fc:	08004cb9 	.word	0x08004cb9
 8004800:	08004cb9 	.word	0x08004cb9
 8004804:	08004cb9 	.word	0x08004cb9
 8004808:	08004cb9 	.word	0x08004cb9
 800480c:	08004cb9 	.word	0x08004cb9
 8004810:	08004cb9 	.word	0x08004cb9
 8004814:	08004cb9 	.word	0x08004cb9
 8004818:	08004cb9 	.word	0x08004cb9
 800481c:	08004cb9 	.word	0x08004cb9
 8004820:	08004cb9 	.word	0x08004cb9
 8004824:	08004cb9 	.word	0x08004cb9
 8004828:	08004aa7 	.word	0x08004aa7
 800482c:	08004c81 	.word	0x08004c81
 8004830:	08004cb9 	.word	0x08004cb9
 8004834:	08004c79 	.word	0x08004c79
 8004838:	08004cb9 	.word	0x08004cb9
 800483c:	08004cb9 	.word	0x08004cb9
 8004840:	08004c69 	.word	0x08004c69
 8004844:	08004c71 	.word	0x08004c71
 8004848:	08004cb9 	.word	0x08004cb9
 800484c:	08004cb9 	.word	0x08004cb9
 8004850:	08004cb9 	.word	0x08004cb9
 8004854:	08004cb9 	.word	0x08004cb9
 8004858:	08004cb9 	.word	0x08004cb9
 800485c:	08004cb9 	.word	0x08004cb9
 8004860:	08004cb9 	.word	0x08004cb9
 8004864:	08004cb9 	.word	0x08004cb9
 8004868:	08004afd 	.word	0x08004afd
 800486c:	3b01      	subs	r3, #1
 800486e:	2b70      	cmp	r3, #112	; 0x70
 8004870:	f200 8222 	bhi.w	8004cb8 <Run_YawSpeed+0xa64>
 8004874:	a201      	add	r2, pc, #4	; (adr r2, 800487c <Run_YawSpeed+0x628>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	08004a4f 	.word	0x08004a4f
 8004880:	08004cb9 	.word	0x08004cb9
 8004884:	08004a57 	.word	0x08004a57
 8004888:	08004cb9 	.word	0x08004cb9
 800488c:	08004cb9 	.word	0x08004cb9
 8004890:	08004cb9 	.word	0x08004cb9
 8004894:	08004a5f 	.word	0x08004a5f
 8004898:	08004cb9 	.word	0x08004cb9
 800489c:	08004cb9 	.word	0x08004cb9
 80048a0:	08004cb9 	.word	0x08004cb9
 80048a4:	08004cb9 	.word	0x08004cb9
 80048a8:	08004a6f 	.word	0x08004a6f
 80048ac:	08004cb9 	.word	0x08004cb9
 80048b0:	08004a67 	.word	0x08004a67
 80048b4:	08004cb9 	.word	0x08004cb9
 80048b8:	08004cb9 	.word	0x08004cb9
 80048bc:	08004cb9 	.word	0x08004cb9
 80048c0:	08004cb9 	.word	0x08004cb9
 80048c4:	08004cb9 	.word	0x08004cb9
 80048c8:	08004cb9 	.word	0x08004cb9
 80048cc:	08004cb9 	.word	0x08004cb9
 80048d0:	08004cb9 	.word	0x08004cb9
 80048d4:	08004cb9 	.word	0x08004cb9
 80048d8:	08004a7f 	.word	0x08004a7f
 80048dc:	08004cb9 	.word	0x08004cb9
 80048e0:	08004cb9 	.word	0x08004cb9
 80048e4:	08004cb9 	.word	0x08004cb9
 80048e8:	08004a77 	.word	0x08004a77
 80048ec:	08004cb9 	.word	0x08004cb9
 80048f0:	08004cb9 	.word	0x08004cb9
 80048f4:	08004cb9 	.word	0x08004cb9
 80048f8:	08004cb9 	.word	0x08004cb9
 80048fc:	08004cb9 	.word	0x08004cb9
 8004900:	08004cb9 	.word	0x08004cb9
 8004904:	08004cb9 	.word	0x08004cb9
 8004908:	08004cb9 	.word	0x08004cb9
 800490c:	08004cb9 	.word	0x08004cb9
 8004910:	08004cb9 	.word	0x08004cb9
 8004914:	08004cb9 	.word	0x08004cb9
 8004918:	08004cb9 	.word	0x08004cb9
 800491c:	08004cb9 	.word	0x08004cb9
 8004920:	08004cb9 	.word	0x08004cb9
 8004924:	08004cb9 	.word	0x08004cb9
 8004928:	08004cb9 	.word	0x08004cb9
 800492c:	08004cb9 	.word	0x08004cb9
 8004930:	08004cb9 	.word	0x08004cb9
 8004934:	08004cb9 	.word	0x08004cb9
 8004938:	08004a8f 	.word	0x08004a8f
 800493c:	08004cb1 	.word	0x08004cb1
 8004940:	08004cb9 	.word	0x08004cb9
 8004944:	08004cb9 	.word	0x08004cb9
 8004948:	08004cb9 	.word	0x08004cb9
 800494c:	08004cb9 	.word	0x08004cb9
 8004950:	08004cb9 	.word	0x08004cb9
 8004954:	08004cb9 	.word	0x08004cb9
 8004958:	08004a87 	.word	0x08004a87
 800495c:	08004cb9 	.word	0x08004cb9
 8004960:	08004cb9 	.word	0x08004cb9
 8004964:	08004cb9 	.word	0x08004cb9
 8004968:	08004cb9 	.word	0x08004cb9
 800496c:	08004cb9 	.word	0x08004cb9
 8004970:	08004cb9 	.word	0x08004cb9
 8004974:	08004cb9 	.word	0x08004cb9
 8004978:	08004cb9 	.word	0x08004cb9
 800497c:	08004cb9 	.word	0x08004cb9
 8004980:	08004cb9 	.word	0x08004cb9
 8004984:	08004cb9 	.word	0x08004cb9
 8004988:	08004cb9 	.word	0x08004cb9
 800498c:	08004cb9 	.word	0x08004cb9
 8004990:	08004cb9 	.word	0x08004cb9
 8004994:	08004cb9 	.word	0x08004cb9
 8004998:	08004cb9 	.word	0x08004cb9
 800499c:	08004cb9 	.word	0x08004cb9
 80049a0:	08004cb9 	.word	0x08004cb9
 80049a4:	08004cb9 	.word	0x08004cb9
 80049a8:	08004cb9 	.word	0x08004cb9
 80049ac:	08004cb9 	.word	0x08004cb9
 80049b0:	08004cb9 	.word	0x08004cb9
 80049b4:	08004cb9 	.word	0x08004cb9
 80049b8:	08004cb9 	.word	0x08004cb9
 80049bc:	08004cb9 	.word	0x08004cb9
 80049c0:	08004cb9 	.word	0x08004cb9
 80049c4:	08004cb9 	.word	0x08004cb9
 80049c8:	08004cb9 	.word	0x08004cb9
 80049cc:	08004cb9 	.word	0x08004cb9
 80049d0:	08004cb9 	.word	0x08004cb9
 80049d4:	08004cb9 	.word	0x08004cb9
 80049d8:	08004cb9 	.word	0x08004cb9
 80049dc:	08004cb9 	.word	0x08004cb9
 80049e0:	08004cb9 	.word	0x08004cb9
 80049e4:	08004cb9 	.word	0x08004cb9
 80049e8:	08004cb9 	.word	0x08004cb9
 80049ec:	08004cb9 	.word	0x08004cb9
 80049f0:	08004cb9 	.word	0x08004cb9
 80049f4:	08004cb9 	.word	0x08004cb9
 80049f8:	08004a9f 	.word	0x08004a9f
 80049fc:	08004ca1 	.word	0x08004ca1
 8004a00:	08004cb9 	.word	0x08004cb9
 8004a04:	08004c99 	.word	0x08004c99
 8004a08:	08004cb9 	.word	0x08004cb9
 8004a0c:	08004cb9 	.word	0x08004cb9
 8004a10:	08004c89 	.word	0x08004c89
 8004a14:	08004c91 	.word	0x08004c91
 8004a18:	08004cb9 	.word	0x08004cb9
 8004a1c:	08004cb9 	.word	0x08004cb9
 8004a20:	08004cb9 	.word	0x08004cb9
 8004a24:	08004cb9 	.word	0x08004cb9
 8004a28:	08004cb9 	.word	0x08004cb9
 8004a2c:	08004cb9 	.word	0x08004cb9
 8004a30:	08004cb9 	.word	0x08004cb9
 8004a34:	08004cb9 	.word	0x08004cb9
 8004a38:	08004a97 	.word	0x08004a97
 8004a3c:	08004ca9 	.word	0x08004ca9
 8004a40:	2bf0      	cmp	r3, #240	; 0xf0
 8004a42:	f300 8139 	bgt.w	8004cb8 <Run_YawSpeed+0xa64>
 8004a46:	2bc0      	cmp	r3, #192	; 0xc0
 8004a48:	f6bf aea6 	bge.w	8004798 <Run_YawSpeed+0x544>
 8004a4c:	e134      	b.n	8004cb8 <Run_YawSpeed+0xa64>
	case B00000000000001: error = -12; break;
 8004a4e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8004a52:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a54:	e133      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000000000011: error = -11; break;
 8004a56:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8004a5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a5c:	e12f      	b.n	8004cbe <Run_YawSpeed+0xa6a>
//	case B00000000000011: error = -11; break;
	case B00000000000111: error = -10; break;
 8004a5e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8004a62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a64:	e12b      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000000001110: error = -9; break;
 8004a66:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8004a6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a6c:	e127      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000000001100: error = -8; break;
 8004a6e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8004a72:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a74:	e123      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000000011100: error = -7; break;
 8004a76:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8004a7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a7c:	e11f      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000000011000: error = -6; break;
 8004a7e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8004a82:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a84:	e11b      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000000111000: error = -5; break;
 8004a86:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8004a8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a8c:	e117      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000000110000: error = -4; break;
 8004a8e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004a92:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a94:	e113      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000001110000: error = -3; break;
 8004a96:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004a9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a9c:	e10f      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000001100000: error = -2; break;
 8004a9e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004aa2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aa4:	e10b      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000011100000: error = -1; break;
 8004aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004aaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aac:	e107      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000011000000: error = 0; break;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ab2:	e104      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000111000000: error = 1; break;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ab8:	e101      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000110000000: error = 2; break;
 8004aba:	2302      	movs	r3, #2
 8004abc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004abe:	e0fe      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00001110000000: error = 3; break;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ac4:	e0fb      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00001100000000: error = 4; break;
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aca:	e0f8      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00011100000000: error = 5; break;
 8004acc:	2305      	movs	r3, #5
 8004ace:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ad0:	e0f5      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00011000000000: error = 6; break;
 8004ad2:	2306      	movs	r3, #6
 8004ad4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ad6:	e0f2      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00111000000000: error = 7; break;
 8004ad8:	2307      	movs	r3, #7
 8004ada:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004adc:	e0ef      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00110000000000: error = 8; break;
 8004ade:	2308      	movs	r3, #8
 8004ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ae2:	e0ec      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B01110000000000: error = 9; break;
 8004ae4:	2309      	movs	r3, #9
 8004ae6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ae8:	e0e9      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11100000000000: error = 10; break;
 8004aea:	230a      	movs	r3, #10
 8004aec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aee:	e0e6      	b.n	8004cbe <Run_YawSpeed+0xa6a>
//	case B11000000000000: error = 11; break;
	case B11000000000000: error = 11; break;
 8004af0:	230b      	movs	r3, #11
 8004af2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004af4:	e0e3      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B10000000000000: error = 12; break;
 8004af6:	230c      	movs	r3, #12
 8004af8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004afa:	e0e0      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000011110000: error = -1; break;
 8004afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b02:	e0dc      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000111111000: error = -1; break;
 8004b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b0a:	e0d8      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00001111111100: error = -1; break;
 8004b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b12:	e0d4      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00011111111110: error = -1; break;
 8004b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b1a:	e0d0      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000111100000: error = 0; break;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b20:	e0cd      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00001111110000: error = 0; break;
 8004b22:	2300      	movs	r3, #0
 8004b24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b26:	e0ca      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00011111111000: error = 0; break;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b2c:	e0c7      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00111111111100: error = 0; break;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b32:	e0c4      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00001111000000: error = 1; break;
 8004b34:	2301      	movs	r3, #1
 8004b36:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b38:	e0c1      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00011111100000: error = 1; break;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b3e:	e0be      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00111111110000: error = 1; break;
 8004b40:	2301      	movs	r3, #1
 8004b42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b44:	e0bb      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B01111111111000: error = 1; break;
 8004b46:	2301      	movs	r3, #1
 8004b48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b4a:	e0b8      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B11111000000001: error = -2; break;
 8004b4c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004b50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b52:	e0b4      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B11100000000001: error = -1; break;
 8004b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b5a:	e0b0      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11110000000011: error = -1; break;
 8004b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b62:	e0ac      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B10000000000001: error = 0; break;
 8004b64:	2300      	movs	r3, #0
 8004b66:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b68:	e0a9      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11000000000011: error = 0; break;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b6e:	e0a6      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11100000000111: error = 0; break;
 8004b70:	2300      	movs	r3, #0
 8004b72:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b74:	e0a3      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B10000000000111: error = -1; break;
 8004b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b7c:	e09f      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11000000001111: error = -1; break;
 8004b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b82:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b84:	e09b      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B10000000011111: error = -2; break;
 8004b86:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004b8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b8c:	e097      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B11000001100000: error = -2; break;
 8004b8e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004b92:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b94:	e093      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B10000011100000: error = -1; break;
 8004b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b9c:	e08f      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B10000011000001: error = 0; break;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ba2:	e08c      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000111000001: error = 1; break;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ba8:	e089      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B10000110000011: error = 2; break;
 8004baa:	2302      	movs	r3, #2
 8004bac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bae:	e086      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B11100001100000: error = -2; break;
 8004bb0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004bb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bb6:	e082      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B01100001100000: error = -2; break;
 8004bb8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004bbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bbe:	e07e      	b.n	8004cbe <Run_YawSpeed+0xa6a>
//	case B11000011110000: error = -2; break;
	case B10000001100000: error = -2; break;
 8004bc0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004bc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bc6:	e07a      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B11100011100000: error = -1; break;
 8004bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bce:	e076      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11000011100000: error = -1; break;
 8004bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bd6:	e072      	b.n	8004cbe <Run_YawSpeed+0xa6a>
//	case B10000111110000: error = -1; break;

	case B01100011000000: error = 0; break;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bdc:	e06f      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11100011000000: error = 0; break;
 8004bde:	2300      	movs	r3, #0
 8004be0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004be2:	e06c      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11000011000000: error = 0; break;
 8004be4:	2300      	movs	r3, #0
 8004be6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004be8:	e069      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B10000011000000: error = 0; break;
 8004bea:	2300      	movs	r3, #0
 8004bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bee:	e066      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B01100111000000: error = 1; break;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bf4:	e063      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11100111000000: error = 1; break;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bfa:	e060      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11000111000000: error = 1; break;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c00:	e05d      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B10000111000000: error = 1; break;
 8004c02:	2301      	movs	r3, #1
 8004c04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c06:	e05a      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B01100110000000: error = 2; break;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c0c:	e057      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11100110000000: error = 2; break;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c12:	e054      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B11000110000000: error = 2; break;
 8004c14:	2302      	movs	r3, #2
 8004c16:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c18:	e051      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B10000110000000: error = 2; break;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c1e:	e04e      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B10001110000000: error = 3; break;
 8004c20:	2303      	movs	r3, #3
 8004c22:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c24:	e04b      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B10001100000000: error = 4; break;
 8004c26:	2304      	movs	r3, #4
 8004c28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c2a:	e048      	b.n	8004cbe <Run_YawSpeed+0xa6a>



	case B00000110000110: error = 2; break;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c30:	e045      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000110000111: error = 2; break;
 8004c32:	2302      	movs	r3, #2
 8004c34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c36:	e042      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000110000011: error = 2; break;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c3c:	e03f      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000110000001: error = 2; break;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c42:	e03c      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000111000111: error = 1; break;
 8004c44:	2301      	movs	r3, #1
 8004c46:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c48:	e039      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000111000011: error = 1; break;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c4e:	e036      	b.n	8004cbe <Run_YawSpeed+0xa6a>
//	case B00001111100001: error = 1; break;

	case B00000011000110: error = 0; break;
 8004c50:	2300      	movs	r3, #0
 8004c52:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c54:	e033      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000011000111: error = 0; break;
 8004c56:	2300      	movs	r3, #0
 8004c58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c5a:	e030      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000011000011: error = 0; break;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c60:	e02d      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000011000001: error = 0; break;
 8004c62:	2300      	movs	r3, #0
 8004c64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c66:	e02a      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000011100110: error = -1; break;
 8004c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c6e:	e026      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000011100111: error = -1; break;
 8004c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c76:	e022      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000011100011: error = -1; break;
 8004c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c7e:	e01e      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000011100001: error = -1; break;
 8004c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c86:	e01a      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000001100110: error = -2; break;
 8004c88:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004c8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c8e:	e016      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000001100111: error = -2; break;
 8004c90:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004c94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c96:	e012      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000001100011: error = -2; break;
 8004c98:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004c9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c9e:	e00e      	b.n	8004cbe <Run_YawSpeed+0xa6a>
	case B00000001100001: error = -2; break;
 8004ca0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004ca4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ca6:	e00a      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000001110001: error = -3; break;
 8004ca8:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004cac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cae:	e006      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	case B00000000110001: error = -4; break;
 8004cb0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004cb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cb6:	e002      	b.n	8004cbe <Run_YawSpeed+0xa6a>

	default: error = last_error;
 8004cb8:	4b84      	ldr	r3, [pc, #528]	; (8004ecc <Run_YawSpeed+0xc78>)
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	float div_error = error - last_error;
 8004cbe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004cc2:	4a82      	ldr	r2, [pc, #520]	; (8004ecc <Run_YawSpeed+0xc78>)
 8004cc4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd2:	edc7 7a06 	vstr	s15, [r7, #24]
	if(last_mv < 90 && last_mv > -90)
 8004cd6:	4b7e      	ldr	r3, [pc, #504]	; (8004ed0 <Run_YawSpeed+0xc7c>)
 8004cd8:	edd3 7a00 	vldr	s15, [r3]
 8004cdc:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004ed4 <Run_YawSpeed+0xc80>
 8004ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce8:	d527      	bpl.n	8004d3a <Run_YawSpeed+0xae6>
 8004cea:	4b79      	ldr	r3, [pc, #484]	; (8004ed0 <Run_YawSpeed+0xc7c>)
 8004cec:	edd3 7a00 	vldr	s15, [r3]
 8004cf0:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004ed8 <Run_YawSpeed+0xc84>
 8004cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfc:	dd1d      	ble.n	8004d3a <Run_YawSpeed+0xae6>
		if(!(sum_error < -32000 && error < 0) && !(sum_error > 32000 && error > 0) ) sum_error += error;
 8004cfe:	4b77      	ldr	r3, [pc, #476]	; (8004edc <Run_YawSpeed+0xc88>)
 8004d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d04:	f513 4ffa 	cmn.w	r3, #32000	; 0x7d00
 8004d08:	da03      	bge.n	8004d12 <Run_YawSpeed+0xabe>
 8004d0a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	db13      	blt.n	8004d3a <Run_YawSpeed+0xae6>
 8004d12:	4b72      	ldr	r3, [pc, #456]	; (8004edc <Run_YawSpeed+0xc88>)
 8004d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d18:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004d1c:	dd03      	ble.n	8004d26 <Run_YawSpeed+0xad2>
 8004d1e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dc09      	bgt.n	8004d3a <Run_YawSpeed+0xae6>
 8004d26:	4b6d      	ldr	r3, [pc, #436]	; (8004edc <Run_YawSpeed+0xc88>)
 8004d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d30:	4413      	add	r3, r2
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	b21a      	sxth	r2, r3
 8004d36:	4b69      	ldr	r3, [pc, #420]	; (8004edc <Run_YawSpeed+0xc88>)
 8004d38:	801a      	strh	r2, [r3, #0]
	temp_yaw_speed = last_mv;
 8004d3a:	4b65      	ldr	r3, [pc, #404]	; (8004ed0 <Run_YawSpeed+0xc7c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a68      	ldr	r2, [pc, #416]	; (8004ee0 <Run_YawSpeed+0xc8c>)
 8004d40:	6013      	str	r3, [r2, #0]
	float p, i, d;
	if(flag == 1) {
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d12a      	bne.n	8004d9e <Run_YawSpeed+0xb4a>
//		i = 0;
//		d = _speed * PID_KKD * (float)div_error / period;
//		p = (0.09*_speed + 0.8833) * (float)error;
//		i = (0.03*_speed + 0.6833) * (float)sum_error * period;
//		d = (0.7433*exp(0.1099*_speed)) * (float)div_error / period;
		p = _speed * 0.075 * (float)error;
 8004d48:	68b8      	ldr	r0, [r7, #8]
 8004d4a:	f7fb fbfd 	bl	8000548 <__aeabi_f2d>
 8004d4e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004d52:	4b64      	ldr	r3, [pc, #400]	; (8004ee4 <Run_YawSpeed+0xc90>)
 8004d54:	f7fb fc50 	bl	80005f8 <__aeabi_dmul>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	461d      	mov	r5, r3
 8004d60:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d6c:	ee17 0a90 	vmov	r0, s15
 8004d70:	f7fb fbea 	bl	8000548 <__aeabi_f2d>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f7fb fc3c 	bl	80005f8 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	f7fb ff2e 	bl	8000be8 <__aeabi_d2f>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
		i = 0;
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
		d = 0;
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	e042      	b.n	8004e24 <Run_YawSpeed+0xbd0>
	}
	else if(flag == 2) {
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d113      	bne.n	8004dcc <Run_YawSpeed+0xb78>
		p = kp * (float)error;
 8004da4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004db0:	4b4d      	ldr	r3, [pc, #308]	; (8004ee8 <Run_YawSpeed+0xc94>)
 8004db2:	edd3 7a00 	vldr	s15, [r3]
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		i = 0;
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
		d = 0;
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	e02b      	b.n	8004e24 <Run_YawSpeed+0xbd0>
	}
	else {
		p = kp * (float)error;
 8004dcc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <Run_YawSpeed+0xc94>)
 8004dda:	edd3 7a00 	vldr	s15, [r3]
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		i = ki * (float)sum_error * period;
 8004de6:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <Run_YawSpeed+0xc88>)
 8004de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004df4:	4b3d      	ldr	r3, [pc, #244]	; (8004eec <Run_YawSpeed+0xc98>)
 8004df6:	edd3 7a00 	vldr	s15, [r3]
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		d = kd * (float)div_error / period;
 8004e0a:	4b39      	ldr	r3, [pc, #228]	; (8004ef0 <Run_YawSpeed+0xc9c>)
 8004e0c:	ed93 7a00 	vldr	s14, [r3]
 8004e10:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e14:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e18:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e20:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	d = alpha*d + (1.00-alpha)*last_d;
 8004e24:	4b33      	ldr	r3, [pc, #204]	; (8004ef4 <Run_YawSpeed+0xca0>)
 8004e26:	ed93 7a00 	vldr	s14, [r3]
 8004e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e32:	ee17 0a90 	vmov	r0, s15
 8004e36:	f7fb fb87 	bl	8000548 <__aeabi_f2d>
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	460d      	mov	r5, r1
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <Run_YawSpeed+0xca0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fb fb80 	bl	8000548 <__aeabi_f2d>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	f04f 0000 	mov.w	r0, #0
 8004e50:	4929      	ldr	r1, [pc, #164]	; (8004ef8 <Run_YawSpeed+0xca4>)
 8004e52:	f7fb fa19 	bl	8000288 <__aeabi_dsub>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	4b27      	ldr	r3, [pc, #156]	; (8004efc <Run_YawSpeed+0xca8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fb70 	bl	8000548 <__aeabi_f2d>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4649      	mov	r1, r9
 8004e70:	f7fb fbc2 	bl	80005f8 <__aeabi_dmul>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4620      	mov	r0, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	f7fb fa06 	bl	800028c <__adddf3>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	f7fb feae 	bl	8000be8 <__aeabi_d2f>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	623b      	str	r3, [r7, #32]
	last_d = d;
 8004e90:	4a1a      	ldr	r2, [pc, #104]	; (8004efc <Run_YawSpeed+0xca8>)
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	6013      	str	r3, [r2, #0]
	float mv = p + i + d;
 8004e96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004e9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ea2:	ed97 7a08 	vldr	s14, [r7, #32]
 8004ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eaa:	edc7 7a05 	vstr	s15, [r7, #20]
	last_error = error;
 8004eae:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <Run_YawSpeed+0xc78>)
 8004eb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004eb2:	8013      	strh	r3, [r2, #0]
	last_mv = mv;
 8004eb4:	4a06      	ldr	r2, [pc, #24]	; (8004ed0 <Run_YawSpeed+0xc7c>)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	6013      	str	r3, [r2, #0]
	return mv;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	ee07 3a90 	vmov	s15, r3
}
 8004ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec4:	3730      	adds	r7, #48	; 0x30
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ecc:	20000b66 	.word	0x20000b66
 8004ed0:	20000b68 	.word	0x20000b68
 8004ed4:	42b40000 	.word	0x42b40000
 8004ed8:	c2b40000 	.word	0xc2b40000
 8004edc:	20000b64 	.word	0x20000b64
 8004ee0:	20000b48 	.word	0x20000b48
 8004ee4:	3fb33333 	.word	0x3fb33333
 8004ee8:	20000b54 	.word	0x20000b54
 8004eec:	20000b58 	.word	0x20000b58
 8004ef0:	20000b5c 	.word	0x20000b5c
 8004ef4:	20000b60 	.word	0x20000b60
 8004ef8:	3ff00000 	.word	0x3ff00000
 8004efc:	20000b50 	.word	0x20000b50

08004f00 <Run_LineTracing>:
void Run_SetKP(float kp) {

}


void Run_LineTracing(float speed, float period, uint8_t flag) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	ed87 0a03 	vstr	s0, [r7, #12]
 8004f0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004f0e:	4603      	mov	r3, r0
 8004f10:	71fb      	strb	r3, [r7, #7]
//		last_speed = speed;
//	}
//
//	speed = last_speed;

	float yaw_speed = Run_YawSpeed(period, speed, flag);
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	4618      	mov	r0, r3
 8004f16:	edd7 0a03 	vldr	s1, [r7, #12]
 8004f1a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004f1e:	f7ff f999 	bl	8004254 <Run_YawSpeed>
 8004f22:	ed87 0a05 	vstr	s0, [r7, #20]
	float temp_speed = speed;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	613b      	str	r3, [r7, #16]
	if(yaw_speed > 99) yaw_speed = 99;
 8004f2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f2e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005004 <Run_LineTracing+0x104>
 8004f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3a:	dd02      	ble.n	8004f42 <Run_LineTracing+0x42>
 8004f3c:	4b32      	ldr	r3, [pc, #200]	; (8005008 <Run_LineTracing+0x108>)
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e00a      	b.n	8004f58 <Run_LineTracing+0x58>
	else if(yaw_speed < -99) yaw_speed = -99;
 8004f42:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f46:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800500c <Run_LineTracing+0x10c>
 8004f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f52:	d501      	bpl.n	8004f58 <Run_LineTracing+0x58>
 8004f54:	4b2e      	ldr	r3, [pc, #184]	; (8005010 <Run_LineTracing+0x110>)
 8004f56:	617b      	str	r3, [r7, #20]
	if(speed+yaw_speed > 99) {
 8004f58:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f64:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005004 <Run_LineTracing+0x104>
 8004f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	dd10      	ble.n	8004f94 <Run_LineTracing+0x94>
		temp_speed-=(speed+yaw_speed-99);
 8004f72:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f7e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005004 <Run_LineTracing+0x104>
 8004f82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f86:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f8e:	edc7 7a04 	vstr	s15, [r7, #16]
 8004f92:	e01c      	b.n	8004fce <Run_LineTracing+0xce>
	}
	else if(speed-yaw_speed < -99) {
 8004f94:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fa0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800500c <Run_LineTracing+0x10c>
 8004fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fac:	d50f      	bpl.n	8004fce <Run_LineTracing+0xce>
		temp_speed+=(speed-yaw_speed+99);
 8004fae:	ed97 7a03 	vldr	s14, [r7, #12]
 8004fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fba:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005004 <Run_LineTracing+0x104>
 8004fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8004fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fca:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	Motor_SetPoint(&MOTOR_R, temp_speed-yaw_speed);
 8004fce:	ed97 7a04 	vldr	s14, [r7, #16]
 8004fd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fda:	eeb0 0a67 	vmov.f32	s0, s15
 8004fde:	480d      	ldr	r0, [pc, #52]	; (8005014 <Run_LineTracing+0x114>)
 8004fe0:	f7fd f9f6 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, temp_speed+yaw_speed);
 8004fe4:	ed97 7a04 	vldr	s14, [r7, #16]
 8004fe8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff4:	4808      	ldr	r0, [pc, #32]	; (8005018 <Run_LineTracing+0x118>)
 8004ff6:	f7fd f9eb 	bl	80023d0 <Motor_SetPoint>
}
 8004ffa:	bf00      	nop
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	42c60000 	.word	0x42c60000
 8005008:	42c60000 	.word	0x42c60000
 800500c:	c2c60000 	.word	0xc2c60000
 8005010:	c2c60000 	.word	0xc2c60000
 8005014:	20000ab0 	.word	0x20000ab0
 8005018:	20000af8 	.word	0x20000af8

0800501c <Run_SetMotorSpeed>:
uint8_t Run_MotorNotOver() {
	return (Motor_GetPoint(&MOTOR_R) < 99) && (Motor_GetPoint(&MOTOR_R) > -99)
		&& (Motor_GetPoint(&MOTOR_L) < 99) && (Motor_GetPoint(&MOTOR_L) > -99) ;
}

void Run_SetMotorSpeed(float speed_l, float speed_r) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	ed87 0a01 	vstr	s0, [r7, #4]
 8005026:	edc7 0a00 	vstr	s1, [r7]
	Motor_SetPoint(&MOTOR_R, speed_r);
 800502a:	ed97 0a00 	vldr	s0, [r7]
 800502e:	4806      	ldr	r0, [pc, #24]	; (8005048 <Run_SetMotorSpeed+0x2c>)
 8005030:	f7fd f9ce 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed_l);
 8005034:	ed97 0a01 	vldr	s0, [r7, #4]
 8005038:	4804      	ldr	r0, [pc, #16]	; (800504c <Run_SetMotorSpeed+0x30>)
 800503a:	f7fd f9c9 	bl	80023d0 <Motor_SetPoint>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000ab0 	.word	0x20000ab0
 800504c:	20000af8 	.word	0x20000af8

08005050 <Run_SetMotorAccl>:

void Run_SetMotorAccl(float accl) {
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	ed87 0a01 	vstr	s0, [r7, #4]
//	Motor_SetAccl(&MOTOR_R, accl);
//	Motor_SetAccl(&MOTOR_L, accl);
	this_accl = accl;
 800505a:	4a04      	ldr	r2, [pc, #16]	; (800506c <Run_SetMotorAccl+0x1c>)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6013      	str	r3, [r2, #0]
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	20000b4c 	.word	0x20000b4c

08005070 <Run_SetReverseSpeed>:

void Run_SetReverseSpeed(float factor) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_SetPoint(&MOTOR_R, -Motor_GetPoint(&MOTOR_R)*factor);
 800507a:	4812      	ldr	r0, [pc, #72]	; (80050c4 <Run_SetReverseSpeed+0x54>)
 800507c:	f7fd f9c5 	bl	800240a <Motor_GetPoint>
 8005080:	eef0 7a40 	vmov.f32	s15, s0
 8005084:	eeb1 7a67 	vneg.f32	s14, s15
 8005088:	edd7 7a01 	vldr	s15, [r7, #4]
 800508c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005090:	eeb0 0a67 	vmov.f32	s0, s15
 8005094:	480b      	ldr	r0, [pc, #44]	; (80050c4 <Run_SetReverseSpeed+0x54>)
 8005096:	f7fd f99b 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, -Motor_GetPoint(&MOTOR_L)*factor);
 800509a:	480b      	ldr	r0, [pc, #44]	; (80050c8 <Run_SetReverseSpeed+0x58>)
 800509c:	f7fd f9b5 	bl	800240a <Motor_GetPoint>
 80050a0:	eef0 7a40 	vmov.f32	s15, s0
 80050a4:	eeb1 7a67 	vneg.f32	s14, s15
 80050a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80050ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b0:	eeb0 0a67 	vmov.f32	s0, s15
 80050b4:	4804      	ldr	r0, [pc, #16]	; (80050c8 <Run_SetReverseSpeed+0x58>)
 80050b6:	f7fd f98b 	bl	80023d0 <Motor_SetPoint>
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000ab0 	.word	0x20000ab0
 80050c8:	20000af8 	.word	0x20000af8

080050cc <SEN_Init>:
uint16_t adc_filter_mem[SENSOR_NUM][ADC_FILTER_LEN];;
uint8_t adc_filter_pt = 0;

uint8_t sensor_flag = 0;

void SEN_Init(ADC_HandleTypeDef* hadc) {
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	sen_hadc = hadc;
 80050d4:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <SEN_Init+0x3c>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6013      	str	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++)  threshold_sensor[i] = ADC_MAX/2;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e008      	b.n	80050f2 <SEN_Init+0x26>
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <SEN_Init+0x40>)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80050e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b0d      	cmp	r3, #13
 80050f6:	ddf3      	ble.n	80050e0 <SEN_Init+0x14>
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000b6c 	.word	0x20000b6c
 800510c:	20000ba8 	.word	0x20000ba8

08005110 <SEN_Filter>:

void SEN_Filter(uint16_t* data) {
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b08d      	sub	sp, #52	; 0x34
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	uint16_t temp[SENSOR_NUM];
	for(int i=0; i<SENSOR_NUM; i++) {
 8005118:	2300      	movs	r3, #0
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511c:	e058      	b.n	80051d0 <SEN_Filter+0xc0>
		adc_filter_mem[i][adc_filter_pt] = data[i];
 800511e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	4a2e      	ldr	r2, [pc, #184]	; (80051e0 <SEN_Filter+0xd0>)
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	4614      	mov	r4, r2
 800512c:	8818      	ldrh	r0, [r3, #0]
 800512e:	492d      	ldr	r1, [pc, #180]	; (80051e4 <SEN_Filter+0xd4>)
 8005130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005132:	4613      	mov	r3, r2
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	4413      	add	r3, r2
 8005138:	4423      	add	r3, r4
 800513a:	4602      	mov	r2, r0
 800513c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if(adc_filter_pt<ADC_FILTER_LEN-1) adc_filter_pt++; else adc_filter_pt=0;
 8005140:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <SEN_Filter+0xd0>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d806      	bhi.n	8005156 <SEN_Filter+0x46>
 8005148:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <SEN_Filter+0xd0>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	4b23      	ldr	r3, [pc, #140]	; (80051e0 <SEN_Filter+0xd0>)
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e002      	b.n	800515c <SEN_Filter+0x4c>
 8005156:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <SEN_Filter+0xd0>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
		memset((uint8_t*)temp, 0, SENSOR_NUM*2);
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	221c      	movs	r2, #28
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f00a fe94 	bl	800fe92 <memset>
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 800516a:	2300      	movs	r3, #0
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
 800516e:	e01e      	b.n	80051ae <SEN_Filter+0x9e>
			temp[i] += adc_filter_mem[i][j]/ADC_FILTER_LEN;
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	3330      	adds	r3, #48	; 0x30
 8005176:	443b      	add	r3, r7
 8005178:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800517c:	4819      	ldr	r0, [pc, #100]	; (80051e4 <SEN_Filter+0xd4>)
 800517e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005180:	4613      	mov	r3, r2
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4413      	add	r3, r2
 8005186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005188:	4413      	add	r3, r2
 800518a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800518e:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <SEN_Filter+0xd8>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	440b      	add	r3, r1
 800519a:	b29a      	uxth	r2, r3
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	3330      	adds	r3, #48	; 0x30
 80051a2:	443b      	add	r3, r7
 80051a4:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	3301      	adds	r3, #1
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	dddd      	ble.n	8005170 <SEN_Filter+0x60>
		}
		data[i] = temp[i];
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	441a      	add	r2, r3
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	3330      	adds	r3, #48	; 0x30
 80051c2:	443b      	add	r3, r7
 80051c4:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80051c8:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	3301      	adds	r3, #1
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	2b0d      	cmp	r3, #13
 80051d4:	dda3      	ble.n	800511e <SEN_Filter+0xe>
	}
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	3734      	adds	r7, #52	; 0x34
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}
 80051e0:	20000c2c 	.word	0x20000c2c
 80051e4:	20000bd8 	.word	0x20000bd8
 80051e8:	aaaaaaab 	.word	0xaaaaaaab

080051ec <SEN_StartReadSensor>:

void SEN_StartReadSensor() {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(sen_hadc, adc_sensor, SENSOR_NUM);
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <SEN_StartReadSensor+0x18>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	220e      	movs	r2, #14
 80051f6:	4904      	ldr	r1, [pc, #16]	; (8005208 <SEN_StartReadSensor+0x1c>)
 80051f8:	4618      	mov	r0, r3
 80051fa:	f005 f8e5 	bl	800a3c8 <HAL_ADC_Start_DMA>
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000b6c 	.word	0x20000b6c
 8005208:	20000b70 	.word	0x20000b70

0800520c <SEN_CallbackRoutine>:

void SEN_CallbackRoutine(ADC_HandleTypeDef* hadc) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	if(hadc->Instance != sen_hadc->Instance) return;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <SEN_CallbackRoutine+0x17c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	f040 80ad 	bne.w	800537e <SEN_CallbackRoutine+0x172>
	SEN_Filter(adc_sensor);
 8005224:	4859      	ldr	r0, [pc, #356]	; (800538c <SEN_CallbackRoutine+0x180>)
 8005226:	f7ff ff73 	bl	8005110 <SEN_Filter>
	for(int i=0; i<SENSOR_NUM/2; i++) {
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e017      	b.n	8005260 <SEN_CallbackRoutine+0x54>
		adc_sensor_arranged[SENSOR_NUM-i-1] = adc_sensor[i*2];
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	005a      	lsls	r2, r3, #1
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f1c3 030d 	rsb	r3, r3, #13
 800523a:	4954      	ldr	r1, [pc, #336]	; (800538c <SEN_CallbackRoutine+0x180>)
 800523c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8005240:	4a53      	ldr	r2, [pc, #332]	; (8005390 <SEN_CallbackRoutine+0x184>)
 8005242:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_sensor_arranged[i] = adc_sensor[i*2+1];
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	3301      	adds	r3, #1
 800524c:	4a4f      	ldr	r2, [pc, #316]	; (800538c <SEN_CallbackRoutine+0x180>)
 800524e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005252:	4a4f      	ldr	r2, [pc, #316]	; (8005390 <SEN_CallbackRoutine+0x184>)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<SENSOR_NUM/2; i++) {
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	3301      	adds	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b06      	cmp	r3, #6
 8005264:	dde4      	ble.n	8005230 <SEN_CallbackRoutine+0x24>
	}
	sensor_binary = 0;
 8005266:	4b4b      	ldr	r3, [pc, #300]	; (8005394 <SEN_CallbackRoutine+0x188>)
 8005268:	2200      	movs	r2, #0
 800526a:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	e06c      	b.n	800534c <SEN_CallbackRoutine+0x140>
		uint8_t bit = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
		if(sensor_invert == 0) {
 8005276:	4b48      	ldr	r3, [pc, #288]	; (8005398 <SEN_CallbackRoutine+0x18c>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d12a      	bne.n	80052d4 <SEN_CallbackRoutine+0xc8>
			if(adc_sensor_arranged[i] > threshold_sensor[i]) {
 800527e:	4a44      	ldr	r2, [pc, #272]	; (8005390 <SEN_CallbackRoutine+0x184>)
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005286:	4945      	ldr	r1, [pc, #276]	; (800539c <SEN_CallbackRoutine+0x190>)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800528e:	429a      	cmp	r2, r3
 8005290:	d91a      	bls.n	80052c8 <SEN_CallbackRoutine+0xbc>
				bit = 1;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (adc_sensor_arranged[i]-threshold_sensor[i])/SEN_BAR_INC + 1;
 8005296:	4a3e      	ldr	r2, [pc, #248]	; (8005390 <SEN_CallbackRoutine+0x184>)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800529e:	4619      	mov	r1, r3
 80052a0:	4a3e      	ldr	r2, [pc, #248]	; (800539c <SEN_CallbackRoutine+0x190>)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052a8:	1acb      	subs	r3, r1, r3
 80052aa:	4a3d      	ldr	r2, [pc, #244]	; (80053a0 <SEN_CallbackRoutine+0x194>)
 80052ac:	fb82 1203 	smull	r1, r2, r2, r3
 80052b0:	1092      	asrs	r2, r2, #2
 80052b2:	17db      	asrs	r3, r3, #31
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2d9      	uxtb	r1, r3
 80052bc:	4a39      	ldr	r2, [pc, #228]	; (80053a4 <SEN_CallbackRoutine+0x198>)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	460a      	mov	r2, r1
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e02f      	b.n	8005328 <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 80052c8:	4a36      	ldr	r2, [pc, #216]	; (80053a4 <SEN_CallbackRoutine+0x198>)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	2200      	movs	r2, #0
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e029      	b.n	8005328 <SEN_CallbackRoutine+0x11c>
		}
		else {
			if(adc_sensor_arranged[i] < threshold_sensor[i]) {
 80052d4:	4a2e      	ldr	r2, [pc, #184]	; (8005390 <SEN_CallbackRoutine+0x184>)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80052dc:	492f      	ldr	r1, [pc, #188]	; (800539c <SEN_CallbackRoutine+0x190>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d21a      	bcs.n	800531e <SEN_CallbackRoutine+0x112>
				bit = 1;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (threshold_sensor[i]-adc_sensor_arranged[i])/SEN_BAR_INC + 1;
 80052ec:	4a2b      	ldr	r2, [pc, #172]	; (800539c <SEN_CallbackRoutine+0x190>)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052f4:	4619      	mov	r1, r3
 80052f6:	4a26      	ldr	r2, [pc, #152]	; (8005390 <SEN_CallbackRoutine+0x184>)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052fe:	1acb      	subs	r3, r1, r3
 8005300:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <SEN_CallbackRoutine+0x194>)
 8005302:	fb82 1203 	smull	r1, r2, r2, r3
 8005306:	1092      	asrs	r2, r2, #2
 8005308:	17db      	asrs	r3, r3, #31
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	3301      	adds	r3, #1
 8005310:	b2d9      	uxtb	r1, r3
 8005312:	4a24      	ldr	r2, [pc, #144]	; (80053a4 <SEN_CallbackRoutine+0x198>)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	460a      	mov	r2, r1
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	e004      	b.n	8005328 <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 800531e:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <SEN_CallbackRoutine+0x198>)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
		}

		sensor_binary |= bit << (SENSOR_NUM-i-1);
 8005328:	7bfa      	ldrb	r2, [r7, #15]
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f1c3 030d 	rsb	r3, r3, #13
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	b21a      	sxth	r2, r3
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <SEN_CallbackRoutine+0x188>)
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b21b      	sxth	r3, r3
 800533c:	4313      	orrs	r3, r2
 800533e:	b21b      	sxth	r3, r3
 8005340:	b29a      	uxth	r2, r3
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <SEN_CallbackRoutine+0x188>)
 8005344:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3301      	adds	r3, #1
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b0d      	cmp	r3, #13
 8005350:	dd8f      	ble.n	8005272 <SEN_CallbackRoutine+0x66>
	}

	if(autocalib_status == 1) {
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <SEN_CallbackRoutine+0x19c>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d102      	bne.n	8005360 <SEN_CallbackRoutine+0x154>
		SEN_AutoCalibrationRoutine(0);
 800535a:	2000      	movs	r0, #0
 800535c:	f000 f870 	bl	8005440 <SEN_AutoCalibrationRoutine>
	}

	sensor_flag |= 1;
 8005360:	4b12      	ldr	r3, [pc, #72]	; (80053ac <SEN_CallbackRoutine+0x1a0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	b2da      	uxtb	r2, r3
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <SEN_CallbackRoutine+0x1a0>)
 800536c:	701a      	strb	r2, [r3, #0]
	sensor_flag &=~2;
 800536e:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <SEN_CallbackRoutine+0x1a0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	f023 0302 	bic.w	r3, r3, #2
 8005376:	b2da      	uxtb	r2, r3
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <SEN_CallbackRoutine+0x1a0>)
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e000      	b.n	8005380 <SEN_CallbackRoutine+0x174>
	if(hadc->Instance != sen_hadc->Instance) return;
 800537e:	bf00      	nop
}
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000b6c 	.word	0x20000b6c
 800538c:	20000b70 	.word	0x20000b70
 8005390:	20000b8c 	.word	0x20000b8c
 8005394:	20000bd2 	.word	0x20000bd2
 8005398:	20000bd4 	.word	0x20000bd4
 800539c:	20000ba8 	.word	0x20000ba8
 80053a0:	66666667 	.word	0x66666667
 80053a4:	20000bc4 	.word	0x20000bc4
 80053a8:	20000c38 	.word	0x20000c38
 80053ac:	20000c2d 	.word	0x20000c2d

080053b0 <SEN_StartAutoCalibration>:

uint16_t* calib_upper_adc;
uint16_t* calib_lower_adc;
uint8_t autocalib_status = 0;

void SEN_StartAutoCalibration() {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
	if(autocalib_status == 1) return;
 80053b6:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <SEN_StartAutoCalibration+0x84>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d035      	beq.n	800542a <SEN_StartAutoCalibration+0x7a>
	calib_upper_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 80053be:	201c      	movs	r0, #28
 80053c0:	f009 ff32 	bl	800f228 <malloc>
 80053c4:	4603      	mov	r3, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <SEN_StartAutoCalibration+0x88>)
 80053ca:	601a      	str	r2, [r3, #0]
	calib_lower_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 80053cc:	201c      	movs	r0, #28
 80053ce:	f009 ff2b 	bl	800f228 <malloc>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b19      	ldr	r3, [pc, #100]	; (800543c <SEN_StartAutoCalibration+0x8c>)
 80053d8:	601a      	str	r2, [r3, #0]
	if(calib_upper_adc || calib_lower_adc) {
 80053da:	4b17      	ldr	r3, [pc, #92]	; (8005438 <SEN_StartAutoCalibration+0x88>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <SEN_StartAutoCalibration+0x3a>
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <SEN_StartAutoCalibration+0x8c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01b      	beq.n	8005422 <SEN_StartAutoCalibration+0x72>
		for(int i=0; i<SENSOR_NUM; i++) {
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	e011      	b.n	8005414 <SEN_StartAutoCalibration+0x64>
			calib_upper_adc[i] = 0x000;
 80053f0:	4b11      	ldr	r3, [pc, #68]	; (8005438 <SEN_StartAutoCalibration+0x88>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	2200      	movs	r2, #0
 80053fc:	801a      	strh	r2, [r3, #0]
			calib_lower_adc[i] = ADC_MAX;
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <SEN_StartAutoCalibration+0x8c>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	4413      	add	r3, r2
 8005408:	f640 72ff 	movw	r2, #4095	; 0xfff
 800540c:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<SENSOR_NUM; i++) {
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3301      	adds	r3, #1
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b0d      	cmp	r3, #13
 8005418:	ddea      	ble.n	80053f0 <SEN_StartAutoCalibration+0x40>
		}
		autocalib_status = 1;
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <SEN_StartAutoCalibration+0x84>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e004      	b.n	800542c <SEN_StartAutoCalibration+0x7c>
	}
	else autocalib_status = 0;
 8005422:	4b04      	ldr	r3, [pc, #16]	; (8005434 <SEN_StartAutoCalibration+0x84>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	e000      	b.n	800542c <SEN_StartAutoCalibration+0x7c>
	if(autocalib_status == 1) return;
 800542a:	bf00      	nop
}
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000c38 	.word	0x20000c38
 8005438:	20000c30 	.word	0x20000c30
 800543c:	20000c34 	.word	0x20000c34

08005440 <SEN_AutoCalibrationRoutine>:

void SEN_AutoCalibrationRoutine(uint8_t flag) {
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<SENSOR_NUM; i++) {
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e02f      	b.n	80054b0 <SEN_AutoCalibrationRoutine+0x70>
		if(calib_upper_adc[i] < adc_sensor_arranged[i])
 8005450:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <SEN_AutoCalibrationRoutine+0x84>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4413      	add	r3, r2
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	491a      	ldr	r1, [pc, #104]	; (80054c8 <SEN_AutoCalibrationRoutine+0x88>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005464:	429a      	cmp	r2, r3
 8005466:	d20a      	bcs.n	800547e <SEN_AutoCalibrationRoutine+0x3e>
			calib_upper_adc[i] = adc_sensor_arranged[i];
 8005468:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <SEN_AutoCalibrationRoutine+0x84>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	4915      	ldr	r1, [pc, #84]	; (80054c8 <SEN_AutoCalibrationRoutine+0x88>)
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e015      	b.n	80054aa <SEN_AutoCalibrationRoutine+0x6a>
		else if(calib_lower_adc[i] > adc_sensor_arranged[i])
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <SEN_AutoCalibrationRoutine+0x8c>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4413      	add	r3, r2
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	490f      	ldr	r1, [pc, #60]	; (80054c8 <SEN_AutoCalibrationRoutine+0x88>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005492:	429a      	cmp	r2, r3
 8005494:	d909      	bls.n	80054aa <SEN_AutoCalibrationRoutine+0x6a>
			calib_lower_adc[i] = adc_sensor_arranged[i];
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <SEN_AutoCalibrationRoutine+0x8c>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	4909      	ldr	r1, [pc, #36]	; (80054c8 <SEN_AutoCalibrationRoutine+0x88>)
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80054a8:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3301      	adds	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b0d      	cmp	r3, #13
 80054b4:	ddcc      	ble.n	8005450 <SEN_AutoCalibrationRoutine+0x10>
	}
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	20000c30 	.word	0x20000c30
 80054c8:	20000b8c 	.word	0x20000b8c
 80054cc:	20000c34 	.word	0x20000c34

080054d0 <SEN_EndAutoCalibration>:

void SEN_EndAutoCalibration(uint8_t flag) {
 80054d0:	b5b0      	push	{r4, r5, r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
	if(autocalib_status == 0) return;
 80054da:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <SEN_EndAutoCalibration+0xe8>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d060      	beq.n	80055a4 <SEN_EndAutoCalibration+0xd4>
	if(flag & 1) {
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d04d      	beq.n	8005588 <SEN_EndAutoCalibration+0xb8>
		for(int i=0; i<SENSOR_NUM; i++) {
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e047      	b.n	8005582 <SEN_EndAutoCalibration+0xb2>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 80054f2:	4b32      	ldr	r3, [pc, #200]	; (80055bc <SEN_EndAutoCalibration+0xec>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4413      	add	r3, r2
 80054fc:	881a      	ldrh	r2, [r3, #0]
 80054fe:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <SEN_EndAutoCalibration+0xf0>)
 8005500:	6819      	ldr	r1, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	440b      	add	r3, r1
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d335      	bcc.n	800557a <SEN_EndAutoCalibration+0xaa>
			threshold_sensor[i] = TH_CALIB_FACTOR * (calib_upper_adc[i]-calib_lower_adc[i]) + calib_lower_adc[i];
 800550e:	4b2b      	ldr	r3, [pc, #172]	; (80055bc <SEN_EndAutoCalibration+0xec>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <SEN_EndAutoCalibration+0xf0>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	4413      	add	r3, r2
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	1acb      	subs	r3, r1, r3
 800552a:	4618      	mov	r0, r3
 800552c:	f7fa fffa 	bl	8000524 <__aeabi_i2d>
 8005530:	a31f      	add	r3, pc, #124	; (adr r3, 80055b0 <SEN_EndAutoCalibration+0xe0>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fb f85f 	bl	80005f8 <__aeabi_dmul>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4614      	mov	r4, r2
 8005540:	461d      	mov	r5, r3
 8005542:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <SEN_EndAutoCalibration+0xf0>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fa ffe8 	bl	8000524 <__aeabi_i2d>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4620      	mov	r0, r4
 800555a:	4629      	mov	r1, r5
 800555c:	f7fa fe96 	bl	800028c <__adddf3>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	f7fb fb1e 	bl	8000ba8 <__aeabi_d2uiz>
 800556c:	4603      	mov	r3, r0
 800556e:	b299      	uxth	r1, r3
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <SEN_EndAutoCalibration+0xf4>)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005578:	e000      	b.n	800557c <SEN_EndAutoCalibration+0xac>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 800557a:	bf00      	nop
		for(int i=0; i<SENSOR_NUM; i++) {
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b0d      	cmp	r3, #13
 8005586:	ddb4      	ble.n	80054f2 <SEN_EndAutoCalibration+0x22>
		}
	}
	free(calib_upper_adc);
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <SEN_EndAutoCalibration+0xec>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f009 fe53 	bl	800f238 <free>
	free(calib_lower_adc);
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <SEN_EndAutoCalibration+0xf0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f009 fe4e 	bl	800f238 <free>
	autocalib_status = 0;
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <SEN_EndAutoCalibration+0xe8>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	e000      	b.n	80055a6 <SEN_EndAutoCalibration+0xd6>
	if(autocalib_status == 0) return;
 80055a4:	bf00      	nop
}
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bdb0      	pop	{r4, r5, r7, pc}
 80055ac:	f3af 8000 	nop.w
 80055b0:	9999999a 	.word	0x9999999a
 80055b4:	3fd99999 	.word	0x3fd99999
 80055b8:	20000c38 	.word	0x20000c38
 80055bc:	20000c30 	.word	0x20000c30
 80055c0:	20000c34 	.word	0x20000c34
 80055c4:	20000ba8 	.word	0x20000ba8

080055c8 <SEN_BlackLine>:

void SEN_BlackLine() {
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
	sensor_invert = 0;
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <SEN_BlackLine+0x14>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
}
 80055d2:	bf00      	nop
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	20000bd4 	.word	0x20000bd4

080055e0 <SEN_WhiteLine>:

void SEN_WhiteLine() {
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
	sensor_invert = 1;
 80055e4:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <SEN_WhiteLine+0x14>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
}
 80055ea:	bf00      	nop
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20000bd4 	.word	0x20000bd4

080055f8 <SEN_Invert>:

void SEN_Invert() {
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
	sensor_invert = !sensor_invert;
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <SEN_Invert+0x24>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <SEN_Invert+0x24>)
 800560e:	701a      	strb	r2, [r3, #0]
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000bd4 	.word	0x20000bd4

08005620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <HAL_MspInit+0x4c>)
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	4a0f      	ldr	r2, [pc, #60]	; (800566c <HAL_MspInit+0x4c>)
 8005630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005634:	6453      	str	r3, [r2, #68]	; 0x44
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <HAL_MspInit+0x4c>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4b09      	ldr	r3, [pc, #36]	; (800566c <HAL_MspInit+0x4c>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	4a08      	ldr	r2, [pc, #32]	; (800566c <HAL_MspInit+0x4c>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005650:	6413      	str	r3, [r2, #64]	; 0x40
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <HAL_MspInit+0x4c>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40023800 	.word	0x40023800

08005670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005674:	e7fe      	b.n	8005674 <NMI_Handler+0x4>

08005676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005676:	b480      	push	{r7}
 8005678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800567a:	e7fe      	b.n	800567a <HardFault_Handler+0x4>

0800567c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005680:	e7fe      	b.n	8005680 <MemManage_Handler+0x4>

08005682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005682:	b480      	push	{r7}
 8005684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005686:	e7fe      	b.n	8005686 <BusFault_Handler+0x4>

08005688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800568c:	e7fe      	b.n	800568c <UsageFault_Handler+0x4>

0800568e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800568e:	b480      	push	{r7}
 8005690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005692:	bf00      	nop
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056aa:	b480      	push	{r7}
 80056ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056bc:	f004 fcec 	bl	800a098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056c0:	bf00      	nop
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <ADC_IRQHandler+0x10>)
 80056ca:	f004 fd6c 	bl	800a1a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000518 	.word	0x20000518

080056d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80056dc:	4802      	ldr	r0, [pc, #8]	; (80056e8 <TIM6_DAC_IRQHandler+0x10>)
 80056de:	f008 f933 	bl	800d948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	2000108c 	.word	0x2000108c

080056ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80056f0:	4802      	ldr	r0, [pc, #8]	; (80056fc <DMA2_Stream0_IRQHandler+0x10>)
 80056f2:	f005 fc73 	bl	800afdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000560 	.word	0x20000560

08005700 <GetAction>:

uint8_t storage_flag = 0;

Plan_typedef plan;

Action_typedef GetAction(int index) {
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	index = index%DEF_ACTION_PER_PLAN;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <GetAction+0x7c>)
 800570e:	fb82 1203 	smull	r1, r2, r2, r3
 8005712:	11d1      	asrs	r1, r2, #7
 8005714:	17da      	asrs	r2, r3, #31
 8005716:	1a8a      	subs	r2, r1, r2
 8005718:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800571c:	fb01 f202 	mul.w	r2, r1, r2
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	603b      	str	r3, [r7, #0]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	b29a      	uxth	r2, r3
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <GetAction+0x80>)
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	4413      	add	r3, r2
 8005732:	b29b      	uxth	r3, r3
 8005734:	3340      	adds	r3, #64	; 0x40
 8005736:	83fb      	strh	r3, [r7, #30]
	while(!EEP_ReadyToWrite());
 8005738:	bf00      	nop
 800573a:	f7fc fb41 	bl	8001dc0 <EEP_ReadyToWrite>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0fa      	beq.n	800573a <GetAction+0x3a>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8005744:	f107 010c 	add.w	r1, r7, #12
 8005748:	8bfb      	ldrh	r3, [r7, #30]
 800574a:	2210      	movs	r2, #16
 800574c:	4618      	mov	r0, r3
 800574e:	f7fc fb11 	bl	8001d74 <EEP_ReadMem>
	memcpy((uint8_t*)&plan_active, buff, sizeof(Action_typedef));
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <GetAction+0x84>)
 8005754:	461c      	mov	r4, r3
 8005756:	f107 030c 	add.w	r3, r7, #12
 800575a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800575c:	c407      	stmia	r4!, {r0, r1, r2}
 800575e:	7023      	strb	r3, [r4, #0]
	return plan_active;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <GetAction+0x84>)
 8005764:	461c      	mov	r4, r3
 8005766:	4613      	mov	r3, r2
 8005768:	cb07      	ldmia	r3!, {r0, r1, r2}
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	6061      	str	r1, [r4, #4]
 800576e:	60a2      	str	r2, [r4, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	7323      	strb	r3, [r4, #12]
}
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	3724      	adds	r7, #36	; 0x24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd90      	pop	{r4, r7, pc}
 800577c:	51eb851f 	.word	0x51eb851f
 8005780:	20000c3a 	.word	0x20000c3a
 8005784:	20000f1c 	.word	0x20000f1c

08005788 <SetAction>:

void SetAction(Action_typedef act, int index) {
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b08b      	sub	sp, #44	; 0x2c
 800578c:	af00      	add	r7, sp, #0
 800578e:	463c      	mov	r4, r7
 8005790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	index = index%DEF_ACTION_PER_PLAN;
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	4a19      	ldr	r2, [pc, #100]	; (80057fc <SetAction+0x74>)
 8005798:	fb82 1203 	smull	r1, r2, r2, r3
 800579c:	11d1      	asrs	r1, r2, #7
 800579e:	17da      	asrs	r2, r3, #31
 80057a0:	1a8a      	subs	r2, r1, r2
 80057a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80057a6:	fb01 f202 	mul.w	r2, r1, r2
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t buff[ACTION_SIZE];
	plan_active = act;
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <SetAction+0x78>)
 80057b0:	461c      	mov	r4, r3
 80057b2:	463b      	mov	r3, r7
 80057b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057b6:	c407      	stmia	r4!, {r0, r1, r2}
 80057b8:	7023      	strb	r3, [r4, #0]
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	b29b      	uxth	r3, r3
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <SetAction+0x7c>)
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	4413      	add	r3, r2
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3340      	adds	r3, #64	; 0x40
 80057cc:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&plan_active, sizeof(Action_typedef));
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <SetAction+0x78>)
 80057d0:	f107 0414 	add.w	r4, r7, #20
 80057d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057d6:	c407      	stmia	r4!, {r0, r1, r2}
 80057d8:	7023      	strb	r3, [r4, #0]
	while(!EEP_ReadyToWrite());
 80057da:	bf00      	nop
 80057dc:	f7fc faf0 	bl	8001dc0 <EEP_ReadyToWrite>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0fa      	beq.n	80057dc <SetAction+0x54>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 80057e6:	f107 0114 	add.w	r1, r7, #20
 80057ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057ec:	2210      	movs	r2, #16
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fc fa78 	bl	8001ce4 <EEP_WriteMem>
}
 80057f4:	bf00      	nop
 80057f6:	372c      	adds	r7, #44	; 0x2c
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd90      	pop	{r4, r7, pc}
 80057fc:	51eb851f 	.word	0x51eb851f
 8005800:	20000f1c 	.word	0x20000f1c
 8005804:	20000c3a 	.word	0x20000c3a

08005808 <Storage_ResetPlan>:

void Storage_ResetPlan() {
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b0b9      	sub	sp, #228	; 0xe4
 800580c:	af02      	add	r7, sp, #8
	Plan_typedef temp;
	temp.id = num_plan | 0x80;
 800580e:	4b40      	ldr	r3, [pc, #256]	; (8005910 <Storage_ResetPlan+0x108>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	temp.speed = 40;
 800581c:	2328      	movs	r3, #40	; 0x28
 800581e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
	temp.num_action = DEF_ACTION_PER_PLAN;
 8005822:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005826:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	temp.turn_speed = 10;
 800582a:	230a      	movs	r3, #10
 800582c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	memset(temp.checkpoint, 0, NUM_CHECKPOINT*sizeof(temp.checkpoint[0]));
 8005830:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005834:	3304      	adds	r3, #4
 8005836:	221e      	movs	r2, #30
 8005838:	2100      	movs	r1, #0
 800583a:	4618      	mov	r0, r3
 800583c:	f00a fb29 	bl	800fe92 <memset>
	temp.kpid[0] = 4.71428;
 8005840:	4b34      	ldr	r3, [pc, #208]	; (8005914 <Storage_ResetPlan+0x10c>)
 8005842:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	temp.kpid[1] = 0;
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	temp.kpid[2] = 0;
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	temp.status_pid = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
	temp.alpha = 1;
 800585c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	temp.acc = 100;
 8005864:	4b2c      	ldr	r3, [pc, #176]	; (8005918 <Storage_ResetPlan+0x110>)
 8005866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)&temp, sizeof(Plan_typedef));
 800586a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800586e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005872:	223c      	movs	r2, #60	; 0x3c
 8005874:	4618      	mov	r0, r3
 8005876:	f00a fb9b 	bl	800ffb0 <memcpy>

	uint16_t page_plan = num_plan_addr/PAGE_SIZE;
 800587a:	4b28      	ldr	r3, [pc, #160]	; (800591c <Storage_ResetPlan+0x114>)
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	099b      	lsrs	r3, r3, #6
 8005880:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
//	uint16_t page_offset = DEF_ACTION_PER_PLAN/ACTION_PER_PAGE+1;

	while(!EEP_ReadyToWrite());
 8005884:	bf00      	nop
 8005886:	f7fc fa9b 	bl	8001dc0 <EEP_ReadyToWrite>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0fa      	beq.n	8005886 <Storage_ResetPlan+0x7e>
	EEP_WritePage(page_plan, buff);
 8005890:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005894:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fc f9fe 	bl	8001c9c <EEP_WritePage>

	Action_typedef action_temp;
	uint8_t action_buff[PAGE_SIZE];

	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058a6:	e028      	b.n	80058fa <Storage_ResetPlan+0xf2>

		action_temp = plan_default;
 80058a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	731a      	strb	r2, [r3, #12]
 80058b6:	2302      	movs	r3, #2
 80058b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80058bc:	2305      	movs	r3, #5
 80058be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80058c2:	233c      	movs	r3, #60	; 0x3c
 80058c4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80058c8:	23ec      	movs	r3, #236	; 0xec
 80058ca:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80058ce:	2332      	movs	r3, #50	; 0x32
 80058d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

		memcpy(action_buff, (uint8_t*)&action_temp, sizeof(Action_typedef));
 80058d4:	1d3c      	adds	r4, r7, #4
 80058d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80058da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058dc:	c407      	stmia	r4!, {r0, r1, r2}
 80058de:	7023      	strb	r3, [r4, #0]

		SetAction(action_temp, i);
 80058e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80058ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058ec:	f7ff ff4c 	bl	8005788 <SetAction>
	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 80058f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f4:	3301      	adds	r3, #1
 80058f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005902:	dbd1      	blt.n	80058a8 <Storage_ResetPlan+0xa0>
	}
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	37dc      	adds	r7, #220	; 0xdc
 800590a:	46bd      	mov	sp, r7
 800590c:	bd90      	pop	{r4, r7, pc}
 800590e:	bf00      	nop
 8005910:	20000c39 	.word	0x20000c39
 8005914:	4096db62 	.word	0x4096db62
 8005918:	42c80000 	.word	0x42c80000
 800591c:	20000c3a 	.word	0x20000c3a

08005920 <Storage_ResetMemory>:

void Storage_ResetMemory() {
 8005920:	b580      	push	{r7, lr}
 8005922:	b094      	sub	sp, #80	; 0x50
 8005924:	af00      	add	r7, sp, #0
	uint8_t init_buff[PAGE_SIZE];
	memset(init_buff, 0, PAGE_SIZE);
 8005926:	1d3b      	adds	r3, r7, #4
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f00a fab0 	bl	800fe92 <memset>
	init_buff[INIT_MEM_ID_ADDR] = INIT_MEM_ID;
 8005932:	23ab      	movs	r3, #171	; 0xab
 8005934:	717b      	strb	r3, [r7, #5]
	init_buff[INIT_MEM_NUM_PLAN_ADDR] = INIT_MEM_NUM_PLAN;
 8005936:	2308      	movs	r3, #8
 8005938:	71fb      	strb	r3, [r7, #7]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	723b      	strb	r3, [r7, #8]
	uint16_t* temp = (uint16_t*)&init_buff[PTR_MEMORY_ADDR_START];
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	3310      	adds	r3, #16
 8005942:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8005944:	2300      	movs	r3, #0
 8005946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005948:	e017      	b.n	800597a <Storage_ResetMemory+0x5a>
		temp[i] = (((i*ACTION_SIZE*(DEF_ACTION_PER_PLAN+4))/PAGE_SIZE))*PAGE_SIZE+DATA_ADDR_START;
 800594a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594c:	b29b      	uxth	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	0092      	lsls	r2, r2, #2
 8005952:	441a      	add	r2, r3
 8005954:	4611      	mov	r1, r2
 8005956:	0088      	lsls	r0, r1, #2
 8005958:	4611      	mov	r1, r2
 800595a:	4602      	mov	r2, r0
 800595c:	440a      	add	r2, r1
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	4413      	add	r3, r2
 8005962:	019b      	lsls	r3, r3, #6
 8005964:	b29a      	uxth	r2, r3
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800596c:	440b      	add	r3, r1
 800596e:	3240      	adds	r2, #64	; 0x40
 8005970:	b292      	uxth	r2, r2
 8005972:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8005974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005976:	3301      	adds	r3, #1
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597c:	2b07      	cmp	r3, #7
 800597e:	dde4      	ble.n	800594a <Storage_ResetMemory+0x2a>
	}
	temp = (uint16_t*)&init_buff[ADC_TR_ADDR_START];
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	3320      	adds	r3, #32
 8005984:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<SENSOR_NUM; i++) {
 8005986:	2300      	movs	r3, #0
 8005988:	64bb      	str	r3, [r7, #72]	; 0x48
 800598a:	e009      	b.n	80059a0 <Storage_ResetMemory+0x80>
		temp[i] = ADC_MAX/2;
 800598c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005992:	4413      	add	r3, r2
 8005994:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005998:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800599a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599c:	3301      	adds	r3, #1
 800599e:	64bb      	str	r3, [r7, #72]	; 0x48
 80059a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a2:	2b0d      	cmp	r3, #13
 80059a4:	ddf2      	ble.n	800598c <Storage_ResetMemory+0x6c>
	}
	while(!EEP_ReadyToWrite());
 80059a6:	bf00      	nop
 80059a8:	f7fc fa0a 	bl	8001dc0 <EEP_ReadyToWrite>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0fa      	beq.n	80059a8 <Storage_ResetMemory+0x88>
	EEP_WritePage(0x0000, init_buff);
 80059b2:	1d3b      	adds	r3, r7, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	2000      	movs	r0, #0
 80059b8:	f7fc f970 	bl	8001c9c <EEP_WritePage>
}
 80059bc:	bf00      	nop
 80059be:	3750      	adds	r7, #80	; 0x50
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <Storage_Init>:

uint8_t Storage_Init() {
 80059c4:	b5b0      	push	{r4, r5, r7, lr}
 80059c6:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 80059c8:	bf00      	nop
 80059ca:	f7fc f9f9 	bl	8001dc0 <EEP_ReadyToWrite>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0fa      	beq.n	80059ca <Storage_Init+0x6>
	EEP_ReadPage(INIT_ADDR_START/PAGE_SIZE, init_buff);
 80059d4:	4913      	ldr	r1, [pc, #76]	; (8005a24 <Storage_Init+0x60>)
 80059d6:	2000      	movs	r0, #0
 80059d8:	f7fc f9a8 	bl	8001d2c <EEP_ReadPage>
	if(init_buff[INIT_MEM_ID_ADDR] != INIT_MEM_ID) return 0;
 80059dc:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <Storage_Init+0x60>)
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	2bab      	cmp	r3, #171	; 0xab
 80059e2:	d001      	beq.n	80059e8 <Storage_Init+0x24>
 80059e4:	2300      	movs	r3, #0
 80059e6:	e01b      	b.n	8005a20 <Storage_Init+0x5c>
	num_plan = init_buff[INIT_MEM_LAST_PLAN_ADDR];
 80059e8:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <Storage_Init+0x60>)
 80059ea:	791a      	ldrb	r2, [r3, #4]
 80059ec:	4b0e      	ldr	r3, [pc, #56]	; (8005a28 <Storage_Init+0x64>)
 80059ee:	701a      	strb	r2, [r3, #0]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 80059f0:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <Storage_Init+0x64>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <Storage_Init+0x60>)
 80059fa:	4413      	add	r3, r2
 80059fc:	881a      	ldrh	r2, [r3, #0]
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <Storage_Init+0x68>)
 8005a00:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8005a02:	4a0b      	ldr	r2, [pc, #44]	; (8005a30 <Storage_Init+0x6c>)
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <Storage_Init+0x60>)
 8005a06:	4615      	mov	r5, r2
 8005a08:	f103 0420 	add.w	r4, r3, #32
 8005a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a0e:	6028      	str	r0, [r5, #0]
 8005a10:	6069      	str	r1, [r5, #4]
 8005a12:	60aa      	str	r2, [r5, #8]
 8005a14:	60eb      	str	r3, [r5, #12]
 8005a16:	cc07      	ldmia	r4!, {r0, r1, r2}
 8005a18:	6128      	str	r0, [r5, #16]
 8005a1a:	6169      	str	r1, [r5, #20]
 8005a1c:	61aa      	str	r2, [r5, #24]
	return 1;
 8005a1e:	2301      	movs	r3, #1
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bdb0      	pop	{r4, r5, r7, pc}
 8005a24:	20000c44 	.word	0x20000c44
 8005a28:	20000c39 	.word	0x20000c39
 8005a2c:	20000c3a 	.word	0x20000c3a
 8005a30:	20000ba8 	.word	0x20000ba8

08005a34 <Storage_PlanInit>:

uint8_t Storage_PlanInit() {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b092      	sub	sp, #72	; 0x48
 8005a38:	af00      	add	r7, sp, #0
	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <Storage_PlanInit+0x54>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	099b      	lsrs	r3, r3, #6
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(!EEP_ReadyToWrite());
 8005a46:	bf00      	nop
 8005a48:	f7fc f9ba 	bl	8001dc0 <EEP_ReadyToWrite>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0fa      	beq.n	8005a48 <Storage_PlanInit+0x14>
	EEP_ReadPage(plan_page, buff);
 8005a52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	1d3a      	adds	r2, r7, #4
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fc f965 	bl	8001d2c <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8005a62:	1d3b      	adds	r3, r7, #4
 8005a64:	223c      	movs	r2, #60	; 0x3c
 8005a66:	4619      	mov	r1, r3
 8005a68:	4808      	ldr	r0, [pc, #32]	; (8005a8c <Storage_PlanInit+0x58>)
 8005a6a:	f00a faa1 	bl	800ffb0 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8005a6e:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <Storage_PlanInit+0x58>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	09db      	lsrs	r3, r3, #7
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d001      	beq.n	8005a7e <Storage_PlanInit+0x4a>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <Storage_PlanInit+0x4c>
	return 1;
 8005a7e:	2301      	movs	r3, #1
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3748      	adds	r7, #72	; 0x48
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000c3a 	.word	0x20000c3a
 8005a8c:	20000f2c 	.word	0x20000f2c

08005a90 <Storage_GetADCThreshold>:

void Storage_GetADCThreshold() {
 8005a90:	b5b0      	push	{r4, r5, r7, lr}
 8005a92:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8005a94:	bf00      	nop
 8005a96:	f7fc f993 	bl	8001dc0 <EEP_ReadyToWrite>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0fa      	beq.n	8005a96 <Storage_GetADCThreshold+0x6>
	EEP_ReadMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8005aa0:	221c      	movs	r2, #28
 8005aa2:	490a      	ldr	r1, [pc, #40]	; (8005acc <Storage_GetADCThreshold+0x3c>)
 8005aa4:	2020      	movs	r0, #32
 8005aa6:	f7fc f965 	bl	8001d74 <EEP_ReadMem>
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <Storage_GetADCThreshold+0x40>)
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <Storage_GetADCThreshold+0x44>)
 8005aae:	4615      	mov	r5, r2
 8005ab0:	f103 0420 	add.w	r4, r3, #32
 8005ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ab6:	6028      	str	r0, [r5, #0]
 8005ab8:	6069      	str	r1, [r5, #4]
 8005aba:	60aa      	str	r2, [r5, #8]
 8005abc:	60eb      	str	r3, [r5, #12]
 8005abe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8005ac0:	6128      	str	r0, [r5, #16]
 8005ac2:	6169      	str	r1, [r5, #20]
 8005ac4:	61aa      	str	r2, [r5, #24]
}
 8005ac6:	bf00      	nop
 8005ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000c64 	.word	0x20000c64
 8005ad0:	20000ba8 	.word	0x20000ba8
 8005ad4:	20000c44 	.word	0x20000c44

08005ad8 <Storage_SetADCThreshold>:

void Storage_SetADCThreshold() {
 8005ad8:	b5b0      	push	{r4, r5, r7, lr}
 8005ada:	af00      	add	r7, sp, #0
	memcpy(&init_buff[ADC_TR_ADDR_START], (uint8_t*)threshold_sensor, SENSOR_NUM*2);
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <Storage_SetADCThreshold+0x3c>)
 8005ade:	4a0e      	ldr	r2, [pc, #56]	; (8005b18 <Storage_SetADCThreshold+0x40>)
 8005ae0:	f103 0420 	add.w	r4, r3, #32
 8005ae4:	4615      	mov	r5, r2
 8005ae6:	6828      	ldr	r0, [r5, #0]
 8005ae8:	6869      	ldr	r1, [r5, #4]
 8005aea:	68aa      	ldr	r2, [r5, #8]
 8005aec:	68eb      	ldr	r3, [r5, #12]
 8005aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005af0:	6928      	ldr	r0, [r5, #16]
 8005af2:	6969      	ldr	r1, [r5, #20]
 8005af4:	69aa      	ldr	r2, [r5, #24]
 8005af6:	c407      	stmia	r4!, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8005af8:	bf00      	nop
 8005afa:	f7fc f961 	bl	8001dc0 <EEP_ReadyToWrite>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0fa      	beq.n	8005afa <Storage_SetADCThreshold+0x22>
	EEP_WriteMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8005b04:	221c      	movs	r2, #28
 8005b06:	4905      	ldr	r1, [pc, #20]	; (8005b1c <Storage_SetADCThreshold+0x44>)
 8005b08:	2020      	movs	r0, #32
 8005b0a:	f7fc f8eb 	bl	8001ce4 <EEP_WriteMem>
}
 8005b0e:	bf00      	nop
 8005b10:	bdb0      	pop	{r4, r5, r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000c44 	.word	0x20000c44
 8005b18:	20000ba8 	.word	0x20000ba8
 8005b1c:	20000c64 	.word	0x20000c64

08005b20 <Storage_GetPlan>:

uint8_t Storage_GetPlan(uint8_t n_plan) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b094      	sub	sp, #80	; 0x50
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
	num_plan = n_plan;
 8005b2a:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <Storage_GetPlan+0x94>)
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	7013      	strb	r3, [r2, #0]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = num_plan;
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <Storage_GetPlan+0x94>)
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <Storage_GetPlan+0x98>)
 8005b36:	711a      	strb	r2, [r3, #4]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <Storage_GetPlan+0x94>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4a1d      	ldr	r2, [pc, #116]	; (8005bb8 <Storage_GetPlan+0x98>)
 8005b42:	4413      	add	r3, r2
 8005b44:	881a      	ldrh	r2, [r3, #0]
 8005b46:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <Storage_GetPlan+0x9c>)
 8005b48:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 8005b4a:	bf00      	nop
 8005b4c:	f7fc f938 	bl	8001dc0 <EEP_ReadyToWrite>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0fa      	beq.n	8005b4c <Storage_GetPlan+0x2c>
	EEP_WriteMem(INIT_MEM_LAST_PLAN_ADDR, &num_plan, 1);
 8005b56:	2201      	movs	r2, #1
 8005b58:	4916      	ldr	r1, [pc, #88]	; (8005bb4 <Storage_GetPlan+0x94>)
 8005b5a:	2004      	movs	r0, #4
 8005b5c:	f7fc f8c2 	bl	8001ce4 <EEP_WriteMem>

	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <Storage_GetPlan+0x9c>)
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	099b      	lsrs	r3, r3, #6
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(!EEP_ReadyToWrite());
 8005b6c:	bf00      	nop
 8005b6e:	f7fc f927 	bl	8001dc0 <EEP_ReadyToWrite>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0fa      	beq.n	8005b6e <Storage_GetPlan+0x4e>
	EEP_ReadPage(plan_page, buff);
 8005b78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f107 020c 	add.w	r2, r7, #12
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fc f8d1 	bl	8001d2c <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8005b8a:	f107 030c 	add.w	r3, r7, #12
 8005b8e:	223c      	movs	r2, #60	; 0x3c
 8005b90:	4619      	mov	r1, r3
 8005b92:	480b      	ldr	r0, [pc, #44]	; (8005bc0 <Storage_GetPlan+0xa0>)
 8005b94:	f00a fa0c 	bl	800ffb0 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <Storage_GetPlan+0xa0>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	09db      	lsrs	r3, r3, #7
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d001      	beq.n	8005ba8 <Storage_GetPlan+0x88>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <Storage_GetPlan+0x8a>
	return 1;
 8005ba8:	2301      	movs	r3, #1
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3750      	adds	r7, #80	; 0x50
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000c39 	.word	0x20000c39
 8005bb8:	20000c44 	.word	0x20000c44
 8005bbc:	20000c3a 	.word	0x20000c3a
 8005bc0:	20000f2c 	.word	0x20000f2c

08005bc4 <Storage_SetPlanOther>:

void Storage_SetPlanOther(Plan_typedef* ptr_plan, uint8_t n_plan) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b094      	sub	sp, #80	; 0x50
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4a12      	ldr	r2, [pc, #72]	; (8005c20 <Storage_SetPlanOther+0x5c>)
 8005bd8:	4413      	add	r3, r2
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t plan_page = (n_plan_addr)/PAGE_SIZE;
 8005be0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)ptr_plan, sizeof(Plan_typedef));
 8005bec:	f107 030c 	add.w	r3, r7, #12
 8005bf0:	223c      	movs	r2, #60	; 0x3c
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f00a f9db 	bl	800ffb0 <memcpy>
	while(!EEP_ReadyToWrite());
 8005bfa:	bf00      	nop
 8005bfc:	f7fc f8e0 	bl	8001dc0 <EEP_ReadyToWrite>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0fa      	beq.n	8005bfc <Storage_SetPlanOther+0x38>
	EEP_WritePage(plan_page, buff);
 8005c06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f107 020c 	add.w	r2, r7, #12
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fc f842 	bl	8001c9c <EEP_WritePage>
}
 8005c18:	bf00      	nop
 8005c1a:	3750      	adds	r7, #80	; 0x50
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000c44 	.word	0x20000c44

08005c24 <Storage_SetCheckpoint>:
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
	while(!EEP_ReadyToWrite());
	EEP_ReadMem(plan_page+offset, (uint8_t*)plan.checkpoint, NUM_CHECKPOINT*2);
}

void Storage_SetCheckpoint() {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.checkpoint - (uint8_t*)&plan;
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005c2e:	bf00      	nop
 8005c30:	f7fc f8c6 	bl	8001dc0 <EEP_ReadyToWrite>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0fa      	beq.n	8005c30 <Storage_SetCheckpoint+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.checkpoint, NUM_CHECKPOINT*2);
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <Storage_SetCheckpoint+0x34>)
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	4413      	add	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	221e      	movs	r2, #30
 8005c48:	4904      	ldr	r1, [pc, #16]	; (8005c5c <Storage_SetCheckpoint+0x38>)
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fc f84a 	bl	8001ce4 <EEP_WriteMem>
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000c3a 	.word	0x20000c3a
 8005c5c:	20000f30 	.word	0x20000f30

08005c60 <Storage_SetPID>:

void Storage_SetPID() {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.kpid - (uint8_t*)&plan;
 8005c66:	2324      	movs	r3, #36	; 0x24
 8005c68:	71fb      	strb	r3, [r7, #7]
	uint8_t size = ((uint8_t*)&plan.alpha - (uint8_t*)&plan.kpid) + sizeof(float);
 8005c6a:	2314      	movs	r3, #20
 8005c6c:	71bb      	strb	r3, [r7, #6]
//	uint8_t buff[size];
//	memcpy(buff, (uint8_t*)plan.kpid, 3*sizeof(float));
//	buff[3*sizeof(float)] = plan.status_pid;
//	memcpy(buff+(3*sizeof(float))+1, (uint8_t*)&plan.alpha, sizeof(float));
	while(!EEP_ReadyToWrite());
 8005c6e:	bf00      	nop
 8005c70:	f7fc f8a6 	bl	8001dc0 <EEP_ReadyToWrite>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0fa      	beq.n	8005c70 <Storage_SetPID+0x10>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.kpid, size);
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <Storage_SetPID+0x38>)
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	4413      	add	r3, r2
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	79ba      	ldrb	r2, [r7, #6]
 8005c88:	4904      	ldr	r1, [pc, #16]	; (8005c9c <Storage_SetPID+0x3c>)
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fc f82a 	bl	8001ce4 <EEP_WriteMem>

//	offset = (uint8_t*)&plan.status_pid - (uint8_t*)&plan;
//	while(!EEP_ReadyToWrite());
//	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.status_pid, 1);
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000c3a 	.word	0x20000c3a
 8005c9c:	20000f50 	.word	0x20000f50

08005ca0 <Storage_SetSpeed>:

void Storage_SetSpeed() {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.speed - (uint8_t*)&plan;
 8005ca6:	2322      	movs	r3, #34	; 0x22
 8005ca8:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005caa:	bf00      	nop
 8005cac:	f7fc f888 	bl	8001dc0 <EEP_ReadyToWrite>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0fa      	beq.n	8005cac <Storage_SetSpeed+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.speed, 2);
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <Storage_SetSpeed+0x5c>)
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	490e      	ldr	r1, [pc, #56]	; (8005d00 <Storage_SetSpeed+0x60>)
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fc f80c 	bl	8001ce4 <EEP_WriteMem>

	offset = (uint8_t*)&plan.acc - (uint8_t*)&plan;
 8005ccc:	2338      	movs	r3, #56	; 0x38
 8005cce:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005cd0:	bf00      	nop
 8005cd2:	f7fc f875 	bl	8001dc0 <EEP_ReadyToWrite>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0fa      	beq.n	8005cd2 <Storage_SetSpeed+0x32>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.acc, sizeof(float));
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <Storage_SetSpeed+0x5c>)
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2204      	movs	r2, #4
 8005cea:	4906      	ldr	r1, [pc, #24]	; (8005d04 <Storage_SetSpeed+0x64>)
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fb fff9 	bl	8001ce4 <EEP_WriteMem>
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000c3a 	.word	0x20000c3a
 8005d00:	20000f4e 	.word	0x20000f4e
 8005d04:	20000f64 	.word	0x20000f64

08005d08 <GetActionOther>:

Action_typedef GetActionOther(uint8_t plan, int index) {
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b08b      	sub	sp, #44	; 0x2c
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	460b      	mov	r3, r1
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	72fb      	strb	r3, [r7, #11]
	index = index%DEF_ACTION_PER_PLAN;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <GetActionOther+0x80>)
 8005d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8005d1e:	11d1      	asrs	r1, r2, #7
 8005d20:	17da      	asrs	r2, r3, #31
 8005d22:	1a8a      	subs	r2, r1, r2
 8005d24:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d28:	fb01 f202 	mul.w	r2, r1, r2
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	607b      	str	r3, [r7, #4]
	uint16_t addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+plan*2];
 8005d30:	7afb      	ldrb	r3, [r7, #11]
 8005d32:	3308      	adds	r3, #8
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <GetActionOther+0x84>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d48:	4413      	add	r3, r2
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3340      	adds	r3, #64	; 0x40
 8005d4e:	84bb      	strh	r3, [r7, #36]	; 0x24
	while(!EEP_ReadyToWrite());
 8005d50:	bf00      	nop
 8005d52:	f7fc f835 	bl	8001dc0 <EEP_ReadyToWrite>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0fa      	beq.n	8005d52 <GetActionOther+0x4a>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8005d5c:	f107 0114 	add.w	r1, r7, #20
 8005d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d62:	2210      	movs	r2, #16
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fc f805 	bl	8001d74 <EEP_ReadMem>
	return *(Action_typedef*)&buff;
 8005d6a:	f107 0214 	add.w	r2, r7, #20
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6814      	ldr	r4, [r2, #0]
 8005d72:	6850      	ldr	r0, [r2, #4]
 8005d74:	6891      	ldr	r1, [r2, #8]
 8005d76:	601c      	str	r4, [r3, #0]
 8005d78:	6058      	str	r0, [r3, #4]
 8005d7a:	6099      	str	r1, [r3, #8]
 8005d7c:	7b12      	ldrb	r2, [r2, #12]
 8005d7e:	731a      	strb	r2, [r3, #12]
}
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	372c      	adds	r7, #44	; 0x2c
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd90      	pop	{r4, r7, pc}
 8005d88:	51eb851f 	.word	0x51eb851f
 8005d8c:	20000c44 	.word	0x20000c44

08005d90 <SetActionOther>:

void SetActionOther(Action_typedef act, int index) {
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b08b      	sub	sp, #44	; 0x2c
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	463c      	mov	r4, r7
 8005d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	index = index%DEF_ACTION_PER_PLAN;
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <SetActionOther+0x68>)
 8005da0:	fb82 1203 	smull	r1, r2, r2, r3
 8005da4:	11d1      	asrs	r1, r2, #7
 8005da6:	17da      	asrs	r2, r3, #31
 8005da8:	1a8a      	subs	r2, r1, r2
 8005daa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005dae:	fb01 f202 	mul.w	r2, r1, r2
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <SetActionOther+0x6c>)
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3340      	adds	r3, #64	; 0x40
 8005dc8:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8005dca:	f107 0414 	add.w	r4, r7, #20
 8005dce:	463b      	mov	r3, r7
 8005dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dd2:	c407      	stmia	r4!, {r0, r1, r2}
 8005dd4:	7023      	strb	r3, [r4, #0]
	while(!EEP_ReadyToWrite());
 8005dd6:	bf00      	nop
 8005dd8:	f7fb fff2 	bl	8001dc0 <EEP_ReadyToWrite>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0fa      	beq.n	8005dd8 <SetActionOther+0x48>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005de2:	f107 0114 	add.w	r1, r7, #20
 8005de6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005de8:	2210      	movs	r2, #16
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fb ff7a 	bl	8001ce4 <EEP_WriteMem>
}
 8005df0:	bf00      	nop
 8005df2:	372c      	adds	r7, #44	; 0x2c
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd90      	pop	{r4, r7, pc}
 8005df8:	51eb851f 	.word	0x51eb851f
 8005dfc:	20000c3a 	.word	0x20000c3a

08005e00 <SetActionOther2>:

void SetActionOther2(uint8_t n_plan, Action_typedef act, int index) {
 8005e00:	b084      	sub	sp, #16
 8005e02:	b590      	push	{r4, r7, lr}
 8005e04:	b089      	sub	sp, #36	; 0x24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	4604      	mov	r4, r0
 8005e0a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005e12:	4623      	mov	r3, r4
 8005e14:	71fb      	strb	r3, [r7, #7]
	index = index%DEF_ACTION_PER_PLAN;
 8005e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e18:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <SetActionOther2+0x8c>)
 8005e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8005e1e:	11d1      	asrs	r1, r2, #7
 8005e20:	17da      	asrs	r2, r3, #31
 8005e22:	1a8a      	subs	r2, r1, r2
 8005e24:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e28:	fb01 f202 	mul.w	r2, r1, r2
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t buff[ACTION_SIZE];
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	3308      	adds	r3, #8
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <SetActionOther2+0x90>)
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	83fb      	strh	r3, [r7, #30]
	uint16_t act_addr = n_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8005e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	8bfb      	ldrh	r3, [r7, #30]
 8005e48:	4413      	add	r3, r2
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3340      	adds	r3, #64	; 0x40
 8005e4e:	83bb      	strh	r3, [r7, #28]
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8005e50:	f107 030c 	add.w	r3, r7, #12
 8005e54:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	6861      	ldr	r1, [r4, #4]
 8005e5c:	68a2      	ldr	r2, [r4, #8]
 8005e5e:	c307      	stmia	r3!, {r0, r1, r2}
 8005e60:	7b22      	ldrb	r2, [r4, #12]
 8005e62:	701a      	strb	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 8005e64:	bf00      	nop
 8005e66:	f7fb ffab 	bl	8001dc0 <EEP_ReadyToWrite>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0fa      	beq.n	8005e66 <SetActionOther2+0x66>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005e70:	f107 010c 	add.w	r1, r7, #12
 8005e74:	8bbb      	ldrh	r3, [r7, #28]
 8005e76:	2210      	movs	r2, #16
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fb ff33 	bl	8001ce4 <EEP_WriteMem>
}
 8005e7e:	bf00      	nop
 8005e80:	3724      	adds	r7, #36	; 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005e88:	b004      	add	sp, #16
 8005e8a:	4770      	bx	lr
 8005e8c:	51eb851f 	.word	0x51eb851f
 8005e90:	20000c44 	.word	0x20000c44

08005e94 <GetActionSequence>:

uint8_t GetActionSequence() {
 8005e94:	b490      	push	{r4, r7}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
//	return 0; //temporary disable
	uint8_t retval;
	if(!(storage_flag & STO_FLAG_BUFF_EMPTY)) {
 8005e9a:	4b22      	ldr	r3, [pc, #136]	; (8005f24 <GetActionSequence+0x90>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d135      	bne.n	8005f12 <GetActionSequence+0x7e>

		if(plan_buffer_i>=BUFFER_SIZE-1) plan_buffer_i=0; else plan_buffer_i++;
 8005ea6:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <GetActionSequence+0x94>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b30      	cmp	r3, #48	; 0x30
 8005eac:	dd03      	ble.n	8005eb6 <GetActionSequence+0x22>
 8005eae:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <GetActionSequence+0x94>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	e004      	b.n	8005ec0 <GetActionSequence+0x2c>
 8005eb6:	4b1c      	ldr	r3, [pc, #112]	; (8005f28 <GetActionSequence+0x94>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <GetActionSequence+0x94>)
 8005ebe:	6013      	str	r3, [r2, #0]

		plan_active = plan_buffer[plan_buffer_i];
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <GetActionSequence+0x94>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4819      	ldr	r0, [pc, #100]	; (8005f2c <GetActionSequence+0x98>)
 8005ec6:	491a      	ldr	r1, [pc, #104]	; (8005f30 <GetActionSequence+0x9c>)
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	18ca      	adds	r2, r1, r3
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	4614      	mov	r4, r2
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	6861      	ldr	r1, [r4, #4]
 8005edc:	68a2      	ldr	r2, [r4, #8]
 8005ede:	c307      	stmia	r3!, {r0, r1, r2}
 8005ee0:	7b22      	ldrb	r2, [r4, #12]
 8005ee2:	701a      	strb	r2, [r3, #0]

		if(plan_buffer_i == plan_buffer_f) {
 8005ee4:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <GetActionSequence+0x94>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <GetActionSequence+0xa0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d106      	bne.n	8005efe <GetActionSequence+0x6a>
			storage_flag |= STO_FLAG_BUFF_EMPTY;
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <GetActionSequence+0x90>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	f043 0302 	orr.w	r3, r3, #2
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <GetActionSequence+0x90>)
 8005efc:	701a      	strb	r2, [r3, #0]
		}
		storage_flag &=~STO_FLAG_BUFF_FULL;
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <GetActionSequence+0x90>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <GetActionSequence+0x90>)
 8005f0a:	701a      	strb	r2, [r3, #0]
		retval = 1;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	71fb      	strb	r3, [r7, #7]
 8005f10:	e001      	b.n	8005f16 <GetActionSequence+0x82>
	} else {
		retval = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	71fb      	strb	r3, [r7, #7]
	}

	return retval;
 8005f16:	79fb      	ldrb	r3, [r7, #7]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc90      	pop	{r4, r7}
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000f29 	.word	0x20000f29
 8005f28:	20000f18 	.word	0x20000f18
 8005f2c:	20000f1c 	.word	0x20000f1c
 8005f30:	20000c84 	.word	0x20000c84
 8005f34:	20000f14 	.word	0x20000f14

08005f38 <GetActionSequenceRoutine>:

void GetActionSequenceRoutine() {
 8005f38:	b590      	push	{r4, r7, lr}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8005f3e:	4b3e      	ldr	r3, [pc, #248]	; (8006038 <GetActionSequenceRoutine+0x100>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dd06      	ble.n	8005f54 <GetActionSequenceRoutine+0x1c>
 8005f46:	4b3c      	ldr	r3, [pc, #240]	; (8006038 <GetActionSequenceRoutine+0x100>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	1e5a      	subs	r2, r3, #1
 8005f4c:	4b3b      	ldr	r3, [pc, #236]	; (800603c <GetActionSequenceRoutine+0x104>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d107      	bne.n	8005f64 <GetActionSequenceRoutine+0x2c>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8005f54:	4b38      	ldr	r3, [pc, #224]	; (8006038 <GetActionSequenceRoutine+0x100>)
 8005f56:	681b      	ldr	r3, [r3, #0]
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d161      	bne.n	8006020 <GetActionSequenceRoutine+0xe8>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8005f5c:	4b37      	ldr	r3, [pc, #220]	; (800603c <GetActionSequenceRoutine+0x104>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b31      	cmp	r3, #49	; 0x31
 8005f62:	d05d      	beq.n	8006020 <GetActionSequenceRoutine+0xe8>
		if(buff_index < plan.num_action-2) {
 8005f64:	4b36      	ldr	r3, [pc, #216]	; (8006040 <GetActionSequenceRoutine+0x108>)
 8005f66:	885b      	ldrh	r3, [r3, #2]
 8005f68:	1e9a      	subs	r2, r3, #2
 8005f6a:	4b36      	ldr	r3, [pc, #216]	; (8006044 <GetActionSequenceRoutine+0x10c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	dd4e      	ble.n	8006010 <GetActionSequenceRoutine+0xd8>
			buff_index++;
 8005f72:	4b34      	ldr	r3, [pc, #208]	; (8006044 <GetActionSequenceRoutine+0x10c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	4a32      	ldr	r2, [pc, #200]	; (8006044 <GetActionSequenceRoutine+0x10c>)
 8005f7a:	6013      	str	r3, [r2, #0]
			int index_f = plan_buffer_f;
 8005f7c:	4b2f      	ldr	r3, [pc, #188]	; (800603c <GetActionSequenceRoutine+0x104>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	617b      	str	r3, [r7, #20]
			if(index_f>=BUFFER_SIZE-1) index_f=0; else index_f++;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b30      	cmp	r3, #48	; 0x30
 8005f86:	dd02      	ble.n	8005f8e <GetActionSequenceRoutine+0x56>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e002      	b.n	8005f94 <GetActionSequenceRoutine+0x5c>
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	3301      	adds	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
			plan_buffer[index_f] = GetActionOther(num_plan, buff_index);
 8005f94:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <GetActionSequenceRoutine+0x110>)
 8005f96:	7819      	ldrb	r1, [r3, #0]
 8005f98:	4b2a      	ldr	r3, [pc, #168]	; (8006044 <GetActionSequenceRoutine+0x10c>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	4c2b      	ldr	r4, [pc, #172]	; (800604c <GetActionSequenceRoutine+0x114>)
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	441c      	add	r4, r3
 8005fac:	463b      	mov	r3, r7
 8005fae:	4602      	mov	r2, r0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fea9 	bl	8005d08 <GetActionOther>
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681c      	ldr	r4, [r3, #0]
 8005fbc:	6858      	ldr	r0, [r3, #4]
 8005fbe:	6899      	ldr	r1, [r3, #8]
 8005fc0:	6014      	str	r4, [r2, #0]
 8005fc2:	6050      	str	r0, [r2, #4]
 8005fc4:	6091      	str	r1, [r2, #8]
 8005fc6:	7b1b      	ldrb	r3, [r3, #12]
 8005fc8:	7313      	strb	r3, [r2, #12]
			if(plan_buffer[index_f].act == 11) {
 8005fca:	4920      	ldr	r1, [pc, #128]	; (800604c <GetActionSequenceRoutine+0x114>)
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	440b      	add	r3, r1
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b0b      	cmp	r3, #11
 8005fde:	d10c      	bne.n	8005ffa <GetActionSequenceRoutine+0xc2>
				buff_index = plan_buffer[index_f].act_value-1;
 8005fe0:	491a      	ldr	r1, [pc, #104]	; (800604c <GetActionSequenceRoutine+0x114>)
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	440b      	add	r3, r1
 8005ff0:	3303      	adds	r3, #3
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	4a13      	ldr	r2, [pc, #76]	; (8006044 <GetActionSequenceRoutine+0x10c>)
 8005ff8:	6013      	str	r3, [r2, #0]
			}
			plan_buffer_f = index_f;
 8005ffa:	4a10      	ldr	r2, [pc, #64]	; (800603c <GetActionSequenceRoutine+0x104>)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6013      	str	r3, [r2, #0]
			storage_flag &=~STO_FLAG_BUFF_EMPTY;
 8006000:	4b13      	ldr	r3, [pc, #76]	; (8006050 <GetActionSequenceRoutine+0x118>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f023 0302 	bic.w	r3, r3, #2
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <GetActionSequenceRoutine+0x118>)
 800600c:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 800600e:	e00f      	b.n	8006030 <GetActionSequenceRoutine+0xf8>
		}
		else {
			storage_flag |= STO_FLAG_BUFF_END;
 8006010:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <GetActionSequenceRoutine+0x118>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <GetActionSequenceRoutine+0x118>)
 800601c:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 800601e:	e007      	b.n	8006030 <GetActionSequenceRoutine+0xf8>
		}
	}
	else {
		storage_flag |= STO_FLAG_BUFF_FULL;
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <GetActionSequenceRoutine+0x118>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <GetActionSequenceRoutine+0x118>)
 800602c:	701a      	strb	r2, [r3, #0]
	}
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd90      	pop	{r4, r7, pc}
 8006038:	20000f18 	.word	0x20000f18
 800603c:	20000f14 	.word	0x20000f14
 8006040:	20000f2c 	.word	0x20000f2c
 8006044:	20000f10 	.word	0x20000f10
 8006048:	20000c39 	.word	0x20000c39
 800604c:	20000c84 	.word	0x20000c84
 8006050:	20000f29 	.word	0x20000f29

08006054 <GetActionSequenceInit>:

void GetActionSequenceInit(int num) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6178      	str	r0, [r7, #20]
	GetAction(num);
 800605c:	463b      	mov	r3, r7
 800605e:	6979      	ldr	r1, [r7, #20]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff fb4d 	bl	8005700 <GetAction>
	buff_index = num;
 8006066:	4a0e      	ldr	r2, [pc, #56]	; (80060a0 <GetActionSequenceInit+0x4c>)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	6013      	str	r3, [r2, #0]
	plan_buffer_i = 0;
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <GetActionSequenceInit+0x50>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
	plan_buffer_f = 0;
 8006072:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <GetActionSequenceInit+0x54>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
	storage_flag = 0;
 8006078:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <GetActionSequenceInit+0x58>)
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
	memset((uint8_t*)&plan_buffer, 0, sizeof(Action_typedef)*BUFFER_SIZE);
 800607e:	f240 228a 	movw	r2, #650	; 0x28a
 8006082:	2100      	movs	r1, #0
 8006084:	480a      	ldr	r0, [pc, #40]	; (80060b0 <GetActionSequenceInit+0x5c>)
 8006086:	f009 ff04 	bl	800fe92 <memset>
	storage_flag |= STO_FLAG_BUFF_EMPTY;
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <GetActionSequenceInit+0x58>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f043 0302 	orr.w	r3, r3, #2
 8006092:	b2da      	uxtb	r2, r3
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <GetActionSequenceInit+0x58>)
 8006096:	701a      	strb	r2, [r3, #0]
}
 8006098:	bf00      	nop
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000f10 	.word	0x20000f10
 80060a4:	20000f18 	.word	0x20000f18
 80060a8:	20000f14 	.word	0x20000f14
 80060ac:	20000f29 	.word	0x20000f29
 80060b0:	20000c84 	.word	0x20000c84

080060b4 <Storage_InsertAction>:

void Storage_InsertAction(int index) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	; 0x28
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	6078      	str	r0, [r7, #4]
	Action_typedef temp;
	for(int i=plan.num_action-1; i>index; i--) {
 80060bc:	4b10      	ldr	r3, [pc, #64]	; (8006100 <Storage_InsertAction+0x4c>)
 80060be:	885b      	ldrh	r3, [r3, #2]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	e012      	b.n	80060ec <Storage_InsertAction+0x38>
		temp = GetActionOther(num_plan, i-1);
 80060c6:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <Storage_InsertAction+0x50>)
 80060c8:	7819      	ldrb	r1, [r3, #0]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	f107 030c 	add.w	r3, r7, #12
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fe18 	bl	8005d08 <GetActionOther>
		SetActionOther(temp, i);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	f107 030c 	add.w	r3, r7, #12
 80060e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060e2:	f7ff fe55 	bl	8005d90 <SetActionOther>
	for(int i=plan.num_action-1; i>index; i--) {
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	dce8      	bgt.n	80060c6 <Storage_InsertAction+0x12>
	}
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000f2c 	.word	0x20000f2c
 8006104:	20000c39 	.word	0x20000c39

08006108 <Storage_DeleteAction>:

void Storage_DeleteAction(int index) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
	Action_typedef temp;
	for(int i=index; i<plan.num_action-1; i++) {
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e012      	b.n	800613c <Storage_DeleteAction+0x34>
		temp = GetActionOther(num_plan, i+1);
 8006116:	4b12      	ldr	r3, [pc, #72]	; (8006160 <Storage_DeleteAction+0x58>)
 8006118:	7819      	ldrb	r1, [r3, #0]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	f107 030c 	add.w	r3, r7, #12
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff fdf0 	bl	8005d08 <GetActionOther>
		SetActionOther(temp, i);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006132:	f7ff fe2d 	bl	8005d90 <SetActionOther>
	for(int i=index; i<plan.num_action-1; i++) {
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3301      	adds	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <Storage_DeleteAction+0x5c>)
 800613e:	885b      	ldrh	r3, [r3, #2]
 8006140:	3b01      	subs	r3, #1
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	429a      	cmp	r2, r3
 8006146:	dbe6      	blt.n	8006116 <Storage_DeleteAction+0xe>
	}
	SetActionOther(plan_default, plan.num_action-1);
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <Storage_DeleteAction+0x5c>)
 800614a:	885b      	ldrh	r3, [r3, #2]
 800614c:	1e5a      	subs	r2, r3, #1
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <Storage_DeleteAction+0x60>)
 8006150:	9200      	str	r2, [sp, #0]
 8006152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006154:	f7ff fe1c 	bl	8005d90 <SetActionOther>
}
 8006158:	bf00      	nop
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000c39 	.word	0x20000c39
 8006164:	20000f2c 	.word	0x20000f2c
 8006168:	080123fc 	.word	0x080123fc

0800616c <Storage_CopyPlan>:

void Storage_CopyPlan(uint8_t plan_dest) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af02      	add	r7, sp, #8
 8006172:	4603      	mov	r3, r0
 8006174:	71fb      	strb	r3, [r7, #7]
	Storage_SetPlanOther(&plan, plan_dest);
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	4619      	mov	r1, r3
 800617a:	4813      	ldr	r0, [pc, #76]	; (80061c8 <Storage_CopyPlan+0x5c>)
 800617c:	f7ff fd22 	bl	8005bc4 <Storage_SetPlanOther>
	Action_typedef temp;
	for(int i=0; i<plan.num_action; i++) {
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]
 8006184:	e015      	b.n	80061b2 <Storage_CopyPlan+0x46>
		temp = GetActionOther(num_plan, i);
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <Storage_CopyPlan+0x60>)
 8006188:	7819      	ldrb	r1, [r3, #0]
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fdb9 	bl	8005d08 <GetActionOther>
		SetActionOther2(plan_dest, temp, i);
 8006196:	79f8      	ldrb	r0, [r7, #7]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	7e3b      	ldrb	r3, [r7, #24]
 800619e:	f88d 3000 	strb.w	r3, [sp]
 80061a2:	f107 030c 	add.w	r3, r7, #12
 80061a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061a8:	f7ff fe2a 	bl	8005e00 <SetActionOther2>
	for(int i=0; i<plan.num_action; i++) {
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	3301      	adds	r3, #1
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <Storage_CopyPlan+0x5c>)
 80061b4:	885b      	ldrh	r3, [r3, #2]
 80061b6:	461a      	mov	r2, r3
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4293      	cmp	r3, r2
 80061bc:	dbe3      	blt.n	8006186 <Storage_CopyPlan+0x1a>
	}
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20000f2c 	.word	0x20000f2c
 80061cc:	20000c39 	.word	0x20000c39

080061d0 <Storage_CleanInit>:

void Storage_CleanInit() {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b092      	sub	sp, #72	; 0x48
 80061d4:	af00      	add	r7, sp, #0
	uint8_t ok[PAGE_SIZE];
	memset(ok, 0, PAGE_SIZE);
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	2240      	movs	r2, #64	; 0x40
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f009 fe58 	bl	800fe92 <memset>
	for(int i=0; i<PAGE_NUM; i++) {
 80061e2:	2300      	movs	r3, #0
 80061e4:	647b      	str	r3, [r7, #68]	; 0x44
 80061e6:	e00f      	b.n	8006208 <Storage_CleanInit+0x38>
		while(!EEP_ReadyToWrite());
 80061e8:	bf00      	nop
 80061ea:	f7fb fde9 	bl	8001dc0 <EEP_ReadyToWrite>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0fa      	beq.n	80061ea <Storage_CleanInit+0x1a>
		EEP_WritePage(i, ok);
 80061f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	1d3a      	adds	r2, r7, #4
 80061fa:	4611      	mov	r1, r2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fb fd4d 	bl	8001c9c <EEP_WritePage>
	for(int i=0; i<PAGE_NUM; i++) {
 8006202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006204:	3301      	adds	r3, #1
 8006206:	647b      	str	r3, [r7, #68]	; 0x44
 8006208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620e:	dbeb      	blt.n	80061e8 <Storage_CleanInit+0x18>
	}
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	3748      	adds	r7, #72	; 0x48
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800621a:	b480      	push	{r7}
 800621c:	af00      	add	r7, sp, #0
  return 1;
 800621e:	2301      	movs	r3, #1
}
 8006220:	4618      	mov	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <_kill>:

int _kill(int pid, int sig)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006234:	f009 fe90 	bl	800ff58 <__errno>
 8006238:	4603      	mov	r3, r0
 800623a:	2216      	movs	r2, #22
 800623c:	601a      	str	r2, [r3, #0]
  return -1;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_exit>:

void _exit (int status)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006252:	f04f 31ff 	mov.w	r1, #4294967295
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff ffe7 	bl	800622a <_kill>
  while (1) {}    /* Make sure we hang here */
 800625c:	e7fe      	b.n	800625c <_exit+0x12>

0800625e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b086      	sub	sp, #24
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e00a      	b.n	8006286 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006270:	f3af 8000 	nop.w
 8006274:	4601      	mov	r1, r0
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	60ba      	str	r2, [r7, #8]
 800627c:	b2ca      	uxtb	r2, r1
 800627e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3301      	adds	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	dbf0      	blt.n	8006270 <_read+0x12>
  }

  return len;
 800628e:	687b      	ldr	r3, [r7, #4]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e009      	b.n	80062be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	60ba      	str	r2, [r7, #8]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3301      	adds	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	dbf1      	blt.n	80062aa <_write+0x12>
  }
  return len;
 80062c6:	687b      	ldr	r3, [r7, #4]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <_close>:

int _close(int file)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062f8:	605a      	str	r2, [r3, #4]
  return 0;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <_isatty>:

int _isatty(int file)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006310:	2301      	movs	r3, #1
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006340:	4a14      	ldr	r2, [pc, #80]	; (8006394 <_sbrk+0x5c>)
 8006342:	4b15      	ldr	r3, [pc, #84]	; (8006398 <_sbrk+0x60>)
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800634c:	4b13      	ldr	r3, [pc, #76]	; (800639c <_sbrk+0x64>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d102      	bne.n	800635a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006354:	4b11      	ldr	r3, [pc, #68]	; (800639c <_sbrk+0x64>)
 8006356:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <_sbrk+0x68>)
 8006358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800635a:	4b10      	ldr	r3, [pc, #64]	; (800639c <_sbrk+0x64>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	429a      	cmp	r2, r3
 8006366:	d207      	bcs.n	8006378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006368:	f009 fdf6 	bl	800ff58 <__errno>
 800636c:	4603      	mov	r3, r0
 800636e:	220c      	movs	r2, #12
 8006370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
 8006376:	e009      	b.n	800638c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <_sbrk+0x64>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800637e:	4b07      	ldr	r3, [pc, #28]	; (800639c <_sbrk+0x64>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4413      	add	r3, r2
 8006386:	4a05      	ldr	r2, [pc, #20]	; (800639c <_sbrk+0x64>)
 8006388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800638a:	68fb      	ldr	r3, [r7, #12]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20020000 	.word	0x20020000
 8006398:	00000400 	.word	0x00000400
 800639c:	20000f68 	.word	0x20000f68
 80063a0:	20001868 	.word	0x20001868

080063a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <SystemInit+0x20>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	4a05      	ldr	r2, [pc, #20]	; (80063c4 <SystemInit+0x20>)
 80063b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80063b8:	bf00      	nop
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	e000ed00 	.word	0xe000ed00

080063c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b096      	sub	sp, #88	; 0x58
 80063cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	605a      	str	r2, [r3, #4]
 80063d8:	609a      	str	r2, [r3, #8]
 80063da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	609a      	str	r2, [r3, #8]
 80063f2:	60da      	str	r2, [r3, #12]
 80063f4:	611a      	str	r2, [r3, #16]
 80063f6:	615a      	str	r2, [r3, #20]
 80063f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	2220      	movs	r2, #32
 80063fe:	2100      	movs	r1, #0
 8006400:	4618      	mov	r0, r3
 8006402:	f009 fd46 	bl	800fe92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006406:	4b4a      	ldr	r3, [pc, #296]	; (8006530 <MX_TIM1_Init+0x168>)
 8006408:	4a4a      	ldr	r2, [pc, #296]	; (8006534 <MX_TIM1_Init+0x16c>)
 800640a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800640c:	4b48      	ldr	r3, [pc, #288]	; (8006530 <MX_TIM1_Init+0x168>)
 800640e:	2253      	movs	r2, #83	; 0x53
 8006410:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006412:	4b47      	ldr	r3, [pc, #284]	; (8006530 <MX_TIM1_Init+0x168>)
 8006414:	2200      	movs	r2, #0
 8006416:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8006418:	4b45      	ldr	r3, [pc, #276]	; (8006530 <MX_TIM1_Init+0x168>)
 800641a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800641e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006420:	4b43      	ldr	r3, [pc, #268]	; (8006530 <MX_TIM1_Init+0x168>)
 8006422:	2200      	movs	r2, #0
 8006424:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006426:	4b42      	ldr	r3, [pc, #264]	; (8006530 <MX_TIM1_Init+0x168>)
 8006428:	2200      	movs	r2, #0
 800642a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800642c:	4b40      	ldr	r3, [pc, #256]	; (8006530 <MX_TIM1_Init+0x168>)
 800642e:	2200      	movs	r2, #0
 8006430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006432:	483f      	ldr	r0, [pc, #252]	; (8006530 <MX_TIM1_Init+0x168>)
 8006434:	f006 ff7c 	bl	800d330 <HAL_TIM_Base_Init>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800643e:	f7fb ff76 	bl	800232e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800644c:	4619      	mov	r1, r3
 800644e:	4838      	ldr	r0, [pc, #224]	; (8006530 <MX_TIM1_Init+0x168>)
 8006450:	f007 fc44 	bl	800dcdc <HAL_TIM_ConfigClockSource>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800645a:	f7fb ff68 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800645e:	4834      	ldr	r0, [pc, #208]	; (8006530 <MX_TIM1_Init+0x168>)
 8006460:	f007 f826 	bl	800d4b0 <HAL_TIM_PWM_Init>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800646a:	f7fb ff60 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800646e:	2300      	movs	r3, #0
 8006470:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006472:	2300      	movs	r3, #0
 8006474:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800647a:	4619      	mov	r1, r3
 800647c:	482c      	ldr	r0, [pc, #176]	; (8006530 <MX_TIM1_Init+0x168>)
 800647e:	f008 f82d 	bl	800e4dc <HAL_TIMEx_MasterConfigSynchronization>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006488:	f7fb ff51 	bl	800232e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800648c:	2360      	movs	r3, #96	; 0x60
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006494:	2300      	movs	r3, #0
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006498:	2300      	movs	r3, #0
 800649a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800649c:	2300      	movs	r3, #0
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064a0:	2300      	movs	r3, #0
 80064a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064a4:	2300      	movs	r3, #0
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ac:	2200      	movs	r2, #0
 80064ae:	4619      	mov	r1, r3
 80064b0:	481f      	ldr	r0, [pc, #124]	; (8006530 <MX_TIM1_Init+0x168>)
 80064b2:	f007 fb51 	bl	800db58 <HAL_TIM_PWM_ConfigChannel>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80064bc:	f7fb ff37 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c4:	2204      	movs	r2, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	4819      	ldr	r0, [pc, #100]	; (8006530 <MX_TIM1_Init+0x168>)
 80064ca:	f007 fb45 	bl	800db58 <HAL_TIM_PWM_ConfigChannel>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80064d4:	f7fb ff2b 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80064d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064dc:	2208      	movs	r2, #8
 80064de:	4619      	mov	r1, r3
 80064e0:	4813      	ldr	r0, [pc, #76]	; (8006530 <MX_TIM1_Init+0x168>)
 80064e2:	f007 fb39 	bl	800db58 <HAL_TIM_PWM_ConfigChannel>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80064ec:	f7fb ff1f 	bl	800232e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006508:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800650a:	2300      	movs	r3, #0
 800650c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800650e:	1d3b      	adds	r3, r7, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4807      	ldr	r0, [pc, #28]	; (8006530 <MX_TIM1_Init+0x168>)
 8006514:	f008 f85e 	bl	800e5d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800651e:	f7fb ff06 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006522:	4803      	ldr	r0, [pc, #12]	; (8006530 <MX_TIM1_Init+0x168>)
 8006524:	f000 fa5a 	bl	80069dc <HAL_TIM_MspPostInit>

}
 8006528:	bf00      	nop
 800652a:	3758      	adds	r7, #88	; 0x58
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20000f6c 	.word	0x20000f6c
 8006534:	40010000 	.word	0x40010000

08006538 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	; 0x30
 800653c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	2224      	movs	r2, #36	; 0x24
 8006544:	2100      	movs	r1, #0
 8006546:	4618      	mov	r0, r3
 8006548:	f009 fca3 	bl	800fe92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006554:	4b21      	ldr	r3, [pc, #132]	; (80065dc <MX_TIM2_Init+0xa4>)
 8006556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800655a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800655c:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <MX_TIM2_Init+0xa4>)
 800655e:	2200      	movs	r2, #0
 8006560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006562:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <MX_TIM2_Init+0xa4>)
 8006564:	2200      	movs	r2, #0
 8006566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006568:	4b1c      	ldr	r3, [pc, #112]	; (80065dc <MX_TIM2_Init+0xa4>)
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <MX_TIM2_Init+0xa4>)
 8006572:	2200      	movs	r2, #0
 8006574:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006576:	4b19      	ldr	r3, [pc, #100]	; (80065dc <MX_TIM2_Init+0xa4>)
 8006578:	2200      	movs	r2, #0
 800657a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800657c:	2303      	movs	r3, #3
 800657e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006584:	2301      	movs	r3, #1
 8006586:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006590:	2300      	movs	r3, #0
 8006592:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006594:	2301      	movs	r3, #1
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006598:	2300      	movs	r3, #0
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80065a0:	f107 030c 	add.w	r3, r7, #12
 80065a4:	4619      	mov	r1, r3
 80065a6:	480d      	ldr	r0, [pc, #52]	; (80065dc <MX_TIM2_Init+0xa4>)
 80065a8:	f007 f89a 	bl	800d6e0 <HAL_TIM_Encoder_Init>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80065b2:	f7fb febc 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4806      	ldr	r0, [pc, #24]	; (80065dc <MX_TIM2_Init+0xa4>)
 80065c4:	f007 ff8a 	bl	800e4dc <HAL_TIMEx_MasterConfigSynchronization>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80065ce:	f7fb feae 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80065d2:	bf00      	nop
 80065d4:	3730      	adds	r7, #48	; 0x30
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000fb4 	.word	0x20000fb4

080065e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065e6:	f107 0320 	add.w	r3, r7, #32
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]
 80065f8:	609a      	str	r2, [r3, #8]
 80065fa:	60da      	str	r2, [r3, #12]
 80065fc:	611a      	str	r2, [r3, #16]
 80065fe:	615a      	str	r2, [r3, #20]
 8006600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006602:	4b32      	ldr	r3, [pc, #200]	; (80066cc <MX_TIM3_Init+0xec>)
 8006604:	4a32      	ldr	r2, [pc, #200]	; (80066d0 <MX_TIM3_Init+0xf0>)
 8006606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8006608:	4b30      	ldr	r3, [pc, #192]	; (80066cc <MX_TIM3_Init+0xec>)
 800660a:	2207      	movs	r2, #7
 800660c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800660e:	4b2f      	ldr	r3, [pc, #188]	; (80066cc <MX_TIM3_Init+0xec>)
 8006610:	2200      	movs	r2, #0
 8006612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8006614:	4b2d      	ldr	r3, [pc, #180]	; (80066cc <MX_TIM3_Init+0xec>)
 8006616:	f240 32e7 	movw	r2, #999	; 0x3e7
 800661a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800661c:	4b2b      	ldr	r3, [pc, #172]	; (80066cc <MX_TIM3_Init+0xec>)
 800661e:	2200      	movs	r2, #0
 8006620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006622:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <MX_TIM3_Init+0xec>)
 8006624:	2200      	movs	r2, #0
 8006626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006628:	4828      	ldr	r0, [pc, #160]	; (80066cc <MX_TIM3_Init+0xec>)
 800662a:	f006 ff41 	bl	800d4b0 <HAL_TIM_PWM_Init>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006634:	f7fb fe7b 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006638:	2300      	movs	r3, #0
 800663a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800663c:	2300      	movs	r3, #0
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006640:	f107 0320 	add.w	r3, r7, #32
 8006644:	4619      	mov	r1, r3
 8006646:	4821      	ldr	r0, [pc, #132]	; (80066cc <MX_TIM3_Init+0xec>)
 8006648:	f007 ff48 	bl	800e4dc <HAL_TIMEx_MasterConfigSynchronization>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006652:	f7fb fe6c 	bl	800232e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006656:	2360      	movs	r3, #96	; 0x60
 8006658:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006666:	1d3b      	adds	r3, r7, #4
 8006668:	2200      	movs	r2, #0
 800666a:	4619      	mov	r1, r3
 800666c:	4817      	ldr	r0, [pc, #92]	; (80066cc <MX_TIM3_Init+0xec>)
 800666e:	f007 fa73 	bl	800db58 <HAL_TIM_PWM_ConfigChannel>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006678:	f7fb fe59 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800667c:	1d3b      	adds	r3, r7, #4
 800667e:	2204      	movs	r2, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4812      	ldr	r0, [pc, #72]	; (80066cc <MX_TIM3_Init+0xec>)
 8006684:	f007 fa68 	bl	800db58 <HAL_TIM_PWM_ConfigChannel>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800668e:	f7fb fe4e 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	2208      	movs	r2, #8
 8006696:	4619      	mov	r1, r3
 8006698:	480c      	ldr	r0, [pc, #48]	; (80066cc <MX_TIM3_Init+0xec>)
 800669a:	f007 fa5d 	bl	800db58 <HAL_TIM_PWM_ConfigChannel>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80066a4:	f7fb fe43 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80066a8:	1d3b      	adds	r3, r7, #4
 80066aa:	220c      	movs	r2, #12
 80066ac:	4619      	mov	r1, r3
 80066ae:	4807      	ldr	r0, [pc, #28]	; (80066cc <MX_TIM3_Init+0xec>)
 80066b0:	f007 fa52 	bl	800db58 <HAL_TIM_PWM_ConfigChannel>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80066ba:	f7fb fe38 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80066be:	4803      	ldr	r0, [pc, #12]	; (80066cc <MX_TIM3_Init+0xec>)
 80066c0:	f000 f98c 	bl	80069dc <HAL_TIM_MspPostInit>

}
 80066c4:	bf00      	nop
 80066c6:	3728      	adds	r7, #40	; 0x28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000ffc 	.word	0x20000ffc
 80066d0:	40000400 	.word	0x40000400

080066d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	; 0x30
 80066d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	2224      	movs	r2, #36	; 0x24
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f009 fbd5 	bl	800fe92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066e8:	1d3b      	adds	r3, r7, #4
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80066f0:	4b20      	ldr	r3, [pc, #128]	; (8006774 <MX_TIM4_Init+0xa0>)
 80066f2:	4a21      	ldr	r2, [pc, #132]	; (8006778 <MX_TIM4_Init+0xa4>)
 80066f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80066f6:	4b1f      	ldr	r3, [pc, #124]	; (8006774 <MX_TIM4_Init+0xa0>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066fc:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <MX_TIM4_Init+0xa0>)
 80066fe:	2200      	movs	r2, #0
 8006700:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <MX_TIM4_Init+0xa0>)
 8006704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006708:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800670a:	4b1a      	ldr	r3, [pc, #104]	; (8006774 <MX_TIM4_Init+0xa0>)
 800670c:	2200      	movs	r2, #0
 800670e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006710:	4b18      	ldr	r3, [pc, #96]	; (8006774 <MX_TIM4_Init+0xa0>)
 8006712:	2200      	movs	r2, #0
 8006714:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006716:	2303      	movs	r3, #3
 8006718:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800671a:	2300      	movs	r3, #0
 800671c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800671e:	2301      	movs	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006722:	2300      	movs	r3, #0
 8006724:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800672a:	2300      	movs	r3, #0
 800672c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800672e:	2301      	movs	r3, #1
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006732:	2300      	movs	r3, #0
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800673a:	f107 030c 	add.w	r3, r7, #12
 800673e:	4619      	mov	r1, r3
 8006740:	480c      	ldr	r0, [pc, #48]	; (8006774 <MX_TIM4_Init+0xa0>)
 8006742:	f006 ffcd 	bl	800d6e0 <HAL_TIM_Encoder_Init>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800674c:	f7fb fdef 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006750:	2300      	movs	r3, #0
 8006752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006754:	2300      	movs	r3, #0
 8006756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006758:	1d3b      	adds	r3, r7, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4805      	ldr	r0, [pc, #20]	; (8006774 <MX_TIM4_Init+0xa0>)
 800675e:	f007 febd 	bl	800e4dc <HAL_TIMEx_MasterConfigSynchronization>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006768:	f7fb fde1 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800676c:	bf00      	nop
 800676e:	3730      	adds	r7, #48	; 0x30
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20001044 	.word	0x20001044
 8006778:	40000800 	.word	0x40000800

0800677c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006782:	463b      	mov	r3, r7
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800678a:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <MX_TIM6_Init+0x64>)
 800678c:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <MX_TIM6_Init+0x68>)
 800678e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8006790:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <MX_TIM6_Init+0x64>)
 8006792:	2253      	movs	r2, #83	; 0x53
 8006794:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <MX_TIM6_Init+0x64>)
 8006798:	2200      	movs	r2, #0
 800679a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <MX_TIM6_Init+0x64>)
 800679e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80067a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067a4:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <MX_TIM6_Init+0x64>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80067aa:	480d      	ldr	r0, [pc, #52]	; (80067e0 <MX_TIM6_Init+0x64>)
 80067ac:	f006 fdc0 	bl	800d330 <HAL_TIM_Base_Init>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80067b6:	f7fb fdba 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067ba:	2300      	movs	r3, #0
 80067bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067be:	2300      	movs	r3, #0
 80067c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80067c2:	463b      	mov	r3, r7
 80067c4:	4619      	mov	r1, r3
 80067c6:	4806      	ldr	r0, [pc, #24]	; (80067e0 <MX_TIM6_Init+0x64>)
 80067c8:	f007 fe88 	bl	800e4dc <HAL_TIMEx_MasterConfigSynchronization>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80067d2:	f7fb fdac 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	2000108c 	.word	0x2000108c
 80067e4:	40001000 	.word	0x40001000

080067e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a18      	ldr	r2, [pc, #96]	; (8006858 <HAL_TIM_Base_MspInit+0x70>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d10e      	bne.n	8006818 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	4b17      	ldr	r3, [pc, #92]	; (800685c <HAL_TIM_Base_MspInit+0x74>)
 8006800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006802:	4a16      	ldr	r2, [pc, #88]	; (800685c <HAL_TIM_Base_MspInit+0x74>)
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	6453      	str	r3, [r2, #68]	; 0x44
 800680a:	4b14      	ldr	r3, [pc, #80]	; (800685c <HAL_TIM_Base_MspInit+0x74>)
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8006816:	e01a      	b.n	800684e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a10      	ldr	r2, [pc, #64]	; (8006860 <HAL_TIM_Base_MspInit+0x78>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d115      	bne.n	800684e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <HAL_TIM_Base_MspInit+0x74>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	4a0c      	ldr	r2, [pc, #48]	; (800685c <HAL_TIM_Base_MspInit+0x74>)
 800682c:	f043 0310 	orr.w	r3, r3, #16
 8006830:	6413      	str	r3, [r2, #64]	; 0x40
 8006832:	4b0a      	ldr	r3, [pc, #40]	; (800685c <HAL_TIM_Base_MspInit+0x74>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800683e:	2200      	movs	r2, #0
 8006840:	2101      	movs	r1, #1
 8006842:	2036      	movs	r0, #54	; 0x36
 8006844:	f004 fa89 	bl	800ad5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006848:	2036      	movs	r0, #54	; 0x36
 800684a:	f004 faa2 	bl	800ad92 <HAL_NVIC_EnableIRQ>
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40023800 	.word	0x40023800
 8006860:	40001000 	.word	0x40001000

08006864 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08c      	sub	sp, #48	; 0x30
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800686c:	f107 031c 	add.w	r3, r7, #28
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	605a      	str	r2, [r3, #4]
 8006876:	609a      	str	r2, [r3, #8]
 8006878:	60da      	str	r2, [r3, #12]
 800687a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006884:	d14b      	bne.n	800691e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006886:	2300      	movs	r3, #0
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	4b3f      	ldr	r3, [pc, #252]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	4a3e      	ldr	r2, [pc, #248]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	6413      	str	r3, [r2, #64]	; 0x40
 8006896:	4b3c      	ldr	r3, [pc, #240]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	4b38      	ldr	r3, [pc, #224]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	4a37      	ldr	r2, [pc, #220]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	6313      	str	r3, [r2, #48]	; 0x30
 80068b2:	4b35      	ldr	r3, [pc, #212]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	4b31      	ldr	r3, [pc, #196]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	4a30      	ldr	r2, [pc, #192]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 80068c8:	f043 0302 	orr.w	r3, r3, #2
 80068cc:	6313      	str	r3, [r2, #48]	; 0x30
 80068ce:	4b2e      	ldr	r3, [pc, #184]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80068da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e0:	2302      	movs	r3, #2
 80068e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068e8:	2300      	movs	r3, #0
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80068ec:	2301      	movs	r3, #1
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f0:	f107 031c 	add.w	r3, r7, #28
 80068f4:	4619      	mov	r1, r3
 80068f6:	4825      	ldr	r0, [pc, #148]	; (800698c <HAL_TIM_Encoder_MspInit+0x128>)
 80068f8:	f004 fdda 	bl	800b4b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80068fc:	2308      	movs	r3, #8
 80068fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006900:	2302      	movs	r3, #2
 8006902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006904:	2300      	movs	r3, #0
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006908:	2300      	movs	r3, #0
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800690c:	2301      	movs	r3, #1
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006910:	f107 031c 	add.w	r3, r7, #28
 8006914:	4619      	mov	r1, r3
 8006916:	481e      	ldr	r0, [pc, #120]	; (8006990 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006918:	f004 fdca 	bl	800b4b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800691c:	e030      	b.n	8006980 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <HAL_TIM_Encoder_MspInit+0x130>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d12b      	bne.n	8006980 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	4b16      	ldr	r3, [pc, #88]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	4a15      	ldr	r2, [pc, #84]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 8006932:	f043 0304 	orr.w	r3, r3, #4
 8006936:	6413      	str	r3, [r2, #64]	; 0x40
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006944:	2300      	movs	r3, #0
 8006946:	60bb      	str	r3, [r7, #8]
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	4a0e      	ldr	r2, [pc, #56]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 800694e:	f043 0302 	orr.w	r3, r3, #2
 8006952:	6313      	str	r3, [r2, #48]	; 0x30
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <HAL_TIM_Encoder_MspInit+0x124>)
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006960:	23c0      	movs	r3, #192	; 0xc0
 8006962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006964:	2302      	movs	r3, #2
 8006966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006968:	2300      	movs	r3, #0
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800696c:	2300      	movs	r3, #0
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006970:	2302      	movs	r3, #2
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006974:	f107 031c 	add.w	r3, r7, #28
 8006978:	4619      	mov	r1, r3
 800697a:	4805      	ldr	r0, [pc, #20]	; (8006990 <HAL_TIM_Encoder_MspInit+0x12c>)
 800697c:	f004 fd98 	bl	800b4b0 <HAL_GPIO_Init>
}
 8006980:	bf00      	nop
 8006982:	3730      	adds	r7, #48	; 0x30
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40023800 	.word	0x40023800
 800698c:	40020000 	.word	0x40020000
 8006990:	40020400 	.word	0x40020400
 8006994:	40000800 	.word	0x40000800

08006998 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a0b      	ldr	r2, [pc, #44]	; (80069d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10d      	bne.n	80069c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <HAL_TIM_PWM_MspInit+0x40>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	4a09      	ldr	r2, [pc, #36]	; (80069d8 <HAL_TIM_PWM_MspInit+0x40>)
 80069b4:	f043 0302 	orr.w	r3, r3, #2
 80069b8:	6413      	str	r3, [r2, #64]	; 0x40
 80069ba:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <HAL_TIM_PWM_MspInit+0x40>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40000400 	.word	0x40000400
 80069d8:	40023800 	.word	0x40023800

080069dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08a      	sub	sp, #40	; 0x28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e4:	f107 0314 	add.w	r3, r7, #20
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	605a      	str	r2, [r3, #4]
 80069ee:	609a      	str	r2, [r3, #8]
 80069f0:	60da      	str	r2, [r3, #12]
 80069f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a25      	ldr	r2, [pc, #148]	; (8006a90 <HAL_TIM_MspPostInit+0xb4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d11f      	bne.n	8006a3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069fe:	2300      	movs	r3, #0
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	4b24      	ldr	r3, [pc, #144]	; (8006a94 <HAL_TIM_MspPostInit+0xb8>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <HAL_TIM_MspPostInit+0xb8>)
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a0e:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <HAL_TIM_MspPostInit+0xb8>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006a1a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a20:	2302      	movs	r3, #2
 8006a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	4619      	mov	r1, r3
 8006a36:	4818      	ldr	r0, [pc, #96]	; (8006a98 <HAL_TIM_MspPostInit+0xbc>)
 8006a38:	f004 fd3a 	bl	800b4b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006a3c:	e023      	b.n	8006a86 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a16      	ldr	r2, [pc, #88]	; (8006a9c <HAL_TIM_MspPostInit+0xc0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d11e      	bne.n	8006a86 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <HAL_TIM_MspPostInit+0xb8>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <HAL_TIM_MspPostInit+0xb8>)
 8006a52:	f043 0304 	orr.w	r3, r3, #4
 8006a56:	6313      	str	r3, [r2, #48]	; 0x30
 8006a58:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <HAL_TIM_MspPostInit+0xb8>)
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006a64:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a72:	2300      	movs	r3, #0
 8006a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a76:	2302      	movs	r3, #2
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a7a:	f107 0314 	add.w	r3, r7, #20
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4807      	ldr	r0, [pc, #28]	; (8006aa0 <HAL_TIM_MspPostInit+0xc4>)
 8006a82:	f004 fd15 	bl	800b4b0 <HAL_GPIO_Init>
}
 8006a86:	bf00      	nop
 8006a88:	3728      	adds	r7, #40	; 0x28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40023800 	.word	0x40023800
 8006a98:	40020000 	.word	0x40020000
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40020800 	.word	0x40020800

08006aa4 <UI_ShowSensor>:
#define SENSOR_ORIGIN_X sen_xy[0]
#define SENSOR_ORIGIN_Y sen_xy[1]
#define SENSOR_WIDTH_SEN 6
#define SENSOR_HEIGHT_PX 15

uint8_t UI_ShowSensor() {
 8006aa4:	b590      	push	{r4, r7, lr}
 8006aa6:	b089      	sub	sp, #36	; 0x24
 8006aa8:	af02      	add	r7, sp, #8
	if((sensor_flag & 1) != 1) return 0;
 8006aaa:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <UI_ShowSensor+0xec>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <UI_ShowSensor+0x16>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e065      	b.n	8006b86 <UI_ShowSensor+0xe2>
	uint8_t* value = sensor_disp_status;
 8006aba:	4b36      	ldr	r3, [pc, #216]	; (8006b94 <UI_ShowSensor+0xf0>)
 8006abc:	60fb      	str	r3, [r7, #12]
	DISP_FillRect(
 8006abe:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <UI_ShowSensor+0xf4>)
 8006ac0:	7818      	ldrb	r0, [r3, #0]
 8006ac2:	4b35      	ldr	r3, [pc, #212]	; (8006b98 <UI_ShowSensor+0xf4>)
 8006ac4:	7859      	ldrb	r1, [r3, #1]
			SENSOR_ORIGIN_X,
			SENSOR_ORIGIN_Y,
			SENSOR_ORIGIN_X+(SENSOR_WIDTH_SEN+1)*14,
 8006ac6:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <UI_ShowSensor+0xf4>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
	DISP_FillRect(
 8006aca:	3362      	adds	r3, #98	; 0x62
 8006acc:	b2da      	uxtb	r2, r3
			SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX,
 8006ace:	4b32      	ldr	r3, [pc, #200]	; (8006b98 <UI_ShowSensor+0xf4>)
 8006ad0:	785b      	ldrb	r3, [r3, #1]
	DISP_FillRect(
 8006ad2:	330f      	adds	r3, #15
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2401      	movs	r4, #1
 8006ad8:	9400      	str	r4, [sp, #0]
 8006ada:	f7fa fe1f 	bl	800171c <DISP_FillRect>
			DISP_COLOR_BLACK);
	DISP_Shape_Typedef rect = {0,0,DISP_COLOR_WHITE,SENSOR_WIDTH_SEN-1,1};
 8006ade:	4a2f      	ldr	r2, [pc, #188]	; (8006b9c <UI_ShowSensor+0xf8>)
 8006ae0:	1d3b      	adds	r3, r7, #4
 8006ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ae6:	6018      	str	r0, [r3, #0]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	7019      	strb	r1, [r3, #0]
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8006aec:	2300      	movs	r3, #0
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e03e      	b.n	8006b70 <UI_ShowSensor+0xcc>
		uint8_t status = value[SENSOR_NUMBER-s-1];
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f1c3 030d 	rsb	r3, r3, #13
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	74fb      	strb	r3, [r7, #19]
		if(status>=SENSOR_HEIGHT_PX) status=SENSOR_HEIGHT_PX-1;
 8006b00:	7cfb      	ldrb	r3, [r7, #19]
 8006b02:	2b0e      	cmp	r3, #14
 8006b04:	d902      	bls.n	8006b0c <UI_ShowSensor+0x68>
 8006b06:	230e      	movs	r3, #14
 8006b08:	74fb      	strb	r3, [r7, #19]
 8006b0a:	e007      	b.n	8006b1c <UI_ShowSensor+0x78>
		else if(status==1 || status==2) status=3;
 8006b0c:	7cfb      	ldrb	r3, [r7, #19]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d002      	beq.n	8006b18 <UI_ShowSensor+0x74>
 8006b12:	7cfb      	ldrb	r3, [r7, #19]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d101      	bne.n	8006b1c <UI_ShowSensor+0x78>
 8006b18:	2303      	movs	r3, #3
 8006b1a:	74fb      	strb	r3, [r7, #19]
		uint8_t y_rect = status;
 8006b1c:	7cfb      	ldrb	r3, [r7, #19]
 8006b1e:	72fb      	strb	r3, [r7, #11]

		rect.origin_x = (s*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	00d2      	lsls	r2, r2, #3
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <UI_ShowSensor+0xf4>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	4413      	add	r3, r2
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	713b      	strb	r3, [r7, #4]
		rect.origin_y = SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX-y_rect;
 8006b36:	4b18      	ldr	r3, [pc, #96]	; (8006b98 <UI_ShowSensor+0xf4>)
 8006b38:	785a      	ldrb	r2, [r3, #1]
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	330f      	adds	r3, #15
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	717b      	strb	r3, [r7, #5]
		rect.size_y = y_rect;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	723b      	strb	r3, [r7, #8]
		DISP_FillRect2(&rect);
 8006b4a:	1d3b      	adds	r3, r7, #4
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fa ffb9 	bl	8001ac4 <DISP_FillRect2>
		DISP_OLEDUpdate(
 8006b52:	7938      	ldrb	r0, [r7, #4]
 8006b54:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <UI_ShowSensor+0xf4>)
 8006b56:	7859      	ldrb	r1, [r3, #1]
				rect.origin_x,
				SENSOR_ORIGIN_Y,
				rect.origin_x + SENSOR_WIDTH_SEN,
 8006b58:	793b      	ldrb	r3, [r7, #4]
		DISP_OLEDUpdate(
 8006b5a:	3306      	adds	r3, #6
 8006b5c:	b2da      	uxtb	r2, r3
				SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX);
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <UI_ShowSensor+0xf4>)
 8006b60:	785b      	ldrb	r3, [r3, #1]
		DISP_OLEDUpdate(
 8006b62:	330f      	adds	r3, #15
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f7fa ff65 	bl	8001a34 <DISP_OLEDUpdate>
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b0d      	cmp	r3, #13
 8006b74:	ddbd      	ble.n	8006af2 <UI_ShowSensor+0x4e>
	}
	sensor_flag &=~1;
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <UI_ShowSensor+0xec>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	4b03      	ldr	r3, [pc, #12]	; (8006b90 <UI_ShowSensor+0xec>)
 8006b82:	701a      	strb	r2, [r3, #0]
	return 1;
 8006b84:	2301      	movs	r3, #1
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd90      	pop	{r4, r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000c2d 	.word	0x20000c2d
 8006b94:	20000bc4 	.word	0x20000bc4
 8006b98:	20000290 	.word	0x20000290
 8006b9c:	08011f70 	.word	0x08011f70

08006ba0 <UI_ReadButton>:

uint8_t UI_ReadButton() {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin) * SW_UP_PRESS;
 8006baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bae:	483c      	ldr	r0, [pc, #240]	; (8006ca0 <UI_ReadButton+0x100>)
 8006bb0:	f004 fe1a 	bl	800b7e8 <HAL_GPIO_ReadPin>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bf0c      	ite	eq
 8006bba:	2301      	moveq	r3, #1
 8006bbc:	2300      	movne	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	b25a      	sxtb	r2, r3
 8006bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	b25b      	sxtb	r3, r3
 8006bca:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_RG_GPIO_Port, SW_RG_Pin) * SW_RG_PRESS;
 8006bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bd0:	4833      	ldr	r0, [pc, #204]	; (8006ca0 <UI_ReadButton+0x100>)
 8006bd2:	f004 fe09 	bl	800b7e8 <HAL_GPIO_ReadPin>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <UI_ReadButton+0x40>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e000      	b.n	8006be2 <UI_ReadButton+0x42>
 8006be0:	2300      	movs	r3, #0
 8006be2:	b25a      	sxtb	r2, r3
 8006be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_DW_GPIO_Port, SW_DW_Pin) * SW_DW_PRESS;
 8006bee:	2110      	movs	r1, #16
 8006bf0:	482c      	ldr	r0, [pc, #176]	; (8006ca4 <UI_ReadButton+0x104>)
 8006bf2:	f004 fdf9 	bl	800b7e8 <HAL_GPIO_ReadPin>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <UI_ReadButton+0x60>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	e000      	b.n	8006c02 <UI_ReadButton+0x62>
 8006c00:	2300      	movs	r3, #0
 8006c02:	b25a      	sxtb	r2, r3
 8006c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b25b      	sxtb	r3, r3
 8006c0c:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_BK_GPIO_Port, SW_BK_Pin) * SW_BK_PRESS;
 8006c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c12:	4824      	ldr	r0, [pc, #144]	; (8006ca4 <UI_ReadButton+0x104>)
 8006c14:	f004 fde8 	bl	800b7e8 <HAL_GPIO_ReadPin>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <UI_ReadButton+0x82>
 8006c1e:	2308      	movs	r3, #8
 8006c20:	e000      	b.n	8006c24 <UI_ReadButton+0x84>
 8006c22:	2300      	movs	r3, #0
 8006c24:	b25a      	sxtb	r2, r3
 8006c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	b25b      	sxtb	r3, r3
 8006c2e:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_LF_GPIO_Port, SW_LF_Pin) * SW_LF_PRESS;
 8006c30:	2120      	movs	r1, #32
 8006c32:	481c      	ldr	r0, [pc, #112]	; (8006ca4 <UI_ReadButton+0x104>)
 8006c34:	f004 fdd8 	bl	800b7e8 <HAL_GPIO_ReadPin>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <UI_ReadButton+0xa2>
 8006c3e:	2310      	movs	r3, #16
 8006c40:	e000      	b.n	8006c44 <UI_ReadButton+0xa4>
 8006c42:	2300      	movs	r3, #0
 8006c44:	b25a      	sxtb	r2, r3
 8006c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin) * SW_OK_PRESS;
 8006c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c54:	4813      	ldr	r0, [pc, #76]	; (8006ca4 <UI_ReadButton+0x104>)
 8006c56:	f004 fdc7 	bl	800b7e8 <HAL_GPIO_ReadPin>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <UI_ReadButton+0xc4>
 8006c60:	2320      	movs	r3, #32
 8006c62:	e000      	b.n	8006c66 <UI_ReadButton+0xc6>
 8006c64:	2300      	movs	r3, #0
 8006c66:	b25a      	sxtb	r2, r3
 8006c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b25b      	sxtb	r3, r3
 8006c70:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_HM_GPIO_Port, SW_HM_Pin) * SW_HM_PRESS;
 8006c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c76:	480b      	ldr	r0, [pc, #44]	; (8006ca4 <UI_ReadButton+0x104>)
 8006c78:	f004 fdb6 	bl	800b7e8 <HAL_GPIO_ReadPin>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <UI_ReadButton+0xe6>
 8006c82:	2340      	movs	r3, #64	; 0x40
 8006c84:	e000      	b.n	8006c88 <UI_ReadButton+0xe8>
 8006c86:	2300      	movs	r3, #0
 8006c88:	b25a      	sxtb	r2, r3
 8006c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	b25b      	sxtb	r3, r3
 8006c92:	71fb      	strb	r3, [r7, #7]
	return temp;
 8006c94:	79fb      	ldrb	r3, [r7, #7]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40020800 	.word	0x40020800
 8006ca4:	40020400 	.word	0x40020400

08006ca8 <UI_HomeScreenInit>:
		"PATH",
		"PLAN",
		"SET"
};

void UI_HomeScreenInit() {
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0

	short_message.origin_x = 0;
 8006cac:	4b3b      	ldr	r3, [pc, #236]	; (8006d9c <UI_HomeScreenInit+0xf4>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
	short_message.origin_y = 27;
 8006cb2:	4b3a      	ldr	r3, [pc, #232]	; (8006d9c <UI_HomeScreenInit+0xf4>)
 8006cb4:	221b      	movs	r2, #27
 8006cb6:	705a      	strb	r2, [r3, #1]
	short_message.color = DISP_COLOR_BLACK;
 8006cb8:	4b38      	ldr	r3, [pc, #224]	; (8006d9c <UI_HomeScreenInit+0xf4>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	709a      	strb	r2, [r3, #2]
	short_message.size_x = 127;
 8006cbe:	4b37      	ldr	r3, [pc, #220]	; (8006d9c <UI_HomeScreenInit+0xf4>)
 8006cc0:	227f      	movs	r2, #127	; 0x7f
 8006cc2:	70da      	strb	r2, [r3, #3]
	short_message.size_y = 10;
 8006cc4:	4b35      	ldr	r3, [pc, #212]	; (8006d9c <UI_HomeScreenInit+0xf4>)
 8006cc6:	220a      	movs	r2, #10
 8006cc8:	711a      	strb	r2, [r3, #4]
	short_message.align_x = DISP_ALIGN_CENTER;
 8006cca:	4b34      	ldr	r3, [pc, #208]	; (8006d9c <UI_HomeScreenInit+0xf4>)
 8006ccc:	2202      	movs	r2, #2
 8006cce:	715a      	strb	r2, [r3, #5]
	short_message.align_y = DISP_ALIGN_CENTER;
 8006cd0:	4b32      	ldr	r3, [pc, #200]	; (8006d9c <UI_HomeScreenInit+0xf4>)
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	719a      	strb	r2, [r3, #6]

	short_message_white = short_message;
 8006cd6:	4b32      	ldr	r3, [pc, #200]	; (8006da0 <UI_HomeScreenInit+0xf8>)
 8006cd8:	4a30      	ldr	r2, [pc, #192]	; (8006d9c <UI_HomeScreenInit+0xf4>)
 8006cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cde:	6018      	str	r0, [r3, #0]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	8019      	strh	r1, [r3, #0]
 8006ce4:	3302      	adds	r3, #2
 8006ce6:	0c0a      	lsrs	r2, r1, #16
 8006ce8:	701a      	strb	r2, [r3, #0]
	short_message_white.color = DISP_COLOR_WHITE;
 8006cea:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <UI_HomeScreenInit+0xf8>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	709a      	strb	r2, [r3, #2]

	home_menu[0].origin_x = 14;
 8006cf0:	4b2c      	ldr	r3, [pc, #176]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006cf2:	220e      	movs	r2, #14
 8006cf4:	701a      	strb	r2, [r3, #0]
	home_menu[0].origin_y = 38;
 8006cf6:	4b2b      	ldr	r3, [pc, #172]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006cf8:	2226      	movs	r2, #38	; 0x26
 8006cfa:	705a      	strb	r2, [r3, #1]
	home_menu[0].color = DISP_COLOR_WHITE;
 8006cfc:	4b29      	ldr	r3, [pc, #164]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	709a      	strb	r2, [r3, #2]
	home_menu[0].size_x = 40;
 8006d02:	4b28      	ldr	r3, [pc, #160]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d04:	2228      	movs	r2, #40	; 0x28
 8006d06:	70da      	strb	r2, [r3, #3]
	home_menu[0].align_x = DISP_ALIGN_CENTER;
 8006d08:	4b26      	ldr	r3, [pc, #152]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	715a      	strb	r2, [r3, #5]

	home_menu[1].origin_x = 14;
 8006d0e:	4b25      	ldr	r3, [pc, #148]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d10:	220e      	movs	r2, #14
 8006d12:	71da      	strb	r2, [r3, #7]
	home_menu[1].origin_y = 51;
 8006d14:	4b23      	ldr	r3, [pc, #140]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d16:	2233      	movs	r2, #51	; 0x33
 8006d18:	721a      	strb	r2, [r3, #8]
	home_menu[1].color = DISP_COLOR_WHITE;
 8006d1a:	4b22      	ldr	r3, [pc, #136]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	725a      	strb	r2, [r3, #9]
	home_menu[1].size_x = 40;
 8006d20:	4b20      	ldr	r3, [pc, #128]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d22:	2228      	movs	r2, #40	; 0x28
 8006d24:	729a      	strb	r2, [r3, #10]
	home_menu[1].align_x = DISP_ALIGN_CENTER;
 8006d26:	4b1f      	ldr	r3, [pc, #124]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d28:	2202      	movs	r2, #2
 8006d2a:	731a      	strb	r2, [r3, #12]

	home_menu[2].origin_x = 73;
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d2e:	2249      	movs	r2, #73	; 0x49
 8006d30:	739a      	strb	r2, [r3, #14]
	home_menu[2].origin_y = 38;
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d34:	2226      	movs	r2, #38	; 0x26
 8006d36:	73da      	strb	r2, [r3, #15]
	home_menu[2].color = DISP_COLOR_WHITE;
 8006d38:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	741a      	strb	r2, [r3, #16]
	home_menu[2].size_x = 40;
 8006d3e:	4b19      	ldr	r3, [pc, #100]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d40:	2228      	movs	r2, #40	; 0x28
 8006d42:	745a      	strb	r2, [r3, #17]
	home_menu[2].align_x = DISP_ALIGN_CENTER;
 8006d44:	4b17      	ldr	r3, [pc, #92]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d46:	2202      	movs	r2, #2
 8006d48:	74da      	strb	r2, [r3, #19]

	home_menu[3].origin_x = 73;
 8006d4a:	4b16      	ldr	r3, [pc, #88]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d4c:	2249      	movs	r2, #73	; 0x49
 8006d4e:	755a      	strb	r2, [r3, #21]
	home_menu[3].origin_y = 51;
 8006d50:	4b14      	ldr	r3, [pc, #80]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d52:	2233      	movs	r2, #51	; 0x33
 8006d54:	759a      	strb	r2, [r3, #22]
	home_menu[3].color = DISP_COLOR_WHITE;
 8006d56:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	75da      	strb	r2, [r3, #23]
	home_menu[3].size_x = 40;
 8006d5c:	4b11      	ldr	r3, [pc, #68]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d5e:	2228      	movs	r2, #40	; 0x28
 8006d60:	761a      	strb	r2, [r3, #24]
	home_menu[3].align_x = DISP_ALIGN_CENTER;
 8006d62:	4b10      	ldr	r3, [pc, #64]	; (8006da4 <UI_HomeScreenInit+0xfc>)
 8006d64:	2202      	movs	r2, #2
 8006d66:	769a      	strb	r2, [r3, #26]

	home_status.origin_x = 0;
 8006d68:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <UI_HomeScreenInit+0x100>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	701a      	strb	r2, [r3, #0]
	home_status.origin_y = 0;
 8006d6e:	4b0e      	ldr	r3, [pc, #56]	; (8006da8 <UI_HomeScreenInit+0x100>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	705a      	strb	r2, [r3, #1]
	home_status.size_x = 127;
 8006d74:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <UI_HomeScreenInit+0x100>)
 8006d76:	227f      	movs	r2, #127	; 0x7f
 8006d78:	70da      	strb	r2, [r3, #3]
	home_status.size_y = 10;
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <UI_HomeScreenInit+0x100>)
 8006d7c:	220a      	movs	r2, #10
 8006d7e:	711a      	strb	r2, [r3, #4]
	home_status.color = DISP_COLOR_BLACK;
 8006d80:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <UI_HomeScreenInit+0x100>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	709a      	strb	r2, [r3, #2]
	home_status.align_x = DISP_ALIGN_CENTER;
 8006d86:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <UI_HomeScreenInit+0x100>)
 8006d88:	2202      	movs	r2, #2
 8006d8a:	715a      	strb	r2, [r3, #5]
	home_status.align_y = DISP_ALIGN_CENTER;
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <UI_HomeScreenInit+0x100>)
 8006d8e:	2202      	movs	r2, #2
 8006d90:	719a      	strb	r2, [r3, #6]
}
 8006d92:	bf00      	nop
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	200010d4 	.word	0x200010d4
 8006da0:	200010dc 	.word	0x200010dc
 8006da4:	200010e4 	.word	0x200010e4
 8006da8:	20001100 	.word	0x20001100

08006dac <UI_HomeScreenDisplay>:


void UI_HomeScreenDisplay(uint8_t num_menu, uint8_t cp) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08c      	sub	sp, #48	; 0x30
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	4603      	mov	r3, r0
 8006db4:	460a      	mov	r2, r1
 8006db6:	71fb      	strb	r3, [r7, #7]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[cp], cp, num_plan);
 8006dbc:	79bb      	ldrb	r3, [r7, #6]
 8006dbe:	4a24      	ldr	r2, [pc, #144]	; (8006e50 <UI_HomeScreenDisplay+0xa4>)
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	4413      	add	r3, r2
 8006dc4:	889b      	ldrh	r3, [r3, #4]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	79bb      	ldrb	r3, [r7, #6]
 8006dca:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <UI_HomeScreenDisplay+0xa8>)
 8006dcc:	7812      	ldrb	r2, [r2, #0]
 8006dce:	f107 000c 	add.w	r0, r7, #12
 8006dd2:	9200      	str	r2, [sp, #0]
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	4920      	ldr	r1, [pc, #128]	; (8006e58 <UI_HomeScreenDisplay+0xac>)
 8006dd8:	f008 fff8 	bl	800fdcc <siprintf>
	DISP_DisplayText(&home_status, buff);
 8006ddc:	f107 030c 	add.w	r3, r7, #12
 8006de0:	4619      	mov	r1, r3
 8006de2:	481e      	ldr	r0, [pc, #120]	; (8006e5c <UI_HomeScreenDisplay+0xb0>)
 8006de4:	f7fa fd54 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006de8:	2300      	movs	r3, #0
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
 8006dec:	e027      	b.n	8006e3e <UI_HomeScreenDisplay+0x92>
		if(i == num_menu) home_menu[i].color = DISP_COLOR_BLACK;
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d109      	bne.n	8006e0a <UI_HomeScreenDisplay+0x5e>
 8006df6:	491a      	ldr	r1, [pc, #104]	; (8006e60 <UI_HomeScreenDisplay+0xb4>)
 8006df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	1a9b      	subs	r3, r3, r2
 8006e00:	440b      	add	r3, r1
 8006e02:	3302      	adds	r3, #2
 8006e04:	2201      	movs	r2, #1
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e008      	b.n	8006e1c <UI_HomeScreenDisplay+0x70>
		else home_menu[i].color = DISP_COLOR_WHITE;
 8006e0a:	4915      	ldr	r1, [pc, #84]	; (8006e60 <UI_HomeScreenDisplay+0xb4>)
 8006e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0e:	4613      	mov	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	1a9b      	subs	r3, r3, r2
 8006e14:	440b      	add	r3, r1
 8006e16:	3302      	adds	r3, #2
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&home_menu[i], home_screen_menus[i]);
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1e:	4613      	mov	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	4a0e      	ldr	r2, [pc, #56]	; (8006e60 <UI_HomeScreenDisplay+0xb4>)
 8006e26:	441a      	add	r2, r3
 8006e28:	490e      	ldr	r1, [pc, #56]	; (8006e64 <UI_HomeScreenDisplay+0xb8>)
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f7fa fd2c 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	ddd4      	ble.n	8006dee <UI_HomeScreenDisplay+0x42>
	}
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3728      	adds	r7, #40	; 0x28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000f2c 	.word	0x20000f2c
 8006e54:	20000c39 	.word	0x20000c39
 8006e58:	08011f90 	.word	0x08011f90
 8006e5c:	20001100 	.word	0x20001100
 8006e60:	200010e4 	.word	0x200010e4
 8006e64:	20000294 	.word	0x20000294

08006e68 <UI_HomeScreen>:

UI_Menu_Lists UI_HomeScreen() {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
	static uint8_t num_menu = 0;
	static uint32_t tick = 0;
	uint8_t checkpoint = num_checkpoint;
 8006e6e:	4b60      	ldr	r3, [pc, #384]	; (8006ff0 <UI_HomeScreen+0x188>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	71fb      	strb	r3, [r7, #7]
	ui_home_screen:
	UI_HomeScreenDisplay(num_menu, checkpoint);
 8006e74:	4b5f      	ldr	r3, [pc, #380]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	79fa      	ldrb	r2, [r7, #7]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff ff95 	bl	8006dac <UI_HomeScreenDisplay>
	tick = HAL_GetTick();
 8006e82:	f003 f91d 	bl	800a0c0 <HAL_GetTick>
 8006e86:	4603      	mov	r3, r0
 8006e88:	4a5b      	ldr	r2, [pc, #364]	; (8006ff8 <UI_HomeScreen+0x190>)
 8006e8a:	6013      	str	r3, [r2, #0]
	while(1) {
		UI_ShowSensor();
 8006e8c:	f7ff fe0a 	bl	8006aa4 <UI_ShowSensor>

		static uint8_t bt = 0;

		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006e90:	f003 f916 	bl	800a0c0 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b58      	ldr	r3, [pc, #352]	; (8006ff8 <UI_HomeScreen+0x190>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b45      	cmp	r3, #69	; 0x45
 8006e9e:	f240 8097 	bls.w	8006fd0 <UI_HomeScreen+0x168>
		if(bt == UI_ReadButton()) continue;
 8006ea2:	f7ff fe7d 	bl	8006ba0 <UI_ReadButton>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4b54      	ldr	r3, [pc, #336]	; (8006ffc <UI_HomeScreen+0x194>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	f000 8090 	beq.w	8006fd4 <UI_HomeScreen+0x16c>
		bt = UI_ReadButton();
 8006eb4:	f7ff fe74 	bl	8006ba0 <UI_ReadButton>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	461a      	mov	r2, r3
 8006ebc:	4b4f      	ldr	r3, [pc, #316]	; (8006ffc <UI_HomeScreen+0x194>)
 8006ebe:	701a      	strb	r2, [r3, #0]
//		if(bt & (SW_RG_PRESS | SW_LF_PRESS)) {
//			num_menu = (num_menu+2)%4;
//			goto ui_home_screen;
//		}
		if(bt & SW_UP_PRESS) {
 8006ec0:	4b4e      	ldr	r3, [pc, #312]	; (8006ffc <UI_HomeScreen+0x194>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <UI_HomeScreen+0x7a>
			if(num_menu > 0) num_menu--;
 8006ecc:	4b49      	ldr	r3, [pc, #292]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0cf      	beq.n	8006e74 <UI_HomeScreen+0xc>
 8006ed4:	4b47      	ldr	r3, [pc, #284]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006ede:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006ee0:	e7c8      	b.n	8006e74 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_DW_PRESS) {
 8006ee2:	4b46      	ldr	r3, [pc, #280]	; (8006ffc <UI_HomeScreen+0x194>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00c      	beq.n	8006f08 <UI_HomeScreen+0xa0>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8006eee:	4b41      	ldr	r3, [pc, #260]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d806      	bhi.n	8006f04 <UI_HomeScreen+0x9c>
 8006ef6:	4b3f      	ldr	r3, [pc, #252]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b3d      	ldr	r3, [pc, #244]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006f00:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006f02:	e7b7      	b.n	8006e74 <UI_HomeScreen+0xc>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e06f      	b.n	8006fe8 <UI_HomeScreen+0x180>
		}
		else if(bt & SW_RG_PRESS) {
 8006f08:	4b3c      	ldr	r3, [pc, #240]	; (8006ffc <UI_HomeScreen+0x194>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <UI_HomeScreen+0xc0>
			if(checkpoint < MAX_CHECKPOINT-1) checkpoint++; else checkpoint=0;
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	2b12      	cmp	r3, #18
 8006f18:	d803      	bhi.n	8006f22 <UI_HomeScreen+0xba>
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	71fb      	strb	r3, [r7, #7]
 8006f20:	e7a8      	b.n	8006e74 <UI_HomeScreen+0xc>
 8006f22:	2300      	movs	r3, #0
 8006f24:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8006f26:	e7a5      	b.n	8006e74 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_LF_PRESS) {
 8006f28:	4b34      	ldr	r3, [pc, #208]	; (8006ffc <UI_HomeScreen+0x194>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <UI_HomeScreen+0xe0>
			if(checkpoint > 0) checkpoint--; else checkpoint=MAX_CHECKPOINT-1;
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <UI_HomeScreen+0xda>
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	71fb      	strb	r3, [r7, #7]
 8006f40:	e798      	b.n	8006e74 <UI_HomeScreen+0xc>
 8006f42:	2313      	movs	r3, #19
 8006f44:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8006f46:	e795      	b.n	8006e74 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_HM_PRESS) {
 8006f48:	4b2c      	ldr	r3, [pc, #176]	; (8006ffc <UI_HomeScreen+0x194>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <UI_HomeScreen+0xf4>
			num_menu = 0;
 8006f54:	4b27      	ldr	r3, [pc, #156]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006f5a:	e78b      	b.n	8006e74 <UI_HomeScreen+0xc>
		}
		switch(num_menu) {
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d831      	bhi.n	8006fc8 <UI_HomeScreen+0x160>
 8006f64:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <UI_HomeScreen+0x104>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f93 	.word	0x08006f93
 8006f74:	08006fa9 	.word	0x08006fa9
 8006f78:	08006fb9 	.word	0x08006fb9
		case 0:
			if(bt & SW_OK_PRESS) {
 8006f7c:	4b1f      	ldr	r3, [pc, #124]	; (8006ffc <UI_HomeScreen+0x194>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d027      	beq.n	8006fd8 <UI_HomeScreen+0x170>
				num_checkpoint = checkpoint;
 8006f88:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <UI_HomeScreen+0x188>)
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	7013      	strb	r3, [r2, #0]
				return UI_RUN;
 8006f8e:	2304      	movs	r3, #4
 8006f90:	e02a      	b.n	8006fe8 <UI_HomeScreen+0x180>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8006f92:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <UI_HomeScreen+0x194>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01e      	beq.n	8006fdc <UI_HomeScreen+0x174>
				num_checkpoint = checkpoint;
 8006f9e:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <UI_HomeScreen+0x188>)
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	7013      	strb	r3, [r2, #0]
				return UI_PLAN_SET;
 8006fa4:	2305      	movs	r3, #5
 8006fa6:	e01f      	b.n	8006fe8 <UI_HomeScreen+0x180>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <UI_HomeScreen+0x194>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d015      	beq.n	8006fe0 <UI_HomeScreen+0x178>
				return UI_PLAN_SELECT;
 8006fb4:	2306      	movs	r3, #6
 8006fb6:	e017      	b.n	8006fe8 <UI_HomeScreen+0x180>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <UI_HomeScreen+0x194>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00f      	beq.n	8006fe4 <UI_HomeScreen+0x17c>
				return UI_SET;
 8006fc4:	2307      	movs	r3, #7
 8006fc6:	e00f      	b.n	8006fe8 <UI_HomeScreen+0x180>
			}
			break;
		default: num_menu = 0;
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <UI_HomeScreen+0x18c>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	e75d      	b.n	8006e8c <UI_HomeScreen+0x24>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006fd0:	bf00      	nop
 8006fd2:	e75b      	b.n	8006e8c <UI_HomeScreen+0x24>
		if(bt == UI_ReadButton()) continue;
 8006fd4:	bf00      	nop
 8006fd6:	e759      	b.n	8006e8c <UI_HomeScreen+0x24>
			break;
 8006fd8:	bf00      	nop
 8006fda:	e757      	b.n	8006e8c <UI_HomeScreen+0x24>
			break;
 8006fdc:	bf00      	nop
 8006fde:	e755      	b.n	8006e8c <UI_HomeScreen+0x24>
			break;
 8006fe0:	bf00      	nop
 8006fe2:	e753      	b.n	8006e8c <UI_HomeScreen+0x24>
			break;
 8006fe4:	bf00      	nop
	while(1) {
 8006fe6:	e751      	b.n	8006e8c <UI_HomeScreen+0x24>
		}
	}
	return UI_IDLE;
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000c3c 	.word	0x20000c3c
 8006ff4:	200011b7 	.word	0x200011b7
 8006ff8:	200011b8 	.word	0x200011b8
 8006ffc:	200011bc 	.word	0x200011bc

08007000 <UI_MirroringPlan>:



void UI_MirroringPlan() {
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af02      	add	r7, sp, #8
	for(int i=0; i<plan.num_action; i++) {
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	e030      	b.n	800706e <UI_MirroringPlan+0x6e>
		Action_typedef temp;
		temp = GetActionOther(num_plan, i);
 800700c:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <UI_MirroringPlan+0x84>)
 800700e:	7819      	ldrb	r1, [r3, #0]
 8007010:	1d3b      	adds	r3, r7, #4
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fe77 	bl	8005d08 <GetActionOther>
		switch(temp.act) {
 800701a:	793b      	ldrb	r3, [r7, #4]
 800701c:	3b01      	subs	r3, #1
 800701e:	2b05      	cmp	r3, #5
 8007020:	d821      	bhi.n	8007066 <UI_MirroringPlan+0x66>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UI_MirroringPlan+0x28>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	08007041 	.word	0x08007041
 800702c:	08007047 	.word	0x08007047
 8007030:	08007067 	.word	0x08007067
 8007034:	08007067 	.word	0x08007067
 8007038:	0800704d 	.word	0x0800704d
 800703c:	08007053 	.word	0x08007053
		case 1: temp.act = 2; break;
 8007040:	2302      	movs	r3, #2
 8007042:	713b      	strb	r3, [r7, #4]
 8007044:	e008      	b.n	8007058 <UI_MirroringPlan+0x58>
		case 2: temp.act = 1; break;
 8007046:	2301      	movs	r3, #1
 8007048:	713b      	strb	r3, [r7, #4]
 800704a:	e005      	b.n	8007058 <UI_MirroringPlan+0x58>
		case 5: temp.act = 6; break;
 800704c:	2306      	movs	r3, #6
 800704e:	713b      	strb	r3, [r7, #4]
 8007050:	e002      	b.n	8007058 <UI_MirroringPlan+0x58>
		case 6: temp.act = 5; break;
 8007052:	2305      	movs	r3, #5
 8007054:	713b      	strb	r3, [r7, #4]
 8007056:	bf00      	nop
		default: continue;
		}
		SetActionOther(temp, i);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	1d3b      	adds	r3, r7, #4
 800705e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007060:	f7fe fe96 	bl	8005d90 <SetActionOther>
 8007064:	e000      	b.n	8007068 <UI_MirroringPlan+0x68>
		default: continue;
 8007066:	bf00      	nop
	for(int i=0; i<plan.num_action; i++) {
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	3301      	adds	r3, #1
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <UI_MirroringPlan+0x88>)
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	461a      	mov	r2, r3
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4293      	cmp	r3, r2
 8007078:	dbc8      	blt.n	800700c <UI_MirroringPlan+0xc>
	}
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000c39 	.word	0x20000c39
 8007088:	20000f2c 	.word	0x20000f2c

0800708c <UI_SettingDisplayInit>:
		" Memory",
		" Hardware (NOP)",
		" Who Am I?"
};

void UI_SettingDisplayInit() {
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
	setting_menu[0].origin_x = 3;
 8007092:	4b42      	ldr	r3, [pc, #264]	; (800719c <UI_SettingDisplayInit+0x110>)
 8007094:	2203      	movs	r2, #3
 8007096:	701a      	strb	r2, [r3, #0]
	setting_menu[0].origin_y = 13;
 8007098:	4b40      	ldr	r3, [pc, #256]	; (800719c <UI_SettingDisplayInit+0x110>)
 800709a:	220d      	movs	r2, #13
 800709c:	705a      	strb	r2, [r3, #1]
	setting_menu[0].size_x = 120;
 800709e:	4b3f      	ldr	r3, [pc, #252]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070a0:	2278      	movs	r2, #120	; 0x78
 80070a2:	70da      	strb	r2, [r3, #3]
	setting_menu[0].size_y = 11;
 80070a4:	4b3d      	ldr	r3, [pc, #244]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070a6:	220b      	movs	r2, #11
 80070a8:	711a      	strb	r2, [r3, #4]
	setting_menu[0].color = DISP_COLOR_WHITE;
 80070aa:	4b3c      	ldr	r3, [pc, #240]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	709a      	strb	r2, [r3, #2]
	setting_menu[0].align_y = DISP_ALIGN_CENTER;
 80070b0:	4b3a      	ldr	r3, [pc, #232]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070b2:	2202      	movs	r2, #2
 80070b4:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 80070b6:	2301      	movs	r3, #1
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	e050      	b.n	800715e <UI_SettingDisplayInit+0xd2>

		setting_menu[i].origin_x = setting_menu[0].origin_x;
 80070bc:	4b37      	ldr	r3, [pc, #220]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070be:	7818      	ldrb	r0, [r3, #0]
 80070c0:	4936      	ldr	r1, [pc, #216]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	1a9b      	subs	r3, r3, r2
 80070ca:	440b      	add	r3, r1
 80070cc:	4602      	mov	r2, r0
 80070ce:	701a      	strb	r2, [r3, #0]
		setting_menu[i].origin_y = setting_menu[i-1].origin_y+setting_menu[0].size_y+2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	1e5a      	subs	r2, r3, #1
 80070d4:	4931      	ldr	r1, [pc, #196]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070d6:	4613      	mov	r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	1a9b      	subs	r3, r3, r2
 80070dc:	440b      	add	r3, r1
 80070de:	3301      	adds	r3, #1
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	4b2e      	ldr	r3, [pc, #184]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070e4:	791b      	ldrb	r3, [r3, #4]
 80070e6:	4413      	add	r3, r2
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	3302      	adds	r3, #2
 80070ec:	b2d8      	uxtb	r0, r3
 80070ee:	492b      	ldr	r1, [pc, #172]	; (800719c <UI_SettingDisplayInit+0x110>)
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	1a9b      	subs	r3, r3, r2
 80070f8:	440b      	add	r3, r1
 80070fa:	3301      	adds	r3, #1
 80070fc:	4602      	mov	r2, r0
 80070fe:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_x = setting_menu[0].size_x;
 8007100:	4b26      	ldr	r3, [pc, #152]	; (800719c <UI_SettingDisplayInit+0x110>)
 8007102:	78d8      	ldrb	r0, [r3, #3]
 8007104:	4925      	ldr	r1, [pc, #148]	; (800719c <UI_SettingDisplayInit+0x110>)
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	4613      	mov	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	440b      	add	r3, r1
 8007110:	3303      	adds	r3, #3
 8007112:	4602      	mov	r2, r0
 8007114:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_y = setting_menu[0].size_y;
 8007116:	4b21      	ldr	r3, [pc, #132]	; (800719c <UI_SettingDisplayInit+0x110>)
 8007118:	7918      	ldrb	r0, [r3, #4]
 800711a:	4920      	ldr	r1, [pc, #128]	; (800719c <UI_SettingDisplayInit+0x110>)
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	4613      	mov	r3, r2
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	440b      	add	r3, r1
 8007126:	3304      	adds	r3, #4
 8007128:	4602      	mov	r2, r0
 800712a:	701a      	strb	r2, [r3, #0]
		setting_menu[i].color = setting_menu[0].color;
 800712c:	4b1b      	ldr	r3, [pc, #108]	; (800719c <UI_SettingDisplayInit+0x110>)
 800712e:	7898      	ldrb	r0, [r3, #2]
 8007130:	491a      	ldr	r1, [pc, #104]	; (800719c <UI_SettingDisplayInit+0x110>)
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	4613      	mov	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	1a9b      	subs	r3, r3, r2
 800713a:	440b      	add	r3, r1
 800713c:	3302      	adds	r3, #2
 800713e:	4602      	mov	r2, r0
 8007140:	701a      	strb	r2, [r3, #0]
		setting_menu[i].align_y = setting_menu[0].align_y;
 8007142:	4b16      	ldr	r3, [pc, #88]	; (800719c <UI_SettingDisplayInit+0x110>)
 8007144:	7998      	ldrb	r0, [r3, #6]
 8007146:	4915      	ldr	r1, [pc, #84]	; (800719c <UI_SettingDisplayInit+0x110>)
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	440b      	add	r3, r1
 8007152:	3306      	adds	r3, #6
 8007154:	4602      	mov	r2, r0
 8007156:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3301      	adds	r3, #1
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b03      	cmp	r3, #3
 8007162:	ddab      	ble.n	80070bc <UI_SettingDisplayInit+0x30>
	}

	setting_head.origin_x = 0;
 8007164:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <UI_SettingDisplayInit+0x114>)
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
	setting_head.origin_y = 0;
 800716a:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <UI_SettingDisplayInit+0x114>)
 800716c:	2200      	movs	r2, #0
 800716e:	705a      	strb	r2, [r3, #1]
	setting_head.size_x = 127;
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <UI_SettingDisplayInit+0x114>)
 8007172:	227f      	movs	r2, #127	; 0x7f
 8007174:	70da      	strb	r2, [r3, #3]
	setting_head.size_y = 10;
 8007176:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <UI_SettingDisplayInit+0x114>)
 8007178:	220a      	movs	r2, #10
 800717a:	711a      	strb	r2, [r3, #4]
	setting_head.color = DISP_COLOR_BLACK;
 800717c:	4b08      	ldr	r3, [pc, #32]	; (80071a0 <UI_SettingDisplayInit+0x114>)
 800717e:	2201      	movs	r2, #1
 8007180:	709a      	strb	r2, [r3, #2]
	setting_head.align_x = DISP_ALIGN_CENTER;
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <UI_SettingDisplayInit+0x114>)
 8007184:	2202      	movs	r2, #2
 8007186:	715a      	strb	r2, [r3, #5]
	setting_head.align_y = DISP_ALIGN_CENTER;
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <UI_SettingDisplayInit+0x114>)
 800718a:	2202      	movs	r2, #2
 800718c:	719a      	strb	r2, [r3, #6]
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	20001108 	.word	0x20001108
 80071a0:	20001124 	.word	0x20001124

080071a4 <UI_SettingDisplay>:

void UI_SettingDisplay(uint8_t num) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	4a29      	ldr	r2, [pc, #164]	; (8007258 <UI_SettingDisplay+0xb4>)
 80071b2:	f992 2000 	ldrsb.w	r2, [r2]
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	dd06      	ble.n	80071ca <UI_SettingDisplay+0x26>
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	3b03      	subs	r3, #3
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	b25a      	sxtb	r2, r3
 80071c4:	4b24      	ldr	r3, [pc, #144]	; (8007258 <UI_SettingDisplay+0xb4>)
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e009      	b.n	80071de <UI_SettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	4a22      	ldr	r2, [pc, #136]	; (8007258 <UI_SettingDisplay+0xb4>)
 80071ce:	f992 2000 	ldrsb.w	r2, [r2]
 80071d2:	4293      	cmp	r3, r2
 80071d4:	da03      	bge.n	80071de <UI_SettingDisplay+0x3a>
 80071d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80071da:	4b1f      	ldr	r3, [pc, #124]	; (8007258 <UI_SettingDisplay+0xb4>)
 80071dc:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e031      	b.n	8007248 <UI_SettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 80071e4:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <UI_SettingDisplay+0xb4>)
 80071e6:	f993 3000 	ldrsb.w	r3, [r3]
 80071ea:	461a      	mov	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	441a      	add	r2, r3
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d109      	bne.n	800720a <UI_SettingDisplay+0x66>
 80071f6:	4919      	ldr	r1, [pc, #100]	; (800725c <UI_SettingDisplay+0xb8>)
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	440b      	add	r3, r1
 8007202:	3302      	adds	r3, #2
 8007204:	2201      	movs	r2, #1
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	e008      	b.n	800721c <UI_SettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 800720a:	4914      	ldr	r1, [pc, #80]	; (800725c <UI_SettingDisplay+0xb8>)
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4613      	mov	r3, r2
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	440b      	add	r3, r1
 8007216:	3302      	adds	r3, #2
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], setting_menus[i+first_list]);
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4613      	mov	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	4a0d      	ldr	r2, [pc, #52]	; (800725c <UI_SettingDisplay+0xb8>)
 8007226:	441a      	add	r2, r3
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <UI_SettingDisplay+0xb4>)
 800722a:	f993 3000 	ldrsb.w	r3, [r3]
 800722e:	4619      	mov	r1, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	440b      	add	r3, r1
 8007234:	490a      	ldr	r1, [pc, #40]	; (8007260 <UI_SettingDisplay+0xbc>)
 8007236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7fa fb27 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3301      	adds	r3, #1
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b03      	cmp	r3, #3
 800724c:	ddca      	ble.n	80071e4 <UI_SettingDisplay+0x40>
	}
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	200011bd 	.word	0x200011bd
 800725c:	20001108 	.word	0x20001108
 8007260:	200002a4 	.word	0x200002a4

08007264 <UI_Setting>:

UI_Menu_Lists UI_Setting() {
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "SETTING");
 800726e:	4964      	ldr	r1, [pc, #400]	; (8007400 <UI_Setting+0x19c>)
 8007270:	4864      	ldr	r0, [pc, #400]	; (8007404 <UI_Setting+0x1a0>)
 8007272:	f7fa fb0d 	bl	8001890 <DISP_DisplayText>
	ui_setting:
	UI_SettingDisplay(num_menu);
 8007276:	4b64      	ldr	r3, [pc, #400]	; (8007408 <UI_Setting+0x1a4>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff ff92 	bl	80071a4 <UI_SettingDisplay>
	tick = HAL_GetTick();
 8007280:	f002 ff1e 	bl	800a0c0 <HAL_GetTick>
 8007284:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007286:	f002 ff1b 	bl	800a0c0 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b45      	cmp	r3, #69	; 0x45
 8007292:	f240 80a0 	bls.w	80073d6 <UI_Setting+0x172>
		if(bt == UI_ReadButton()) continue;
 8007296:	f7ff fc83 	bl	8006ba0 <UI_ReadButton>
 800729a:	4603      	mov	r3, r0
 800729c:	461a      	mov	r2, r3
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	4293      	cmp	r3, r2
 80072a2:	f000 809a 	beq.w	80073da <UI_Setting+0x176>
		bt = UI_ReadButton();
 80072a6:	f7ff fc7b 	bl	8006ba0 <UI_ReadButton>
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00e      	beq.n	80072d6 <UI_Setting+0x72>
			if(num_menu==7) num_menu = 0; else num_menu++;
 80072b8:	4b53      	ldr	r3, [pc, #332]	; (8007408 <UI_Setting+0x1a4>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b07      	cmp	r3, #7
 80072be:	d103      	bne.n	80072c8 <UI_Setting+0x64>
 80072c0:	4b51      	ldr	r3, [pc, #324]	; (8007408 <UI_Setting+0x1a4>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	e7d6      	b.n	8007276 <UI_Setting+0x12>
 80072c8:	4b4f      	ldr	r3, [pc, #316]	; (8007408 <UI_Setting+0x1a4>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	3301      	adds	r3, #1
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	4b4d      	ldr	r3, [pc, #308]	; (8007408 <UI_Setting+0x1a4>)
 80072d2:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 80072d4:	e7cf      	b.n	8007276 <UI_Setting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00e      	beq.n	80072fe <UI_Setting+0x9a>
			if(num_menu==0) num_menu = 7; else num_menu--;
 80072e0:	4b49      	ldr	r3, [pc, #292]	; (8007408 <UI_Setting+0x1a4>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d103      	bne.n	80072f0 <UI_Setting+0x8c>
 80072e8:	4b47      	ldr	r3, [pc, #284]	; (8007408 <UI_Setting+0x1a4>)
 80072ea:	2207      	movs	r2, #7
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e7c2      	b.n	8007276 <UI_Setting+0x12>
 80072f0:	4b45      	ldr	r3, [pc, #276]	; (8007408 <UI_Setting+0x1a4>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	4b43      	ldr	r3, [pc, #268]	; (8007408 <UI_Setting+0x1a4>)
 80072fa:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 80072fc:	e7bb      	b.n	8007276 <UI_Setting+0x12>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <UI_Setting+0xae>
			num_menu = 0;
 8007308:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <UI_Setting+0x1a4>)
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800730e:	2302      	movs	r3, #2
 8007310:	e071      	b.n	80073f6 <UI_Setting+0x192>
		}
		switch(num_menu) {
 8007312:	4b3d      	ldr	r3, [pc, #244]	; (8007408 <UI_Setting+0x1a4>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b05      	cmp	r3, #5
 8007318:	d8b5      	bhi.n	8007286 <UI_Setting+0x22>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UI_Setting+0xbc>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007339 	.word	0x08007339
 8007324:	08007347 	.word	0x08007347
 8007328:	08007355 	.word	0x08007355
 800732c:	08007363 	.word	0x08007363
 8007330:	08007371 	.word	0x08007371
 8007334:	080073c9 	.word	0x080073c9
		case 0:
			if(bt & SW_OK_PRESS) {
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d04d      	beq.n	80073de <UI_Setting+0x17a>
				return UI_SET_ADC;
 8007342:	2308      	movs	r3, #8
 8007344:	e057      	b.n	80073f6 <UI_Setting+0x192>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d048      	beq.n	80073e2 <UI_Setting+0x17e>
				return UI_SET_CALIB;
 8007350:	2309      	movs	r3, #9
 8007352:	e050      	b.n	80073f6 <UI_Setting+0x192>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	2b00      	cmp	r3, #0
 800735c:	d043      	beq.n	80073e6 <UI_Setting+0x182>
				return UI_SET_CP;
 800735e:	230a      	movs	r3, #10
 8007360:	e049      	b.n	80073f6 <UI_Setting+0x192>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d03e      	beq.n	80073ea <UI_Setting+0x186>
				return UI_SET_PID;
 800736c:	230b      	movs	r3, #11
 800736e:	e042      	b.n	80073f6 <UI_Setting+0x192>
			}
			break;
		case 4:
			if(bt & SW_OK_PRESS) {
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d039      	beq.n	80073ee <UI_Setting+0x18a>
				DISP_DisplayText(&short_message, "Are You Sure?");
 800737a:	4924      	ldr	r1, [pc, #144]	; (800740c <UI_Setting+0x1a8>)
 800737c:	4824      	ldr	r0, [pc, #144]	; (8007410 <UI_Setting+0x1ac>)
 800737e:	f7fa fa87 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 8007382:	f7ff fc0d 	bl	8006ba0 <UI_ReadButton>
 8007386:	4603      	mov	r3, r0
 8007388:	461a      	mov	r2, r3
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	4293      	cmp	r3, r2
 800738e:	d019      	beq.n	80073c4 <UI_Setting+0x160>
					bt = UI_ReadButton();
 8007390:	f7ff fc06 	bl	8006ba0 <UI_ReadButton>
 8007394:	4603      	mov	r3, r0
 8007396:	71fb      	strb	r3, [r7, #7]
					if(bt & SW_OK_PRESS) {
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <UI_Setting+0x154>
						DISP_DisplayText(&short_message, "Mirroring...");
 80073a2:	491c      	ldr	r1, [pc, #112]	; (8007414 <UI_Setting+0x1b0>)
 80073a4:	481a      	ldr	r0, [pc, #104]	; (8007410 <UI_Setting+0x1ac>)
 80073a6:	f7fa fa73 	bl	8001890 <DISP_DisplayText>
						UI_MirroringPlan();
 80073aa:	f7ff fe29 	bl	8007000 <UI_MirroringPlan>
						DISP_DisplayText(&short_message, "Mirroring Done!");
 80073ae:	491a      	ldr	r1, [pc, #104]	; (8007418 <UI_Setting+0x1b4>)
 80073b0:	4817      	ldr	r0, [pc, #92]	; (8007410 <UI_Setting+0x1ac>)
 80073b2:	f7fa fa6d 	bl	8001890 <DISP_DisplayText>
						goto ui_setting;
 80073b6:	e75e      	b.n	8007276 <UI_Setting+0x12>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0df      	beq.n	8007382 <UI_Setting+0x11e>
						goto ui_setting;
 80073c2:	e758      	b.n	8007276 <UI_Setting+0x12>
					if(bt == UI_ReadButton()) continue;
 80073c4:	bf00      	nop
 80073c6:	e7dc      	b.n	8007382 <UI_Setting+0x11e>
					}
				}
			}
			break;
		case 5:
			if(bt & SW_OK_PRESS) {
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00f      	beq.n	80073f2 <UI_Setting+0x18e>
				return UI_SET_MEM;
 80073d2:	230d      	movs	r3, #13
 80073d4:	e00f      	b.n	80073f6 <UI_Setting+0x192>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80073d6:	bf00      	nop
 80073d8:	e755      	b.n	8007286 <UI_Setting+0x22>
		if(bt == UI_ReadButton()) continue;
 80073da:	bf00      	nop
 80073dc:	e753      	b.n	8007286 <UI_Setting+0x22>
			break;
 80073de:	bf00      	nop
 80073e0:	e751      	b.n	8007286 <UI_Setting+0x22>
			break;
 80073e2:	bf00      	nop
 80073e4:	e74f      	b.n	8007286 <UI_Setting+0x22>
			break;
 80073e6:	bf00      	nop
 80073e8:	e74d      	b.n	8007286 <UI_Setting+0x22>
			break;
 80073ea:	bf00      	nop
 80073ec:	e74b      	b.n	8007286 <UI_Setting+0x22>
			break;
 80073ee:	bf00      	nop
 80073f0:	e749      	b.n	8007286 <UI_Setting+0x22>
			}
			break;
 80073f2:	bf00      	nop
 80073f4:	e747      	b.n	8007286 <UI_Setting+0x22>
		}
	}
	return UI_IDLE;
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	08012010 	.word	0x08012010
 8007404:	20001100 	.word	0x20001100
 8007408:	200011be 	.word	0x200011be
 800740c:	08012018 	.word	0x08012018
 8007410:	200010d4 	.word	0x200010d4
 8007414:	08012028 	.word	0x08012028
 8007418:	08012038 	.word	0x08012038

0800741c <UI_PlanSetDisplayInit>:
		" Delay",
		" Enc Val"
};


void UI_PlanSetDisplayInit() {
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
	planset_list_name[0].origin_x = 6;
 8007422:	4b49      	ldr	r3, [pc, #292]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 8007424:	2206      	movs	r2, #6
 8007426:	701a      	strb	r2, [r3, #0]
	planset_list_name[0].origin_y = 16;
 8007428:	4b47      	ldr	r3, [pc, #284]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 800742a:	2210      	movs	r2, #16
 800742c:	705a      	strb	r2, [r3, #1]
	planset_list_name[0].size_x = 54;
 800742e:	4b46      	ldr	r3, [pc, #280]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 8007430:	2236      	movs	r2, #54	; 0x36
 8007432:	70da      	strb	r2, [r3, #3]
	planset_list_name[0].size_y = 11;
 8007434:	4b44      	ldr	r3, [pc, #272]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 8007436:	220b      	movs	r2, #11
 8007438:	711a      	strb	r2, [r3, #4]
	planset_list_name[0].color = DISP_COLOR_WHITE;
 800743a:	4b43      	ldr	r3, [pc, #268]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 800743c:	2200      	movs	r2, #0
 800743e:	709a      	strb	r2, [r3, #2]
	planset_list_name[0].align_y = DISP_ALIGN_CENTER;
 8007440:	4b41      	ldr	r3, [pc, #260]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 8007442:	2202      	movs	r2, #2
 8007444:	719a      	strb	r2, [r3, #6]

	planset_list_value[0] = planset_list_name[0];
 8007446:	4b41      	ldr	r3, [pc, #260]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 8007448:	4a3f      	ldr	r2, [pc, #252]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 800744a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800744e:	6018      	str	r0, [r3, #0]
 8007450:	3304      	adds	r3, #4
 8007452:	8019      	strh	r1, [r3, #0]
 8007454:	3302      	adds	r3, #2
 8007456:	0c0a      	lsrs	r2, r1, #16
 8007458:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].origin_x = 62;
 800745a:	4b3c      	ldr	r3, [pc, #240]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 800745c:	223e      	movs	r2, #62	; 0x3e
 800745e:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].size_x = 58;
 8007460:	4b3a      	ldr	r3, [pc, #232]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 8007462:	223a      	movs	r2, #58	; 0x3a
 8007464:	70da      	strb	r2, [r3, #3]
	planset_list_value[0].align_x = DISP_ALIGN_CENTER;
 8007466:	4b39      	ldr	r3, [pc, #228]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 8007468:	2202      	movs	r2, #2
 800746a:	715a      	strb	r2, [r3, #5]


	for(int i=1; i<4; i++) {
 800746c:	2301      	movs	r3, #1
 800746e:	607b      	str	r3, [r7, #4]
 8007470:	e04c      	b.n	800750c <UI_PlanSetDisplayInit+0xf0>
		planset_list_name[i] = planset_list_name[0];
 8007472:	4935      	ldr	r1, [pc, #212]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	1a9b      	subs	r3, r3, r2
 800747c:	440b      	add	r3, r1
 800747e:	4a32      	ldr	r2, [pc, #200]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 8007480:	6810      	ldr	r0, [r2, #0]
 8007482:	6018      	str	r0, [r3, #0]
 8007484:	8891      	ldrh	r1, [r2, #4]
 8007486:	7992      	ldrb	r2, [r2, #6]
 8007488:	8099      	strh	r1, [r3, #4]
 800748a:	719a      	strb	r2, [r3, #6]
		planset_list_name[i].origin_y = planset_list_name[i-1].origin_y+planset_list_name[0].size_y+1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	1e5a      	subs	r2, r3, #1
 8007490:	492d      	ldr	r1, [pc, #180]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 8007492:	4613      	mov	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	1a9b      	subs	r3, r3, r2
 8007498:	440b      	add	r3, r1
 800749a:	3301      	adds	r3, #1
 800749c:	781a      	ldrb	r2, [r3, #0]
 800749e:	4b2a      	ldr	r3, [pc, #168]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 80074a0:	791b      	ldrb	r3, [r3, #4]
 80074a2:	4413      	add	r3, r2
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	3301      	adds	r3, #1
 80074a8:	b2d8      	uxtb	r0, r3
 80074aa:	4927      	ldr	r1, [pc, #156]	; (8007548 <UI_PlanSetDisplayInit+0x12c>)
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	440b      	add	r3, r1
 80074b6:	3301      	adds	r3, #1
 80074b8:	4602      	mov	r2, r0
 80074ba:	701a      	strb	r2, [r3, #0]

		planset_list_value[i] = planset_list_value[0];
 80074bc:	4923      	ldr	r1, [pc, #140]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	440b      	add	r3, r1
 80074c8:	4a20      	ldr	r2, [pc, #128]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 80074ca:	6810      	ldr	r0, [r2, #0]
 80074cc:	6018      	str	r0, [r3, #0]
 80074ce:	8891      	ldrh	r1, [r2, #4]
 80074d0:	7992      	ldrb	r2, [r2, #6]
 80074d2:	8099      	strh	r1, [r3, #4]
 80074d4:	719a      	strb	r2, [r3, #6]
		planset_list_value[i].origin_y = planset_list_value[i-1].origin_y+planset_list_value[0].size_y+1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	1e5a      	subs	r2, r3, #1
 80074da:	491c      	ldr	r1, [pc, #112]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 80074dc:	4613      	mov	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	440b      	add	r3, r1
 80074e4:	3301      	adds	r3, #1
 80074e6:	781a      	ldrb	r2, [r3, #0]
 80074e8:	4b18      	ldr	r3, [pc, #96]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	3301      	adds	r3, #1
 80074f2:	b2d8      	uxtb	r0, r3
 80074f4:	4915      	ldr	r1, [pc, #84]	; (800754c <UI_PlanSetDisplayInit+0x130>)
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	4613      	mov	r3, r2
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	440b      	add	r3, r1
 8007500:	3301      	adds	r3, #1
 8007502:	4602      	mov	r2, r0
 8007504:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3301      	adds	r3, #1
 800750a:	607b      	str	r3, [r7, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b03      	cmp	r3, #3
 8007510:	ddaf      	ble.n	8007472 <UI_PlanSetDisplayInit+0x56>
	}

	planset_head.origin_x = 0;
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <UI_PlanSetDisplayInit+0x134>)
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
	planset_head.origin_y = 0;
 8007518:	4b0d      	ldr	r3, [pc, #52]	; (8007550 <UI_PlanSetDisplayInit+0x134>)
 800751a:	2200      	movs	r2, #0
 800751c:	705a      	strb	r2, [r3, #1]
	planset_head.size_x = 127;
 800751e:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <UI_PlanSetDisplayInit+0x134>)
 8007520:	227f      	movs	r2, #127	; 0x7f
 8007522:	70da      	strb	r2, [r3, #3]
	planset_head.size_y = 13;
 8007524:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <UI_PlanSetDisplayInit+0x134>)
 8007526:	220d      	movs	r2, #13
 8007528:	711a      	strb	r2, [r3, #4]
	planset_head.color = DISP_COLOR_BLACK;
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <UI_PlanSetDisplayInit+0x134>)
 800752c:	2201      	movs	r2, #1
 800752e:	709a      	strb	r2, [r3, #2]
	planset_head.align_x = DISP_ALIGN_LEFT;
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <UI_PlanSetDisplayInit+0x134>)
 8007532:	2200      	movs	r2, #0
 8007534:	715a      	strb	r2, [r3, #5]
	planset_head.align_y = DISP_ALIGN_CENTER;
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <UI_PlanSetDisplayInit+0x134>)
 8007538:	2202      	movs	r2, #2
 800753a:	719a      	strb	r2, [r3, #6]
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	2000112c 	.word	0x2000112c
 800754c:	20001148 	.word	0x20001148
 8007550:	20001164 	.word	0x20001164

08007554 <UI_PlanSetDisplay>:

void UI_PlanSetDisplay(int8_t num, Action_typedef* plan, int num_index) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b08e      	sub	sp, #56	; 0x38
 8007558:	af02      	add	r7, sp, #8
 800755a:	4603      	mov	r3, r0
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	73fb      	strb	r3, [r7, #15]
	char buff[22];
	static int8_t first_list = 0;
	uint8_t temp = (num == -1);
 8007562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756a:	bf0c      	ite	eq
 800756c:	2301      	moveq	r3, #1
 800756e:	2300      	movne	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	sprintf(buff, " %03i ~ %s", num_index, plan_act_lists[plan->act]);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	4bbb      	ldr	r3, [pc, #748]	; (800786c <UI_PlanSetDisplay+0x318>)
 800757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007582:	f107 0014 	add.w	r0, r7, #20
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	49b9      	ldr	r1, [pc, #740]	; (8007870 <UI_PlanSetDisplay+0x31c>)
 800758a:	f008 fc1f 	bl	800fdcc <siprintf>
	if(temp) planset_head.color = DISP_COLOR_BLACK; else planset_head.color = DISP_COLOR_WHITE;
 800758e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <UI_PlanSetDisplay+0x4a>
 8007596:	4bb7      	ldr	r3, [pc, #732]	; (8007874 <UI_PlanSetDisplay+0x320>)
 8007598:	2201      	movs	r2, #1
 800759a:	709a      	strb	r2, [r3, #2]
 800759c:	e002      	b.n	80075a4 <UI_PlanSetDisplay+0x50>
 800759e:	4bb5      	ldr	r3, [pc, #724]	; (8007874 <UI_PlanSetDisplay+0x320>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	709a      	strb	r2, [r3, #2]
	DISP_DisplayText(&planset_head, buff);
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	4619      	mov	r1, r3
 80075aa:	48b2      	ldr	r0, [pc, #712]	; (8007874 <UI_PlanSetDisplay+0x320>)
 80075ac:	f7fa f970 	bl	8001890 <DISP_DisplayText>
	DISP_DrawLineSimple(0, 14, 127, 14, DISP_COLOR_WHITE);
 80075b0:	2300      	movs	r3, #0
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	230e      	movs	r3, #14
 80075b6:	227f      	movs	r2, #127	; 0x7f
 80075b8:	210e      	movs	r1, #14
 80075ba:	2000      	movs	r0, #0
 80075bc:	f7f9 ffd4 	bl	8001568 <DISP_DrawLineSimple>
	DISP_OLEDUpdate(0, 13, 127, 13);
 80075c0:	230d      	movs	r3, #13
 80075c2:	227f      	movs	r2, #127	; 0x7f
 80075c4:	210d      	movs	r1, #13
 80075c6:	2000      	movs	r0, #0
 80075c8:	f7fa fa34 	bl	8001a34 <DISP_OLEDUpdate>
	if(num==-1) num = 0;
 80075cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d101      	bne.n	80075da <UI_PlanSetDisplay+0x86>
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
	if(num - first_list >= 4) first_list = (num-3);
 80075da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075de:	4aa6      	ldr	r2, [pc, #664]	; (8007878 <UI_PlanSetDisplay+0x324>)
 80075e0:	f992 2000 	ldrsb.w	r2, [r2]
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	dd06      	ble.n	80075f8 <UI_PlanSetDisplay+0xa4>
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	3b03      	subs	r3, #3
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	b25a      	sxtb	r2, r3
 80075f2:	4ba1      	ldr	r3, [pc, #644]	; (8007878 <UI_PlanSetDisplay+0x324>)
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	e009      	b.n	800760c <UI_PlanSetDisplay+0xb8>
	else if(num < first_list) first_list = num;
 80075f8:	4b9f      	ldr	r3, [pc, #636]	; (8007878 <UI_PlanSetDisplay+0x324>)
 80075fa:	f993 3000 	ldrsb.w	r3, [r3]
 80075fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007602:	429a      	cmp	r2, r3
 8007604:	da02      	bge.n	800760c <UI_PlanSetDisplay+0xb8>
 8007606:	4a9c      	ldr	r2, [pc, #624]	; (8007878 <UI_PlanSetDisplay+0x324>)
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<4; i++) {
 800760c:	2300      	movs	r3, #0
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007610:	e27b      	b.n	8007b0a <UI_PlanSetDisplay+0x5b6>
		if(i + first_list == num && !temp) {
 8007612:	4b99      	ldr	r3, [pc, #612]	; (8007878 <UI_PlanSetDisplay+0x324>)
 8007614:	f993 3000 	ldrsb.w	r3, [r3]
 8007618:	461a      	mov	r2, r3
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	441a      	add	r2, r3
 800761e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007622:	429a      	cmp	r2, r3
 8007624:	d116      	bne.n	8007654 <UI_PlanSetDisplay+0x100>
 8007626:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800762a:	2b00      	cmp	r3, #0
 800762c:	d112      	bne.n	8007654 <UI_PlanSetDisplay+0x100>
			planset_list_name[i].color = DISP_COLOR_BLACK;
 800762e:	4993      	ldr	r1, [pc, #588]	; (800787c <UI_PlanSetDisplay+0x328>)
 8007630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007632:	4613      	mov	r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	440b      	add	r3, r1
 800763a:	3302      	adds	r3, #2
 800763c:	2201      	movs	r2, #1
 800763e:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_BLACK;
 8007640:	498f      	ldr	r1, [pc, #572]	; (8007880 <UI_PlanSetDisplay+0x32c>)
 8007642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007644:	4613      	mov	r3, r2
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	440b      	add	r3, r1
 800764c:	3302      	adds	r3, #2
 800764e:	2201      	movs	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e011      	b.n	8007678 <UI_PlanSetDisplay+0x124>
		}
		else {
			planset_list_name[i].color = DISP_COLOR_WHITE;
 8007654:	4989      	ldr	r1, [pc, #548]	; (800787c <UI_PlanSetDisplay+0x328>)
 8007656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	1a9b      	subs	r3, r3, r2
 800765e:	440b      	add	r3, r1
 8007660:	3302      	adds	r3, #2
 8007662:	2200      	movs	r2, #0
 8007664:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_WHITE;
 8007666:	4986      	ldr	r1, [pc, #536]	; (8007880 <UI_PlanSetDisplay+0x32c>)
 8007668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766a:	4613      	mov	r3, r2
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	1a9b      	subs	r3, r3, r2
 8007670:	440b      	add	r3, r1
 8007672:	3302      	adds	r3, #2
 8007674:	2200      	movs	r2, #0
 8007676:	701a      	strb	r2, [r3, #0]
		}
		switch(first_list + i) {
 8007678:	4b7f      	ldr	r3, [pc, #508]	; (8007878 <UI_PlanSetDisplay+0x324>)
 800767a:	f993 3000 	ldrsb.w	r3, [r3]
 800767e:	461a      	mov	r2, r3
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	4413      	add	r3, r2
 8007684:	2b0d      	cmp	r3, #13
 8007686:	f200 823d 	bhi.w	8007b04 <UI_PlanSetDisplay+0x5b0>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <UI_PlanSetDisplay+0x13c>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076c9 	.word	0x080076c9
 8007694:	08007709 	.word	0x08007709
 8007698:	0800773f 	.word	0x0800773f
 800769c:	080077a9 	.word	0x080077a9
 80076a0:	080077e9 	.word	0x080077e9
 80076a4:	0800782b 	.word	0x0800782b
 80076a8:	080078a9 	.word	0x080078a9
 80076ac:	080078e9 	.word	0x080078e9
 80076b0:	08007929 	.word	0x08007929
 80076b4:	08007969 	.word	0x08007969
 80076b8:	080079c7 	.word	0x080079c7
 80076bc:	08007a37 	.word	0x08007a37
 80076c0:	08007a61 	.word	0x08007a61
 80076c4:	08007a8b 	.word	0x08007a8b
		case 0:
			DISP_DisplayText(&planset_list_name[i], " Sensor");
 80076c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ca:	4613      	mov	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	4a6a      	ldr	r2, [pc, #424]	; (800787c <UI_PlanSetDisplay+0x328>)
 80076d2:	4413      	add	r3, r2
 80076d4:	496b      	ldr	r1, [pc, #428]	; (8007884 <UI_PlanSetDisplay+0x330>)
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fa f8da 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->sen_trig);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	785b      	ldrb	r3, [r3, #1]
 80076e0:	461a      	mov	r2, r3
 80076e2:	f107 0314 	add.w	r3, r7, #20
 80076e6:	4968      	ldr	r1, [pc, #416]	; (8007888 <UI_PlanSetDisplay+0x334>)
 80076e8:	4618      	mov	r0, r3
 80076ea:	f008 fb6f 	bl	800fdcc <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80076ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f0:	4613      	mov	r3, r2
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	1a9b      	subs	r3, r3, r2
 80076f6:	4a62      	ldr	r2, [pc, #392]	; (8007880 <UI_PlanSetDisplay+0x32c>)
 80076f8:	4413      	add	r3, r2
 80076fa:	f107 0214 	add.w	r2, r7, #20
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7fa f8c5 	bl	8001890 <DISP_DisplayText>
			break;
 8007706:	e1fd      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 1:
			DISP_DisplayText(&planset_list_name[i], " Mode");
 8007708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800770a:	4613      	mov	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	4a5a      	ldr	r2, [pc, #360]	; (800787c <UI_PlanSetDisplay+0x328>)
 8007712:	4413      	add	r3, r2
 8007714:	495d      	ldr	r1, [pc, #372]	; (800788c <UI_PlanSetDisplay+0x338>)
 8007716:	4618      	mov	r0, r3
 8007718:	f7fa f8ba 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], plan_mode_lists[plan->act_mode]);
 800771c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	4a56      	ldr	r2, [pc, #344]	; (8007880 <UI_PlanSetDisplay+0x32c>)
 8007726:	441a      	add	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	789b      	ldrb	r3, [r3, #2]
 800772c:	4619      	mov	r1, r3
 800772e:	4b58      	ldr	r3, [pc, #352]	; (8007890 <UI_PlanSetDisplay+0x33c>)
 8007730:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7fa f8aa 	bl	8001890 <DISP_DisplayText>
			break;
 800773c:	e1e2      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 2:
			if(plan->act != PLAN_JUMP) {
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b0b      	cmp	r3, #11
 8007744:	d010      	beq.n	8007768 <UI_PlanSetDisplay+0x214>
				DISP_DisplayText(&planset_list_name[i], plan_act_value_lists[plan->act_mode]);
 8007746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007748:	4613      	mov	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	1a9b      	subs	r3, r3, r2
 800774e:	4a4b      	ldr	r2, [pc, #300]	; (800787c <UI_PlanSetDisplay+0x328>)
 8007750:	441a      	add	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	789b      	ldrb	r3, [r3, #2]
 8007756:	4619      	mov	r1, r3
 8007758:	4b4e      	ldr	r3, [pc, #312]	; (8007894 <UI_PlanSetDisplay+0x340>)
 800775a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f7fa f895 	bl	8001890 <DISP_DisplayText>
 8007766:	e009      	b.n	800777c <UI_PlanSetDisplay+0x228>
			}
			else {
				DISP_DisplayText(&planset_list_name[i], "Index");
 8007768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800776a:	4613      	mov	r3, r2
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	4a42      	ldr	r2, [pc, #264]	; (800787c <UI_PlanSetDisplay+0x328>)
 8007772:	4413      	add	r3, r2
 8007774:	4948      	ldr	r1, [pc, #288]	; (8007898 <UI_PlanSetDisplay+0x344>)
 8007776:	4618      	mov	r0, r3
 8007778:	f7fa f88a 	bl	8001890 <DISP_DisplayText>
			}
			sprintf(buff, "%i", plan->act_value);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	78db      	ldrb	r3, [r3, #3]
 8007780:	461a      	mov	r2, r3
 8007782:	f107 0314 	add.w	r3, r7, #20
 8007786:	4940      	ldr	r1, [pc, #256]	; (8007888 <UI_PlanSetDisplay+0x334>)
 8007788:	4618      	mov	r0, r3
 800778a:	f008 fb1f 	bl	800fdcc <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800778e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007790:	4613      	mov	r3, r2
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	4a3a      	ldr	r2, [pc, #232]	; (8007880 <UI_PlanSetDisplay+0x32c>)
 8007798:	4413      	add	r3, r2
 800779a:	f107 0214 	add.w	r2, r7, #20
 800779e:	4611      	mov	r1, r2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fa f875 	bl	8001890 <DISP_DisplayText>
			break;
 80077a6:	e1ad      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 3:
			DISP_DisplayText(&planset_list_name[i], " Brake");
 80077a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077aa:	4613      	mov	r3, r2
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	4a32      	ldr	r2, [pc, #200]	; (800787c <UI_PlanSetDisplay+0x328>)
 80077b2:	4413      	add	r3, r2
 80077b4:	4939      	ldr	r1, [pc, #228]	; (800789c <UI_PlanSetDisplay+0x348>)
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fa f86a 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->brake);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	791b      	ldrb	r3, [r3, #4]
 80077c0:	461a      	mov	r2, r3
 80077c2:	f107 0314 	add.w	r3, r7, #20
 80077c6:	4930      	ldr	r1, [pc, #192]	; (8007888 <UI_PlanSetDisplay+0x334>)
 80077c8:	4618      	mov	r0, r3
 80077ca:	f008 faff 	bl	800fdcc <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80077ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d0:	4613      	mov	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <UI_PlanSetDisplay+0x32c>)
 80077d8:	4413      	add	r3, r2
 80077da:	f107 0214 	add.w	r2, r7, #20
 80077de:	4611      	mov	r1, r2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fa f855 	bl	8001890 <DISP_DisplayText>
			break;
 80077e6:	e18d      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 4:
			DISP_DisplayText(&planset_list_name[i], " Fw Sp");
 80077e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ea:	4613      	mov	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	1a9b      	subs	r3, r3, r2
 80077f0:	4a22      	ldr	r2, [pc, #136]	; (800787c <UI_PlanSetDisplay+0x328>)
 80077f2:	4413      	add	r3, r2
 80077f4:	492a      	ldr	r1, [pc, #168]	; (80078a0 <UI_PlanSetDisplay+0x34c>)
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fa f84a 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->forward_speed);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8007802:	461a      	mov	r2, r3
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	491f      	ldr	r1, [pc, #124]	; (8007888 <UI_PlanSetDisplay+0x334>)
 800780a:	4618      	mov	r0, r3
 800780c:	f008 fade 	bl	800fdcc <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007812:	4613      	mov	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	4a19      	ldr	r2, [pc, #100]	; (8007880 <UI_PlanSetDisplay+0x32c>)
 800781a:	4413      	add	r3, r2
 800781c:	f107 0214 	add.w	r2, r7, #20
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7fa f834 	bl	8001890 <DISP_DisplayText>
			break;
 8007828:	e16c      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 5:
			DISP_DisplayText(&planset_list_name[i], " Rv Sp");
 800782a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800782c:	4613      	mov	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	4a12      	ldr	r2, [pc, #72]	; (800787c <UI_PlanSetDisplay+0x328>)
 8007834:	4413      	add	r3, r2
 8007836:	491b      	ldr	r1, [pc, #108]	; (80078a4 <UI_PlanSetDisplay+0x350>)
 8007838:	4618      	mov	r0, r3
 800783a:	f7fa f829 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->reverse_speed);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007844:	461a      	mov	r2, r3
 8007846:	f107 0314 	add.w	r3, r7, #20
 800784a:	490f      	ldr	r1, [pc, #60]	; (8007888 <UI_PlanSetDisplay+0x334>)
 800784c:	4618      	mov	r0, r3
 800784e:	f008 fabd 	bl	800fdcc <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	4a09      	ldr	r2, [pc, #36]	; (8007880 <UI_PlanSetDisplay+0x32c>)
 800785c:	4413      	add	r3, r2
 800785e:	f107 0214 	add.w	r2, r7, #20
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f7fa f813 	bl	8001890 <DISP_DisplayText>
			break;
 800786a:	e14b      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
 800786c:	200002c4 	.word	0x200002c4
 8007870:	080120fc 	.word	0x080120fc
 8007874:	20001164 	.word	0x20001164
 8007878:	200011bf 	.word	0x200011bf
 800787c:	2000112c 	.word	0x2000112c
 8007880:	20001148 	.word	0x20001148
 8007884:	08012108 	.word	0x08012108
 8007888:	08012110 	.word	0x08012110
 800788c:	08012114 	.word	0x08012114
 8007890:	20000300 	.word	0x20000300
 8007894:	2000030c 	.word	0x2000030c
 8007898:	0801211c 	.word	0x0801211c
 800789c:	08012124 	.word	0x08012124
 80078a0:	0801212c 	.word	0x0801212c
 80078a4:	08012134 	.word	0x08012134
		case 6:
			DISP_DisplayText(&planset_list_name[i], " Wait");
 80078a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078aa:	4613      	mov	r3, r2
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	4a9a      	ldr	r2, [pc, #616]	; (8007b1c <UI_PlanSetDisplay+0x5c8>)
 80078b2:	4413      	add	r3, r2
 80078b4:	499a      	ldr	r1, [pc, #616]	; (8007b20 <UI_PlanSetDisplay+0x5cc>)
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7f9 ffea 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->wait_time);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	79db      	ldrb	r3, [r3, #7]
 80078c0:	461a      	mov	r2, r3
 80078c2:	f107 0314 	add.w	r3, r7, #20
 80078c6:	4997      	ldr	r1, [pc, #604]	; (8007b24 <UI_PlanSetDisplay+0x5d0>)
 80078c8:	4618      	mov	r0, r3
 80078ca:	f008 fa7f 	bl	800fdcc <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80078ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d0:	4613      	mov	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	4a94      	ldr	r2, [pc, #592]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 80078d8:	4413      	add	r3, r2
 80078da:	f107 0214 	add.w	r2, r7, #20
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7f9 ffd5 	bl	8001890 <DISP_DisplayText>
			break;
 80078e6:	e10d      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 7:
			DISP_DisplayText(&planset_list_name[i], " Bst Tim");
 80078e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ea:	4613      	mov	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	1a9b      	subs	r3, r3, r2
 80078f0:	4a8a      	ldr	r2, [pc, #552]	; (8007b1c <UI_PlanSetDisplay+0x5c8>)
 80078f2:	4413      	add	r3, r2
 80078f4:	498d      	ldr	r1, [pc, #564]	; (8007b2c <UI_PlanSetDisplay+0x5d8>)
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7f9 ffca 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_time);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	7a1b      	ldrb	r3, [r3, #8]
 8007900:	461a      	mov	r2, r3
 8007902:	f107 0314 	add.w	r3, r7, #20
 8007906:	4987      	ldr	r1, [pc, #540]	; (8007b24 <UI_PlanSetDisplay+0x5d0>)
 8007908:	4618      	mov	r0, r3
 800790a:	f008 fa5f 	bl	800fdcc <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800790e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007910:	4613      	mov	r3, r2
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	4a84      	ldr	r2, [pc, #528]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 8007918:	4413      	add	r3, r2
 800791a:	f107 0214 	add.w	r2, r7, #20
 800791e:	4611      	mov	r1, r2
 8007920:	4618      	mov	r0, r3
 8007922:	f7f9 ffb5 	bl	8001890 <DISP_DisplayText>
			break;
 8007926:	e0ed      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 8:
			DISP_DisplayText(&planset_list_name[i], " Bst Sp");
 8007928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800792a:	4613      	mov	r3, r2
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	1a9b      	subs	r3, r3, r2
 8007930:	4a7a      	ldr	r2, [pc, #488]	; (8007b1c <UI_PlanSetDisplay+0x5c8>)
 8007932:	4413      	add	r3, r2
 8007934:	497e      	ldr	r1, [pc, #504]	; (8007b30 <UI_PlanSetDisplay+0x5dc>)
 8007936:	4618      	mov	r0, r3
 8007938:	f7f9 ffaa 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_speed);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	7a5b      	ldrb	r3, [r3, #9]
 8007940:	461a      	mov	r2, r3
 8007942:	f107 0314 	add.w	r3, r7, #20
 8007946:	4977      	ldr	r1, [pc, #476]	; (8007b24 <UI_PlanSetDisplay+0x5d0>)
 8007948:	4618      	mov	r0, r3
 800794a:	f008 fa3f 	bl	800fdcc <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800794e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007950:	4613      	mov	r3, r2
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	4a74      	ldr	r2, [pc, #464]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 8007958:	4413      	add	r3, r2
 800795a:	f107 0214 	add.w	r2, r7, #20
 800795e:	4611      	mov	r1, r2
 8007960:	4618      	mov	r0, r3
 8007962:	f7f9 ff95 	bl	8001890 <DISP_DisplayText>
			break;
 8007966:	e0cd      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 9:
			DISP_DisplayText(&planset_list_name[i], " Speed");
 8007968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800796a:	4613      	mov	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	4a6a      	ldr	r2, [pc, #424]	; (8007b1c <UI_PlanSetDisplay+0x5c8>)
 8007972:	4413      	add	r3, r2
 8007974:	496f      	ldr	r1, [pc, #444]	; (8007b34 <UI_PlanSetDisplay+0x5e0>)
 8007976:	4618      	mov	r0, r3
 8007978:	f7f9 ff8a 	bl	8001890 <DISP_DisplayText>
			if(plan->unit_speed == 0) {
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	7a9b      	ldrb	r3, [r3, #10]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <UI_PlanSetDisplay+0x446>
				DISP_DisplayText(&planset_list_value[i], "Default");
 8007984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007986:	4613      	mov	r3, r2
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	4a66      	ldr	r2, [pc, #408]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 800798e:	4413      	add	r3, r2
 8007990:	4969      	ldr	r1, [pc, #420]	; (8007b38 <UI_PlanSetDisplay+0x5e4>)
 8007992:	4618      	mov	r0, r3
 8007994:	f7f9 ff7c 	bl	8001890 <DISP_DisplayText>
			}
			else {
				sprintf(buff, "%i", plan->unit_speed);
				DISP_DisplayText(&planset_list_value[i], buff);
			}
			break;
 8007998:	e0b4      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
				sprintf(buff, "%i", plan->unit_speed);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	7a9b      	ldrb	r3, [r3, #10]
 800799e:	461a      	mov	r2, r3
 80079a0:	f107 0314 	add.w	r3, r7, #20
 80079a4:	495f      	ldr	r1, [pc, #380]	; (8007b24 <UI_PlanSetDisplay+0x5d0>)
 80079a6:	4618      	mov	r0, r3
 80079a8:	f008 fa10 	bl	800fdcc <siprintf>
				DISP_DisplayText(&planset_list_value[i], buff);
 80079ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ae:	4613      	mov	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	4a5c      	ldr	r2, [pc, #368]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 80079b6:	4413      	add	r3, r2
 80079b8:	f107 0214 	add.w	r2, r7, #20
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f9 ff66 	bl	8001890 <DISP_DisplayText>
			break;
 80079c4:	e09e      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 10:
			DISP_DisplayText(&planset_list_name[i], " Color");
 80079c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c8:	4613      	mov	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	4a53      	ldr	r2, [pc, #332]	; (8007b1c <UI_PlanSetDisplay+0x5c8>)
 80079d0:	4413      	add	r3, r2
 80079d2:	495a      	ldr	r1, [pc, #360]	; (8007b3c <UI_PlanSetDisplay+0x5e8>)
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7f9 ff5b 	bl	8001890 <DISP_DisplayText>
			switch(plan->status) {
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	7adb      	ldrb	r3, [r3, #11]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d01d      	beq.n	8007a1e <UI_PlanSetDisplay+0x4ca>
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	f300 808d 	bgt.w	8007b02 <UI_PlanSetDisplay+0x5ae>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <UI_PlanSetDisplay+0x49e>
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d00b      	beq.n	8007a08 <UI_PlanSetDisplay+0x4b4>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
			}
			break;
 80079f0:	e087      	b.n	8007b02 <UI_PlanSetDisplay+0x5ae>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
 80079f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f4:	4613      	mov	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	4a4b      	ldr	r2, [pc, #300]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 80079fc:	4413      	add	r3, r2
 80079fe:	4950      	ldr	r1, [pc, #320]	; (8007b40 <UI_PlanSetDisplay+0x5ec>)
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7f9 ff45 	bl	8001890 <DISP_DisplayText>
 8007a06:	e015      	b.n	8007a34 <UI_PlanSetDisplay+0x4e0>
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
 8007a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	4a45      	ldr	r2, [pc, #276]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 8007a12:	4413      	add	r3, r2
 8007a14:	494b      	ldr	r1, [pc, #300]	; (8007b44 <UI_PlanSetDisplay+0x5f0>)
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7f9 ff3a 	bl	8001890 <DISP_DisplayText>
 8007a1c:	e00a      	b.n	8007a34 <UI_PlanSetDisplay+0x4e0>
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
 8007a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a20:	4613      	mov	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	4a40      	ldr	r2, [pc, #256]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 8007a28:	4413      	add	r3, r2
 8007a2a:	4947      	ldr	r1, [pc, #284]	; (8007b48 <UI_PlanSetDisplay+0x5f4>)
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7f9 ff2f 	bl	8001890 <DISP_DisplayText>
 8007a32:	bf00      	nop
			break;
 8007a34:	e065      	b.n	8007b02 <UI_PlanSetDisplay+0x5ae>
		case 11:
			DISP_DisplayText(&planset_list_name[i], " Insert");
 8007a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a38:	4613      	mov	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	4a37      	ldr	r2, [pc, #220]	; (8007b1c <UI_PlanSetDisplay+0x5c8>)
 8007a40:	4413      	add	r3, r2
 8007a42:	4942      	ldr	r1, [pc, #264]	; (8007b4c <UI_PlanSetDisplay+0x5f8>)
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7f9 ff23 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8007a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	4a35      	ldr	r2, [pc, #212]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 8007a54:	4413      	add	r3, r2
 8007a56:	493e      	ldr	r1, [pc, #248]	; (8007b50 <UI_PlanSetDisplay+0x5fc>)
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7f9 ff19 	bl	8001890 <DISP_DisplayText>
			break;
 8007a5e:	e051      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 12:
			DISP_DisplayText(&planset_list_name[i], " Delete");
 8007a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a62:	4613      	mov	r3, r2
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	4a2c      	ldr	r2, [pc, #176]	; (8007b1c <UI_PlanSetDisplay+0x5c8>)
 8007a6a:	4413      	add	r3, r2
 8007a6c:	4939      	ldr	r1, [pc, #228]	; (8007b54 <UI_PlanSetDisplay+0x600>)
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f9 ff0e 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8007a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a76:	4613      	mov	r3, r2
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	4a2a      	ldr	r2, [pc, #168]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 8007a7e:	4413      	add	r3, r2
 8007a80:	4933      	ldr	r1, [pc, #204]	; (8007b50 <UI_PlanSetDisplay+0x5fc>)
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7f9 ff04 	bl	8001890 <DISP_DisplayText>
			break;
 8007a88:	e03c      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
		case 13:
			DISP_DisplayText(&planset_list_name[i], " Kp");
 8007a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	1a9b      	subs	r3, r3, r2
 8007a92:	4a22      	ldr	r2, [pc, #136]	; (8007b1c <UI_PlanSetDisplay+0x5c8>)
 8007a94:	4413      	add	r3, r2
 8007a96:	4930      	ldr	r1, [pc, #192]	; (8007b58 <UI_PlanSetDisplay+0x604>)
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7f9 fef9 	bl	8001890 <DISP_DisplayText>
			if(plan->kp == 0) {
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	7b1b      	ldrb	r3, [r3, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <UI_PlanSetDisplay+0x568>
				DISP_DisplayText(&planset_list_value[i], "Default");
 8007aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	4a1e      	ldr	r2, [pc, #120]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 8007ab0:	4413      	add	r3, r2
 8007ab2:	4921      	ldr	r1, [pc, #132]	; (8007b38 <UI_PlanSetDisplay+0x5e4>)
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7f9 feeb 	bl	8001890 <DISP_DisplayText>
			}
			else {
				sprintf(buff, "%2.2f", (float)plan->kp/10.00);
				DISP_DisplayText(&planset_list_value[i], buff);
			}
			break;
 8007aba:	e023      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
				sprintf(buff, "%2.2f", (float)plan->kp/10.00);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	7b1b      	ldrb	r3, [r3, #12]
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac8:	ee17 0a90 	vmov	r0, s15
 8007acc:	f7f8 fd3c 	bl	8000548 <__aeabi_f2d>
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	4b21      	ldr	r3, [pc, #132]	; (8007b5c <UI_PlanSetDisplay+0x608>)
 8007ad6:	f7f8 feb9 	bl	800084c <__aeabi_ddiv>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	f107 0014 	add.w	r0, r7, #20
 8007ae2:	491f      	ldr	r1, [pc, #124]	; (8007b60 <UI_PlanSetDisplay+0x60c>)
 8007ae4:	f008 f972 	bl	800fdcc <siprintf>
				DISP_DisplayText(&planset_list_value[i], buff);
 8007ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aea:	4613      	mov	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	4a0d      	ldr	r2, [pc, #52]	; (8007b28 <UI_PlanSetDisplay+0x5d4>)
 8007af2:	4413      	add	r3, r2
 8007af4:	f107 0214 	add.w	r2, r7, #20
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7f9 fec8 	bl	8001890 <DISP_DisplayText>
			break;
 8007b00:	e000      	b.n	8007b04 <UI_PlanSetDisplay+0x5b0>
			break;
 8007b02:	bf00      	nop
	for(int i=0; i<4; i++) {
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	3301      	adds	r3, #1
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	f77f ad80 	ble.w	8007612 <UI_PlanSetDisplay+0xbe>
		}
	}
}
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	3730      	adds	r7, #48	; 0x30
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	2000112c 	.word	0x2000112c
 8007b20:	0801213c 	.word	0x0801213c
 8007b24:	08012110 	.word	0x08012110
 8007b28:	20001148 	.word	0x20001148
 8007b2c:	08012144 	.word	0x08012144
 8007b30:	08012150 	.word	0x08012150
 8007b34:	08012158 	.word	0x08012158
 8007b38:	08012160 	.word	0x08012160
 8007b3c:	08012168 	.word	0x08012168
 8007b40:	08012170 	.word	0x08012170
 8007b44:	08012178 	.word	0x08012178
 8007b48:	08012180 	.word	0x08012180
 8007b4c:	08012188 	.word	0x08012188
 8007b50:	08012190 	.word	0x08012190
 8007b54:	08012194 	.word	0x08012194
 8007b58:	0801219c 	.word	0x0801219c
 8007b5c:	40240000 	.word	0x40240000
 8007b60:	080121a0 	.word	0x080121a0

08007b64 <UI_PlanSet>:

UI_Menu_Lists UI_PlanSet() {
 8007b64:	b590      	push	{r4, r7, lr}
 8007b66:	b08f      	sub	sp, #60	; 0x3c
 8007b68:	af02      	add	r7, sp, #8
	uint16_t num_index = plan.checkpoint[num_checkpoint];
 8007b6a:	4bc2      	ldr	r3, [pc, #776]	; (8007e74 <UI_PlanSet+0x310>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	4ac2      	ldr	r2, [pc, #776]	; (8007e78 <UI_PlanSet+0x314>)
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	889b      	ldrh	r3, [r3, #4]
 8007b76:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Action_typedef plan_set = GetAction(num_index);
 8007b78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b7a:	f107 0314 	add.w	r3, r7, #20
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fd fdbd 	bl	8005700 <GetAction>
	int8_t num = -1;
 8007b86:	23ff      	movs	r3, #255	; 0xff
 8007b88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t change_status = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	plan_set:
	UI_PlanSetDisplay(num, &plan_set, num_index);
 8007b98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b9a:	f107 0114 	add.w	r1, r7, #20
 8007b9e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff fcd6 	bl	8007554 <UI_PlanSetDisplay>
	tick = HAL_GetTick();
 8007ba8:	f002 fa8a 	bl	800a0c0 <HAL_GetTick>
 8007bac:	6278      	str	r0, [r7, #36]	; 0x24
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8007bae:	f002 fa87 	bl	800a0c0 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007bbc:	2a01      	cmp	r2, #1
 8007bbe:	d101      	bne.n	8007bc4 <UI_PlanSet+0x60>
 8007bc0:	2219      	movs	r2, #25
 8007bc2:	e000      	b.n	8007bc6 <UI_PlanSet+0x62>
 8007bc4:	2246      	movs	r2, #70	; 0x46
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	f200 8439 	bhi.w	800843e <UI_PlanSet+0x8da>

		bt2 = UI_ReadButton();
 8007bcc:	f7fe ffe8 	bl	8006ba0 <UI_ReadButton>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(bt == bt2 && bt_status == 0) continue;
 8007bd6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d104      	bne.n	8007bec <UI_PlanSet+0x88>
 8007be2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 842c 	beq.w	8008444 <UI_PlanSet+0x8e0>
		bt = bt2;
 8007bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bf0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
//		}
//		else if(bt & SW_UP_PRESS) {
//			if(num==0) num = 8; else num--;
//			goto ui_setting;
//		}
		if(bt & SW_HM_PRESS) {
 8007bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <UI_PlanSet+0xa8>
			num = -1;
 8007c00:	23ff      	movs	r3, #255	; 0xff
 8007c02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			return UI_HOMESCREEN;
 8007c06:	2302      	movs	r3, #2
 8007c08:	f000 bc4c 	b.w	80084a4 <UI_PlanSet+0x940>
		}
		if(num != -1) {
 8007c0c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c14:	d03e      	beq.n	8007c94 <UI_PlanSet+0x130>
			if(bt & SW_UP_PRESS) {
 8007c16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d012      	beq.n	8007c48 <UI_PlanSet+0xe4>
				if(num != 0) num--; else num=13;
 8007c22:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d007      	beq.n	8007c3a <UI_PlanSet+0xd6>
 8007c2a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007c38:	e002      	b.n	8007c40 <UI_PlanSet+0xdc>
 8007c3a:	230d      	movs	r3, #13
 8007c3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				bt_status = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c46:	e7a7      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			else if(bt & SW_DW_PRESS) {
 8007c48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d012      	beq.n	8007c7a <UI_PlanSet+0x116>
				if(num != 13) num++; else num=0;
 8007c54:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007c58:	2b0d      	cmp	r3, #13
 8007c5a:	d007      	beq.n	8007c6c <UI_PlanSet+0x108>
 8007c5c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	3301      	adds	r3, #1
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007c6a:	e002      	b.n	8007c72 <UI_PlanSet+0x10e>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				bt_status = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c78:	e78e      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			else if(bt & SW_BK_PRESS) {
 8007c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <UI_PlanSet+0x130>
				bt_status = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				num = -1;
 8007c8c:	23ff      	movs	r3, #255	; 0xff
 8007c8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				goto plan_set;
 8007c92:	e781      	b.n	8007b98 <UI_PlanSet+0x34>
			}
		}
		switch(num) {
 8007c94:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8007c98:	3301      	adds	r3, #1
 8007c9a:	2b0e      	cmp	r3, #14
 8007c9c:	d887      	bhi.n	8007bae <UI_PlanSet+0x4a>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UI_PlanSet+0x140>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007ce1 	.word	0x08007ce1
 8007ca8:	08007e45 	.word	0x08007e45
 8007cac:	08007eb1 	.word	0x08007eb1
 8007cb0:	08007f0f 	.word	0x08007f0f
 8007cb4:	08007f6d 	.word	0x08007f6d
 8007cb8:	08007fcb 	.word	0x08007fcb
 8007cbc:	0800803b 	.word	0x0800803b
 8007cc0:	080080ab 	.word	0x080080ab
 8007cc4:	08008109 	.word	0x08008109
 8007cc8:	08008167 	.word	0x08008167
 8007ccc:	080081c5 	.word	0x080081c5
 8007cd0:	08008223 	.word	0x08008223
 8007cd4:	080082af 	.word	0x080082af
 8007cd8:	0800832f 	.word	0x0800832f
 8007cdc:	080083cf 	.word	0x080083cf
		case -1:
			if(bt & SW_DW_PRESS) {
 8007ce0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <UI_PlanSet+0x1aa>
				if(plan_set.act != 0) plan_set.act--; else plan_set.act=ACT_LIST-1;
 8007cec:	7d3b      	ldrb	r3, [r7, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <UI_PlanSet+0x198>
 8007cf2:	7d3b      	ldrb	r3, [r7, #20]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	753b      	strb	r3, [r7, #20]
 8007cfa:	e001      	b.n	8007d00 <UI_PlanSet+0x19c>
 8007cfc:	230e      	movs	r3, #14
 8007cfe:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007d0c:	e744      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			else if(bt & SW_UP_PRESS) {
 8007d0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d010      	beq.n	8007d3c <UI_PlanSet+0x1d8>
				if(plan_set.act != ACT_LIST-1) plan_set.act++; else plan_set.act=0;
 8007d1a:	7d3b      	ldrb	r3, [r7, #20]
 8007d1c:	2b0e      	cmp	r3, #14
 8007d1e:	d004      	beq.n	8007d2a <UI_PlanSet+0x1c6>
 8007d20:	7d3b      	ldrb	r3, [r7, #20]
 8007d22:	3301      	adds	r3, #1
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	753b      	strb	r3, [r7, #20]
 8007d28:	e001      	b.n	8007d2e <UI_PlanSet+0x1ca>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007d3a:	e72d      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			else if(bt & SW_OK_PRESS) {
 8007d3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d006      	beq.n	8007d56 <UI_PlanSet+0x1f2>
				num = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				bt_status = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007d54:	e720      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			else if(bt & SW_BK_PRESS) {
 8007d56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d5a:	f003 0308 	and.w	r3, r3, #8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d012      	beq.n	8007d88 <UI_PlanSet+0x224>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007d62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d106      	bne.n	8007d78 <UI_PlanSet+0x214>
 8007d6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	f107 0314 	add.w	r3, r7, #20
 8007d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d74:	f7fd fd08 	bl	8005788 <SetAction>
				num = -1;
 8007d78:	23ff      	movs	r3, #255	; 0xff
 8007d7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				bt_status = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				return UI_HOMESCREEN;
 8007d84:	2302      	movs	r3, #2
 8007d86:	e38d      	b.n	80084a4 <UI_PlanSet+0x940>
			}
			else if(bt2 & SW_RG_PRESS) {
 8007d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d028      	beq.n	8007de6 <UI_PlanSet+0x282>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007d94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d106      	bne.n	8007daa <UI_PlanSet+0x246>
 8007d9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	f107 0314 	add.w	r3, r7, #20
 8007da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007da6:	f7fd fcef 	bl	8005788 <SetAction>
				if(num_index != max_index) num_index++; else num_index=0;
 8007daa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dac:	4b33      	ldr	r3, [pc, #204]	; (8007e7c <UI_PlanSet+0x318>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d003      	beq.n	8007dbc <UI_PlanSet+0x258>
 8007db4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007db6:	3301      	adds	r3, #1
 8007db8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007dba:	e001      	b.n	8007dc0 <UI_PlanSet+0x25c>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
				plan_set = GetAction(num_index);
 8007dc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fd fc9a 	bl	8005700 <GetAction>
 8007dcc:	f107 0314 	add.w	r3, r7, #20
 8007dd0:	463c      	mov	r4, r7
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	6861      	ldr	r1, [r4, #4]
 8007dd6:	68a2      	ldr	r2, [r4, #8]
 8007dd8:	c307      	stmia	r3!, {r0, r1, r2}
 8007dda:	7b22      	ldrb	r2, [r4, #12]
 8007ddc:	701a      	strb	r2, [r3, #0]
				bt_status = 1;
 8007dde:	2301      	movs	r3, #1
 8007de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007de4:	e6d8      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			else if(bt2 & SW_LF_PRESS) {
 8007de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 832b 	beq.w	800844a <UI_PlanSet+0x8e6>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007df4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d106      	bne.n	8007e0a <UI_PlanSet+0x2a6>
 8007dfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	f107 0314 	add.w	r3, r7, #20
 8007e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e06:	f7fd fcbf 	bl	8005788 <SetAction>
				if(num_index != 0) num_index--; else num_index=max_index;
 8007e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <UI_PlanSet+0x2b4>
 8007e10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e12:	3b01      	subs	r3, #1
 8007e14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007e16:	e002      	b.n	8007e1e <UI_PlanSet+0x2ba>
 8007e18:	4b18      	ldr	r3, [pc, #96]	; (8007e7c <UI_PlanSet+0x318>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
				plan_set = GetAction(num_index);
 8007e1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e20:	463b      	mov	r3, r7
 8007e22:	4611      	mov	r1, r2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fd fc6b 	bl	8005700 <GetAction>
 8007e2a:	f107 0314 	add.w	r3, r7, #20
 8007e2e:	463c      	mov	r4, r7
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	6861      	ldr	r1, [r4, #4]
 8007e34:	68a2      	ldr	r2, [r4, #8]
 8007e36:	c307      	stmia	r3!, {r0, r1, r2}
 8007e38:	7b22      	ldrb	r2, [r4, #12]
 8007e3a:	701a      	strb	r2, [r3, #0]
				bt_status = 1;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007e42:	e6a9      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 0:
			if(bt & SW_LF_PRESS) {
 8007e44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e48:	f003 0310 	and.w	r3, r3, #16
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d017      	beq.n	8007e80 <UI_PlanSet+0x31c>
				if(plan_set.sen_trig != 0) plan_set.sen_trig--; else plan_set.sen_trig=SENSOR_NUM;
 8007e50:	7d7b      	ldrb	r3, [r7, #21]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <UI_PlanSet+0x2fc>
 8007e56:	7d7b      	ldrb	r3, [r7, #21]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	757b      	strb	r3, [r7, #21]
 8007e5e:	e001      	b.n	8007e64 <UI_PlanSet+0x300>
 8007e60:	230e      	movs	r3, #14
 8007e62:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007e70:	e692      	b.n	8007b98 <UI_PlanSet+0x34>
 8007e72:	bf00      	nop
 8007e74:	20000c3c 	.word	0x20000c3c
 8007e78:	20000f2c 	.word	0x20000f2c
 8007e7c:	20000288 	.word	0x20000288
			}
			if(bt & SW_RG_PRESS) {
 8007e80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 82e1 	beq.w	8008450 <UI_PlanSet+0x8ec>
				if(plan_set.sen_trig != SENSOR_NUM) plan_set.sen_trig++; else plan_set.sen_trig=0;
 8007e8e:	7d7b      	ldrb	r3, [r7, #21]
 8007e90:	2b0e      	cmp	r3, #14
 8007e92:	d004      	beq.n	8007e9e <UI_PlanSet+0x33a>
 8007e94:	7d7b      	ldrb	r3, [r7, #21]
 8007e96:	3301      	adds	r3, #1
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	757b      	strb	r3, [r7, #21]
 8007e9c:	e001      	b.n	8007ea2 <UI_PlanSet+0x33e>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007eae:	e673      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 1:
			if(bt & SW_LF_PRESS) {
 8007eb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d010      	beq.n	8007ede <UI_PlanSet+0x37a>
				if(plan_set.act_mode != 0) plan_set.act_mode--; else plan_set.act_mode=2;
 8007ebc:	7dbb      	ldrb	r3, [r7, #22]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <UI_PlanSet+0x368>
 8007ec2:	7dbb      	ldrb	r3, [r7, #22]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	75bb      	strb	r3, [r7, #22]
 8007eca:	e001      	b.n	8007ed0 <UI_PlanSet+0x36c>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007edc:	e65c      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 8007ede:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 82b5 	beq.w	8008456 <UI_PlanSet+0x8f2>
				if(plan_set.act_mode != 2) plan_set.act_mode++; else plan_set.act_mode=0;
 8007eec:	7dbb      	ldrb	r3, [r7, #22]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d004      	beq.n	8007efc <UI_PlanSet+0x398>
 8007ef2:	7dbb      	ldrb	r3, [r7, #22]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	75bb      	strb	r3, [r7, #22]
 8007efa:	e001      	b.n	8007f00 <UI_PlanSet+0x39c>
 8007efc:	2300      	movs	r3, #0
 8007efe:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007f0c:	e644      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 2:
			if(bt & SW_LF_PRESS) {
 8007f0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f12:	f003 0310 	and.w	r3, r3, #16
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d010      	beq.n	8007f3c <UI_PlanSet+0x3d8>
				if(plan_set.act_value != 0) plan_set.act_value--; else plan_set.act_value=255;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <UI_PlanSet+0x3c6>
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	75fb      	strb	r3, [r7, #23]
 8007f28:	e001      	b.n	8007f2e <UI_PlanSet+0x3ca>
 8007f2a:	23ff      	movs	r3, #255	; 0xff
 8007f2c:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007f3a:	e62d      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 8007f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8289 	beq.w	800845c <UI_PlanSet+0x8f8>
				if(plan_set.act_value != 255) plan_set.act_value++; else plan_set.act_value=0;
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2bff      	cmp	r3, #255	; 0xff
 8007f4e:	d004      	beq.n	8007f5a <UI_PlanSet+0x3f6>
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	3301      	adds	r3, #1
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	75fb      	strb	r3, [r7, #23]
 8007f58:	e001      	b.n	8007f5e <UI_PlanSet+0x3fa>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007f64:	2301      	movs	r3, #1
 8007f66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007f6a:	e615      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 3:
			if(bt & SW_LF_PRESS) {
 8007f6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d010      	beq.n	8007f9a <UI_PlanSet+0x436>
				if(plan_set.brake != 0) plan_set.brake--; else plan_set.brake=255;
 8007f78:	7e3b      	ldrb	r3, [r7, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <UI_PlanSet+0x424>
 8007f7e:	7e3b      	ldrb	r3, [r7, #24]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	763b      	strb	r3, [r7, #24]
 8007f86:	e001      	b.n	8007f8c <UI_PlanSet+0x428>
 8007f88:	23ff      	movs	r3, #255	; 0xff
 8007f8a:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007f98:	e5fe      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 8007f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 825d 	beq.w	8008462 <UI_PlanSet+0x8fe>
				if(plan_set.brake != 255) plan_set.brake++; else plan_set.brake=0;
 8007fa8:	7e3b      	ldrb	r3, [r7, #24]
 8007faa:	2bff      	cmp	r3, #255	; 0xff
 8007fac:	d004      	beq.n	8007fb8 <UI_PlanSet+0x454>
 8007fae:	7e3b      	ldrb	r3, [r7, #24]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	763b      	strb	r3, [r7, #24]
 8007fb6:	e001      	b.n	8007fbc <UI_PlanSet+0x458>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8007fc8:	e5e6      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 4:
			if(bt & SW_LF_PRESS) {
 8007fca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d015      	beq.n	8008002 <UI_PlanSet+0x49e>
				if(plan_set.forward_speed != -99) plan_set.forward_speed--; else plan_set.forward_speed=99;
 8007fd6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007fda:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007fde:	d007      	beq.n	8007ff0 <UI_PlanSet+0x48c>
 8007fe0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	b25b      	sxtb	r3, r3
 8007fec:	767b      	strb	r3, [r7, #25]
 8007fee:	e001      	b.n	8007ff4 <UI_PlanSet+0x490>
 8007ff0:	2363      	movs	r3, #99	; 0x63
 8007ff2:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008000:	e5ca      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 8008002:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 822c 	beq.w	8008468 <UI_PlanSet+0x904>
				if(plan_set.forward_speed != 99) plan_set.forward_speed++; else plan_set.forward_speed=-99;
 8008010:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8008014:	2b63      	cmp	r3, #99	; 0x63
 8008016:	d007      	beq.n	8008028 <UI_PlanSet+0x4c4>
 8008018:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	3301      	adds	r3, #1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	b25b      	sxtb	r3, r3
 8008024:	767b      	strb	r3, [r7, #25]
 8008026:	e001      	b.n	800802c <UI_PlanSet+0x4c8>
 8008028:	239d      	movs	r3, #157	; 0x9d
 800802a:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8008032:	2301      	movs	r3, #1
 8008034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008038:	e5ae      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 5:
			if(bt & SW_LF_PRESS) {
 800803a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b00      	cmp	r3, #0
 8008044:	d015      	beq.n	8008072 <UI_PlanSet+0x50e>
				if(plan_set.reverse_speed != -99) plan_set.reverse_speed--; else plan_set.reverse_speed=99;
 8008046:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800804a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800804e:	d007      	beq.n	8008060 <UI_PlanSet+0x4fc>
 8008050:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	b2db      	uxtb	r3, r3
 800805a:	b25b      	sxtb	r3, r3
 800805c:	76bb      	strb	r3, [r7, #26]
 800805e:	e001      	b.n	8008064 <UI_PlanSet+0x500>
 8008060:	2363      	movs	r3, #99	; 0x63
 8008062:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8008064:	2301      	movs	r3, #1
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008070:	e592      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 8008072:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 81f7 	beq.w	800846e <UI_PlanSet+0x90a>
				if(plan_set.reverse_speed != 99) plan_set.reverse_speed++; else plan_set.reverse_speed=-99;
 8008080:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008084:	2b63      	cmp	r3, #99	; 0x63
 8008086:	d007      	beq.n	8008098 <UI_PlanSet+0x534>
 8008088:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	3301      	adds	r3, #1
 8008090:	b2db      	uxtb	r3, r3
 8008092:	b25b      	sxtb	r3, r3
 8008094:	76bb      	strb	r3, [r7, #26]
 8008096:	e001      	b.n	800809c <UI_PlanSet+0x538>
 8008098:	239d      	movs	r3, #157	; 0x9d
 800809a:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 80080a8:	e576      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 6:
			if(bt & SW_LF_PRESS) {
 80080aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080ae:	f003 0310 	and.w	r3, r3, #16
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d010      	beq.n	80080d8 <UI_PlanSet+0x574>
				if(plan_set.wait_time != 0) plan_set.wait_time--; else plan_set.wait_time=255;
 80080b6:	7efb      	ldrb	r3, [r7, #27]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <UI_PlanSet+0x562>
 80080bc:	7efb      	ldrb	r3, [r7, #27]
 80080be:	3b01      	subs	r3, #1
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	76fb      	strb	r3, [r7, #27]
 80080c4:	e001      	b.n	80080ca <UI_PlanSet+0x566>
 80080c6:	23ff      	movs	r3, #255	; 0xff
 80080c8:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 80080d0:	2301      	movs	r3, #1
 80080d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 80080d6:	e55f      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 80080d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 81c7 	beq.w	8008474 <UI_PlanSet+0x910>
				if(plan_set.wait_time != 255) plan_set.wait_time++; else plan_set.wait_time=0;
 80080e6:	7efb      	ldrb	r3, [r7, #27]
 80080e8:	2bff      	cmp	r3, #255	; 0xff
 80080ea:	d004      	beq.n	80080f6 <UI_PlanSet+0x592>
 80080ec:	7efb      	ldrb	r3, [r7, #27]
 80080ee:	3301      	adds	r3, #1
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	76fb      	strb	r3, [r7, #27]
 80080f4:	e001      	b.n	80080fa <UI_PlanSet+0x596>
 80080f6:	2300      	movs	r3, #0
 80080f8:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008106:	e547      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 7:
			if(bt & SW_LF_PRESS) {
 8008108:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	d010      	beq.n	8008136 <UI_PlanSet+0x5d2>
				if(plan_set.boost_time != 0) plan_set.boost_time--; else plan_set.boost_time=255;
 8008114:	7f3b      	ldrb	r3, [r7, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <UI_PlanSet+0x5c0>
 800811a:	7f3b      	ldrb	r3, [r7, #28]
 800811c:	3b01      	subs	r3, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	773b      	strb	r3, [r7, #28]
 8008122:	e001      	b.n	8008128 <UI_PlanSet+0x5c4>
 8008124:	23ff      	movs	r3, #255	; 0xff
 8008126:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8008128:	2301      	movs	r3, #1
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008134:	e530      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 8008136:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 819b 	beq.w	800847a <UI_PlanSet+0x916>
				if(plan_set.boost_time != 255) plan_set.boost_time++; else plan_set.boost_time=0;
 8008144:	7f3b      	ldrb	r3, [r7, #28]
 8008146:	2bff      	cmp	r3, #255	; 0xff
 8008148:	d004      	beq.n	8008154 <UI_PlanSet+0x5f0>
 800814a:	7f3b      	ldrb	r3, [r7, #28]
 800814c:	3301      	adds	r3, #1
 800814e:	b2db      	uxtb	r3, r3
 8008150:	773b      	strb	r3, [r7, #28]
 8008152:	e001      	b.n	8008158 <UI_PlanSet+0x5f4>
 8008154:	2300      	movs	r3, #0
 8008156:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008164:	e518      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 8:
			if(bt & SW_LF_PRESS) {
 8008166:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	2b00      	cmp	r3, #0
 8008170:	d010      	beq.n	8008194 <UI_PlanSet+0x630>
				if(plan_set.boost_speed != 0) plan_set.boost_speed--; else plan_set.boost_speed=255;
 8008172:	7f7b      	ldrb	r3, [r7, #29]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d004      	beq.n	8008182 <UI_PlanSet+0x61e>
 8008178:	7f7b      	ldrb	r3, [r7, #29]
 800817a:	3b01      	subs	r3, #1
 800817c:	b2db      	uxtb	r3, r3
 800817e:	777b      	strb	r3, [r7, #29]
 8008180:	e001      	b.n	8008186 <UI_PlanSet+0x622>
 8008182:	23ff      	movs	r3, #255	; 0xff
 8008184:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 8008186:	2301      	movs	r3, #1
 8008188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008192:	e501      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 8008194:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 816f 	beq.w	8008480 <UI_PlanSet+0x91c>
				if(plan_set.boost_speed != 255) plan_set.boost_speed++; else plan_set.boost_speed=0;
 80081a2:	7f7b      	ldrb	r3, [r7, #29]
 80081a4:	2bff      	cmp	r3, #255	; 0xff
 80081a6:	d004      	beq.n	80081b2 <UI_PlanSet+0x64e>
 80081a8:	7f7b      	ldrb	r3, [r7, #29]
 80081aa:	3301      	adds	r3, #1
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	777b      	strb	r3, [r7, #29]
 80081b0:	e001      	b.n	80081b6 <UI_PlanSet+0x652>
 80081b2:	2300      	movs	r3, #0
 80081b4:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 80081bc:	2301      	movs	r3, #1
 80081be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 80081c2:	e4e9      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 9:
			if(bt & SW_LF_PRESS) {
 80081c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081c8:	f003 0310 	and.w	r3, r3, #16
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d010      	beq.n	80081f2 <UI_PlanSet+0x68e>
				if(plan_set.unit_speed != 0) plan_set.unit_speed--; else plan_set.unit_speed=255;
 80081d0:	7fbb      	ldrb	r3, [r7, #30]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <UI_PlanSet+0x67c>
 80081d6:	7fbb      	ldrb	r3, [r7, #30]
 80081d8:	3b01      	subs	r3, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	77bb      	strb	r3, [r7, #30]
 80081de:	e001      	b.n	80081e4 <UI_PlanSet+0x680>
 80081e0:	23ff      	movs	r3, #255	; 0xff
 80081e2:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 80081f0:	e4d2      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 80081f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8143 	beq.w	8008486 <UI_PlanSet+0x922>
				if(plan_set.unit_speed != 255) plan_set.unit_speed++; else plan_set.unit_speed=0;
 8008200:	7fbb      	ldrb	r3, [r7, #30]
 8008202:	2bff      	cmp	r3, #255	; 0xff
 8008204:	d004      	beq.n	8008210 <UI_PlanSet+0x6ac>
 8008206:	7fbb      	ldrb	r3, [r7, #30]
 8008208:	3301      	adds	r3, #1
 800820a:	b2db      	uxtb	r3, r3
 800820c:	77bb      	strb	r3, [r7, #30]
 800820e:	e001      	b.n	8008214 <UI_PlanSet+0x6b0>
 8008210:	2300      	movs	r3, #0
 8008212:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 800821a:	2301      	movs	r3, #1
 800821c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008220:	e4ba      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 10:
			if(bt & SW_LF_PRESS) {
 8008222:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01d      	beq.n	800826a <UI_PlanSet+0x706>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 0) ADD_LINE_COLOR_STAT(plan_set.status,-1) else SET_LINE_COLOR_STAT(plan_set.status,2);
 800822e:	7ffb      	ldrb	r3, [r7, #31]
 8008230:	f003 0303 	and.w	r3, r3, #3
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <UI_PlanSet+0x6e4>
 8008238:	7ffb      	ldrb	r3, [r7, #31]
 800823a:	3b01      	subs	r3, #1
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	b2db      	uxtb	r3, r3
 8008244:	77fb      	strb	r3, [r7, #31]
 8008246:	e009      	b.n	800825c <UI_PlanSet+0x6f8>
 8008248:	7ffb      	ldrb	r3, [r7, #31]
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	b2db      	uxtb	r3, r3
 8008250:	77fb      	strb	r3, [r7, #31]
 8008252:	7ffb      	ldrb	r3, [r7, #31]
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	b2db      	uxtb	r3, r3
 800825a:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 800825c:	2301      	movs	r3, #1
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8008262:	2301      	movs	r3, #1
 8008264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008268:	e496      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 800826a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 810a 	beq.w	800848c <UI_PlanSet+0x928>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 2) ADD_LINE_COLOR_STAT(plan_set.status,1) else SET_LINE_COLOR_STAT(plan_set.status, 0);
 8008278:	7ffb      	ldrb	r3, [r7, #31]
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d007      	beq.n	8008292 <UI_PlanSet+0x72e>
 8008282:	7ffb      	ldrb	r3, [r7, #31]
 8008284:	3301      	adds	r3, #1
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	b2db      	uxtb	r3, r3
 800828e:	77fb      	strb	r3, [r7, #31]
 8008290:	e006      	b.n	80082a0 <UI_PlanSet+0x73c>
 8008292:	7ffb      	ldrb	r3, [r7, #31]
 8008294:	f023 0303 	bic.w	r3, r3, #3
 8008298:	b2db      	uxtb	r3, r3
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	7ffb      	ldrb	r3, [r7, #31]
 800829e:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 80082ac:	e474      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 11:
			if(bt & SW_OK_PRESS) {
 80082ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 80eb 	beq.w	8008492 <UI_PlanSet+0x92e>
				DISP_DisplayText(&short_message, "Insert action?");
 80082bc:	497b      	ldr	r1, [pc, #492]	; (80084ac <UI_PlanSet+0x948>)
 80082be:	487c      	ldr	r0, [pc, #496]	; (80084b0 <UI_PlanSet+0x94c>)
 80082c0:	f7f9 fae6 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 80082c4:	f7fe fc6c 	bl	8006ba0 <UI_ReadButton>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d01e      	beq.n	8008312 <UI_PlanSet+0x7ae>
					bt = UI_ReadButton();
 80082d4:	f7fe fc64 	bl	8006ba0 <UI_ReadButton>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					if(bt & SW_OK_PRESS) {
 80082de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00c      	beq.n	8008304 <UI_PlanSet+0x7a0>
						DISP_DisplayText(&short_message, "Inserting");
 80082ea:	4972      	ldr	r1, [pc, #456]	; (80084b4 <UI_PlanSet+0x950>)
 80082ec:	4870      	ldr	r0, [pc, #448]	; (80084b0 <UI_PlanSet+0x94c>)
 80082ee:	f7f9 facf 	bl	8001890 <DISP_DisplayText>
						Storage_InsertAction(num_index);
 80082f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fd fedd 	bl	80060b4 <Storage_InsertAction>
						DISP_DisplayText(&short_message, "Insert Done!");
 80082fa:	496f      	ldr	r1, [pc, #444]	; (80084b8 <UI_PlanSet+0x954>)
 80082fc:	486c      	ldr	r0, [pc, #432]	; (80084b0 <UI_PlanSet+0x94c>)
 80082fe:	f7f9 fac7 	bl	8001890 <DISP_DisplayText>
						break;
 8008302:	e009      	b.n	8008318 <UI_PlanSet+0x7b4>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8008304:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d102      	bne.n	8008316 <UI_PlanSet+0x7b2>
 8008310:	e7d8      	b.n	80082c4 <UI_PlanSet+0x760>
					if(bt == UI_ReadButton()) continue;
 8008312:	bf00      	nop
 8008314:	e7d6      	b.n	80082c4 <UI_PlanSet+0x760>
						break;
 8008316:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 8008318:	4968      	ldr	r1, [pc, #416]	; (80084bc <UI_PlanSet+0x958>)
 800831a:	4869      	ldr	r0, [pc, #420]	; (80084c0 <UI_PlanSet+0x95c>)
 800831c:	f7f9 fab8 	bl	8001890 <DISP_DisplayText>
				bt_status = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8008326:	2301      	movs	r3, #1
 8008328:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 800832c:	e434      	b.n	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 12:
			if(bt & SW_OK_PRESS) {
 800832e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80ae 	beq.w	8008498 <UI_PlanSet+0x934>
				DISP_DisplayText(&short_message, "Delete this action?");
 800833c:	4961      	ldr	r1, [pc, #388]	; (80084c4 <UI_PlanSet+0x960>)
 800833e:	485c      	ldr	r0, [pc, #368]	; (80084b0 <UI_PlanSet+0x94c>)
 8008340:	f7f9 faa6 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 8008344:	f7fe fc2c 	bl	8006ba0 <UI_ReadButton>
 8008348:	4603      	mov	r3, r0
 800834a:	461a      	mov	r2, r3
 800834c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008350:	4293      	cmp	r3, r2
 8008352:	d02d      	beq.n	80083b0 <UI_PlanSet+0x84c>
					bt = UI_ReadButton();
 8008354:	f7fe fc24 	bl	8006ba0 <UI_ReadButton>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					if(bt & SW_OK_PRESS) {
 800835e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	d01b      	beq.n	80083a2 <UI_PlanSet+0x83e>
						DISP_DisplayText(&short_message, "Deleting");
 800836a:	4957      	ldr	r1, [pc, #348]	; (80084c8 <UI_PlanSet+0x964>)
 800836c:	4850      	ldr	r0, [pc, #320]	; (80084b0 <UI_PlanSet+0x94c>)
 800836e:	f7f9 fa8f 	bl	8001890 <DISP_DisplayText>
						Storage_DeleteAction(num_index);
 8008372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008374:	4618      	mov	r0, r3
 8008376:	f7fd fec7 	bl	8006108 <Storage_DeleteAction>
						DISP_DisplayText(&short_message, "Delete Done!");
 800837a:	4954      	ldr	r1, [pc, #336]	; (80084cc <UI_PlanSet+0x968>)
 800837c:	484c      	ldr	r0, [pc, #304]	; (80084b0 <UI_PlanSet+0x94c>)
 800837e:	f7f9 fa87 	bl	8001890 <DISP_DisplayText>
						plan_set = GetAction(num_index);
 8008382:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008384:	463b      	mov	r3, r7
 8008386:	4611      	mov	r1, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd f9b9 	bl	8005700 <GetAction>
 800838e:	f107 0314 	add.w	r3, r7, #20
 8008392:	463c      	mov	r4, r7
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	6861      	ldr	r1, [r4, #4]
 8008398:	68a2      	ldr	r2, [r4, #8]
 800839a:	c307      	stmia	r3!, {r0, r1, r2}
 800839c:	7b22      	ldrb	r2, [r4, #12]
 800839e:	701a      	strb	r2, [r3, #0]
						break;
 80083a0:	e009      	b.n	80083b6 <UI_PlanSet+0x852>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 80083a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <UI_PlanSet+0x850>
 80083ae:	e7c9      	b.n	8008344 <UI_PlanSet+0x7e0>
					if(bt == UI_ReadButton()) continue;
 80083b0:	bf00      	nop
 80083b2:	e7c7      	b.n	8008344 <UI_PlanSet+0x7e0>
						break;
 80083b4:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 80083b6:	4941      	ldr	r1, [pc, #260]	; (80084bc <UI_PlanSet+0x958>)
 80083b8:	4841      	ldr	r0, [pc, #260]	; (80084c0 <UI_PlanSet+0x95c>)
 80083ba:	f7f9 fa69 	bl	8001890 <DISP_DisplayText>
				bt_status = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 80083ca:	f7ff bbe5 	b.w	8007b98 <UI_PlanSet+0x34>
			}
			break;
		case 13:
			if(bt & SW_LF_PRESS) {
 80083ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083d2:	f003 0310 	and.w	r3, r3, #16
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d015      	beq.n	8008406 <UI_PlanSet+0x8a2>
				if(plan_set.kp != 0) plan_set.kp--; else plan_set.kp=255;
 80083da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d006      	beq.n	80083f0 <UI_PlanSet+0x88c>
 80083e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	f887 3020 	strb.w	r3, [r7, #32]
 80083ee:	e002      	b.n	80083f6 <UI_PlanSet+0x892>
 80083f0:	23ff      	movs	r3, #255	; 0xff
 80083f2:	f887 3020 	strb.w	r3, [r7, #32]
				bt_status = 1;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 8008402:	f7ff bbc9 	b.w	8007b98 <UI_PlanSet+0x34>
			}
			if(bt & SW_RG_PRESS) {
 8008406:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d045      	beq.n	800849e <UI_PlanSet+0x93a>
				if(plan_set.kp != 255) plan_set.kp++; else plan_set.kp=0;
 8008412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008416:	2bff      	cmp	r3, #255	; 0xff
 8008418:	d006      	beq.n	8008428 <UI_PlanSet+0x8c4>
 800841a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800841e:	3301      	adds	r3, #1
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f887 3020 	strb.w	r3, [r7, #32]
 8008426:	e002      	b.n	800842e <UI_PlanSet+0x8ca>
 8008428:	2300      	movs	r3, #0
 800842a:	f887 3020 	strb.w	r3, [r7, #32]
				bt_status = 1;
 800842e:	2301      	movs	r3, #1
 8008430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				change_status = 1;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				goto plan_set;
 800843a:	f7ff bbad 	b.w	8007b98 <UI_PlanSet+0x34>
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 800843e:	bf00      	nop
 8008440:	f7ff bbb5 	b.w	8007bae <UI_PlanSet+0x4a>
		if(bt == bt2 && bt_status == 0) continue;
 8008444:	bf00      	nop
 8008446:	f7ff bbb2 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 800844a:	bf00      	nop
 800844c:	f7ff bbaf 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008450:	bf00      	nop
 8008452:	f7ff bbac 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008456:	bf00      	nop
 8008458:	f7ff bba9 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 800845c:	bf00      	nop
 800845e:	f7ff bba6 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008462:	bf00      	nop
 8008464:	f7ff bba3 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008468:	bf00      	nop
 800846a:	f7ff bba0 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 800846e:	bf00      	nop
 8008470:	f7ff bb9d 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008474:	bf00      	nop
 8008476:	f7ff bb9a 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 800847a:	bf00      	nop
 800847c:	f7ff bb97 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008480:	bf00      	nop
 8008482:	f7ff bb94 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008486:	bf00      	nop
 8008488:	f7ff bb91 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 800848c:	bf00      	nop
 800848e:	f7ff bb8e 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008492:	bf00      	nop
 8008494:	f7ff bb8b 	b.w	8007bae <UI_PlanSet+0x4a>
			break;
 8008498:	bf00      	nop
 800849a:	f7ff bb88 	b.w	8007bae <UI_PlanSet+0x4a>
			}
			break;
 800849e:	bf00      	nop
 80084a0:	f7ff bb85 	b.w	8007bae <UI_PlanSet+0x4a>
		}
	}
	return UI_IDLE;
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3734      	adds	r7, #52	; 0x34
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd90      	pop	{r4, r7, pc}
 80084ac:	080121a8 	.word	0x080121a8
 80084b0:	200010d4 	.word	0x200010d4
 80084b4:	080121b8 	.word	0x080121b8
 80084b8:	080121c4 	.word	0x080121c4
 80084bc:	08012190 	.word	0x08012190
 80084c0:	200010dc 	.word	0x200010dc
 80084c4:	080121d4 	.word	0x080121d4
 80084c8:	080121e8 	.word	0x080121e8
 80084cc:	080121f4 	.word	0x080121f4

080084d0 <UI_ADCThresholdDisplayInit>:

DISP_Text_Typedef adc_menu[2];
DISP_Text_Typedef adc_head;
DISP_Text_Typedef adc_point;

void UI_ADCThresholdDisplayInit() {
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
	adc_menu[0].origin_x = 4;
 80084d4:	4b24      	ldr	r3, [pc, #144]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 80084d6:	2204      	movs	r2, #4
 80084d8:	701a      	strb	r2, [r3, #0]
	adc_menu[0].origin_y = 50;
 80084da:	4b23      	ldr	r3, [pc, #140]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 80084dc:	2232      	movs	r2, #50	; 0x32
 80084de:	705a      	strb	r2, [r3, #1]
	adc_menu[0].size_x = 58;
 80084e0:	4b21      	ldr	r3, [pc, #132]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 80084e2:	223a      	movs	r2, #58	; 0x3a
 80084e4:	70da      	strb	r2, [r3, #3]
	adc_menu[0].size_y = 11;
 80084e6:	4b20      	ldr	r3, [pc, #128]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 80084e8:	220b      	movs	r2, #11
 80084ea:	711a      	strb	r2, [r3, #4]
	adc_menu[0].color = DISP_COLOR_BLACK;
 80084ec:	4b1e      	ldr	r3, [pc, #120]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	709a      	strb	r2, [r3, #2]
	adc_menu[0].align_y = DISP_ALIGN_CENTER;
 80084f2:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 80084f4:	2202      	movs	r2, #2
 80084f6:	719a      	strb	r2, [r3, #6]
	adc_menu[0].align_x = DISP_ALIGN_CENTER;
 80084f8:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 80084fa:	2202      	movs	r2, #2
 80084fc:	715a      	strb	r2, [r3, #5]

	adc_menu[1] = adc_menu[0];
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 8008500:	4a19      	ldr	r2, [pc, #100]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 8008502:	3307      	adds	r3, #7
 8008504:	6810      	ldr	r0, [r2, #0]
 8008506:	6018      	str	r0, [r3, #0]
 8008508:	8891      	ldrh	r1, [r2, #4]
 800850a:	7992      	ldrb	r2, [r2, #6]
 800850c:	8099      	strh	r1, [r3, #4]
 800850e:	719a      	strb	r2, [r3, #6]
	adc_menu[1].origin_x = 63;
 8008510:	4b15      	ldr	r3, [pc, #84]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 8008512:	223f      	movs	r2, #63	; 0x3f
 8008514:	71da      	strb	r2, [r3, #7]
	adc_menu[1].size_x = 60;
 8008516:	4b14      	ldr	r3, [pc, #80]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 8008518:	223c      	movs	r2, #60	; 0x3c
 800851a:	729a      	strb	r2, [r3, #10]
	adc_menu[1].color = DISP_COLOR_WHITE;
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <UI_ADCThresholdDisplayInit+0x98>)
 800851e:	2200      	movs	r2, #0
 8008520:	725a      	strb	r2, [r3, #9]

	adc_head.origin_x = 0;
 8008522:	4b12      	ldr	r3, [pc, #72]	; (800856c <UI_ADCThresholdDisplayInit+0x9c>)
 8008524:	2200      	movs	r2, #0
 8008526:	701a      	strb	r2, [r3, #0]
	adc_head.origin_y = 0;
 8008528:	4b10      	ldr	r3, [pc, #64]	; (800856c <UI_ADCThresholdDisplayInit+0x9c>)
 800852a:	2200      	movs	r2, #0
 800852c:	705a      	strb	r2, [r3, #1]
	adc_head.size_x = 127;
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <UI_ADCThresholdDisplayInit+0x9c>)
 8008530:	227f      	movs	r2, #127	; 0x7f
 8008532:	70da      	strb	r2, [r3, #3]
	adc_head.size_y = 10;
 8008534:	4b0d      	ldr	r3, [pc, #52]	; (800856c <UI_ADCThresholdDisplayInit+0x9c>)
 8008536:	220a      	movs	r2, #10
 8008538:	711a      	strb	r2, [r3, #4]
	adc_head.color = DISP_COLOR_BLACK;
 800853a:	4b0c      	ldr	r3, [pc, #48]	; (800856c <UI_ADCThresholdDisplayInit+0x9c>)
 800853c:	2201      	movs	r2, #1
 800853e:	709a      	strb	r2, [r3, #2]
	adc_head.align_x = DISP_ALIGN_CENTER;
 8008540:	4b0a      	ldr	r3, [pc, #40]	; (800856c <UI_ADCThresholdDisplayInit+0x9c>)
 8008542:	2202      	movs	r2, #2
 8008544:	715a      	strb	r2, [r3, #5]
	adc_head.align_y = DISP_ALIGN_CENTER;
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <UI_ADCThresholdDisplayInit+0x9c>)
 8008548:	2202      	movs	r2, #2
 800854a:	719a      	strb	r2, [r3, #6]

	adc_point.origin_y = 32;
 800854c:	4b08      	ldr	r3, [pc, #32]	; (8008570 <UI_ADCThresholdDisplayInit+0xa0>)
 800854e:	2220      	movs	r2, #32
 8008550:	705a      	strb	r2, [r3, #1]
	adc_point.size_x = SENSOR_WIDTH_SEN;
 8008552:	4b07      	ldr	r3, [pc, #28]	; (8008570 <UI_ADCThresholdDisplayInit+0xa0>)
 8008554:	2206      	movs	r2, #6
 8008556:	70da      	strb	r2, [r3, #3]
	adc_point.align_x = DISP_ALIGN_CENTER;
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <UI_ADCThresholdDisplayInit+0xa0>)
 800855a:	2202      	movs	r2, #2
 800855c:	715a      	strb	r2, [r3, #5]

}
 800855e:	bf00      	nop
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	2000116c 	.word	0x2000116c
 800856c:	2000117c 	.word	0x2000117c
 8008570:	20001184 	.word	0x20001184

08008574 <UI_ADCThresholdDisplay>:

void UI_ADCThresholdDisplay(uint8_t num) {
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	71fb      	strb	r3, [r7, #7]
	static uint8_t last_num = 1;
	char buff[22];
	if(last_num != num) {
 800857e:	4b2d      	ldr	r3, [pc, #180]	; (8008634 <UI_ADCThresholdDisplay+0xc0>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	79fa      	ldrb	r2, [r7, #7]
 8008584:	429a      	cmp	r2, r3
 8008586:	d03e      	beq.n	8008606 <UI_ADCThresholdDisplay+0x92>
		sprintf(buff, "ADC ~ %i", num+1);
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	4929      	ldr	r1, [pc, #164]	; (8008638 <UI_ADCThresholdDisplay+0xc4>)
 8008592:	4618      	mov	r0, r3
 8008594:	f007 fc1a 	bl	800fdcc <siprintf>
		DISP_DisplayText(&adc_head, buff);
 8008598:	f107 0310 	add.w	r3, r7, #16
 800859c:	4619      	mov	r1, r3
 800859e:	4827      	ldr	r0, [pc, #156]	; (800863c <UI_ADCThresholdDisplay+0xc8>)
 80085a0:	f7f9 f976 	bl	8001890 <DISP_DisplayText>

		uint8_t point_x = (last_num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 80085a4:	4b23      	ldr	r3, [pc, #140]	; (8008634 <UI_ADCThresholdDisplay+0xc0>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	00d2      	lsls	r2, r2, #3
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	4b23      	ldr	r3, [pc, #140]	; (8008640 <UI_ADCThresholdDisplay+0xcc>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	3b01      	subs	r3, #1
 80085ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char point[] = " ";
 80085be:	2320      	movs	r3, #32
 80085c0:	81bb      	strh	r3, [r7, #12]
		adc_point.origin_x = point_x;
 80085c2:	4a20      	ldr	r2, [pc, #128]	; (8008644 <UI_ADCThresholdDisplay+0xd0>)
 80085c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c8:	7013      	strb	r3, [r2, #0]
		DISP_DisplayText(&adc_point, point);
 80085ca:	f107 030c 	add.w	r3, r7, #12
 80085ce:	4619      	mov	r1, r3
 80085d0:	481c      	ldr	r0, [pc, #112]	; (8008644 <UI_ADCThresholdDisplay+0xd0>)
 80085d2:	f7f9 f95d 	bl	8001890 <DISP_DisplayText>

		point[0] = '~'+2;
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	733b      	strb	r3, [r7, #12]
		adc_point.origin_x = (num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	461a      	mov	r2, r3
 80085de:	00d2      	lsls	r2, r2, #3
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	4b16      	ldr	r3, [pc, #88]	; (8008640 <UI_ADCThresholdDisplay+0xcc>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	4413      	add	r3, r2
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	4b14      	ldr	r3, [pc, #80]	; (8008644 <UI_ADCThresholdDisplay+0xd0>)
 80085f2:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&adc_point, point);
 80085f4:	f107 030c 	add.w	r3, r7, #12
 80085f8:	4619      	mov	r1, r3
 80085fa:	4812      	ldr	r0, [pc, #72]	; (8008644 <UI_ADCThresholdDisplay+0xd0>)
 80085fc:	f7f9 f948 	bl	8001890 <DISP_DisplayText>

		last_num = num;
 8008600:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <UI_ADCThresholdDisplay+0xc0>)
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	7013      	strb	r3, [r2, #0]
	}
	sprintf(buff, "Tr %4i", threshold_sensor[SENSOR_NUM-num-1]);
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	f1c3 030d 	rsb	r3, r3, #13
 800860c:	4a0e      	ldr	r2, [pc, #56]	; (8008648 <UI_ADCThresholdDisplay+0xd4>)
 800860e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008612:	461a      	mov	r2, r3
 8008614:	f107 0310 	add.w	r3, r7, #16
 8008618:	490c      	ldr	r1, [pc, #48]	; (800864c <UI_ADCThresholdDisplay+0xd8>)
 800861a:	4618      	mov	r0, r3
 800861c:	f007 fbd6 	bl	800fdcc <siprintf>
	DISP_DisplayText(&adc_menu[0], buff);
 8008620:	f107 0310 	add.w	r3, r7, #16
 8008624:	4619      	mov	r1, r3
 8008626:	480a      	ldr	r0, [pc, #40]	; (8008650 <UI_ADCThresholdDisplay+0xdc>)
 8008628:	f7f9 f932 	bl	8001890 <DISP_DisplayText>

}
 800862c:	bf00      	nop
 800862e:	3728      	adds	r7, #40	; 0x28
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	20000328 	.word	0x20000328
 8008638:	08012204 	.word	0x08012204
 800863c:	2000117c 	.word	0x2000117c
 8008640:	20000290 	.word	0x20000290
 8008644:	20001184 	.word	0x20001184
 8008648:	20000ba8 	.word	0x20000ba8
 800864c:	08012210 	.word	0x08012210
 8008650:	2000116c 	.word	0x2000116c

08008654 <UI_ADCThreshold>:

UI_Menu_Lists UI_ADCThreshold() {
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	77bb      	strb	r3, [r7, #30]
	uint8_t num_sen = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	777b      	strb	r3, [r7, #29]
	uint8_t actual_num_sen = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	773b      	strb	r3, [r7, #28]
	char buff[22];
	Storage_GetADCThreshold();
 8008666:	f7fd fa13 	bl	8005a90 <Storage_GetADCThreshold>
	UI_ADCThresholdDisplay(num_sen+1);
 800866a:	7f7b      	ldrb	r3, [r7, #29]
 800866c:	3301      	adds	r3, #1
 800866e:	b2db      	uxtb	r3, r3
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff ff7f 	bl	8008574 <UI_ADCThresholdDisplay>
	adctreshold:
	UI_ADCThresholdDisplay(num_sen);
 8008676:	7f7b      	ldrb	r3, [r7, #29]
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff ff7b 	bl	8008574 <UI_ADCThresholdDisplay>
	tick = HAL_GetTick();
 800867e:	f001 fd1f 	bl	800a0c0 <HAL_GetTick>
 8008682:	61b8      	str	r0, [r7, #24]
	while(1) {
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8008684:	7f7b      	ldrb	r3, [r7, #29]
 8008686:	f1c3 030d 	rsb	r3, r3, #13
 800868a:	773b      	strb	r3, [r7, #28]
		if(UI_ShowSensor()) {
 800868c:	f7fe fa0a 	bl	8006aa4 <UI_ShowSensor>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00e      	beq.n	80086b4 <UI_ADCThreshold+0x60>
			sprintf(buff, "ADC %4i", adc_sensor_arranged[actual_num_sen]);
 8008696:	7f3b      	ldrb	r3, [r7, #28]
 8008698:	4a52      	ldr	r2, [pc, #328]	; (80087e4 <UI_ADCThreshold+0x190>)
 800869a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869e:	461a      	mov	r2, r3
 80086a0:	463b      	mov	r3, r7
 80086a2:	4951      	ldr	r1, [pc, #324]	; (80087e8 <UI_ADCThreshold+0x194>)
 80086a4:	4618      	mov	r0, r3
 80086a6:	f007 fb91 	bl	800fdcc <siprintf>
			DISP_DisplayText(&adc_menu[1], buff);
 80086aa:	463b      	mov	r3, r7
 80086ac:	4619      	mov	r1, r3
 80086ae:	484f      	ldr	r0, [pc, #316]	; (80087ec <UI_ADCThreshold+0x198>)
 80086b0:	f7f9 f8ee 	bl	8001890 <DISP_DisplayText>
		}

		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 80086b4:	f001 fd04 	bl	800a0c0 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	7fba      	ldrb	r2, [r7, #30]
 80086c0:	2a01      	cmp	r2, #1
 80086c2:	d101      	bne.n	80086c8 <UI_ADCThreshold+0x74>
 80086c4:	2214      	movs	r2, #20
 80086c6:	e000      	b.n	80086ca <UI_ADCThreshold+0x76>
 80086c8:	2246      	movs	r2, #70	; 0x46
 80086ca:	429a      	cmp	r2, r3
 80086cc:	f200 8081 	bhi.w	80087d2 <UI_ADCThreshold+0x17e>

		bt2 = UI_ReadButton();
 80086d0:	f7fe fa66 	bl	8006ba0 <UI_ReadButton>
 80086d4:	4603      	mov	r3, r0
 80086d6:	75fb      	strb	r3, [r7, #23]

		if(bt == bt2 && bt_status == 0) continue;
 80086d8:	7ffa      	ldrb	r2, [r7, #31]
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d102      	bne.n	80086e6 <UI_ADCThreshold+0x92>
 80086e0:	7fbb      	ldrb	r3, [r7, #30]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d077      	beq.n	80087d6 <UI_ADCThreshold+0x182>
		bt = bt2;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	77fb      	strb	r3, [r7, #31]

		if(bt & SW_HM_PRESS) {
 80086ea:	7ffb      	ldrb	r3, [r7, #31]
 80086ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <UI_ADCThreshold+0xa8>
			num_sen = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	777b      	strb	r3, [r7, #29]
			return UI_HOMESCREEN;
 80086f8:	2302      	movs	r3, #2
 80086fa:	e06e      	b.n	80087da <UI_ADCThreshold+0x186>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 80086fc:	7ffb      	ldrb	r3, [r7, #31]
 80086fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <UI_ADCThreshold+0xbe>
			Storage_SetADCThreshold();
 8008706:	f7fd f9e7 	bl	8005ad8 <Storage_SetADCThreshold>
			num_sen = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	777b      	strb	r3, [r7, #29]
			return UI_SET;
 800870e:	2307      	movs	r3, #7
 8008710:	e063      	b.n	80087da <UI_ADCThreshold+0x186>
		}
		else if(bt & SW_LF_PRESS) {
 8008712:	7ffb      	ldrb	r3, [r7, #31]
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <UI_ADCThreshold+0xe0>
			if(num_sen != 0) num_sen--; else num_sen=SENSOR_NUM-1;
 800871c:	7f7b      	ldrb	r3, [r7, #29]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <UI_ADCThreshold+0xd6>
 8008722:	7f7b      	ldrb	r3, [r7, #29]
 8008724:	3b01      	subs	r3, #1
 8008726:	777b      	strb	r3, [r7, #29]
 8008728:	e001      	b.n	800872e <UI_ADCThreshold+0xda>
 800872a:	230d      	movs	r3, #13
 800872c:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8008732:	e7a0      	b.n	8008676 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_RG_PRESS) {
 8008734:	7ffb      	ldrb	r3, [r7, #31]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <UI_ADCThreshold+0x102>
			if(num_sen != SENSOR_NUM-1) num_sen++; else num_sen=0;
 800873e:	7f7b      	ldrb	r3, [r7, #29]
 8008740:	2b0d      	cmp	r3, #13
 8008742:	d003      	beq.n	800874c <UI_ADCThreshold+0xf8>
 8008744:	7f7b      	ldrb	r3, [r7, #29]
 8008746:	3301      	adds	r3, #1
 8008748:	777b      	strb	r3, [r7, #29]
 800874a:	e001      	b.n	8008750 <UI_ADCThreshold+0xfc>
 800874c:	2300      	movs	r3, #0
 800874e:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8008754:	e78f      	b.n	8008676 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_DW_PRESS) {
 8008756:	7ffb      	ldrb	r3, [r7, #31]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d018      	beq.n	8008792 <UI_ADCThreshold+0x13e>
			if(threshold_sensor[actual_num_sen] != 0) threshold_sensor[actual_num_sen]--; else threshold_sensor[actual_num_sen]=ADC_MAX;
 8008760:	7f3b      	ldrb	r3, [r7, #28]
 8008762:	4a23      	ldr	r2, [pc, #140]	; (80087f0 <UI_ADCThreshold+0x19c>)
 8008764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <UI_ADCThreshold+0x12c>
 800876c:	7f3b      	ldrb	r3, [r7, #28]
 800876e:	4a20      	ldr	r2, [pc, #128]	; (80087f0 <UI_ADCThreshold+0x19c>)
 8008770:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008774:	3a01      	subs	r2, #1
 8008776:	b291      	uxth	r1, r2
 8008778:	4a1d      	ldr	r2, [pc, #116]	; (80087f0 <UI_ADCThreshold+0x19c>)
 800877a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800877e:	e005      	b.n	800878c <UI_ADCThreshold+0x138>
 8008780:	7f3b      	ldrb	r3, [r7, #28]
 8008782:	4a1b      	ldr	r2, [pc, #108]	; (80087f0 <UI_ADCThreshold+0x19c>)
 8008784:	f640 71ff 	movw	r1, #4095	; 0xfff
 8008788:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 800878c:	2301      	movs	r3, #1
 800878e:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8008790:	e771      	b.n	8008676 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_UP_PRESS) {
 8008792:	7ffb      	ldrb	r3, [r7, #31]
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	f43f af73 	beq.w	8008684 <UI_ADCThreshold+0x30>
			if(threshold_sensor[actual_num_sen] != ADC_MAX) threshold_sensor[actual_num_sen]++; else threshold_sensor[actual_num_sen]=0;
 800879e:	7f3b      	ldrb	r3, [r7, #28]
 80087a0:	4a13      	ldr	r2, [pc, #76]	; (80087f0 <UI_ADCThreshold+0x19c>)
 80087a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d009      	beq.n	80087c2 <UI_ADCThreshold+0x16e>
 80087ae:	7f3b      	ldrb	r3, [r7, #28]
 80087b0:	4a0f      	ldr	r2, [pc, #60]	; (80087f0 <UI_ADCThreshold+0x19c>)
 80087b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80087b6:	3201      	adds	r2, #1
 80087b8:	b291      	uxth	r1, r2
 80087ba:	4a0d      	ldr	r2, [pc, #52]	; (80087f0 <UI_ADCThreshold+0x19c>)
 80087bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80087c0:	e004      	b.n	80087cc <UI_ADCThreshold+0x178>
 80087c2:	7f3b      	ldrb	r3, [r7, #28]
 80087c4:	4a0a      	ldr	r2, [pc, #40]	; (80087f0 <UI_ADCThreshold+0x19c>)
 80087c6:	2100      	movs	r1, #0
 80087c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 80087cc:	2301      	movs	r3, #1
 80087ce:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80087d0:	e751      	b.n	8008676 <UI_ADCThreshold+0x22>
		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 80087d2:	bf00      	nop
 80087d4:	e756      	b.n	8008684 <UI_ADCThreshold+0x30>
		if(bt == bt2 && bt_status == 0) continue;
 80087d6:	bf00      	nop
		actual_num_sen = SENSOR_NUM-num_sen-1;
 80087d8:	e754      	b.n	8008684 <UI_ADCThreshold+0x30>
		}
	}
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000b8c 	.word	0x20000b8c
 80087e8:	08012218 	.word	0x08012218
 80087ec:	20001173 	.word	0x20001173
 80087f0:	20000ba8 	.word	0x20000ba8

080087f4 <UI_AutoCalib>:



UI_Menu_Lists UI_AutoCalib() {
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
	uint8_t bt = UI_ReadButton();
 80087fa:	f7fe f9d1 	bl	8006ba0 <UI_ReadButton>
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
	SEN_StartAutoCalibration();
 8008802:	f7fc fdd5 	bl	80053b0 <SEN_StartAutoCalibration>
	while(1) {
		UI_ShowSensor();
 8008806:	f7fe f94d 	bl	8006aa4 <UI_ShowSensor>
		if(bt == UI_ReadButton()) continue;
 800880a:	f7fe f9c9 	bl	8006ba0 <UI_ReadButton>
 800880e:	4603      	mov	r3, r0
 8008810:	461a      	mov	r2, r3
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	4293      	cmp	r3, r2
 8008816:	d02a      	beq.n	800886e <UI_AutoCalib+0x7a>
		bt = UI_ReadButton();
 8008818:	f7fe f9c2 	bl	8006ba0 <UI_ReadButton>
 800881c:	4603      	mov	r3, r0
 800881e:	71fb      	strb	r3, [r7, #7]
		if(bt & SW_HM_PRESS) {
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <UI_AutoCalib+0x40>
			SEN_EndAutoCalibration(0);
 800882a:	2000      	movs	r0, #0
 800882c:	f7fc fe50 	bl	80054d0 <SEN_EndAutoCalibration>
			return UI_HOMESCREEN;
 8008830:	2302      	movs	r3, #2
 8008832:	e01e      	b.n	8008872 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_BK_PRESS) {
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <UI_AutoCalib+0x54>
			SEN_EndAutoCalibration(0);
 800883e:	2000      	movs	r0, #0
 8008840:	f7fc fe46 	bl	80054d0 <SEN_EndAutoCalibration>
			return UI_SET;
 8008844:	2307      	movs	r3, #7
 8008846:	e014      	b.n	8008872 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_OK_PRESS) {
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0d9      	beq.n	8008806 <UI_AutoCalib+0x12>
			SEN_EndAutoCalibration(1);
 8008852:	2001      	movs	r0, #1
 8008854:	f7fc fe3c 	bl	80054d0 <SEN_EndAutoCalibration>
			DISP_DisplayText(&short_message, "Saving...");
 8008858:	4908      	ldr	r1, [pc, #32]	; (800887c <UI_AutoCalib+0x88>)
 800885a:	4809      	ldr	r0, [pc, #36]	; (8008880 <UI_AutoCalib+0x8c>)
 800885c:	f7f9 f818 	bl	8001890 <DISP_DisplayText>
			Storage_SetADCThreshold();
 8008860:	f7fd f93a 	bl	8005ad8 <Storage_SetADCThreshold>
			HAL_Delay(200);
 8008864:	20c8      	movs	r0, #200	; 0xc8
 8008866:	f001 fc37 	bl	800a0d8 <HAL_Delay>
			return UI_SET;
 800886a:	2307      	movs	r3, #7
 800886c:	e001      	b.n	8008872 <UI_AutoCalib+0x7e>
		if(bt == UI_ReadButton()) continue;
 800886e:	bf00      	nop
		UI_ShowSensor();
 8008870:	e7c9      	b.n	8008806 <UI_AutoCalib+0x12>
		}
	}
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	08012220 	.word	0x08012220
 8008880:	200010d4 	.word	0x200010d4

08008884 <UI_Startup>:


DISP_Text_Typedef startup;

UI_Menu_Lists UI_Startup() {
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
	char buff[22];
	startup.size_y = 9;
 800888a:	4b5e      	ldr	r3, [pc, #376]	; (8008a04 <UI_Startup+0x180>)
 800888c:	2209      	movs	r2, #9
 800888e:	711a      	strb	r2, [r3, #4]
	sprintf(buff, "[%5i]Check memory", (uint16_t)HAL_GetTick());
 8008890:	f001 fc16 	bl	800a0c0 <HAL_GetTick>
 8008894:	4603      	mov	r3, r0
 8008896:	b29b      	uxth	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	463b      	mov	r3, r7
 800889c:	495a      	ldr	r1, [pc, #360]	; (8008a08 <UI_Startup+0x184>)
 800889e:	4618      	mov	r0, r3
 80088a0:	f007 fa94 	bl	800fdcc <siprintf>
	DISP_DisplayText(&startup, buff);
 80088a4:	463b      	mov	r3, r7
 80088a6:	4619      	mov	r1, r3
 80088a8:	4856      	ldr	r0, [pc, #344]	; (8008a04 <UI_Startup+0x180>)
 80088aa:	f7f8 fff1 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80088ae:	4b55      	ldr	r3, [pc, #340]	; (8008a04 <UI_Startup+0x180>)
 80088b0:	785a      	ldrb	r2, [r3, #1]
 80088b2:	4b54      	ldr	r3, [pc, #336]	; (8008a04 <UI_Startup+0x180>)
 80088b4:	791b      	ldrb	r3, [r3, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	4b52      	ldr	r3, [pc, #328]	; (8008a04 <UI_Startup+0x180>)
 80088bc:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 80088be:	2001      	movs	r0, #1
 80088c0:	f001 fc0a 	bl	800a0d8 <HAL_Delay>
	if(!Storage_Init()) {
 80088c4:	f7fd f87e 	bl	80059c4 <Storage_Init>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d11d      	bne.n	800890a <UI_Startup+0x86>
		sprintf(buff, "[%5i]Mem initialize", (uint16_t)HAL_GetTick());
 80088ce:	f001 fbf7 	bl	800a0c0 <HAL_GetTick>
 80088d2:	4603      	mov	r3, r0
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	461a      	mov	r2, r3
 80088d8:	463b      	mov	r3, r7
 80088da:	494c      	ldr	r1, [pc, #304]	; (8008a0c <UI_Startup+0x188>)
 80088dc:	4618      	mov	r0, r3
 80088de:	f007 fa75 	bl	800fdcc <siprintf>
		DISP_DisplayText(&startup, buff);
 80088e2:	463b      	mov	r3, r7
 80088e4:	4619      	mov	r1, r3
 80088e6:	4847      	ldr	r0, [pc, #284]	; (8008a04 <UI_Startup+0x180>)
 80088e8:	f7f8 ffd2 	bl	8001890 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 80088ec:	4b45      	ldr	r3, [pc, #276]	; (8008a04 <UI_Startup+0x180>)
 80088ee:	785a      	ldrb	r2, [r3, #1]
 80088f0:	4b44      	ldr	r3, [pc, #272]	; (8008a04 <UI_Startup+0x180>)
 80088f2:	791b      	ldrb	r3, [r3, #4]
 80088f4:	4413      	add	r3, r2
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	4b42      	ldr	r3, [pc, #264]	; (8008a04 <UI_Startup+0x180>)
 80088fa:	705a      	strb	r2, [r3, #1]
		do {
			Storage_ResetMemory();
 80088fc:	f7fd f810 	bl	8005920 <Storage_ResetMemory>
		} while(!Storage_Init());
 8008900:	f7fd f860 	bl	80059c4 <Storage_Init>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f8      	beq.n	80088fc <UI_Startup+0x78>
	}
	sprintf(buff, "[%5i]Memory OK", (uint16_t)HAL_GetTick());
 800890a:	f001 fbd9 	bl	800a0c0 <HAL_GetTick>
 800890e:	4603      	mov	r3, r0
 8008910:	b29b      	uxth	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	463b      	mov	r3, r7
 8008916:	493e      	ldr	r1, [pc, #248]	; (8008a10 <UI_Startup+0x18c>)
 8008918:	4618      	mov	r0, r3
 800891a:	f007 fa57 	bl	800fdcc <siprintf>
	DISP_DisplayText(&startup, buff);
 800891e:	463b      	mov	r3, r7
 8008920:	4619      	mov	r1, r3
 8008922:	4838      	ldr	r0, [pc, #224]	; (8008a04 <UI_Startup+0x180>)
 8008924:	f7f8 ffb4 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8008928:	4b36      	ldr	r3, [pc, #216]	; (8008a04 <UI_Startup+0x180>)
 800892a:	785a      	ldrb	r2, [r3, #1]
 800892c:	4b35      	ldr	r3, [pc, #212]	; (8008a04 <UI_Startup+0x180>)
 800892e:	791b      	ldrb	r3, [r3, #4]
 8008930:	4413      	add	r3, r2
 8008932:	b2da      	uxtb	r2, r3
 8008934:	4b33      	ldr	r3, [pc, #204]	; (8008a04 <UI_Startup+0x180>)
 8008936:	705a      	strb	r2, [r3, #1]

	sprintf(buff, "[%5i]Checking plan", (uint16_t)HAL_GetTick());
 8008938:	f001 fbc2 	bl	800a0c0 <HAL_GetTick>
 800893c:	4603      	mov	r3, r0
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	463b      	mov	r3, r7
 8008944:	4933      	ldr	r1, [pc, #204]	; (8008a14 <UI_Startup+0x190>)
 8008946:	4618      	mov	r0, r3
 8008948:	f007 fa40 	bl	800fdcc <siprintf>
	DISP_DisplayText(&startup, buff);
 800894c:	463b      	mov	r3, r7
 800894e:	4619      	mov	r1, r3
 8008950:	482c      	ldr	r0, [pc, #176]	; (8008a04 <UI_Startup+0x180>)
 8008952:	f7f8 ff9d 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8008956:	4b2b      	ldr	r3, [pc, #172]	; (8008a04 <UI_Startup+0x180>)
 8008958:	785a      	ldrb	r2, [r3, #1]
 800895a:	4b2a      	ldr	r3, [pc, #168]	; (8008a04 <UI_Startup+0x180>)
 800895c:	791b      	ldrb	r3, [r3, #4]
 800895e:	4413      	add	r3, r2
 8008960:	b2da      	uxtb	r2, r3
 8008962:	4b28      	ldr	r3, [pc, #160]	; (8008a04 <UI_Startup+0x180>)
 8008964:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 8008966:	2001      	movs	r0, #1
 8008968:	f001 fbb6 	bl	800a0d8 <HAL_Delay>
	if(!Storage_PlanInit()) {
 800896c:	f7fd f862 	bl	8005a34 <Storage_PlanInit>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d11d      	bne.n	80089b2 <UI_Startup+0x12e>
		sprintf(buff, "[%5i]Plan initializ", (uint16_t)HAL_GetTick());
 8008976:	f001 fba3 	bl	800a0c0 <HAL_GetTick>
 800897a:	4603      	mov	r3, r0
 800897c:	b29b      	uxth	r3, r3
 800897e:	461a      	mov	r2, r3
 8008980:	463b      	mov	r3, r7
 8008982:	4925      	ldr	r1, [pc, #148]	; (8008a18 <UI_Startup+0x194>)
 8008984:	4618      	mov	r0, r3
 8008986:	f007 fa21 	bl	800fdcc <siprintf>
		DISP_DisplayText(&startup, buff);
 800898a:	463b      	mov	r3, r7
 800898c:	4619      	mov	r1, r3
 800898e:	481d      	ldr	r0, [pc, #116]	; (8008a04 <UI_Startup+0x180>)
 8008990:	f7f8 ff7e 	bl	8001890 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8008994:	4b1b      	ldr	r3, [pc, #108]	; (8008a04 <UI_Startup+0x180>)
 8008996:	785a      	ldrb	r2, [r3, #1]
 8008998:	4b1a      	ldr	r3, [pc, #104]	; (8008a04 <UI_Startup+0x180>)
 800899a:	791b      	ldrb	r3, [r3, #4]
 800899c:	4413      	add	r3, r2
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	4b18      	ldr	r3, [pc, #96]	; (8008a04 <UI_Startup+0x180>)
 80089a2:	705a      	strb	r2, [r3, #1]

		do {
			Storage_ResetPlan();
 80089a4:	f7fc ff30 	bl	8005808 <Storage_ResetPlan>
		} while(!Storage_PlanInit());
 80089a8:	f7fd f844 	bl	8005a34 <Storage_PlanInit>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f8      	beq.n	80089a4 <UI_Startup+0x120>
	}
	Storage_GetPlan(num_plan);
 80089b2:	4b1a      	ldr	r3, [pc, #104]	; (8008a1c <UI_Startup+0x198>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fd f8b2 	bl	8005b20 <Storage_GetPlan>
	sprintf(buff, "[%5i]Plan OK", (uint16_t)HAL_GetTick());
 80089bc:	f001 fb80 	bl	800a0c0 <HAL_GetTick>
 80089c0:	4603      	mov	r3, r0
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	461a      	mov	r2, r3
 80089c6:	463b      	mov	r3, r7
 80089c8:	4915      	ldr	r1, [pc, #84]	; (8008a20 <UI_Startup+0x19c>)
 80089ca:	4618      	mov	r0, r3
 80089cc:	f007 f9fe 	bl	800fdcc <siprintf>
	DISP_DisplayText(&startup, buff);
 80089d0:	463b      	mov	r3, r7
 80089d2:	4619      	mov	r1, r3
 80089d4:	480b      	ldr	r0, [pc, #44]	; (8008a04 <UI_Startup+0x180>)
 80089d6:	f7f8 ff5b 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <UI_Startup+0x180>)
 80089dc:	785a      	ldrb	r2, [r3, #1]
 80089de:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <UI_Startup+0x180>)
 80089e0:	791b      	ldrb	r3, [r3, #4]
 80089e2:	4413      	add	r3, r2
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <UI_Startup+0x180>)
 80089e8:	705a      	strb	r2, [r3, #1]

	while(UI_ReadButton() & SW_HM_PRESS);
 80089ea:	bf00      	nop
 80089ec:	f7fe f8d8 	bl	8006ba0 <UI_ReadButton>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f8      	bne.n	80089ec <UI_Startup+0x168>

	return UI_HOMESCREEN;
 80089fa:	2302      	movs	r3, #2
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	2000118c 	.word	0x2000118c
 8008a08:	0801222c 	.word	0x0801222c
 8008a0c:	08012240 	.word	0x08012240
 8008a10:	08012254 	.word	0x08012254
 8008a14:	08012264 	.word	0x08012264
 8008a18:	08012278 	.word	0x08012278
 8008a1c:	20000c39 	.word	0x20000c39
 8008a20:	0801228c 	.word	0x0801228c

08008a24 <UI_CPDisplayInit>:


DISP_Text_Typedef cp_menu[4];
DISP_Text_Typedef cp_head;

void UI_CPDisplayInit() {
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
	cp_menu[0].origin_x = 3;
 8008a2a:	4b2f      	ldr	r3, [pc, #188]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a2c:	2203      	movs	r2, #3
 8008a2e:	701a      	strb	r2, [r3, #0]
	cp_menu[0].origin_y = 13;
 8008a30:	4b2d      	ldr	r3, [pc, #180]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a32:	220d      	movs	r2, #13
 8008a34:	705a      	strb	r2, [r3, #1]
	cp_menu[0].size_x = 120;
 8008a36:	4b2c      	ldr	r3, [pc, #176]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a38:	2278      	movs	r2, #120	; 0x78
 8008a3a:	70da      	strb	r2, [r3, #3]
	cp_menu[0].size_y = 11;
 8008a3c:	4b2a      	ldr	r3, [pc, #168]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a3e:	220b      	movs	r2, #11
 8008a40:	711a      	strb	r2, [r3, #4]
	cp_menu[0].color = DISP_COLOR_WHITE;
 8008a42:	4b29      	ldr	r3, [pc, #164]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	709a      	strb	r2, [r3, #2]
	cp_menu[0].align_x = DISP_ALIGN_CENTER;
 8008a48:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	715a      	strb	r2, [r3, #5]
	cp_menu[0].align_y = DISP_ALIGN_CENTER;
 8008a4e:	4b26      	ldr	r3, [pc, #152]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a50:	2202      	movs	r2, #2
 8008a52:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8008a54:	2301      	movs	r3, #1
 8008a56:	607b      	str	r3, [r7, #4]
 8008a58:	e027      	b.n	8008aaa <UI_CPDisplayInit+0x86>
		cp_menu[i] = cp_menu[0];
 8008a5a:	4923      	ldr	r1, [pc, #140]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	440b      	add	r3, r1
 8008a66:	4a20      	ldr	r2, [pc, #128]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a68:	6810      	ldr	r0, [r2, #0]
 8008a6a:	6018      	str	r0, [r3, #0]
 8008a6c:	8891      	ldrh	r1, [r2, #4]
 8008a6e:	7992      	ldrb	r2, [r2, #6]
 8008a70:	8099      	strh	r1, [r3, #4]
 8008a72:	719a      	strb	r2, [r3, #6]
		cp_menu[i].origin_y = cp_menu[i-1].origin_y+cp_menu[0].size_y+2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	1e5a      	subs	r2, r3, #1
 8008a78:	491b      	ldr	r1, [pc, #108]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	440b      	add	r3, r1
 8008a82:	3301      	adds	r3, #1
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	4b18      	ldr	r3, [pc, #96]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a88:	791b      	ldrb	r3, [r3, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	3302      	adds	r3, #2
 8008a90:	b2d8      	uxtb	r0, r3
 8008a92:	4915      	ldr	r1, [pc, #84]	; (8008ae8 <UI_CPDisplayInit+0xc4>)
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	607b      	str	r3, [r7, #4]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	ddd4      	ble.n	8008a5a <UI_CPDisplayInit+0x36>
	}

	cp_head.origin_x = 0;
 8008ab0:	4b0e      	ldr	r3, [pc, #56]	; (8008aec <UI_CPDisplayInit+0xc8>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
	cp_head.origin_y = 0;
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <UI_CPDisplayInit+0xc8>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	705a      	strb	r2, [r3, #1]
	cp_head.size_x = 127;
 8008abc:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <UI_CPDisplayInit+0xc8>)
 8008abe:	227f      	movs	r2, #127	; 0x7f
 8008ac0:	70da      	strb	r2, [r3, #3]
	cp_head.size_y = 10;
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <UI_CPDisplayInit+0xc8>)
 8008ac4:	220a      	movs	r2, #10
 8008ac6:	711a      	strb	r2, [r3, #4]
	cp_head.color = DISP_COLOR_BLACK;
 8008ac8:	4b08      	ldr	r3, [pc, #32]	; (8008aec <UI_CPDisplayInit+0xc8>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	709a      	strb	r2, [r3, #2]
	cp_head.align_x = DISP_ALIGN_CENTER;
 8008ace:	4b07      	ldr	r3, [pc, #28]	; (8008aec <UI_CPDisplayInit+0xc8>)
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	715a      	strb	r2, [r3, #5]
	cp_head.align_y = DISP_ALIGN_CENTER;
 8008ad4:	4b05      	ldr	r3, [pc, #20]	; (8008aec <UI_CPDisplayInit+0xc8>)
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	719a      	strb	r2, [r3, #6]
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20001194 	.word	0x20001194
 8008aec:	200011b0 	.word	0x200011b0

08008af0 <UI_CPDisplay>:

void UI_CPDisplay(uint8_t num, uint16_t* num_value) {
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	; 0x28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	6039      	str	r1, [r7, #0]
 8008afa:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	4a31      	ldr	r2, [pc, #196]	; (8008bc4 <UI_CPDisplay+0xd4>)
 8008b00:	f992 2000 	ldrsb.w	r2, [r2]
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	dd06      	ble.n	8008b18 <UI_CPDisplay+0x28>
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	3b03      	subs	r3, #3
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	b25a      	sxtb	r2, r3
 8008b12:	4b2c      	ldr	r3, [pc, #176]	; (8008bc4 <UI_CPDisplay+0xd4>)
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	e009      	b.n	8008b2c <UI_CPDisplay+0x3c>
	else if(num < first_list) first_list = num;
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	4a2a      	ldr	r2, [pc, #168]	; (8008bc4 <UI_CPDisplay+0xd4>)
 8008b1c:	f992 2000 	ldrsb.w	r2, [r2]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	da03      	bge.n	8008b2c <UI_CPDisplay+0x3c>
 8008b24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008b28:	4b26      	ldr	r3, [pc, #152]	; (8008bc4 <UI_CPDisplay+0xd4>)
 8008b2a:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b30:	e040      	b.n	8008bb4 <UI_CPDisplay+0xc4>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008b32:	4b24      	ldr	r3, [pc, #144]	; (8008bc4 <UI_CPDisplay+0xd4>)
 8008b34:	f993 3000 	ldrsb.w	r3, [r3]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	441a      	add	r2, r3
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d109      	bne.n	8008b58 <UI_CPDisplay+0x68>
 8008b44:	4920      	ldr	r1, [pc, #128]	; (8008bc8 <UI_CPDisplay+0xd8>)
 8008b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b48:	4613      	mov	r3, r2
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	440b      	add	r3, r1
 8008b50:	3302      	adds	r3, #2
 8008b52:	2201      	movs	r2, #1
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	e008      	b.n	8008b6a <UI_CPDisplay+0x7a>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008b58:	491b      	ldr	r1, [pc, #108]	; (8008bc8 <UI_CPDisplay+0xd8>)
 8008b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	440b      	add	r3, r1
 8008b64:	3302      	adds	r3, #2
 8008b66:	2200      	movs	r2, #0
 8008b68:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "CP%-2i  ~  %03i", i + first_list, num_value[i + first_list]);
 8008b6a:	4b16      	ldr	r3, [pc, #88]	; (8008bc4 <UI_CPDisplay+0xd4>)
 8008b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8008b70:	461a      	mov	r2, r3
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	18d1      	adds	r1, r2, r3
 8008b76:	4b13      	ldr	r3, [pc, #76]	; (8008bc4 <UI_CPDisplay+0xd4>)
 8008b78:	f993 3000 	ldrsb.w	r3, [r3]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	4413      	add	r3, r2
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	4413      	add	r3, r2
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	f107 000c 	add.w	r0, r7, #12
 8008b8e:	460a      	mov	r2, r1
 8008b90:	490e      	ldr	r1, [pc, #56]	; (8008bcc <UI_CPDisplay+0xdc>)
 8008b92:	f007 f91b 	bl	800fdcc <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8008b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b98:	4613      	mov	r3, r2
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	1a9b      	subs	r3, r3, r2
 8008b9e:	4a0a      	ldr	r2, [pc, #40]	; (8008bc8 <UI_CPDisplay+0xd8>)
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f107 020c 	add.w	r2, r7, #12
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7f8 fe71 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	ddbb      	ble.n	8008b32 <UI_CPDisplay+0x42>
	}
}
 8008bba:	bf00      	nop
 8008bbc:	bf00      	nop
 8008bbe:	3728      	adds	r7, #40	; 0x28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	200011c0 	.word	0x200011c0
 8008bc8:	20001194 	.word	0x20001194
 8008bcc:	0801229c 	.word	0x0801229c

08008bd0 <UI_CP>:

UI_Menu_Lists UI_CP() {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "CHECKPOINT");
 8008bde:	4950      	ldr	r1, [pc, #320]	; (8008d20 <UI_CP+0x150>)
 8008be0:	4850      	ldr	r0, [pc, #320]	; (8008d24 <UI_CP+0x154>)
 8008be2:	f7f8 fe55 	bl	8001890 <DISP_DisplayText>
	ui_cp:
	UI_CPDisplay(num_menu, plan.checkpoint);
 8008be6:	79bb      	ldrb	r3, [r7, #6]
 8008be8:	494f      	ldr	r1, [pc, #316]	; (8008d28 <UI_CP+0x158>)
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff ff80 	bl	8008af0 <UI_CPDisplay>
	tick = HAL_GetTick();
 8008bf0:	f001 fa66 	bl	800a0c0 <HAL_GetTick>
 8008bf4:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008bf6:	f001 fa63 	bl	800a0c0 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b45      	cmp	r3, #69	; 0x45
 8008c02:	f240 8084 	bls.w	8008d0e <UI_CP+0x13e>
		if(bt == UI_ReadButton()) continue;
 8008c06:	f7fd ffcb 	bl	8006ba0 <UI_ReadButton>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d07e      	beq.n	8008d12 <UI_CP+0x142>
		bt = UI_ReadButton();
 8008c14:	f7fd ffc4 	bl	8006ba0 <UI_ReadButton>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d009      	beq.n	8008c3a <UI_CP+0x6a>
			if(num_menu==MAX_CHECKPOINT-1) num_menu = 0; else num_menu++;
 8008c26:	79bb      	ldrb	r3, [r7, #6]
 8008c28:	2b13      	cmp	r3, #19
 8008c2a:	d102      	bne.n	8008c32 <UI_CP+0x62>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	71bb      	strb	r3, [r7, #6]
 8008c30:	e7d9      	b.n	8008be6 <UI_CP+0x16>
 8008c32:	79bb      	ldrb	r3, [r7, #6]
 8008c34:	3301      	adds	r3, #1
 8008c36:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008c38:	e7d5      	b.n	8008be6 <UI_CP+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <UI_CP+0x88>
			if(num_menu==0) num_menu = MAX_CHECKPOINT-1; else num_menu--;
 8008c44:	79bb      	ldrb	r3, [r7, #6]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d102      	bne.n	8008c50 <UI_CP+0x80>
 8008c4a:	2313      	movs	r3, #19
 8008c4c:	71bb      	strb	r3, [r7, #6]
 8008c4e:	e7ca      	b.n	8008be6 <UI_CP+0x16>
 8008c50:	79bb      	ldrb	r3, [r7, #6]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008c56:	e7c6      	b.n	8008be6 <UI_CP+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01c      	beq.n	8008c9c <UI_CP+0xcc>
			if(plan.checkpoint[num_menu]==DEF_ACTION_PER_PLAN-1) plan.checkpoint[num_menu] = 0; else plan.checkpoint[num_menu]++;
 8008c62:	79bb      	ldrb	r3, [r7, #6]
 8008c64:	4a31      	ldr	r2, [pc, #196]	; (8008d2c <UI_CP+0x15c>)
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	4413      	add	r3, r2
 8008c6a:	889b      	ldrh	r3, [r3, #4]
 8008c6c:	f240 128f 	movw	r2, #399	; 0x18f
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d106      	bne.n	8008c82 <UI_CP+0xb2>
 8008c74:	79bb      	ldrb	r3, [r7, #6]
 8008c76:	4a2d      	ldr	r2, [pc, #180]	; (8008d2c <UI_CP+0x15c>)
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	4413      	add	r3, r2
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	809a      	strh	r2, [r3, #4]
 8008c80:	e7b1      	b.n	8008be6 <UI_CP+0x16>
 8008c82:	79ba      	ldrb	r2, [r7, #6]
 8008c84:	4929      	ldr	r1, [pc, #164]	; (8008d2c <UI_CP+0x15c>)
 8008c86:	0053      	lsls	r3, r2, #1
 8008c88:	440b      	add	r3, r1
 8008c8a:	889b      	ldrh	r3, [r3, #4]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	b298      	uxth	r0, r3
 8008c90:	4926      	ldr	r1, [pc, #152]	; (8008d2c <UI_CP+0x15c>)
 8008c92:	0053      	lsls	r3, r2, #1
 8008c94:	440b      	add	r3, r1
 8008c96:	4602      	mov	r2, r0
 8008c98:	809a      	strh	r2, [r3, #4]
			goto ui_cp;
 8008c9a:	e7a4      	b.n	8008be6 <UI_CP+0x16>
		}
		else if(bt & SW_LF_PRESS) {
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	f003 0310 	and.w	r3, r3, #16
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01b      	beq.n	8008cde <UI_CP+0x10e>
			if(plan.checkpoint[num_menu]==0) plan.checkpoint[num_menu] = DEF_ACTION_PER_PLAN-1; else plan.checkpoint[num_menu]--;
 8008ca6:	79bb      	ldrb	r3, [r7, #6]
 8008ca8:	4a20      	ldr	r2, [pc, #128]	; (8008d2c <UI_CP+0x15c>)
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	4413      	add	r3, r2
 8008cae:	889b      	ldrh	r3, [r3, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d107      	bne.n	8008cc4 <UI_CP+0xf4>
 8008cb4:	79bb      	ldrb	r3, [r7, #6]
 8008cb6:	4a1d      	ldr	r2, [pc, #116]	; (8008d2c <UI_CP+0x15c>)
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	4413      	add	r3, r2
 8008cbc:	f240 128f 	movw	r2, #399	; 0x18f
 8008cc0:	809a      	strh	r2, [r3, #4]
 8008cc2:	e790      	b.n	8008be6 <UI_CP+0x16>
 8008cc4:	79ba      	ldrb	r2, [r7, #6]
 8008cc6:	4919      	ldr	r1, [pc, #100]	; (8008d2c <UI_CP+0x15c>)
 8008cc8:	0053      	lsls	r3, r2, #1
 8008cca:	440b      	add	r3, r1
 8008ccc:	889b      	ldrh	r3, [r3, #4]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	b298      	uxth	r0, r3
 8008cd2:	4916      	ldr	r1, [pc, #88]	; (8008d2c <UI_CP+0x15c>)
 8008cd4:	0053      	lsls	r3, r2, #1
 8008cd6:	440b      	add	r3, r1
 8008cd8:	4602      	mov	r2, r0
 8008cda:	809a      	strh	r2, [r3, #4]
			goto ui_cp;
 8008cdc:	e783      	b.n	8008be6 <UI_CP+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 8008cde:	79fb      	ldrb	r3, [r7, #7]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <UI_CP+0x11c>
			return UI_HOMESCREEN;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	e014      	b.n	8008d16 <UI_CP+0x146>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f43f af7f 	beq.w	8008bf6 <UI_CP+0x26>
			DISP_DisplayText(&short_message, "Saving...");
 8008cf8:	490d      	ldr	r1, [pc, #52]	; (8008d30 <UI_CP+0x160>)
 8008cfa:	480e      	ldr	r0, [pc, #56]	; (8008d34 <UI_CP+0x164>)
 8008cfc:	f7f8 fdc8 	bl	8001890 <DISP_DisplayText>
			Storage_SetCheckpoint();
 8008d00:	f7fc ff90 	bl	8005c24 <Storage_SetCheckpoint>
			HAL_Delay(200);
 8008d04:	20c8      	movs	r0, #200	; 0xc8
 8008d06:	f001 f9e7 	bl	800a0d8 <HAL_Delay>
			return UI_SET;
 8008d0a:	2307      	movs	r3, #7
 8008d0c:	e003      	b.n	8008d16 <UI_CP+0x146>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008d0e:	bf00      	nop
 8008d10:	e771      	b.n	8008bf6 <UI_CP+0x26>
		if(bt == UI_ReadButton()) continue;
 8008d12:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008d14:	e76f      	b.n	8008bf6 <UI_CP+0x26>
		}
	}
	return UI_IDLE;
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	080122ac 	.word	0x080122ac
 8008d24:	200011b0 	.word	0x200011b0
 8008d28:	20000f30 	.word	0x20000f30
 8008d2c:	20000f2c 	.word	0x20000f2c
 8008d30:	08012220 	.word	0x08012220
 8008d34:	200010d4 	.word	0x200010d4

08008d38 <UI_PlanSelectDisplay>:




void UI_PlanSelectDisplay(uint8_t num) {
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08a      	sub	sp, #40	; 0x28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	4a2c      	ldr	r2, [pc, #176]	; (8008df8 <UI_PlanSelectDisplay+0xc0>)
 8008d46:	f992 2000 	ldrsb.w	r2, [r2]
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	dd06      	ble.n	8008d5e <UI_PlanSelectDisplay+0x26>
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	3b03      	subs	r3, #3
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	b25a      	sxtb	r2, r3
 8008d58:	4b27      	ldr	r3, [pc, #156]	; (8008df8 <UI_PlanSelectDisplay+0xc0>)
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	e009      	b.n	8008d72 <UI_PlanSelectDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	4a25      	ldr	r2, [pc, #148]	; (8008df8 <UI_PlanSelectDisplay+0xc0>)
 8008d62:	f992 2000 	ldrsb.w	r2, [r2]
 8008d66:	4293      	cmp	r3, r2
 8008d68:	da03      	bge.n	8008d72 <UI_PlanSelectDisplay+0x3a>
 8008d6a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008d6e:	4b22      	ldr	r3, [pc, #136]	; (8008df8 <UI_PlanSelectDisplay+0xc0>)
 8008d70:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008d72:	2300      	movs	r3, #0
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
 8008d76:	e036      	b.n	8008de6 <UI_PlanSelectDisplay+0xae>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008d78:	4b1f      	ldr	r3, [pc, #124]	; (8008df8 <UI_PlanSelectDisplay+0xc0>)
 8008d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	441a      	add	r2, r3
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d109      	bne.n	8008d9e <UI_PlanSelectDisplay+0x66>
 8008d8a:	491c      	ldr	r1, [pc, #112]	; (8008dfc <UI_PlanSelectDisplay+0xc4>)
 8008d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8e:	4613      	mov	r3, r2
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	440b      	add	r3, r1
 8008d96:	3302      	adds	r3, #2
 8008d98:	2201      	movs	r2, #1
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	e008      	b.n	8008db0 <UI_PlanSelectDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008d9e:	4917      	ldr	r1, [pc, #92]	; (8008dfc <UI_PlanSelectDisplay+0xc4>)
 8008da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da2:	4613      	mov	r3, r2
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	440b      	add	r3, r1
 8008daa:	3302      	adds	r3, #2
 8008dac:	2200      	movs	r2, #0
 8008dae:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "Plan%i", i + first_list);
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <UI_PlanSelectDisplay+0xc0>)
 8008db2:	f993 3000 	ldrsb.w	r3, [r3]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	441a      	add	r2, r3
 8008dbc:	f107 030c 	add.w	r3, r7, #12
 8008dc0:	490f      	ldr	r1, [pc, #60]	; (8008e00 <UI_PlanSelectDisplay+0xc8>)
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f007 f802 	bl	800fdcc <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8008dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dca:	4613      	mov	r3, r2
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	1a9b      	subs	r3, r3, r2
 8008dd0:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <UI_PlanSelectDisplay+0xc4>)
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f107 020c 	add.w	r2, r7, #12
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f8 fd58 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	3301      	adds	r3, #1
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	ddc5      	ble.n	8008d78 <UI_PlanSelectDisplay+0x40>
	}
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200011c1 	.word	0x200011c1
 8008dfc:	20001194 	.word	0x20001194
 8008e00:	080122b8 	.word	0x080122b8

08008e04 <UI_PlanSelect>:

UI_Menu_Lists UI_PlanSelect() {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "SELECT PLAN");
 8008e12:	494f      	ldr	r1, [pc, #316]	; (8008f50 <UI_PlanSelect+0x14c>)
 8008e14:	484f      	ldr	r0, [pc, #316]	; (8008f54 <UI_PlanSelect+0x150>)
 8008e16:	f7f8 fd3b 	bl	8001890 <DISP_DisplayText>
	ui_cp:
	UI_PlanSelectDisplay(num_menu);
 8008e1a:	79bb      	ldrb	r3, [r7, #6]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff ff8b 	bl	8008d38 <UI_PlanSelectDisplay>
	tick = HAL_GetTick();
 8008e22:	f001 f94d 	bl	800a0c0 <HAL_GetTick>
 8008e26:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008e28:	f001 f94a 	bl	800a0c0 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b45      	cmp	r3, #69	; 0x45
 8008e34:	f240 8083 	bls.w	8008f3e <UI_PlanSelect+0x13a>
		if(bt == UI_ReadButton()) continue;
 8008e38:	f7fd feb2 	bl	8006ba0 <UI_ReadButton>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	461a      	mov	r2, r3
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d07d      	beq.n	8008f42 <UI_PlanSelect+0x13e>
		bt = UI_ReadButton();
 8008e46:	f7fd feab 	bl	8006ba0 <UI_ReadButton>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d009      	beq.n	8008e6c <UI_PlanSelect+0x68>
			if(num_menu==MAX_PLAN-1) num_menu = 0; else num_menu++;
 8008e58:	79bb      	ldrb	r3, [r7, #6]
 8008e5a:	2b07      	cmp	r3, #7
 8008e5c:	d102      	bne.n	8008e64 <UI_PlanSelect+0x60>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	71bb      	strb	r3, [r7, #6]
 8008e62:	e7da      	b.n	8008e1a <UI_PlanSelect+0x16>
 8008e64:	79bb      	ldrb	r3, [r7, #6]
 8008e66:	3301      	adds	r3, #1
 8008e68:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008e6a:	e7d6      	b.n	8008e1a <UI_PlanSelect+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d009      	beq.n	8008e8a <UI_PlanSelect+0x86>
			if(num_menu==0) num_menu = MAX_PLAN-1; else num_menu--;
 8008e76:	79bb      	ldrb	r3, [r7, #6]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d102      	bne.n	8008e82 <UI_PlanSelect+0x7e>
 8008e7c:	2307      	movs	r3, #7
 8008e7e:	71bb      	strb	r3, [r7, #6]
 8008e80:	e7cb      	b.n	8008e1a <UI_PlanSelect+0x16>
 8008e82:	79bb      	ldrb	r3, [r7, #6]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008e88:	e7c7      	b.n	8008e1a <UI_PlanSelect+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d029      	beq.n	8008ee8 <UI_PlanSelect+0xe4>
			DISP_DisplayText(&short_message, "Copy to this Plan?");
 8008e94:	4930      	ldr	r1, [pc, #192]	; (8008f58 <UI_PlanSelect+0x154>)
 8008e96:	4831      	ldr	r0, [pc, #196]	; (8008f5c <UI_PlanSelect+0x158>)
 8008e98:	f7f8 fcfa 	bl	8001890 <DISP_DisplayText>
			while(1) {
				if(bt == UI_ReadButton()) continue;
 8008e9c:	f7fd fe80 	bl	8006ba0 <UI_ReadButton>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d01c      	beq.n	8008ee4 <UI_PlanSelect+0xe0>
				bt = UI_ReadButton();
 8008eaa:	f7fd fe79 	bl	8006ba0 <UI_ReadButton>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_OK_PRESS) {
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	f003 0320 	and.w	r3, r3, #32
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00d      	beq.n	8008ed8 <UI_PlanSelect+0xd4>
					DISP_DisplayText(&short_message, "Copying...");
 8008ebc:	4928      	ldr	r1, [pc, #160]	; (8008f60 <UI_PlanSelect+0x15c>)
 8008ebe:	4827      	ldr	r0, [pc, #156]	; (8008f5c <UI_PlanSelect+0x158>)
 8008ec0:	f7f8 fce6 	bl	8001890 <DISP_DisplayText>
					Storage_CopyPlan(num_menu);
 8008ec4:	79bb      	ldrb	r3, [r7, #6]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fd f950 	bl	800616c <Storage_CopyPlan>
					DISP_DisplayText(&short_message, "Copy done!");
 8008ecc:	4925      	ldr	r1, [pc, #148]	; (8008f64 <UI_PlanSelect+0x160>)
 8008ece:	4823      	ldr	r0, [pc, #140]	; (8008f5c <UI_PlanSelect+0x158>)
 8008ed0:	f7f8 fcde 	bl	8001890 <DISP_DisplayText>
					break;
 8008ed4:	bf00      	nop
				}
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
					goto ui_cp;
				}
			}
			goto ui_cp;
 8008ed6:	e7a0      	b.n	8008e1a <UI_PlanSelect+0x16>
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0dc      	beq.n	8008e9c <UI_PlanSelect+0x98>
					goto ui_cp;
 8008ee2:	e79a      	b.n	8008e1a <UI_PlanSelect+0x16>
				if(bt == UI_ReadButton()) continue;
 8008ee4:	bf00      	nop
 8008ee6:	e7d9      	b.n	8008e9c <UI_PlanSelect+0x98>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <UI_PlanSelect+0xf2>
			return UI_HOMESCREEN;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e027      	b.n	8008f46 <UI_PlanSelect+0x142>
		}
		else if(bt & SW_OK_PRESS) {
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d093      	beq.n	8008e28 <UI_PlanSelect+0x24>
			DISP_DisplayText(&short_message, "Loading...");
 8008f00:	4919      	ldr	r1, [pc, #100]	; (8008f68 <UI_PlanSelect+0x164>)
 8008f02:	4816      	ldr	r0, [pc, #88]	; (8008f5c <UI_PlanSelect+0x158>)
 8008f04:	f7f8 fcc4 	bl	8001890 <DISP_DisplayText>
			if(!Storage_GetPlan(num_menu)) {
 8008f08:	79bb      	ldrb	r3, [r7, #6]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fc fe08 	bl	8005b20 <Storage_GetPlan>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10a      	bne.n	8008f2c <UI_PlanSelect+0x128>
				DISP_DisplayText(&short_message, "Reseting...");
 8008f16:	4915      	ldr	r1, [pc, #84]	; (8008f6c <UI_PlanSelect+0x168>)
 8008f18:	4810      	ldr	r0, [pc, #64]	; (8008f5c <UI_PlanSelect+0x158>)
 8008f1a:	f7f8 fcb9 	bl	8001890 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008f1e:	f7fc fc73 	bl	8005808 <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8008f22:	f7fc fd87 	bl	8005a34 <Storage_PlanInit>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0f8      	beq.n	8008f1e <UI_PlanSelect+0x11a>
			}
			DISP_DisplayText(&short_message, "Done!");
 8008f2c:	4910      	ldr	r1, [pc, #64]	; (8008f70 <UI_PlanSelect+0x16c>)
 8008f2e:	480b      	ldr	r0, [pc, #44]	; (8008f5c <UI_PlanSelect+0x158>)
 8008f30:	f7f8 fcae 	bl	8001890 <DISP_DisplayText>
			HAL_Delay(200);
 8008f34:	20c8      	movs	r0, #200	; 0xc8
 8008f36:	f001 f8cf 	bl	800a0d8 <HAL_Delay>
			return UI_HOMESCREEN;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e003      	b.n	8008f46 <UI_PlanSelect+0x142>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008f3e:	bf00      	nop
 8008f40:	e772      	b.n	8008e28 <UI_PlanSelect+0x24>
		if(bt == UI_ReadButton()) continue;
 8008f42:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008f44:	e770      	b.n	8008e28 <UI_PlanSelect+0x24>
		}
	}
	return UI_IDLE;
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	080122c0 	.word	0x080122c0
 8008f54:	200011b0 	.word	0x200011b0
 8008f58:	080122cc 	.word	0x080122cc
 8008f5c:	200010d4 	.word	0x200010d4
 8008f60:	080122e0 	.word	0x080122e0
 8008f64:	080122ec 	.word	0x080122ec
 8008f68:	080122f8 	.word	0x080122f8
 8008f6c:	08012304 	.word	0x08012304
 8008f70:	08012310 	.word	0x08012310

08008f74 <UI_MemSettingDisplay>:
		" Reset All",
		" ",
		" "
};

void UI_MemSettingDisplay(uint8_t num) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	4a29      	ldr	r2, [pc, #164]	; (8009028 <UI_MemSettingDisplay+0xb4>)
 8008f82:	f992 2000 	ldrsb.w	r2, [r2]
 8008f86:	1a9b      	subs	r3, r3, r2
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	dd06      	ble.n	8008f9a <UI_MemSettingDisplay+0x26>
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	3b03      	subs	r3, #3
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	b25a      	sxtb	r2, r3
 8008f94:	4b24      	ldr	r3, [pc, #144]	; (8009028 <UI_MemSettingDisplay+0xb4>)
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e009      	b.n	8008fae <UI_MemSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	4a22      	ldr	r2, [pc, #136]	; (8009028 <UI_MemSettingDisplay+0xb4>)
 8008f9e:	f992 2000 	ldrsb.w	r2, [r2]
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	da03      	bge.n	8008fae <UI_MemSettingDisplay+0x3a>
 8008fa6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008faa:	4b1f      	ldr	r3, [pc, #124]	; (8009028 <UI_MemSettingDisplay+0xb4>)
 8008fac:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	e031      	b.n	8009018 <UI_MemSettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8008fb4:	4b1c      	ldr	r3, [pc, #112]	; (8009028 <UI_MemSettingDisplay+0xb4>)
 8008fb6:	f993 3000 	ldrsb.w	r3, [r3]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	441a      	add	r2, r3
 8008fc0:	79fb      	ldrb	r3, [r7, #7]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d109      	bne.n	8008fda <UI_MemSettingDisplay+0x66>
 8008fc6:	4919      	ldr	r1, [pc, #100]	; (800902c <UI_MemSettingDisplay+0xb8>)
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	1a9b      	subs	r3, r3, r2
 8008fd0:	440b      	add	r3, r1
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	e008      	b.n	8008fec <UI_MemSettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8008fda:	4914      	ldr	r1, [pc, #80]	; (800902c <UI_MemSettingDisplay+0xb8>)
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	00db      	lsls	r3, r3, #3
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	440b      	add	r3, r1
 8008fe6:	3302      	adds	r3, #2
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], memory_menus[i+first_list]);
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	4a0d      	ldr	r2, [pc, #52]	; (800902c <UI_MemSettingDisplay+0xb8>)
 8008ff6:	441a      	add	r2, r3
 8008ff8:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <UI_MemSettingDisplay+0xb4>)
 8008ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8008ffe:	4619      	mov	r1, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	440b      	add	r3, r1
 8009004:	490a      	ldr	r1, [pc, #40]	; (8009030 <UI_MemSettingDisplay+0xbc>)
 8009006:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f7f8 fc3f 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b03      	cmp	r3, #3
 800901c:	ddca      	ble.n	8008fb4 <UI_MemSettingDisplay+0x40>
	}
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	200011c2 	.word	0x200011c2
 800902c:	20001108 	.word	0x20001108
 8009030:	20000318 	.word	0x20000318

08009034 <UI_MemSetting>:

UI_Menu_Lists UI_MemSetting() {
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "MEMORY");
 800903e:	495b      	ldr	r1, [pc, #364]	; (80091ac <UI_MemSetting+0x178>)
 8009040:	485b      	ldr	r0, [pc, #364]	; (80091b0 <UI_MemSetting+0x17c>)
 8009042:	f7f8 fc25 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_MemSettingDisplay(num_menu);
 8009046:	4b5b      	ldr	r3, [pc, #364]	; (80091b4 <UI_MemSetting+0x180>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff ff92 	bl	8008f74 <UI_MemSettingDisplay>
	tick = HAL_GetTick();
 8009050:	f001 f836 	bl	800a0c0 <HAL_GetTick>
 8009054:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8009056:	f001 f833 	bl	800a0c0 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b45      	cmp	r3, #69	; 0x45
 8009062:	f240 8097 	bls.w	8009194 <UI_MemSetting+0x160>
		if(bt == UI_ReadButton()) continue;
 8009066:	f7fd fd9b 	bl	8006ba0 <UI_ReadButton>
 800906a:	4603      	mov	r3, r0
 800906c:	461a      	mov	r2, r3
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	4293      	cmp	r3, r2
 8009072:	f000 8091 	beq.w	8009198 <UI_MemSetting+0x164>
		bt = UI_ReadButton();
 8009076:	f7fd fd93 	bl	8006ba0 <UI_ReadButton>
 800907a:	4603      	mov	r3, r0
 800907c:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00e      	beq.n	80090a6 <UI_MemSetting+0x72>
			if(num_menu==1) num_menu = 0; else num_menu++;
 8009088:	4b4a      	ldr	r3, [pc, #296]	; (80091b4 <UI_MemSetting+0x180>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d103      	bne.n	8009098 <UI_MemSetting+0x64>
 8009090:	4b48      	ldr	r3, [pc, #288]	; (80091b4 <UI_MemSetting+0x180>)
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	e7d6      	b.n	8009046 <UI_MemSetting+0x12>
 8009098:	4b46      	ldr	r3, [pc, #280]	; (80091b4 <UI_MemSetting+0x180>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	3301      	adds	r3, #1
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	4b44      	ldr	r3, [pc, #272]	; (80091b4 <UI_MemSetting+0x180>)
 80090a2:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 80090a4:	e7cf      	b.n	8009046 <UI_MemSetting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00e      	beq.n	80090ce <UI_MemSetting+0x9a>
			if(num_menu==0) num_menu = 1; else num_menu--;
 80090b0:	4b40      	ldr	r3, [pc, #256]	; (80091b4 <UI_MemSetting+0x180>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <UI_MemSetting+0x8c>
 80090b8:	4b3e      	ldr	r3, [pc, #248]	; (80091b4 <UI_MemSetting+0x180>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e7c2      	b.n	8009046 <UI_MemSetting+0x12>
 80090c0:	4b3c      	ldr	r3, [pc, #240]	; (80091b4 <UI_MemSetting+0x180>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	4b3a      	ldr	r3, [pc, #232]	; (80091b4 <UI_MemSetting+0x180>)
 80090ca:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 80090cc:	e7bb      	b.n	8009046 <UI_MemSetting+0x12>
		}
		else if(bt & SW_HM_PRESS) {
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <UI_MemSetting+0xae>
			num_menu = 0;
 80090d8:	4b36      	ldr	r3, [pc, #216]	; (80091b4 <UI_MemSetting+0x180>)
 80090da:	2200      	movs	r2, #0
 80090dc:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 80090de:	2302      	movs	r3, #2
 80090e0:	e060      	b.n	80091a4 <UI_MemSetting+0x170>
		}
		else if(bt & SW_BK_PRESS) {
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	f003 0308 	and.w	r3, r3, #8
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d004      	beq.n	80090f6 <UI_MemSetting+0xc2>
			num_menu = 0;
 80090ec:	4b31      	ldr	r3, [pc, #196]	; (80091b4 <UI_MemSetting+0x180>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]
			return UI_SET;
 80090f2:	2307      	movs	r3, #7
 80090f4:	e056      	b.n	80091a4 <UI_MemSetting+0x170>
		}
		switch(num_menu) {
 80090f6:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <UI_MemSetting+0x180>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d027      	beq.n	800914e <UI_MemSetting+0x11a>
 80090fe:	2b03      	cmp	r3, #3
 8009100:	dca9      	bgt.n	8009056 <UI_MemSetting+0x22>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <UI_MemSetting+0xd8>
 8009106:	2b01      	cmp	r3, #1
 8009108:	d018      	beq.n	800913c <UI_MemSetting+0x108>
 800910a:	e04a      	b.n	80091a2 <UI_MemSetting+0x16e>
		case 0:
			if(bt & SW_OK_PRESS) {
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d042      	beq.n	800919c <UI_MemSetting+0x168>
				DISP_DisplayText(&short_message, "Reseting...");
 8009116:	4928      	ldr	r1, [pc, #160]	; (80091b8 <UI_MemSetting+0x184>)
 8009118:	4828      	ldr	r0, [pc, #160]	; (80091bc <UI_MemSetting+0x188>)
 800911a:	f7f8 fbb9 	bl	8001890 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 800911e:	f7fc fb73 	bl	8005808 <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8009122:	f7fc fc87 	bl	8005a34 <Storage_PlanInit>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0f8      	beq.n	800911e <UI_MemSetting+0xea>
				DISP_DisplayText(&short_message, "Done!");
 800912c:	4924      	ldr	r1, [pc, #144]	; (80091c0 <UI_MemSetting+0x18c>)
 800912e:	4823      	ldr	r0, [pc, #140]	; (80091bc <UI_MemSetting+0x188>)
 8009130:	f7f8 fbae 	bl	8001890 <DISP_DisplayText>
				HAL_Delay(200);
 8009134:	20c8      	movs	r0, #200	; 0xc8
 8009136:	f000 ffcf 	bl	800a0d8 <HAL_Delay>
				goto ui_mem;
 800913a:	e784      	b.n	8009046 <UI_MemSetting+0x12>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d02c      	beq.n	80091a0 <UI_MemSetting+0x16c>
				num_menu = 3;
 8009146:	4b1b      	ldr	r3, [pc, #108]	; (80091b4 <UI_MemSetting+0x180>)
 8009148:	2203      	movs	r2, #3
 800914a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800914c:	e028      	b.n	80091a0 <UI_MemSetting+0x16c>
		case 3:
			DISP_DisplayText(&setting_menu[3], "Are you sure?");
 800914e:	491d      	ldr	r1, [pc, #116]	; (80091c4 <UI_MemSetting+0x190>)
 8009150:	481d      	ldr	r0, [pc, #116]	; (80091c8 <UI_MemSetting+0x194>)
 8009152:	f7f8 fb9d 	bl	8001890 <DISP_DisplayText>
			while(1) {
				bt = UI_ReadButton();
 8009156:	f7fd fd23 	bl	8006ba0 <UI_ReadButton>
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_BK_PRESS) {
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	f003 0308 	and.w	r3, r3, #8
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <UI_MemSetting+0x13c>
					num_menu = 1;
 8009168:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <UI_MemSetting+0x180>)
 800916a:	2201      	movs	r2, #1
 800916c:	701a      	strb	r2, [r3, #0]
					goto ui_mem;
 800916e:	e76a      	b.n	8009046 <UI_MemSetting+0x12>
				}
				if(bt & SW_OK_PRESS) {
 8009170:	79fb      	ldrb	r3, [r7, #7]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0ed      	beq.n	8009156 <UI_MemSetting+0x122>
					DISP_DisplayText(&setting_menu[3], "Wait...");
 800917a:	4914      	ldr	r1, [pc, #80]	; (80091cc <UI_MemSetting+0x198>)
 800917c:	4812      	ldr	r0, [pc, #72]	; (80091c8 <UI_MemSetting+0x194>)
 800917e:	f7f8 fb87 	bl	8001890 <DISP_DisplayText>
					Storage_CleanInit();
 8009182:	f7fd f825 	bl	80061d0 <Storage_CleanInit>
					HAL_Delay(1000);
 8009186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800918a:	f000 ffa5 	bl	800a0d8 <HAL_Delay>
					HAL_NVIC_SystemReset();
 800918e:	f001 fe0e 	bl	800adae <HAL_NVIC_SystemReset>
				bt = UI_ReadButton();
 8009192:	e7e0      	b.n	8009156 <UI_MemSetting+0x122>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8009194:	bf00      	nop
 8009196:	e75e      	b.n	8009056 <UI_MemSetting+0x22>
		if(bt == UI_ReadButton()) continue;
 8009198:	bf00      	nop
 800919a:	e75c      	b.n	8009056 <UI_MemSetting+0x22>
			break;
 800919c:	bf00      	nop
 800919e:	e75a      	b.n	8009056 <UI_MemSetting+0x22>
			break;
 80091a0:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80091a2:	e758      	b.n	8009056 <UI_MemSetting+0x22>
				}
			}
		}
	}
	return UI_IDLE;
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	08012330 	.word	0x08012330
 80091b0:	20001100 	.word	0x20001100
 80091b4:	200011c3 	.word	0x200011c3
 80091b8:	08012304 	.word	0x08012304
 80091bc:	200010d4 	.word	0x200010d4
 80091c0:	08012310 	.word	0x08012310
 80091c4:	08012338 	.word	0x08012338
 80091c8:	2000111d 	.word	0x2000111d
 80091cc:	08012348 	.word	0x08012348

080091d0 <UI_PIDSettingDisplay>:



void UI_PIDSettingDisplay(uint8_t num) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08a      	sub	sp, #40	; 0x28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	4a53      	ldr	r2, [pc, #332]	; (800932c <UI_PIDSettingDisplay+0x15c>)
 80091de:	f992 2000 	ldrsb.w	r2, [r2]
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	dd06      	ble.n	80091f6 <UI_PIDSettingDisplay+0x26>
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	3b03      	subs	r3, #3
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	b25a      	sxtb	r2, r3
 80091f0:	4b4e      	ldr	r3, [pc, #312]	; (800932c <UI_PIDSettingDisplay+0x15c>)
 80091f2:	701a      	strb	r2, [r3, #0]
 80091f4:	e009      	b.n	800920a <UI_PIDSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	4a4c      	ldr	r2, [pc, #304]	; (800932c <UI_PIDSettingDisplay+0x15c>)
 80091fa:	f992 2000 	ldrsb.w	r2, [r2]
 80091fe:	4293      	cmp	r3, r2
 8009200:	da03      	bge.n	800920a <UI_PIDSettingDisplay+0x3a>
 8009202:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8009206:	4b49      	ldr	r3, [pc, #292]	; (800932c <UI_PIDSettingDisplay+0x15c>)
 8009208:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 800920a:	2300      	movs	r3, #0
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
 800920e:	e083      	b.n	8009318 <UI_PIDSettingDisplay+0x148>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8009210:	4b46      	ldr	r3, [pc, #280]	; (800932c <UI_PIDSettingDisplay+0x15c>)
 8009212:	f993 3000 	ldrsb.w	r3, [r3]
 8009216:	461a      	mov	r2, r3
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	441a      	add	r2, r3
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	429a      	cmp	r2, r3
 8009220:	d109      	bne.n	8009236 <UI_PIDSettingDisplay+0x66>
 8009222:	4943      	ldr	r1, [pc, #268]	; (8009330 <UI_PIDSettingDisplay+0x160>)
 8009224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009226:	4613      	mov	r3, r2
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	440b      	add	r3, r1
 800922e:	3302      	adds	r3, #2
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	e008      	b.n	8009248 <UI_PIDSettingDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8009236:	493e      	ldr	r1, [pc, #248]	; (8009330 <UI_PIDSettingDisplay+0x160>)
 8009238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923a:	4613      	mov	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	1a9b      	subs	r3, r3, r2
 8009240:	440b      	add	r3, r1
 8009242:	3302      	adds	r3, #2
 8009244:	2200      	movs	r2, #0
 8009246:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i + first_list) {
 8009248:	4b38      	ldr	r3, [pc, #224]	; (800932c <UI_PIDSettingDisplay+0x15c>)
 800924a:	f993 3000 	ldrsb.w	r3, [r3]
 800924e:	461a      	mov	r2, r3
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	4413      	add	r3, r2
 8009254:	2b04      	cmp	r3, #4
 8009256:	d850      	bhi.n	80092fa <UI_PIDSettingDisplay+0x12a>
 8009258:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <UI_PIDSettingDisplay+0x90>)
 800925a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925e:	bf00      	nop
 8009260:	08009275 	.word	0x08009275
 8009264:	0800928f 	.word	0x0800928f
 8009268:	080092a9 	.word	0x080092a9
 800926c:	080092c3 	.word	0x080092c3
 8009270:	080092e1 	.word	0x080092e1
		case 0:
			sprintf(buff, "KP ~ %3.2f", plan.kpid[0]);
 8009274:	4b2f      	ldr	r3, [pc, #188]	; (8009334 <UI_PIDSettingDisplay+0x164>)
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	4618      	mov	r0, r3
 800927a:	f7f7 f965 	bl	8000548 <__aeabi_f2d>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	f107 000c 	add.w	r0, r7, #12
 8009286:	492c      	ldr	r1, [pc, #176]	; (8009338 <UI_PIDSettingDisplay+0x168>)
 8009288:	f006 fda0 	bl	800fdcc <siprintf>
			break;
 800928c:	e035      	b.n	80092fa <UI_PIDSettingDisplay+0x12a>
		case 1:
			sprintf(buff, "KI ~ %3.2f", plan.kpid[1]);
 800928e:	4b29      	ldr	r3, [pc, #164]	; (8009334 <UI_PIDSettingDisplay+0x164>)
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	4618      	mov	r0, r3
 8009294:	f7f7 f958 	bl	8000548 <__aeabi_f2d>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	f107 000c 	add.w	r0, r7, #12
 80092a0:	4926      	ldr	r1, [pc, #152]	; (800933c <UI_PIDSettingDisplay+0x16c>)
 80092a2:	f006 fd93 	bl	800fdcc <siprintf>
			break;
 80092a6:	e028      	b.n	80092fa <UI_PIDSettingDisplay+0x12a>
		case 2:
			sprintf(buff, "KD ~ %3.2f", plan.kpid[2]);
 80092a8:	4b22      	ldr	r3, [pc, #136]	; (8009334 <UI_PIDSettingDisplay+0x164>)
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7f7 f94b 	bl	8000548 <__aeabi_f2d>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	f107 000c 	add.w	r0, r7, #12
 80092ba:	4921      	ldr	r1, [pc, #132]	; (8009340 <UI_PIDSettingDisplay+0x170>)
 80092bc:	f006 fd86 	bl	800fdcc <siprintf>
			break;
 80092c0:	e01b      	b.n	80092fa <UI_PIDSettingDisplay+0x12a>
		case 3:
			sprintf(buff, "%s", plan.status_pid?"AUTO":"MANUAL");
 80092c2:	4b1c      	ldr	r3, [pc, #112]	; (8009334 <UI_PIDSettingDisplay+0x164>)
 80092c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <UI_PIDSettingDisplay+0x100>
 80092cc:	4a1d      	ldr	r2, [pc, #116]	; (8009344 <UI_PIDSettingDisplay+0x174>)
 80092ce:	e000      	b.n	80092d2 <UI_PIDSettingDisplay+0x102>
 80092d0:	4a1d      	ldr	r2, [pc, #116]	; (8009348 <UI_PIDSettingDisplay+0x178>)
 80092d2:	f107 030c 	add.w	r3, r7, #12
 80092d6:	491d      	ldr	r1, [pc, #116]	; (800934c <UI_PIDSettingDisplay+0x17c>)
 80092d8:	4618      	mov	r0, r3
 80092da:	f006 fd77 	bl	800fdcc <siprintf>
			break;
 80092de:	e00c      	b.n	80092fa <UI_PIDSettingDisplay+0x12a>
		case 4:
			sprintf(buff, "a ~ %1.3f", plan.alpha);
 80092e0:	4b14      	ldr	r3, [pc, #80]	; (8009334 <UI_PIDSettingDisplay+0x164>)
 80092e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7f7 f92f 	bl	8000548 <__aeabi_f2d>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	f107 000c 	add.w	r0, r7, #12
 80092f2:	4917      	ldr	r1, [pc, #92]	; (8009350 <UI_PIDSettingDisplay+0x180>)
 80092f4:	f006 fd6a 	bl	800fdcc <siprintf>
			break;
 80092f8:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 80092fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	4a0b      	ldr	r2, [pc, #44]	; (8009330 <UI_PIDSettingDisplay+0x160>)
 8009304:	4413      	add	r3, r2
 8009306:	f107 020c 	add.w	r2, r7, #12
 800930a:	4611      	mov	r1, r2
 800930c:	4618      	mov	r0, r3
 800930e:	f7f8 fabf 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	3301      	adds	r3, #1
 8009316:	627b      	str	r3, [r7, #36]	; 0x24
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	2b03      	cmp	r3, #3
 800931c:	f77f af78 	ble.w	8009210 <UI_PIDSettingDisplay+0x40>
	}
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	3728      	adds	r7, #40	; 0x28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	200011c4 	.word	0x200011c4
 8009330:	20001194 	.word	0x20001194
 8009334:	20000f2c 	.word	0x20000f2c
 8009338:	08012350 	.word	0x08012350
 800933c:	0801235c 	.word	0x0801235c
 8009340:	08012368 	.word	0x08012368
 8009344:	08012374 	.word	0x08012374
 8009348:	0801237c 	.word	0x0801237c
 800934c:	08012384 	.word	0x08012384
 8009350:	08012388 	.word	0x08012388
 8009354:	00000000 	.word	0x00000000

08009358 <UI_PIDSetting>:

UI_Menu_Lists UI_PIDSetting() {
 8009358:	b590      	push	{r4, r7, lr}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	73bb      	strb	r3, [r7, #14]
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	60bb      	str	r3, [r7, #8]
	DISP_DisplayText(&home_status, "PID");
 8009366:	49aa      	ldr	r1, [pc, #680]	; (8009610 <UI_PIDSetting+0x2b8>)
 8009368:	48aa      	ldr	r0, [pc, #680]	; (8009614 <UI_PIDSetting+0x2bc>)
 800936a:	f7f8 fa91 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_PIDSettingDisplay(num_menu);
 800936e:	4baa      	ldr	r3, [pc, #680]	; (8009618 <UI_PIDSetting+0x2c0>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff ff2c 	bl	80091d0 <UI_PIDSettingDisplay>
	tick = HAL_GetTick();
 8009378:	f000 fea2 	bl	800a0c0 <HAL_GetTick>
 800937c:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800937e:	f000 fe9f 	bl	800a0c0 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	7bba      	ldrb	r2, [r7, #14]
 800938a:	2a01      	cmp	r2, #1
 800938c:	d101      	bne.n	8009392 <UI_PIDSetting+0x3a>
 800938e:	2219      	movs	r2, #25
 8009390:	e000      	b.n	8009394 <UI_PIDSetting+0x3c>
 8009392:	2246      	movs	r2, #70	; 0x46
 8009394:	429a      	cmp	r2, r3
 8009396:	f200 8224 	bhi.w	80097e2 <UI_PIDSetting+0x48a>
		bt2 = UI_ReadButton();
 800939a:	f7fd fc01 	bl	8006ba0 <UI_ReadButton>
 800939e:	4603      	mov	r3, r0
 80093a0:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d103      	bne.n	80093b2 <UI_PIDSetting+0x5a>
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 821a 	beq.w	80097e6 <UI_PIDSetting+0x48e>
		bt = bt2;
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d010      	beq.n	80093e2 <UI_PIDSetting+0x8a>
			if(num_menu==4) num_menu = 0; else num_menu++;
 80093c0:	4b95      	ldr	r3, [pc, #596]	; (8009618 <UI_PIDSetting+0x2c0>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d103      	bne.n	80093d0 <UI_PIDSetting+0x78>
 80093c8:	4b93      	ldr	r3, [pc, #588]	; (8009618 <UI_PIDSetting+0x2c0>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	e005      	b.n	80093dc <UI_PIDSetting+0x84>
 80093d0:	4b91      	ldr	r3, [pc, #580]	; (8009618 <UI_PIDSetting+0x2c0>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	3301      	adds	r3, #1
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	4b8f      	ldr	r3, [pc, #572]	; (8009618 <UI_PIDSetting+0x2c0>)
 80093da:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 80093e0:	e7c5      	b.n	800936e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d010      	beq.n	800940e <UI_PIDSetting+0xb6>
			if(num_menu==0) num_menu = 4; else num_menu--;
 80093ec:	4b8a      	ldr	r3, [pc, #552]	; (8009618 <UI_PIDSetting+0x2c0>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <UI_PIDSetting+0xa4>
 80093f4:	4b88      	ldr	r3, [pc, #544]	; (8009618 <UI_PIDSetting+0x2c0>)
 80093f6:	2204      	movs	r2, #4
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	e005      	b.n	8009408 <UI_PIDSetting+0xb0>
 80093fc:	4b86      	ldr	r3, [pc, #536]	; (8009618 <UI_PIDSetting+0x2c0>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	3b01      	subs	r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	4b84      	ldr	r3, [pc, #528]	; (8009618 <UI_PIDSetting+0x2c0>)
 8009406:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 800940c:	e7af      	b.n	800936e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d004      	beq.n	8009422 <UI_PIDSetting+0xca>
			num_menu = 0;
 8009418:	4b7f      	ldr	r3, [pc, #508]	; (8009618 <UI_PIDSetting+0x2c0>)
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800941e:	2302      	movs	r3, #2
 8009420:	e1e9      	b.n	80097f6 <UI_PIDSetting+0x49e>
		}
		else if(bt & SW_BK_PRESS) {
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	f003 0308 	and.w	r3, r3, #8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00a      	beq.n	8009442 <UI_PIDSetting+0xea>
			num_menu = 0;
 800942c:	4b7a      	ldr	r3, [pc, #488]	; (8009618 <UI_PIDSetting+0x2c0>)
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
			DISP_DisplayText(&short_message, "Saving..");
 8009432:	497a      	ldr	r1, [pc, #488]	; (800961c <UI_PIDSetting+0x2c4>)
 8009434:	487a      	ldr	r0, [pc, #488]	; (8009620 <UI_PIDSetting+0x2c8>)
 8009436:	f7f8 fa2b 	bl	8001890 <DISP_DisplayText>
			Storage_SetPID();
 800943a:	f7fc fc11 	bl	8005c60 <Storage_SetPID>
			return UI_SET;
 800943e:	2307      	movs	r3, #7
 8009440:	e1d9      	b.n	80097f6 <UI_PIDSetting+0x49e>
		}
		switch(num_menu) {
 8009442:	4b75      	ldr	r3, [pc, #468]	; (8009618 <UI_PIDSetting+0x2c0>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b04      	cmp	r3, #4
 8009448:	f000 812b 	beq.w	80096a2 <UI_PIDSetting+0x34a>
 800944c:	2b04      	cmp	r3, #4
 800944e:	dc96      	bgt.n	800937e <UI_PIDSetting+0x26>
 8009450:	2b02      	cmp	r3, #2
 8009452:	dc02      	bgt.n	800945a <UI_PIDSetting+0x102>
 8009454:	2b00      	cmp	r3, #0
 8009456:	da04      	bge.n	8009462 <UI_PIDSetting+0x10a>
 8009458:	e1cc      	b.n	80097f4 <UI_PIDSetting+0x49c>
 800945a:	2b03      	cmp	r3, #3
 800945c:	f000 810c 	beq.w	8009678 <UI_PIDSetting+0x320>
 8009460:	e1c8      	b.n	80097f4 <UI_PIDSetting+0x49c>
		case 0:
		case 1:
		case 2:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009468:	2b10      	cmp	r3, #16
 800946a:	d130      	bne.n	80094ce <UI_PIDSetting+0x176>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 499.0; else plan.kpid[num_menu]-=1.0;
 800946c:	4b6a      	ldr	r3, [pc, #424]	; (8009618 <UI_PIDSetting+0x2c0>)
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	4a6c      	ldr	r2, [pc, #432]	; (8009624 <UI_PIDSetting+0x2cc>)
 8009472:	3308      	adds	r3, #8
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	3304      	adds	r3, #4
 800947a:	edd3 7a00 	vldr	s15, [r3]
 800947e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009486:	d109      	bne.n	800949c <UI_PIDSetting+0x144>
 8009488:	4b63      	ldr	r3, [pc, #396]	; (8009618 <UI_PIDSetting+0x2c0>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	4a65      	ldr	r2, [pc, #404]	; (8009624 <UI_PIDSetting+0x2cc>)
 800948e:	3308      	adds	r3, #8
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	3304      	adds	r3, #4
 8009496:	4a64      	ldr	r2, [pc, #400]	; (8009628 <UI_PIDSetting+0x2d0>)
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	e015      	b.n	80094c8 <UI_PIDSetting+0x170>
 800949c:	4b5e      	ldr	r3, [pc, #376]	; (8009618 <UI_PIDSetting+0x2c0>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	4a60      	ldr	r2, [pc, #384]	; (8009624 <UI_PIDSetting+0x2cc>)
 80094a2:	3308      	adds	r3, #8
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	3304      	adds	r3, #4
 80094aa:	edd3 7a00 	vldr	s15, [r3]
 80094ae:	4b5a      	ldr	r3, [pc, #360]	; (8009618 <UI_PIDSetting+0x2c0>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094ba:	4a5a      	ldr	r2, [pc, #360]	; (8009624 <UI_PIDSetting+0x2cc>)
 80094bc:	3308      	adds	r3, #8
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	3304      	adds	r3, #4
 80094c4:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 80094c8:	2301      	movs	r3, #1
 80094ca:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80094cc:	e74f      	b.n	800936e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d133      	bne.n	8009540 <UI_PIDSetting+0x1e8>
				if(plan.kpid[num_menu]==499.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=1.0;
 80094d8:	4b4f      	ldr	r3, [pc, #316]	; (8009618 <UI_PIDSetting+0x2c0>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	4a51      	ldr	r2, [pc, #324]	; (8009624 <UI_PIDSetting+0x2cc>)
 80094de:	3308      	adds	r3, #8
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	3304      	adds	r3, #4
 80094e6:	edd3 7a00 	vldr	s15, [r3]
 80094ea:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800962c <UI_PIDSetting+0x2d4>
 80094ee:	eef4 7a47 	vcmp.f32	s15, s14
 80094f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f6:	d10a      	bne.n	800950e <UI_PIDSetting+0x1b6>
 80094f8:	4b47      	ldr	r3, [pc, #284]	; (8009618 <UI_PIDSetting+0x2c0>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	4a49      	ldr	r2, [pc, #292]	; (8009624 <UI_PIDSetting+0x2cc>)
 80094fe:	3308      	adds	r3, #8
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	3304      	adds	r3, #4
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	e015      	b.n	800953a <UI_PIDSetting+0x1e2>
 800950e:	4b42      	ldr	r3, [pc, #264]	; (8009618 <UI_PIDSetting+0x2c0>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	4a44      	ldr	r2, [pc, #272]	; (8009624 <UI_PIDSetting+0x2cc>)
 8009514:	3308      	adds	r3, #8
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	3304      	adds	r3, #4
 800951c:	edd3 7a00 	vldr	s15, [r3]
 8009520:	4b3d      	ldr	r3, [pc, #244]	; (8009618 <UI_PIDSetting+0x2c0>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800952c:	4a3d      	ldr	r2, [pc, #244]	; (8009624 <UI_PIDSetting+0x2cc>)
 800952e:	3308      	adds	r3, #8
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	3304      	adds	r3, #4
 8009536:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 800953a:	2301      	movs	r3, #1
 800953c:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800953e:	e716      	b.n	800936e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009546:	2b30      	cmp	r3, #48	; 0x30
 8009548:	d13b      	bne.n	80095c2 <UI_PIDSetting+0x26a>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 499.0; else plan.kpid[num_menu]-=0.10;
 800954a:	4b33      	ldr	r3, [pc, #204]	; (8009618 <UI_PIDSetting+0x2c0>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	4a35      	ldr	r2, [pc, #212]	; (8009624 <UI_PIDSetting+0x2cc>)
 8009550:	3308      	adds	r3, #8
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	3304      	adds	r3, #4
 8009558:	edd3 7a00 	vldr	s15, [r3]
 800955c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009564:	d109      	bne.n	800957a <UI_PIDSetting+0x222>
 8009566:	4b2c      	ldr	r3, [pc, #176]	; (8009618 <UI_PIDSetting+0x2c0>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	4a2e      	ldr	r2, [pc, #184]	; (8009624 <UI_PIDSetting+0x2cc>)
 800956c:	3308      	adds	r3, #8
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	3304      	adds	r3, #4
 8009574:	4a2c      	ldr	r2, [pc, #176]	; (8009628 <UI_PIDSetting+0x2d0>)
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e020      	b.n	80095bc <UI_PIDSetting+0x264>
 800957a:	4b27      	ldr	r3, [pc, #156]	; (8009618 <UI_PIDSetting+0x2c0>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	4a29      	ldr	r2, [pc, #164]	; (8009624 <UI_PIDSetting+0x2cc>)
 8009580:	3308      	adds	r3, #8
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	3304      	adds	r3, #4
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f7f6 ffdc 	bl	8000548 <__aeabi_f2d>
 8009590:	a31d      	add	r3, pc, #116	; (adr r3, 8009608 <UI_PIDSetting+0x2b0>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f6 fe77 	bl	8000288 <__aeabi_dsub>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	491e      	ldr	r1, [pc, #120]	; (8009618 <UI_PIDSetting+0x2c0>)
 80095a0:	7809      	ldrb	r1, [r1, #0]
 80095a2:	460c      	mov	r4, r1
 80095a4:	4610      	mov	r0, r2
 80095a6:	4619      	mov	r1, r3
 80095a8:	f7f7 fb1e 	bl	8000be8 <__aeabi_d2f>
 80095ac:	4602      	mov	r2, r0
 80095ae:	491d      	ldr	r1, [pc, #116]	; (8009624 <UI_PIDSetting+0x2cc>)
 80095b0:	f104 0308 	add.w	r3, r4, #8
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	440b      	add	r3, r1
 80095b8:	3304      	adds	r3, #4
 80095ba:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 80095bc:	2301      	movs	r3, #1
 80095be:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80095c0:	e6d5      	b.n	800936e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80095c8:	2b22      	cmp	r3, #34	; 0x22
 80095ca:	f040 810e 	bne.w	80097ea <UI_PIDSetting+0x492>
				if(plan.kpid[num_menu]==499.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=0.1;
 80095ce:	4b12      	ldr	r3, [pc, #72]	; (8009618 <UI_PIDSetting+0x2c0>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	4a14      	ldr	r2, [pc, #80]	; (8009624 <UI_PIDSetting+0x2cc>)
 80095d4:	3308      	adds	r3, #8
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	3304      	adds	r3, #4
 80095dc:	edd3 7a00 	vldr	s15, [r3]
 80095e0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800962c <UI_PIDSetting+0x2d4>
 80095e4:	eef4 7a47 	vcmp.f32	s15, s14
 80095e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ec:	d120      	bne.n	8009630 <UI_PIDSetting+0x2d8>
 80095ee:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <UI_PIDSetting+0x2c0>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <UI_PIDSetting+0x2cc>)
 80095f4:	3308      	adds	r3, #8
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	3304      	adds	r3, #4
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	e036      	b.n	8009672 <UI_PIDSetting+0x31a>
 8009604:	f3af 8000 	nop.w
 8009608:	9999999a 	.word	0x9999999a
 800960c:	3fb99999 	.word	0x3fb99999
 8009610:	08012394 	.word	0x08012394
 8009614:	20001100 	.word	0x20001100
 8009618:	200011c5 	.word	0x200011c5
 800961c:	08012398 	.word	0x08012398
 8009620:	200010d4 	.word	0x200010d4
 8009624:	20000f2c 	.word	0x20000f2c
 8009628:	43f98000 	.word	0x43f98000
 800962c:	43f98000 	.word	0x43f98000
 8009630:	4b79      	ldr	r3, [pc, #484]	; (8009818 <UI_PIDSetting+0x4c0>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	4a79      	ldr	r2, [pc, #484]	; (800981c <UI_PIDSetting+0x4c4>)
 8009636:	3308      	adds	r3, #8
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	3304      	adds	r3, #4
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4618      	mov	r0, r3
 8009642:	f7f6 ff81 	bl	8000548 <__aeabi_f2d>
 8009646:	a36e      	add	r3, pc, #440	; (adr r3, 8009800 <UI_PIDSetting+0x4a8>)
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f7f6 fe1e 	bl	800028c <__adddf3>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	4970      	ldr	r1, [pc, #448]	; (8009818 <UI_PIDSetting+0x4c0>)
 8009656:	7809      	ldrb	r1, [r1, #0]
 8009658:	460c      	mov	r4, r1
 800965a:	4610      	mov	r0, r2
 800965c:	4619      	mov	r1, r3
 800965e:	f7f7 fac3 	bl	8000be8 <__aeabi_d2f>
 8009662:	4602      	mov	r2, r0
 8009664:	496d      	ldr	r1, [pc, #436]	; (800981c <UI_PIDSetting+0x4c4>)
 8009666:	f104 0308 	add.w	r3, r4, #8
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	440b      	add	r3, r1
 800966e:	3304      	adds	r3, #4
 8009670:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8009672:	2301      	movs	r3, #1
 8009674:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8009676:	e67a      	b.n	800936e <UI_PIDSetting+0x16>
			}
			break;
		case 3 :
			if(bt & (SW_LF_PRESS|SW_RG_PRESS)) {
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	f003 0312 	and.w	r3, r3, #18
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 80b5 	beq.w	80097ee <UI_PIDSetting+0x496>
				plan.status_pid = !plan.status_pid;
 8009684:	4b65      	ldr	r3, [pc, #404]	; (800981c <UI_PIDSetting+0x4c4>)
 8009686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800968a:	2b00      	cmp	r3, #0
 800968c:	bf0c      	ite	eq
 800968e:	2301      	moveq	r3, #1
 8009690:	2300      	movne	r3, #0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	461a      	mov	r2, r3
 8009696:	4b61      	ldr	r3, [pc, #388]	; (800981c <UI_PIDSetting+0x4c4>)
 8009698:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				bt_status = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80096a0:	e665      	b.n	800936e <UI_PIDSetting+0x16>
			}
			break;
		case 4:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80096a8:	2b10      	cmp	r3, #16
 80096aa:	d121      	bne.n	80096f0 <UI_PIDSetting+0x398>
				plan.alpha-=0.01;
 80096ac:	4b5b      	ldr	r3, [pc, #364]	; (800981c <UI_PIDSetting+0x4c4>)
 80096ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7f6 ff49 	bl	8000548 <__aeabi_f2d>
 80096b6:	a354      	add	r3, pc, #336	; (adr r3, 8009808 <UI_PIDSetting+0x4b0>)
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	f7f6 fde4 	bl	8000288 <__aeabi_dsub>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	f7f7 fa8e 	bl	8000be8 <__aeabi_d2f>
 80096cc:	4603      	mov	r3, r0
 80096ce:	4a53      	ldr	r2, [pc, #332]	; (800981c <UI_PIDSetting+0x4c4>)
 80096d0:	6353      	str	r3, [r2, #52]	; 0x34
				if(plan.alpha<0) plan.alpha = 1.0;
 80096d2:	4b52      	ldr	r3, [pc, #328]	; (800981c <UI_PIDSetting+0x4c4>)
 80096d4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80096d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e0:	d503      	bpl.n	80096ea <UI_PIDSetting+0x392>
 80096e2:	4b4e      	ldr	r3, [pc, #312]	; (800981c <UI_PIDSetting+0x4c4>)
 80096e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80096e8:	635a      	str	r2, [r3, #52]	; 0x34
				bt_status = 1;
 80096ea:	2301      	movs	r3, #1
 80096ec:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80096ee:	e63e      	b.n	800936e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d123      	bne.n	8009742 <UI_PIDSetting+0x3ea>
				plan.alpha+=0.01;
 80096fa:	4b48      	ldr	r3, [pc, #288]	; (800981c <UI_PIDSetting+0x4c4>)
 80096fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fe:	4618      	mov	r0, r3
 8009700:	f7f6 ff22 	bl	8000548 <__aeabi_f2d>
 8009704:	a340      	add	r3, pc, #256	; (adr r3, 8009808 <UI_PIDSetting+0x4b0>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f6 fdbf 	bl	800028c <__adddf3>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4610      	mov	r0, r2
 8009714:	4619      	mov	r1, r3
 8009716:	f7f7 fa67 	bl	8000be8 <__aeabi_d2f>
 800971a:	4603      	mov	r3, r0
 800971c:	4a3f      	ldr	r2, [pc, #252]	; (800981c <UI_PIDSetting+0x4c4>)
 800971e:	6353      	str	r3, [r2, #52]	; 0x34
				if(plan.alpha>1.0) plan.alpha = 0.0;
 8009720:	4b3e      	ldr	r3, [pc, #248]	; (800981c <UI_PIDSetting+0x4c4>)
 8009722:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800972a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009732:	dd03      	ble.n	800973c <UI_PIDSetting+0x3e4>
 8009734:	4b39      	ldr	r3, [pc, #228]	; (800981c <UI_PIDSetting+0x4c4>)
 8009736:	f04f 0200 	mov.w	r2, #0
 800973a:	635a      	str	r2, [r3, #52]	; 0x34
				bt_status = 1;
 800973c:	2301      	movs	r3, #1
 800973e:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8009740:	e615      	b.n	800936e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009748:	2b30      	cmp	r3, #48	; 0x30
 800974a:	d121      	bne.n	8009790 <UI_PIDSetting+0x438>
				plan.alpha-=0.0010;
 800974c:	4b33      	ldr	r3, [pc, #204]	; (800981c <UI_PIDSetting+0x4c4>)
 800974e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009750:	4618      	mov	r0, r3
 8009752:	f7f6 fef9 	bl	8000548 <__aeabi_f2d>
 8009756:	a32e      	add	r3, pc, #184	; (adr r3, 8009810 <UI_PIDSetting+0x4b8>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f7f6 fd94 	bl	8000288 <__aeabi_dsub>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4610      	mov	r0, r2
 8009766:	4619      	mov	r1, r3
 8009768:	f7f7 fa3e 	bl	8000be8 <__aeabi_d2f>
 800976c:	4603      	mov	r3, r0
 800976e:	4a2b      	ldr	r2, [pc, #172]	; (800981c <UI_PIDSetting+0x4c4>)
 8009770:	6353      	str	r3, [r2, #52]	; 0x34
				if(plan.alpha<0) plan.alpha = 1.0;
 8009772:	4b2a      	ldr	r3, [pc, #168]	; (800981c <UI_PIDSetting+0x4c4>)
 8009774:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800977c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009780:	d503      	bpl.n	800978a <UI_PIDSetting+0x432>
 8009782:	4b26      	ldr	r3, [pc, #152]	; (800981c <UI_PIDSetting+0x4c4>)
 8009784:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009788:	635a      	str	r2, [r3, #52]	; 0x34
				bt_status = 1;
 800978a:	2301      	movs	r3, #1
 800978c:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800978e:	e5ee      	b.n	800936e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009796:	2b22      	cmp	r3, #34	; 0x22
 8009798:	d12b      	bne.n	80097f2 <UI_PIDSetting+0x49a>
				plan.alpha+=0.001;
 800979a:	4b20      	ldr	r3, [pc, #128]	; (800981c <UI_PIDSetting+0x4c4>)
 800979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f6 fed2 	bl	8000548 <__aeabi_f2d>
 80097a4:	a31a      	add	r3, pc, #104	; (adr r3, 8009810 <UI_PIDSetting+0x4b8>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 fd6f 	bl	800028c <__adddf3>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4610      	mov	r0, r2
 80097b4:	4619      	mov	r1, r3
 80097b6:	f7f7 fa17 	bl	8000be8 <__aeabi_d2f>
 80097ba:	4603      	mov	r3, r0
 80097bc:	4a17      	ldr	r2, [pc, #92]	; (800981c <UI_PIDSetting+0x4c4>)
 80097be:	6353      	str	r3, [r2, #52]	; 0x34
				if(plan.alpha>1.0) plan.alpha = 0.0;
 80097c0:	4b16      	ldr	r3, [pc, #88]	; (800981c <UI_PIDSetting+0x4c4>)
 80097c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80097c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d2:	dd03      	ble.n	80097dc <UI_PIDSetting+0x484>
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <UI_PIDSetting+0x4c4>)
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	635a      	str	r2, [r3, #52]	; 0x34
				bt_status = 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80097e0:	e5c5      	b.n	800936e <UI_PIDSetting+0x16>
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80097e2:	bf00      	nop
 80097e4:	e5cb      	b.n	800937e <UI_PIDSetting+0x26>
		if(bt == bt2 && bt_status == 0) continue;
 80097e6:	bf00      	nop
 80097e8:	e5c9      	b.n	800937e <UI_PIDSetting+0x26>
			break;
 80097ea:	bf00      	nop
 80097ec:	e5c7      	b.n	800937e <UI_PIDSetting+0x26>
			break;
 80097ee:	bf00      	nop
 80097f0:	e5c5      	b.n	800937e <UI_PIDSetting+0x26>
			}
			break;
 80097f2:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80097f4:	e5c3      	b.n	800937e <UI_PIDSetting+0x26>
		}
	}
	return UI_IDLE;
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd90      	pop	{r4, r7, pc}
 80097fe:	bf00      	nop
 8009800:	9999999a 	.word	0x9999999a
 8009804:	3fb99999 	.word	0x3fb99999
 8009808:	47ae147b 	.word	0x47ae147b
 800980c:	3f847ae1 	.word	0x3f847ae1
 8009810:	d2f1a9fc 	.word	0xd2f1a9fc
 8009814:	3f50624d 	.word	0x3f50624d
 8009818:	200011c5 	.word	0x200011c5
 800981c:	20000f2c 	.word	0x20000f2c

08009820 <UI_SpeedSetDisplay>:



void UI_SpeedSetDisplay(uint8_t num) {
 8009820:	b580      	push	{r7, lr}
 8009822:	b08a      	sub	sp, #40	; 0x28
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<4; i++) {
 800982a:	2301      	movs	r3, #1
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
 800982e:	e055      	b.n	80098dc <UI_SpeedSetDisplay+0xbc>
		if(i == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009834:	429a      	cmp	r2, r3
 8009836:	d109      	bne.n	800984c <UI_SpeedSetDisplay+0x2c>
 8009838:	492c      	ldr	r1, [pc, #176]	; (80098ec <UI_SpeedSetDisplay+0xcc>)
 800983a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983c:	4613      	mov	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	1a9b      	subs	r3, r3, r2
 8009842:	440b      	add	r3, r1
 8009844:	3302      	adds	r3, #2
 8009846:	2201      	movs	r2, #1
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	e008      	b.n	800985e <UI_SpeedSetDisplay+0x3e>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 800984c:	4927      	ldr	r1, [pc, #156]	; (80098ec <UI_SpeedSetDisplay+0xcc>)
 800984e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009850:	4613      	mov	r3, r2
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	1a9b      	subs	r3, r3, r2
 8009856:	440b      	add	r3, r1
 8009858:	3302      	adds	r3, #2
 800985a:	2200      	movs	r2, #0
 800985c:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i) {
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	2b03      	cmp	r3, #3
 8009862:	d01f      	beq.n	80098a4 <UI_SpeedSetDisplay+0x84>
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	2b03      	cmp	r3, #3
 8009868:	dc29      	bgt.n	80098be <UI_SpeedSetDisplay+0x9e>
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	2b01      	cmp	r3, #1
 800986e:	d003      	beq.n	8009878 <UI_SpeedSetDisplay+0x58>
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	2b02      	cmp	r3, #2
 8009874:	d00b      	beq.n	800988e <UI_SpeedSetDisplay+0x6e>
 8009876:	e022      	b.n	80098be <UI_SpeedSetDisplay+0x9e>
		case 1:
			sprintf(buff, "Speed ~ %-3i", plan.speed);
 8009878:	4b1d      	ldr	r3, [pc, #116]	; (80098f0 <UI_SpeedSetDisplay+0xd0>)
 800987a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800987e:	461a      	mov	r2, r3
 8009880:	f107 030c 	add.w	r3, r7, #12
 8009884:	491b      	ldr	r1, [pc, #108]	; (80098f4 <UI_SpeedSetDisplay+0xd4>)
 8009886:	4618      	mov	r0, r3
 8009888:	f006 faa0 	bl	800fdcc <siprintf>
			break;
 800988c:	e017      	b.n	80098be <UI_SpeedSetDisplay+0x9e>
		case 2:
			sprintf(buff, "Tr Speed ~ %-3i", plan.turn_speed);
 800988e:	4b18      	ldr	r3, [pc, #96]	; (80098f0 <UI_SpeedSetDisplay+0xd0>)
 8009890:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009894:	461a      	mov	r2, r3
 8009896:	f107 030c 	add.w	r3, r7, #12
 800989a:	4917      	ldr	r1, [pc, #92]	; (80098f8 <UI_SpeedSetDisplay+0xd8>)
 800989c:	4618      	mov	r0, r3
 800989e:	f006 fa95 	bl	800fdcc <siprintf>
			break;
 80098a2:	e00c      	b.n	80098be <UI_SpeedSetDisplay+0x9e>
		case 3:
			sprintf(buff, "Accel ~ %-1.2f", plan.acc);
 80098a4:	4b12      	ldr	r3, [pc, #72]	; (80098f0 <UI_SpeedSetDisplay+0xd0>)
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7f6 fe4d 	bl	8000548 <__aeabi_f2d>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	f107 000c 	add.w	r0, r7, #12
 80098b6:	4911      	ldr	r1, [pc, #68]	; (80098fc <UI_SpeedSetDisplay+0xdc>)
 80098b8:	f006 fa88 	bl	800fdcc <siprintf>
			break;
 80098bc:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 80098be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c0:	4613      	mov	r3, r2
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	4a09      	ldr	r2, [pc, #36]	; (80098ec <UI_SpeedSetDisplay+0xcc>)
 80098c8:	4413      	add	r3, r2
 80098ca:	f107 020c 	add.w	r2, r7, #12
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f7 ffdd 	bl	8001890 <DISP_DisplayText>
	for(int i=1; i<4; i++) {
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	3301      	adds	r3, #1
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	2b03      	cmp	r3, #3
 80098e0:	dda6      	ble.n	8009830 <UI_SpeedSetDisplay+0x10>
	}
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	3728      	adds	r7, #40	; 0x28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20001194 	.word	0x20001194
 80098f0:	20000f2c 	.word	0x20000f2c
 80098f4:	080123a4 	.word	0x080123a4
 80098f8:	080123b4 	.word	0x080123b4
 80098fc:	080123c4 	.word	0x080123c4

08009900 <UI_SpeedSetting>:

UI_Menu_Lists UI_SpeedSetting() {
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t num_menu = 1;
 8009906:	2301      	movs	r3, #1
 8009908:	73bb      	strb	r3, [r7, #14]
	uint32_t tick = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	60bb      	str	r3, [r7, #8]
	uint8_t bt_status = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	737b      	strb	r3, [r7, #13]
	DISP_DisplayText(&home_status, "SPEED");
 8009912:	4988      	ldr	r1, [pc, #544]	; (8009b34 <UI_SpeedSetting+0x234>)
 8009914:	4888      	ldr	r0, [pc, #544]	; (8009b38 <UI_SpeedSetting+0x238>)
 8009916:	f7f7 ffbb 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_SpeedSetDisplay(num_menu);
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff ff7f 	bl	8009820 <UI_SpeedSetDisplay>
	tick = HAL_GetTick();
 8009922:	f000 fbcd 	bl	800a0c0 <HAL_GetTick>
 8009926:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8009928:	f000 fbca 	bl	800a0c0 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	7b7a      	ldrb	r2, [r7, #13]
 8009934:	2a01      	cmp	r2, #1
 8009936:	d101      	bne.n	800993c <UI_SpeedSetting+0x3c>
 8009938:	221e      	movs	r2, #30
 800993a:	e000      	b.n	800993e <UI_SpeedSetting+0x3e>
 800993c:	2246      	movs	r2, #70	; 0x46
 800993e:	429a      	cmp	r2, r3
 8009940:	f200 80ef 	bhi.w	8009b22 <UI_SpeedSetting+0x222>
		bt2 = UI_ReadButton();
 8009944:	f7fd f92c 	bl	8006ba0 <UI_ReadButton>
 8009948:	4603      	mov	r3, r0
 800994a:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 800994c:	7bfa      	ldrb	r2, [r7, #15]
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	429a      	cmp	r2, r3
 8009952:	d103      	bne.n	800995c <UI_SpeedSetting+0x5c>
 8009954:	7b7b      	ldrb	r3, [r7, #13]
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80e5 	beq.w	8009b26 <UI_SpeedSetting+0x226>
		bt = bt2;
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	f003 0304 	and.w	r3, r3, #4
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <UI_SpeedSetting+0x80>
			if(num_menu!=3) num_menu++;
 800996a:	7bbb      	ldrb	r3, [r7, #14]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d002      	beq.n	8009976 <UI_SpeedSetting+0x76>
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	3301      	adds	r3, #1
 8009974:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 800997a:	f7fc f991 	bl	8005ca0 <Storage_SetSpeed>
			goto ui_mem;
 800997e:	e7cc      	b.n	800991a <UI_SpeedSetting+0x1a>
		}
		else if(bt & SW_UP_PRESS) {
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00e      	beq.n	80099a8 <UI_SpeedSetting+0xa8>
			if(num_menu==1) {
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d103      	bne.n	8009998 <UI_SpeedSetting+0x98>
				Storage_SetSpeed();
 8009990:	f7fc f986 	bl	8005ca0 <Storage_SetSpeed>
				return UI_HOMESCREEN;
 8009994:	2302      	movs	r3, #2
 8009996:	e0c8      	b.n	8009b2a <UI_SpeedSetting+0x22a>
			}
			else num_menu--;
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	3b01      	subs	r3, #1
 800999c:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 80099a2:	f7fc f97d 	bl	8005ca0 <Storage_SetSpeed>
			goto ui_mem;
 80099a6:	e7b8      	b.n	800991a <UI_SpeedSetting+0x1a>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	f003 0348 	and.w	r3, r3, #72	; 0x48
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d005      	beq.n	80099be <UI_SpeedSetting+0xbe>
			num_menu = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73bb      	strb	r3, [r7, #14]
			Storage_SetSpeed();
 80099b6:	f7fc f973 	bl	8005ca0 <Storage_SetSpeed>
			return UI_HOMESCREEN;
 80099ba:	2302      	movs	r3, #2
 80099bc:	e0b5      	b.n	8009b2a <UI_SpeedSetting+0x22a>
		}
		switch(num_menu) {
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d06e      	beq.n	8009aa2 <UI_SpeedSetting+0x1a2>
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	dcaf      	bgt.n	8009928 <UI_SpeedSetting+0x28>
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d002      	beq.n	80099d2 <UI_SpeedSetting+0xd2>
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d034      	beq.n	8009a3a <UI_SpeedSetting+0x13a>
 80099d0:	e0aa      	b.n	8009b28 <UI_SpeedSetting+0x228>
		case 1 :
			if(bt & SW_LF_PRESS) {
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d014      	beq.n	8009a06 <UI_SpeedSetting+0x106>
				if(plan.speed==0) plan.speed = 99; else plan.speed-=1;
 80099dc:	4b57      	ldr	r3, [pc, #348]	; (8009b3c <UI_SpeedSetting+0x23c>)
 80099de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <UI_SpeedSetting+0xf0>
 80099e6:	4b55      	ldr	r3, [pc, #340]	; (8009b3c <UI_SpeedSetting+0x23c>)
 80099e8:	2263      	movs	r2, #99	; 0x63
 80099ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80099ee:	e007      	b.n	8009a00 <UI_SpeedSetting+0x100>
 80099f0:	4b52      	ldr	r3, [pc, #328]	; (8009b3c <UI_SpeedSetting+0x23c>)
 80099f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	4b50      	ldr	r3, [pc, #320]	; (8009b3c <UI_SpeedSetting+0x23c>)
 80099fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				bt_status = 1;
 8009a00:	2301      	movs	r3, #1
 8009a02:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009a04:	e789      	b.n	800991a <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d014      	beq.n	8009a3a <UI_SpeedSetting+0x13a>
				if(plan.speed==99) plan.speed = 0; else plan.speed+=1;
 8009a10:	4b4a      	ldr	r3, [pc, #296]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009a16:	2b63      	cmp	r3, #99	; 0x63
 8009a18:	d104      	bne.n	8009a24 <UI_SpeedSetting+0x124>
 8009a1a:	4b48      	ldr	r3, [pc, #288]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8009a22:	e007      	b.n	8009a34 <UI_SpeedSetting+0x134>
 8009a24:	4b45      	ldr	r3, [pc, #276]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	4b43      	ldr	r3, [pc, #268]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a30:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				bt_status = 1;
 8009a34:	2301      	movs	r3, #1
 8009a36:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009a38:	e76f      	b.n	800991a <UI_SpeedSetting+0x1a>
			}
		case 2 :
			if(bt & SW_LF_PRESS) {
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d014      	beq.n	8009a6e <UI_SpeedSetting+0x16e>
				if(plan.turn_speed==0) plan.turn_speed = 99; else plan.turn_speed-=1;
 8009a44:	4b3d      	ldr	r3, [pc, #244]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a46:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d104      	bne.n	8009a58 <UI_SpeedSetting+0x158>
 8009a4e:	4b3b      	ldr	r3, [pc, #236]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a50:	2263      	movs	r2, #99	; 0x63
 8009a52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8009a56:	e007      	b.n	8009a68 <UI_SpeedSetting+0x168>
 8009a58:	4b38      	ldr	r3, [pc, #224]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a5a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	4b36      	ldr	r3, [pc, #216]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a64:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				bt_status = 1;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009a6c:	e755      	b.n	800991a <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	f003 0302 	and.w	r3, r3, #2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d014      	beq.n	8009aa2 <UI_SpeedSetting+0x1a2>
				if(plan.turn_speed==99) plan.turn_speed = 0; else plan.turn_speed+=1;
 8009a78:	4b30      	ldr	r3, [pc, #192]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a7a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009a7e:	2b63      	cmp	r3, #99	; 0x63
 8009a80:	d104      	bne.n	8009a8c <UI_SpeedSetting+0x18c>
 8009a82:	4b2e      	ldr	r3, [pc, #184]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8009a8a:	e007      	b.n	8009a9c <UI_SpeedSetting+0x19c>
 8009a8c:	4b2b      	ldr	r3, [pc, #172]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a8e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009a92:	3301      	adds	r3, #1
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	4b29      	ldr	r3, [pc, #164]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009a98:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				bt_status = 1;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009aa0:	e73b      	b.n	800991a <UI_SpeedSetting+0x1a>
			}
		case 3 :
			if(bt & SW_LF_PRESS) {
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d018      	beq.n	8009ade <UI_SpeedSetting+0x1de>
				if(plan.acc==0) plan.acc = 99.; else plan.acc-=1;
 8009aac:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009aae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009ab2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aba:	d103      	bne.n	8009ac4 <UI_SpeedSetting+0x1c4>
 8009abc:	4b1f      	ldr	r3, [pc, #124]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009abe:	4a20      	ldr	r2, [pc, #128]	; (8009b40 <UI_SpeedSetting+0x240>)
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8009ac2:	e009      	b.n	8009ad8 <UI_SpeedSetting+0x1d8>
 8009ac4:	4b1d      	ldr	r3, [pc, #116]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009ac6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ad2:	4b1a      	ldr	r3, [pc, #104]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009ad4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				bt_status = 1;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009adc:	e71d      	b.n	800991a <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f43f af1f 	beq.w	8009928 <UI_SpeedSetting+0x28>
				if(plan.acc==99) plan.acc = 0; else plan.acc+=1;
 8009aea:	4b14      	ldr	r3, [pc, #80]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009aec:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009af0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009b44 <UI_SpeedSetting+0x244>
 8009af4:	eef4 7a47 	vcmp.f32	s15, s14
 8009af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afc:	d104      	bne.n	8009b08 <UI_SpeedSetting+0x208>
 8009afe:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009b00:	f04f 0200 	mov.w	r2, #0
 8009b04:	639a      	str	r2, [r3, #56]	; 0x38
 8009b06:	e009      	b.n	8009b1c <UI_SpeedSetting+0x21c>
 8009b08:	4b0c      	ldr	r3, [pc, #48]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009b0a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b16:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <UI_SpeedSetting+0x23c>)
 8009b18:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				bt_status = 1;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009b20:	e6fb      	b.n	800991a <UI_SpeedSetting+0x1a>
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8009b22:	bf00      	nop
 8009b24:	e700      	b.n	8009928 <UI_SpeedSetting+0x28>
		if(bt == bt2 && bt_status == 0) continue;
 8009b26:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8009b28:	e6fe      	b.n	8009928 <UI_SpeedSetting+0x28>
			}

		}
	}
	return UI_IDLE;
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	080123d4 	.word	0x080123d4
 8009b38:	20001100 	.word	0x20001100
 8009b3c:	20000f2c 	.word	0x20000f2c
 8009b40:	42c60000 	.word	0x42c60000
 8009b44:	42c60000 	.word	0x42c60000

08009b48 <UI_Run>:


UI_Menu_Lists UI_Run() {
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af02      	add	r7, sp, #8
	static uint8_t bt;

	char buff[22];
	HAL_Delay(500);
 8009b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b52:	f000 fac1 	bl	800a0d8 <HAL_Delay>
	Plan_Start();
 8009b56:	f7f9 ff85 	bl	8003a64 <Plan_Start>
	ui_run:
	Plan_UIRoutine();
 8009b5a:	f7f9 ffef 	bl	8003b3c <Plan_UIRoutine>
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", num_index, num_checkpoint, num_plan);
 8009b5e:	4b44      	ldr	r3, [pc, #272]	; (8009c70 <UI_Run+0x128>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	4b44      	ldr	r3, [pc, #272]	; (8009c74 <UI_Run+0x12c>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	4619      	mov	r1, r3
 8009b68:	4b43      	ldr	r3, [pc, #268]	; (8009c78 <UI_Run+0x130>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	460b      	mov	r3, r1
 8009b72:	4942      	ldr	r1, [pc, #264]	; (8009c7c <UI_Run+0x134>)
 8009b74:	f006 f92a 	bl	800fdcc <siprintf>
	DISP_DisplayText(&home_status, buff);
 8009b78:	463b      	mov	r3, r7
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4840      	ldr	r0, [pc, #256]	; (8009c80 <UI_Run+0x138>)
 8009b7e:	f7f7 fe87 	bl	8001890 <DISP_DisplayText>
	sprintf(buff, "Act ~ %s", plan_act_lists[plan_active.act]);
 8009b82:	4b40      	ldr	r3, [pc, #256]	; (8009c84 <UI_Run+0x13c>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	4b3f      	ldr	r3, [pc, #252]	; (8009c88 <UI_Run+0x140>)
 8009b8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b8e:	463b      	mov	r3, r7
 8009b90:	493e      	ldr	r1, [pc, #248]	; (8009c8c <UI_Run+0x144>)
 8009b92:	4618      	mov	r0, r3
 8009b94:	f006 f91a 	bl	800fdcc <siprintf>
	DISP_DisplayText(&cp_menu[2], buff);
 8009b98:	463b      	mov	r3, r7
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	483c      	ldr	r0, [pc, #240]	; (8009c90 <UI_Run+0x148>)
 8009b9e:	f7f7 fe77 	bl	8001890 <DISP_DisplayText>
	if(motor[0].mode == MOTOR_MODE_OPEN) {
 8009ba2:	4b3c      	ldr	r3, [pc, #240]	; (8009c94 <UI_Run+0x14c>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d115      	bne.n	8009bd6 <UI_Run+0x8e>
		sprintf(buff, "%3i | %-3i", (int16_t)motor[1].pwm, (int16_t)motor[0].pwm);
 8009baa:	4b3a      	ldr	r3, [pc, #232]	; (8009c94 <UI_Run+0x14c>)
 8009bac:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bb4:	ee17 3a90 	vmov	r3, s15
 8009bb8:	b21b      	sxth	r3, r3
 8009bba:	461a      	mov	r2, r3
 8009bbc:	4b35      	ldr	r3, [pc, #212]	; (8009c94 <UI_Run+0x14c>)
 8009bbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8009bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bc6:	ee17 3a90 	vmov	r3, s15
 8009bca:	b21b      	sxth	r3, r3
 8009bcc:	4638      	mov	r0, r7
 8009bce:	4932      	ldr	r1, [pc, #200]	; (8009c98 <UI_Run+0x150>)
 8009bd0:	f006 f8fc 	bl	800fdcc <siprintf>
 8009bd4:	e00a      	b.n	8009bec <UI_Run+0xa4>
	}
	else {
		sprintf(buff, "%3i | %-3i", (int16_t)motor[1].vel_sp, (int16_t)motor[0].vel_sp);
 8009bd6:	4b2f      	ldr	r3, [pc, #188]	; (8009c94 <UI_Run+0x14c>)
 8009bd8:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8009bdc:	461a      	mov	r2, r3
 8009bde:	4b2d      	ldr	r3, [pc, #180]	; (8009c94 <UI_Run+0x14c>)
 8009be0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8009be4:	4638      	mov	r0, r7
 8009be6:	492c      	ldr	r1, [pc, #176]	; (8009c98 <UI_Run+0x150>)
 8009be8:	f006 f8f0 	bl	800fdcc <siprintf>
	}
	DISP_DisplayText(&cp_menu[3], buff);
 8009bec:	463b      	mov	r3, r7
 8009bee:	4619      	mov	r1, r3
 8009bf0:	482a      	ldr	r0, [pc, #168]	; (8009c9c <UI_Run+0x154>)
 8009bf2:	f7f7 fe4d 	bl	8001890 <DISP_DisplayText>
	while(1) {
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8009bf6:	4b2a      	ldr	r3, [pc, #168]	; (8009ca0 <UI_Run+0x158>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d027      	beq.n	8009c52 <UI_Run+0x10a>
		Plan_UIRoutine();
 8009c02:	f7f9 ff9b 	bl	8003b3c <Plan_UIRoutine>
		UI_ShowSensor();
 8009c06:	f7fc ff4d 	bl	8006aa4 <UI_ShowSensor>
		bt = UI_ReadButton();
 8009c0a:	f7fc ffc9 	bl	8006ba0 <UI_ReadButton>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	461a      	mov	r2, r3
 8009c12:	4b24      	ldr	r3, [pc, #144]	; (8009ca4 <UI_Run+0x15c>)
 8009c14:	701a      	strb	r2, [r3, #0]
		if(bt & SW_HM_PRESS) {
 8009c16:	4b23      	ldr	r3, [pc, #140]	; (8009ca4 <UI_Run+0x15c>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <UI_Run+0xf0>
			main_flag &=~0x01;
 8009c22:	4b1f      	ldr	r3, [pc, #124]	; (8009ca0 <UI_Run+0x158>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f023 0301 	bic.w	r3, r3, #1
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ca0 <UI_Run+0x158>)
 8009c2e:	701a      	strb	r2, [r3, #0]
			Plan_Stop();
 8009c30:	f7f9 fed4 	bl	80039dc <Plan_Stop>
			return UI_HOMESCREEN;
 8009c34:	2302      	movs	r3, #2
 8009c36:	e016      	b.n	8009c66 <UI_Run+0x11e>
		}
		if(main_flag & 0x80) {
 8009c38:	4b19      	ldr	r3, [pc, #100]	; (8009ca0 <UI_Run+0x158>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b25b      	sxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dad9      	bge.n	8009bf6 <UI_Run+0xae>
			main_flag &=~0x80;
 8009c42:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <UI_Run+0x158>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	4b14      	ldr	r3, [pc, #80]	; (8009ca0 <UI_Run+0x158>)
 8009c4e:	701a      	strb	r2, [r3, #0]
			goto ui_run;
 8009c50:	e783      	b.n	8009b5a <UI_Run+0x12>
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8009c52:	bf00      	nop
		}
	}
	DISP_DisplayText(&short_message, "FINISH!");
 8009c54:	4914      	ldr	r1, [pc, #80]	; (8009ca8 <UI_Run+0x160>)
 8009c56:	4815      	ldr	r0, [pc, #84]	; (8009cac <UI_Run+0x164>)
 8009c58:	f7f7 fe1a 	bl	8001890 <DISP_DisplayText>
	HAL_Delay(500);
 8009c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c60:	f000 fa3a 	bl	800a0d8 <HAL_Delay>
//	num_checkpoint;
	return UI_HOMESCREEN;
 8009c64:	2302      	movs	r3, #2
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000c40 	.word	0x20000c40
 8009c74:	20000c3c 	.word	0x20000c3c
 8009c78:	20000c39 	.word	0x20000c39
 8009c7c:	08011f90 	.word	0x08011f90
 8009c80:	20001100 	.word	0x20001100
 8009c84:	20000f1c 	.word	0x20000f1c
 8009c88:	200002c4 	.word	0x200002c4
 8009c8c:	080123dc 	.word	0x080123dc
 8009c90:	200011a2 	.word	0x200011a2
 8009c94:	20000ab0 	.word	0x20000ab0
 8009c98:	080123e8 	.word	0x080123e8
 8009c9c:	200011a9 	.word	0x200011a9
 8009ca0:	20000a74 	.word	0x20000a74
 8009ca4:	200011c6 	.word	0x200011c6
 8009ca8:	080123f4 	.word	0x080123f4
 8009cac:	200010d4 	.word	0x200010d4

08009cb0 <UI_Init>:


void UI_Init() {
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
	UI_HomeScreenInit();
 8009cb4:	f7fc fff8 	bl	8006ca8 <UI_HomeScreenInit>
	UI_SettingDisplayInit();
 8009cb8:	f7fd f9e8 	bl	800708c <UI_SettingDisplayInit>
	UI_PlanSetDisplayInit();
 8009cbc:	f7fd fbae 	bl	800741c <UI_PlanSetDisplayInit>
	UI_ADCThresholdDisplayInit();
 8009cc0:	f7fe fc06 	bl	80084d0 <UI_ADCThresholdDisplayInit>
	UI_CPDisplayInit();
 8009cc4:	f7fe feae 	bl	8008a24 <UI_CPDisplayInit>
}
 8009cc8:	bf00      	nop
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <UI_Main>:

void UI_Main() {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	af00      	add	r7, sp, #0
	static UI_Menu_Lists retval = UI_STARTUP;
	DISP_ClearAll();
 8009cd0:	f7f7 ffa8 	bl	8001c24 <DISP_ClearAll>
	switch(retval) {
 8009cd4:	4b3b      	ldr	r3, [pc, #236]	; (8009dc4 <UI_Main+0xf8>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	2b0c      	cmp	r3, #12
 8009cdc:	d870      	bhi.n	8009dc0 <UI_Main+0xf4>
 8009cde:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <UI_Main+0x18>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d19 	.word	0x08009d19
 8009ce8:	08009d27 	.word	0x08009d27
 8009cec:	08009d35 	.word	0x08009d35
 8009cf0:	08009d43 	.word	0x08009d43
 8009cf4:	08009d51 	.word	0x08009d51
 8009cf8:	08009d5f 	.word	0x08009d5f
 8009cfc:	08009d6d 	.word	0x08009d6d
 8009d00:	08009d7b 	.word	0x08009d7b
 8009d04:	08009d89 	.word	0x08009d89
 8009d08:	08009d97 	.word	0x08009d97
 8009d0c:	08009da5 	.word	0x08009da5
 8009d10:	08009dc1 	.word	0x08009dc1
 8009d14:	08009db3 	.word	0x08009db3
	case UI_STARTUP:
		retval = UI_Startup();
 8009d18:	f7fe fdb4 	bl	8008884 <UI_Startup>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	461a      	mov	r2, r3
 8009d20:	4b28      	ldr	r3, [pc, #160]	; (8009dc4 <UI_Main+0xf8>)
 8009d22:	701a      	strb	r2, [r3, #0]
		break;
 8009d24:	e04c      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_HOMESCREEN:
		retval = UI_HomeScreen();
 8009d26:	f7fd f89f 	bl	8006e68 <UI_HomeScreen>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	4b25      	ldr	r3, [pc, #148]	; (8009dc4 <UI_Main+0xf8>)
 8009d30:	701a      	strb	r2, [r3, #0]
		break;
 8009d32:	e045      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_SPEED_SET:
		retval = UI_SpeedSetting();
 8009d34:	f7ff fde4 	bl	8009900 <UI_SpeedSetting>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	4b21      	ldr	r3, [pc, #132]	; (8009dc4 <UI_Main+0xf8>)
 8009d3e:	701a      	strb	r2, [r3, #0]
		break;
 8009d40:	e03e      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_RUN:
		retval = UI_Run();
 8009d42:	f7ff ff01 	bl	8009b48 <UI_Run>
 8009d46:	4603      	mov	r3, r0
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4b1e      	ldr	r3, [pc, #120]	; (8009dc4 <UI_Main+0xf8>)
 8009d4c:	701a      	strb	r2, [r3, #0]
		break;
 8009d4e:	e037      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_PLAN_SET:
		retval = UI_PlanSet();
 8009d50:	f7fd ff08 	bl	8007b64 <UI_PlanSet>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	4b1a      	ldr	r3, [pc, #104]	; (8009dc4 <UI_Main+0xf8>)
 8009d5a:	701a      	strb	r2, [r3, #0]
		break;
 8009d5c:	e030      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_PLAN_SELECT:
		retval = UI_PlanSelect();
 8009d5e:	f7ff f851 	bl	8008e04 <UI_PlanSelect>
 8009d62:	4603      	mov	r3, r0
 8009d64:	461a      	mov	r2, r3
 8009d66:	4b17      	ldr	r3, [pc, #92]	; (8009dc4 <UI_Main+0xf8>)
 8009d68:	701a      	strb	r2, [r3, #0]
		break;
 8009d6a:	e029      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_SET:
		retval = UI_Setting();
 8009d6c:	f7fd fa7a 	bl	8007264 <UI_Setting>
 8009d70:	4603      	mov	r3, r0
 8009d72:	461a      	mov	r2, r3
 8009d74:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <UI_Main+0xf8>)
 8009d76:	701a      	strb	r2, [r3, #0]
		break;
 8009d78:	e022      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_SET_ADC:
		retval = UI_ADCThreshold();
 8009d7a:	f7fe fc6b 	bl	8008654 <UI_ADCThreshold>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	461a      	mov	r2, r3
 8009d82:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <UI_Main+0xf8>)
 8009d84:	701a      	strb	r2, [r3, #0]
		break;
 8009d86:	e01b      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_SET_CALIB:
		retval = UI_AutoCalib();
 8009d88:	f7fe fd34 	bl	80087f4 <UI_AutoCalib>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	461a      	mov	r2, r3
 8009d90:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <UI_Main+0xf8>)
 8009d92:	701a      	strb	r2, [r3, #0]
		break;
 8009d94:	e014      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_SET_CP:
		retval = UI_CP();
 8009d96:	f7fe ff1b 	bl	8008bd0 <UI_CP>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <UI_Main+0xf8>)
 8009da0:	701a      	strb	r2, [r3, #0]
		break;
 8009da2:	e00d      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_SET_PID:
		retval = UI_PIDSetting();
 8009da4:	f7ff fad8 	bl	8009358 <UI_PIDSetting>
 8009da8:	4603      	mov	r3, r0
 8009daa:	461a      	mov	r2, r3
 8009dac:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <UI_Main+0xf8>)
 8009dae:	701a      	strb	r2, [r3, #0]
		break;
 8009db0:	e006      	b.n	8009dc0 <UI_Main+0xf4>
	case UI_SET_MEM:
		retval = UI_MemSetting();
 8009db2:	f7ff f93f 	bl	8009034 <UI_MemSetting>
 8009db6:	4603      	mov	r3, r0
 8009db8:	461a      	mov	r2, r3
 8009dba:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <UI_Main+0xf8>)
 8009dbc:	701a      	strb	r2, [r3, #0]
		break;
 8009dbe:	bf00      	nop
	default:
		;
	}
}
 8009dc0:	bf00      	nop
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20000329 	.word	0x20000329

08009dc8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009dcc:	4b11      	ldr	r3, [pc, #68]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009dce:	4a12      	ldr	r2, [pc, #72]	; (8009e18 <MX_USART3_UART_Init+0x50>)
 8009dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009dd2:	4b10      	ldr	r3, [pc, #64]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009dda:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009de0:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009de6:	4b0b      	ldr	r3, [pc, #44]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009dec:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009dee:	220c      	movs	r2, #12
 8009df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009df2:	4b08      	ldr	r3, [pc, #32]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009df8:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009dfe:	4805      	ldr	r0, [pc, #20]	; (8009e14 <MX_USART3_UART_Init+0x4c>)
 8009e00:	f004 fc4e 	bl	800e6a0 <HAL_UART_Init>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009e0a:	f7f8 fa90 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009e0e:	bf00      	nop
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	200011c8 	.word	0x200011c8
 8009e18:	40004800 	.word	0x40004800

08009e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08a      	sub	sp, #40	; 0x28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e24:	f107 0314 	add.w	r3, r7, #20
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	605a      	str	r2, [r3, #4]
 8009e2e:	609a      	str	r2, [r3, #8]
 8009e30:	60da      	str	r2, [r3, #12]
 8009e32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a19      	ldr	r2, [pc, #100]	; (8009ea0 <HAL_UART_MspInit+0x84>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d12c      	bne.n	8009e98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009e3e:	2300      	movs	r3, #0
 8009e40:	613b      	str	r3, [r7, #16]
 8009e42:	4b18      	ldr	r3, [pc, #96]	; (8009ea4 <HAL_UART_MspInit+0x88>)
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	4a17      	ldr	r2, [pc, #92]	; (8009ea4 <HAL_UART_MspInit+0x88>)
 8009e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8009e4e:	4b15      	ldr	r3, [pc, #84]	; (8009ea4 <HAL_UART_MspInit+0x88>)
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e56:	613b      	str	r3, [r7, #16]
 8009e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	4b11      	ldr	r3, [pc, #68]	; (8009ea4 <HAL_UART_MspInit+0x88>)
 8009e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e62:	4a10      	ldr	r2, [pc, #64]	; (8009ea4 <HAL_UART_MspInit+0x88>)
 8009e64:	f043 0304 	orr.w	r3, r3, #4
 8009e68:	6313      	str	r3, [r2, #48]	; 0x30
 8009e6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ea4 <HAL_UART_MspInit+0x88>)
 8009e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009e76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e80:	2300      	movs	r3, #0
 8009e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e84:	2303      	movs	r3, #3
 8009e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009e88:	2307      	movs	r3, #7
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e8c:	f107 0314 	add.w	r3, r7, #20
 8009e90:	4619      	mov	r1, r3
 8009e92:	4805      	ldr	r0, [pc, #20]	; (8009ea8 <HAL_UART_MspInit+0x8c>)
 8009e94:	f001 fb0c 	bl	800b4b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009e98:	bf00      	nop
 8009e9a:	3728      	adds	r7, #40	; 0x28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	40004800 	.word	0x40004800
 8009ea4:	40023800 	.word	0x40023800
 8009ea8:	40020800 	.word	0x40020800

08009eac <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009eb0:	4b14      	ldr	r3, [pc, #80]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009eb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009eb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009eb8:	4b12      	ldr	r3, [pc, #72]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009eba:	2204      	movs	r2, #4
 8009ebc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ebe:	4b11      	ldr	r3, [pc, #68]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ec4:	4b0f      	ldr	r3, [pc, #60]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009eca:	4b0e      	ldr	r3, [pc, #56]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ecc:	2202      	movs	r2, #2
 8009ece:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ed0:	4b0c      	ldr	r3, [pc, #48]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009edc:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ee2:	4b08      	ldr	r3, [pc, #32]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ee8:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009eee:	4805      	ldr	r0, [pc, #20]	; (8009f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ef0:	f002 fc6b 	bl	800c7ca <HAL_PCD_Init>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8009efa:	f7f8 fa18 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009efe:	bf00      	nop
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	2000120c 	.word	0x2000120c

08009f08 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	; 0x28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]

   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	605a      	str	r2, [r3, #4]
 8009f1a:	609a      	str	r2, [r3, #8]
 8009f1c:	60da      	str	r2, [r3, #12]
 8009f1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f28:	d132      	bne.n	8009f90 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	613b      	str	r3, [r7, #16]
 8009f2e:	4b1a      	ldr	r3, [pc, #104]	; (8009f98 <HAL_PCD_MspInit+0x90>)
 8009f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f32:	4a19      	ldr	r2, [pc, #100]	; (8009f98 <HAL_PCD_MspInit+0x90>)
 8009f34:	f043 0301 	orr.w	r3, r3, #1
 8009f38:	6313      	str	r3, [r2, #48]	; 0x30
 8009f3a:	4b17      	ldr	r3, [pc, #92]	; (8009f98 <HAL_PCD_MspInit+0x90>)
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	613b      	str	r3, [r7, #16]
 8009f44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f54:	2303      	movs	r3, #3
 8009f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f58:	230a      	movs	r3, #10
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f5c:	f107 0314 	add.w	r3, r7, #20
 8009f60:	4619      	mov	r1, r3
 8009f62:	480e      	ldr	r0, [pc, #56]	; (8009f9c <HAL_PCD_MspInit+0x94>)
 8009f64:	f001 faa4 	bl	800b4b0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f68:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <HAL_PCD_MspInit+0x90>)
 8009f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6c:	4a0a      	ldr	r2, [pc, #40]	; (8009f98 <HAL_PCD_MspInit+0x90>)
 8009f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f72:	6353      	str	r3, [r2, #52]	; 0x34
 8009f74:	2300      	movs	r3, #0
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	4b07      	ldr	r3, [pc, #28]	; (8009f98 <HAL_PCD_MspInit+0x90>)
 8009f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7c:	4a06      	ldr	r2, [pc, #24]	; (8009f98 <HAL_PCD_MspInit+0x90>)
 8009f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f82:	6453      	str	r3, [r2, #68]	; 0x44
 8009f84:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <HAL_PCD_MspInit+0x90>)
 8009f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f8c:	60fb      	str	r3, [r7, #12]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f90:	bf00      	nop
 8009f92:	3728      	adds	r7, #40	; 0x28
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	40023800 	.word	0x40023800
 8009f9c:	40020000 	.word	0x40020000

08009fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 8009fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009fa4:	480d      	ldr	r0, [pc, #52]	; (8009fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009fa6:	490e      	ldr	r1, [pc, #56]	; (8009fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009fa8:	4a0e      	ldr	r2, [pc, #56]	; (8009fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009fac:	e002      	b.n	8009fb4 <LoopCopyDataInit>

08009fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009fb2:	3304      	adds	r3, #4

08009fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009fb8:	d3f9      	bcc.n	8009fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009fba:	4a0b      	ldr	r2, [pc, #44]	; (8009fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009fbc:	4c0b      	ldr	r4, [pc, #44]	; (8009fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8009fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009fc0:	e001      	b.n	8009fc6 <LoopFillZerobss>

08009fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009fc4:	3204      	adds	r2, #4

08009fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009fc8:	d3fb      	bcc.n	8009fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009fca:	f7fc f9eb 	bl	80063a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009fce:	f005 ffc9 	bl	800ff64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009fd2:	f7f8 f883 	bl	80020dc <main>
  bx  lr    
 8009fd6:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8009fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009fe0:	200004fc 	.word	0x200004fc
  ldr r2, =_sidata
 8009fe4:	080127ac 	.word	0x080127ac
  ldr r2, =_sbss
 8009fe8:	200004fc 	.word	0x200004fc
  ldr r4, =_ebss
 8009fec:	20001868 	.word	0x20001868

08009ff0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ff0:	e7fe      	b.n	8009ff0 <CAN1_RX0_IRQHandler>
	...

08009ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009ff8:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <HAL_Init+0x40>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a0d      	ldr	r2, [pc, #52]	; (800a034 <HAL_Init+0x40>)
 8009ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a004:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <HAL_Init+0x40>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a0a      	ldr	r2, [pc, #40]	; (800a034 <HAL_Init+0x40>)
 800a00a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a00e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a010:	4b08      	ldr	r3, [pc, #32]	; (800a034 <HAL_Init+0x40>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a07      	ldr	r2, [pc, #28]	; (800a034 <HAL_Init+0x40>)
 800a016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a01a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a01c:	2003      	movs	r0, #3
 800a01e:	f000 fe91 	bl	800ad44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a022:	200f      	movs	r0, #15
 800a024:	f000 f808 	bl	800a038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a028:	f7fb fafa 	bl	8005620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	40023c00 	.word	0x40023c00

0800a038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a040:	4b12      	ldr	r3, [pc, #72]	; (800a08c <HAL_InitTick+0x54>)
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	4b12      	ldr	r3, [pc, #72]	; (800a090 <HAL_InitTick+0x58>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	4619      	mov	r1, r3
 800a04a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a04e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a052:	fbb2 f3f3 	udiv	r3, r2, r3
 800a056:	4618      	mov	r0, r3
 800a058:	f000 fead 	bl	800adb6 <HAL_SYSTICK_Config>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e00e      	b.n	800a084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b0f      	cmp	r3, #15
 800a06a:	d80a      	bhi.n	800a082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a06c:	2200      	movs	r2, #0
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	f000 fe71 	bl	800ad5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a078:	4a06      	ldr	r2, [pc, #24]	; (800a094 <HAL_InitTick+0x5c>)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	e000      	b.n	800a084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	2000028c 	.word	0x2000028c
 800a090:	20000330 	.word	0x20000330
 800a094:	2000032c 	.word	0x2000032c

0800a098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a098:	b480      	push	{r7}
 800a09a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a09c:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <HAL_IncTick+0x20>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <HAL_IncTick+0x24>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	4a04      	ldr	r2, [pc, #16]	; (800a0bc <HAL_IncTick+0x24>)
 800a0aa:	6013      	str	r3, [r2, #0]
}
 800a0ac:	bf00      	nop
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20000330 	.word	0x20000330
 800a0bc:	20001718 	.word	0x20001718

0800a0c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
  return uwTick;
 800a0c4:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <HAL_GetTick+0x14>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20001718 	.word	0x20001718

0800a0d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a0e0:	f7ff ffee 	bl	800a0c0 <HAL_GetTick>
 800a0e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f0:	d005      	beq.n	800a0fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <HAL_Delay+0x44>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a0fe:	bf00      	nop
 800a100:	f7ff ffde 	bl	800a0c0 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d8f7      	bhi.n	800a100 <HAL_Delay+0x28>
  {
  }
}
 800a110:	bf00      	nop
 800a112:	bf00      	nop
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000330 	.word	0x20000330

0800a120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e033      	b.n	800a19e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d109      	bne.n	800a152 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7f7 f82c 	bl	800119c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	f003 0310 	and.w	r3, r3, #16
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d118      	bne.n	800a190 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a166:	f023 0302 	bic.w	r3, r3, #2
 800a16a:	f043 0202 	orr.w	r2, r3, #2
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fb78 	bl	800a868 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	f023 0303 	bic.w	r3, r3, #3
 800a186:	f043 0201 	orr.w	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	641a      	str	r2, [r3, #64]	; 0x40
 800a18e:	e001      	b.n	800a194 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	f003 0320 	and.w	r3, r3, #32
 800a1d4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d049      	beq.n	800a270 <HAL_ADC_IRQHandler+0xca>
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d046      	beq.n	800a270 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e6:	f003 0310 	and.w	r3, r3, #16
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d105      	bne.n	800a1fa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d12b      	bne.n	800a260 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d127      	bne.n	800a260 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a216:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d119      	bne.n	800a260 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f022 0220 	bic.w	r2, r2, #32
 800a23a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d105      	bne.n	800a260 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	f043 0201 	orr.w	r2, r3, #1
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7f8 f859 	bl	8002318 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f06f 0212 	mvn.w	r2, #18
 800a26e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d057      	beq.n	800a336 <HAL_ADC_IRQHandler+0x190>
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d054      	beq.n	800a336 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a290:	f003 0310 	and.w	r3, r3, #16
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d139      	bne.n	800a326 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d12b      	bne.n	800a326 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d124      	bne.n	800a326 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d11d      	bne.n	800a326 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d119      	bne.n	800a326 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a300:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a316:	2b00      	cmp	r3, #0
 800a318:	d105      	bne.n	800a326 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	f043 0201 	orr.w	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fc1c 	bl	800ab64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f06f 020c 	mvn.w	r2, #12
 800a334:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a344:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d017      	beq.n	800a37c <HAL_ADC_IRQHandler+0x1d6>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d014      	beq.n	800a37c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d10d      	bne.n	800a37c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f945 	bl	800a5fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f06f 0201 	mvn.w	r2, #1
 800a37a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f003 0320 	and.w	r3, r3, #32
 800a382:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a38a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d015      	beq.n	800a3be <HAL_ADC_IRQHandler+0x218>
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d012      	beq.n	800a3be <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39c:	f043 0202 	orr.w	r2, r3, #2
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0220 	mvn.w	r2, #32
 800a3ac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f92e 	bl	800a610 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0220 	mvn.w	r2, #32
 800a3bc:	601a      	str	r2, [r3, #0]
  }
}
 800a3be:	bf00      	nop
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d101      	bne.n	800a3e6 <HAL_ADC_Start_DMA+0x1e>
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e0e9      	b.n	800a5ba <HAL_ADC_Start_DMA+0x1f2>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d018      	beq.n	800a42e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f042 0201 	orr.w	r2, r2, #1
 800a40a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a40c:	4b6d      	ldr	r3, [pc, #436]	; (800a5c4 <HAL_ADC_Start_DMA+0x1fc>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a6d      	ldr	r2, [pc, #436]	; (800a5c8 <HAL_ADC_Start_DMA+0x200>)
 800a412:	fba2 2303 	umull	r2, r3, r2, r3
 800a416:	0c9a      	lsrs	r2, r3, #18
 800a418:	4613      	mov	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	4413      	add	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a420:	e002      	b.n	800a428 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	3b01      	subs	r3, #1
 800a426:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f9      	bne.n	800a422 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a43c:	d107      	bne.n	800a44e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a44c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	2b01      	cmp	r3, #1
 800a45a:	f040 80a1 	bne.w	800a5a0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d007      	beq.n	800a490 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a488:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a49c:	d106      	bne.n	800a4ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a2:	f023 0206 	bic.w	r2, r3, #6
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	645a      	str	r2, [r3, #68]	; 0x44
 800a4aa:	e002      	b.n	800a4b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a4ba:	4b44      	ldr	r3, [pc, #272]	; (800a5cc <HAL_ADC_Start_DMA+0x204>)
 800a4bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c2:	4a43      	ldr	r2, [pc, #268]	; (800a5d0 <HAL_ADC_Start_DMA+0x208>)
 800a4c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ca:	4a42      	ldr	r2, [pc, #264]	; (800a5d4 <HAL_ADC_Start_DMA+0x20c>)
 800a4cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	4a41      	ldr	r2, [pc, #260]	; (800a5d8 <HAL_ADC_Start_DMA+0x210>)
 800a4d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a4de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a4ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689a      	ldr	r2, [r3, #8]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	334c      	adds	r3, #76	; 0x4c
 800a50a:	4619      	mov	r1, r3
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f000 fd0c 	bl	800af2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f003 031f 	and.w	r3, r3, #31
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d12a      	bne.n	800a576 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a2d      	ldr	r2, [pc, #180]	; (800a5dc <HAL_ADC_Start_DMA+0x214>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d015      	beq.n	800a556 <HAL_ADC_Start_DMA+0x18e>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a2c      	ldr	r2, [pc, #176]	; (800a5e0 <HAL_ADC_Start_DMA+0x218>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d105      	bne.n	800a540 <HAL_ADC_Start_DMA+0x178>
 800a534:	4b25      	ldr	r3, [pc, #148]	; (800a5cc <HAL_ADC_Start_DMA+0x204>)
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f003 031f 	and.w	r3, r3, #31
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00a      	beq.n	800a556 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a27      	ldr	r2, [pc, #156]	; (800a5e4 <HAL_ADC_Start_DMA+0x21c>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d136      	bne.n	800a5b8 <HAL_ADC_Start_DMA+0x1f0>
 800a54a:	4b20      	ldr	r3, [pc, #128]	; (800a5cc <HAL_ADC_Start_DMA+0x204>)
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f003 0310 	and.w	r3, r3, #16
 800a552:	2b00      	cmp	r3, #0
 800a554:	d130      	bne.n	800a5b8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d129      	bne.n	800a5b8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689a      	ldr	r2, [r3, #8]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a572:	609a      	str	r2, [r3, #8]
 800a574:	e020      	b.n	800a5b8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a18      	ldr	r2, [pc, #96]	; (800a5dc <HAL_ADC_Start_DMA+0x214>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d11b      	bne.n	800a5b8 <HAL_ADC_Start_DMA+0x1f0>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d114      	bne.n	800a5b8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	689a      	ldr	r2, [r3, #8]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a59c:	609a      	str	r2, [r3, #8]
 800a59e:	e00b      	b.n	800a5b8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	f043 0210 	orr.w	r2, r3, #16
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b0:	f043 0201 	orr.w	r2, r3, #1
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	2000028c 	.word	0x2000028c
 800a5c8:	431bde83 	.word	0x431bde83
 800a5cc:	40012300 	.word	0x40012300
 800a5d0:	0800aa61 	.word	0x0800aa61
 800a5d4:	0800ab1b 	.word	0x0800ab1b
 800a5d8:	0800ab37 	.word	0x0800ab37
 800a5dc:	40012000 	.word	0x40012000
 800a5e0:	40012100 	.word	0x40012100
 800a5e4:	40012200 	.word	0x40012200

0800a5e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d101      	bne.n	800a640 <HAL_ADC_ConfigChannel+0x1c>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e105      	b.n	800a84c <HAL_ADC_ConfigChannel+0x228>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b09      	cmp	r3, #9
 800a64e:	d925      	bls.n	800a69c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68d9      	ldr	r1, [r3, #12]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	461a      	mov	r2, r3
 800a65e:	4613      	mov	r3, r2
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	4413      	add	r3, r2
 800a664:	3b1e      	subs	r3, #30
 800a666:	2207      	movs	r2, #7
 800a668:	fa02 f303 	lsl.w	r3, r2, r3
 800a66c:	43da      	mvns	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	400a      	ands	r2, r1
 800a674:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68d9      	ldr	r1, [r3, #12]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	b29b      	uxth	r3, r3
 800a686:	4618      	mov	r0, r3
 800a688:	4603      	mov	r3, r0
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	4403      	add	r3, r0
 800a68e:	3b1e      	subs	r3, #30
 800a690:	409a      	lsls	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	430a      	orrs	r2, r1
 800a698:	60da      	str	r2, [r3, #12]
 800a69a:	e022      	b.n	800a6e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6919      	ldr	r1, [r3, #16]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	005b      	lsls	r3, r3, #1
 800a6ae:	4413      	add	r3, r2
 800a6b0:	2207      	movs	r2, #7
 800a6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b6:	43da      	mvns	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	400a      	ands	r2, r1
 800a6be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6919      	ldr	r1, [r3, #16]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	4403      	add	r3, r0
 800a6d8:	409a      	lsls	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	2b06      	cmp	r3, #6
 800a6e8:	d824      	bhi.n	800a734 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	3b05      	subs	r3, #5
 800a6fc:	221f      	movs	r2, #31
 800a6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a702:	43da      	mvns	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	400a      	ands	r2, r1
 800a70a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	b29b      	uxth	r3, r3
 800a718:	4618      	mov	r0, r3
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	3b05      	subs	r3, #5
 800a726:	fa00 f203 	lsl.w	r2, r0, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	635a      	str	r2, [r3, #52]	; 0x34
 800a732:	e04c      	b.n	800a7ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	2b0c      	cmp	r3, #12
 800a73a:	d824      	bhi.n	800a786 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	3b23      	subs	r3, #35	; 0x23
 800a74e:	221f      	movs	r2, #31
 800a750:	fa02 f303 	lsl.w	r3, r2, r3
 800a754:	43da      	mvns	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	400a      	ands	r2, r1
 800a75c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	b29b      	uxth	r3, r3
 800a76a:	4618      	mov	r0, r3
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	4613      	mov	r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	3b23      	subs	r3, #35	; 0x23
 800a778:	fa00 f203 	lsl.w	r2, r0, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	631a      	str	r2, [r3, #48]	; 0x30
 800a784:	e023      	b.n	800a7ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	3b41      	subs	r3, #65	; 0x41
 800a798:	221f      	movs	r2, #31
 800a79a:	fa02 f303 	lsl.w	r3, r2, r3
 800a79e:	43da      	mvns	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	400a      	ands	r2, r1
 800a7a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	3b41      	subs	r3, #65	; 0x41
 800a7c2:	fa00 f203 	lsl.w	r2, r0, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a7ce:	4b22      	ldr	r3, [pc, #136]	; (800a858 <HAL_ADC_ConfigChannel+0x234>)
 800a7d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a21      	ldr	r2, [pc, #132]	; (800a85c <HAL_ADC_ConfigChannel+0x238>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d109      	bne.n	800a7f0 <HAL_ADC_ConfigChannel+0x1cc>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b12      	cmp	r3, #18
 800a7e2:	d105      	bne.n	800a7f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a19      	ldr	r2, [pc, #100]	; (800a85c <HAL_ADC_ConfigChannel+0x238>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d123      	bne.n	800a842 <HAL_ADC_ConfigChannel+0x21e>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b10      	cmp	r3, #16
 800a800:	d003      	beq.n	800a80a <HAL_ADC_ConfigChannel+0x1e6>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b11      	cmp	r3, #17
 800a808:	d11b      	bne.n	800a842 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b10      	cmp	r3, #16
 800a81c:	d111      	bne.n	800a842 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a81e:	4b10      	ldr	r3, [pc, #64]	; (800a860 <HAL_ADC_ConfigChannel+0x23c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a10      	ldr	r2, [pc, #64]	; (800a864 <HAL_ADC_ConfigChannel+0x240>)
 800a824:	fba2 2303 	umull	r2, r3, r2, r3
 800a828:	0c9a      	lsrs	r2, r3, #18
 800a82a:	4613      	mov	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4413      	add	r3, r2
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a834:	e002      	b.n	800a83c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	3b01      	subs	r3, #1
 800a83a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f9      	bne.n	800a836 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	40012300 	.word	0x40012300
 800a85c:	40012000 	.word	0x40012000
 800a860:	2000028c 	.word	0x2000028c
 800a864:	431bde83 	.word	0x431bde83

0800a868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a870:	4b79      	ldr	r3, [pc, #484]	; (800aa58 <ADC_Init+0x1f0>)
 800a872:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	431a      	orrs	r2, r3
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a89c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6859      	ldr	r1, [r3, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	021a      	lsls	r2, r3, #8
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a8c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6859      	ldr	r1, [r3, #4]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689a      	ldr	r2, [r3, #8]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6899      	ldr	r1, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	430a      	orrs	r2, r1
 800a8f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fa:	4a58      	ldr	r2, [pc, #352]	; (800aa5c <ADC_Init+0x1f4>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d022      	beq.n	800a946 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689a      	ldr	r2, [r3, #8]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a90e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6899      	ldr	r1, [r3, #8]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	430a      	orrs	r2, r1
 800a920:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6899      	ldr	r1, [r3, #8]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	609a      	str	r2, [r3, #8]
 800a944:	e00f      	b.n	800a966 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689a      	ldr	r2, [r3, #8]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	689a      	ldr	r2, [r3, #8]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a964:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0202 	bic.w	r2, r2, #2
 800a974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6899      	ldr	r1, [r3, #8]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	7e1b      	ldrb	r3, [r3, #24]
 800a980:	005a      	lsls	r2, r3, #1
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	430a      	orrs	r2, r1
 800a988:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d01b      	beq.n	800a9cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a9b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6859      	ldr	r1, [r3, #4]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	035a      	lsls	r2, r3, #13
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]
 800a9ca:	e007      	b.n	800a9dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a9ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	051a      	lsls	r2, r3, #20
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689a      	ldr	r2, [r3, #8]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aa10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6899      	ldr	r1, [r3, #8]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa1e:	025a      	lsls	r2, r3, #9
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	430a      	orrs	r2, r1
 800aa26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689a      	ldr	r2, [r3, #8]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6899      	ldr	r1, [r3, #8]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	029a      	lsls	r2, r3, #10
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	609a      	str	r2, [r3, #8]
}
 800aa4c:	bf00      	nop
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	40012300 	.word	0x40012300
 800aa5c:	0f000001 	.word	0x0f000001

0800aa60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d13c      	bne.n	800aaf4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d12b      	bne.n	800aaec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d127      	bne.n	800aaec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d006      	beq.n	800aab8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d119      	bne.n	800aaec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f022 0220 	bic.w	r2, r2, #32
 800aac6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aacc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d105      	bne.n	800aaec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	f043 0201 	orr.w	r2, r3, #1
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f7f7 fc13 	bl	8002318 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800aaf2:	e00e      	b.n	800ab12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf8:	f003 0310 	and.w	r3, r3, #16
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7ff fd85 	bl	800a610 <HAL_ADC_ErrorCallback>
}
 800ab06:	e004      	b.n	800ab12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	4798      	blx	r3
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f7ff fd5d 	bl	800a5e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ab2e:	bf00      	nop
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b084      	sub	sp, #16
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2240      	movs	r2, #64	; 0x40
 800ab48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4e:	f043 0204 	orr.w	r2, r3, #4
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f7ff fd5a 	bl	800a610 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ab5c:	bf00      	nop
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab88:	4b0c      	ldr	r3, [pc, #48]	; (800abbc <__NVIC_SetPriorityGrouping+0x44>)
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ab94:	4013      	ands	r3, r2
 800ab96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800aba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800abaa:	4a04      	ldr	r2, [pc, #16]	; (800abbc <__NVIC_SetPriorityGrouping+0x44>)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	60d3      	str	r3, [r2, #12]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	e000ed00 	.word	0xe000ed00

0800abc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800abc0:	b480      	push	{r7}
 800abc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800abc4:	4b04      	ldr	r3, [pc, #16]	; (800abd8 <__NVIC_GetPriorityGrouping+0x18>)
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	0a1b      	lsrs	r3, r3, #8
 800abca:	f003 0307 	and.w	r3, r3, #7
}
 800abce:	4618      	mov	r0, r3
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	e000ed00 	.word	0xe000ed00

0800abdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abea:	2b00      	cmp	r3, #0
 800abec:	db0b      	blt.n	800ac06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abee:	79fb      	ldrb	r3, [r7, #7]
 800abf0:	f003 021f 	and.w	r2, r3, #31
 800abf4:	4907      	ldr	r1, [pc, #28]	; (800ac14 <__NVIC_EnableIRQ+0x38>)
 800abf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abfa:	095b      	lsrs	r3, r3, #5
 800abfc:	2001      	movs	r0, #1
 800abfe:	fa00 f202 	lsl.w	r2, r0, r2
 800ac02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	e000e100 	.word	0xe000e100

0800ac18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	6039      	str	r1, [r7, #0]
 800ac22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	db0a      	blt.n	800ac42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	490c      	ldr	r1, [pc, #48]	; (800ac64 <__NVIC_SetPriority+0x4c>)
 800ac32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac36:	0112      	lsls	r2, r2, #4
 800ac38:	b2d2      	uxtb	r2, r2
 800ac3a:	440b      	add	r3, r1
 800ac3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ac40:	e00a      	b.n	800ac58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	4908      	ldr	r1, [pc, #32]	; (800ac68 <__NVIC_SetPriority+0x50>)
 800ac48:	79fb      	ldrb	r3, [r7, #7]
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	3b04      	subs	r3, #4
 800ac50:	0112      	lsls	r2, r2, #4
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	440b      	add	r3, r1
 800ac56:	761a      	strb	r2, [r3, #24]
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	e000e100 	.word	0xe000e100
 800ac68:	e000ed00 	.word	0xe000ed00

0800ac6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b089      	sub	sp, #36	; 0x24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f003 0307 	and.w	r3, r3, #7
 800ac7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	f1c3 0307 	rsb	r3, r3, #7
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	bf28      	it	cs
 800ac8a:	2304      	movcs	r3, #4
 800ac8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	3304      	adds	r3, #4
 800ac92:	2b06      	cmp	r3, #6
 800ac94:	d902      	bls.n	800ac9c <NVIC_EncodePriority+0x30>
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	3b03      	subs	r3, #3
 800ac9a:	e000      	b.n	800ac9e <NVIC_EncodePriority+0x32>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	fa02 f303 	lsl.w	r3, r2, r3
 800acaa:	43da      	mvns	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	401a      	ands	r2, r3
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800acb4:	f04f 31ff 	mov.w	r1, #4294967295
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	fa01 f303 	lsl.w	r3, r1, r3
 800acbe:	43d9      	mvns	r1, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acc4:	4313      	orrs	r3, r2
         );
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3724      	adds	r7, #36	; 0x24
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
	...

0800acd4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800acd4:	b480      	push	{r7}
 800acd6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800acd8:	f3bf 8f4f 	dsb	sy
}
 800acdc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800acde:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <__NVIC_SystemReset+0x24>)
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ace6:	4904      	ldr	r1, [pc, #16]	; (800acf8 <__NVIC_SystemReset+0x24>)
 800ace8:	4b04      	ldr	r3, [pc, #16]	; (800acfc <__NVIC_SystemReset+0x28>)
 800acea:	4313      	orrs	r3, r2
 800acec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800acee:	f3bf 8f4f 	dsb	sy
}
 800acf2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800acf4:	bf00      	nop
 800acf6:	e7fd      	b.n	800acf4 <__NVIC_SystemReset+0x20>
 800acf8:	e000ed00 	.word	0xe000ed00
 800acfc:	05fa0004 	.word	0x05fa0004

0800ad00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad10:	d301      	bcc.n	800ad16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ad12:	2301      	movs	r3, #1
 800ad14:	e00f      	b.n	800ad36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad16:	4a0a      	ldr	r2, [pc, #40]	; (800ad40 <SysTick_Config+0x40>)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad1e:	210f      	movs	r1, #15
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	f7ff ff78 	bl	800ac18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad28:	4b05      	ldr	r3, [pc, #20]	; (800ad40 <SysTick_Config+0x40>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad2e:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <SysTick_Config+0x40>)
 800ad30:	2207      	movs	r2, #7
 800ad32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	e000e010 	.word	0xe000e010

0800ad44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff ff13 	bl	800ab78 <__NVIC_SetPriorityGrouping>
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	4603      	mov	r3, r0
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
 800ad66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ad6c:	f7ff ff28 	bl	800abc0 <__NVIC_GetPriorityGrouping>
 800ad70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	6978      	ldr	r0, [r7, #20]
 800ad78:	f7ff ff78 	bl	800ac6c <NVIC_EncodePriority>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad82:	4611      	mov	r1, r2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff ff47 	bl	800ac18 <__NVIC_SetPriority>
}
 800ad8a:	bf00      	nop
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	4603      	mov	r3, r0
 800ad9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff ff1b 	bl	800abdc <__NVIC_EnableIRQ>
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800adb2:	f7ff ff8f 	bl	800acd4 <__NVIC_SystemReset>

0800adb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7ff ff9e 	bl	800ad00 <SysTick_Config>
 800adc4:	4603      	mov	r3, r0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800addc:	f7ff f970 	bl	800a0c0 <HAL_GetTick>
 800ade0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e099      	b.n	800af20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2202      	movs	r2, #2
 800adf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0201 	bic.w	r2, r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ae0c:	e00f      	b.n	800ae2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ae0e:	f7ff f957 	bl	800a0c0 <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	2b05      	cmp	r3, #5
 800ae1a:	d908      	bls.n	800ae2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2203      	movs	r2, #3
 800ae26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e078      	b.n	800af20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e8      	bne.n	800ae0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	4b38      	ldr	r3, [pc, #224]	; (800af28 <HAL_DMA_Init+0x158>)
 800ae48:	4013      	ands	r3, r2
 800ae4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ae5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ae66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ae72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d107      	bne.n	800ae98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae90:	4313      	orrs	r3, r2
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f023 0307 	bic.w	r3, r3, #7
 800aeae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d117      	bne.n	800aef2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00e      	beq.n	800aef2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fa6f 	bl	800b3b8 <DMA_CheckFifoParam>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d008      	beq.n	800aef2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2240      	movs	r2, #64	; 0x40
 800aee4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aeee:	2301      	movs	r3, #1
 800aef0:	e016      	b.n	800af20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fa26 	bl	800b34c <DMA_CalcBaseAndBitshift>
 800af00:	4603      	mov	r3, r0
 800af02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af08:	223f      	movs	r2, #63	; 0x3f
 800af0a:	409a      	lsls	r2, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	f010803f 	.word	0xf010803f

0800af2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d101      	bne.n	800af52 <HAL_DMA_Start_IT+0x26>
 800af4e:	2302      	movs	r3, #2
 800af50:	e040      	b.n	800afd4 <HAL_DMA_Start_IT+0xa8>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b01      	cmp	r3, #1
 800af64:	d12f      	bne.n	800afc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2202      	movs	r2, #2
 800af6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 f9b8 	bl	800b2f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af84:	223f      	movs	r2, #63	; 0x3f
 800af86:	409a      	lsls	r2, r3
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f042 0216 	orr.w	r2, r2, #22
 800af9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d007      	beq.n	800afb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f042 0208 	orr.w	r2, r2, #8
 800afb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0201 	orr.w	r2, r2, #1
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	e005      	b.n	800afd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800afce:	2302      	movs	r3, #2
 800afd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800afe8:	4b8e      	ldr	r3, [pc, #568]	; (800b224 <HAL_DMA_IRQHandler+0x248>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a8e      	ldr	r2, [pc, #568]	; (800b228 <HAL_DMA_IRQHandler+0x24c>)
 800afee:	fba2 2303 	umull	r2, r3, r2, r3
 800aff2:	0a9b      	lsrs	r3, r3, #10
 800aff4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800affa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b006:	2208      	movs	r2, #8
 800b008:	409a      	lsls	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	4013      	ands	r3, r2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d01a      	beq.n	800b048 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 0304 	and.w	r3, r3, #4
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d013      	beq.n	800b048 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f022 0204 	bic.w	r2, r2, #4
 800b02e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b034:	2208      	movs	r2, #8
 800b036:	409a      	lsls	r2, r3
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b040:	f043 0201 	orr.w	r2, r3, #1
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b04c:	2201      	movs	r2, #1
 800b04e:	409a      	lsls	r2, r3
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4013      	ands	r3, r2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d012      	beq.n	800b07e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00b      	beq.n	800b07e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b06a:	2201      	movs	r2, #1
 800b06c:	409a      	lsls	r2, r3
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b076:	f043 0202 	orr.w	r2, r3, #2
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b082:	2204      	movs	r2, #4
 800b084:	409a      	lsls	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	4013      	ands	r3, r2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d012      	beq.n	800b0b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0302 	and.w	r3, r3, #2
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0a0:	2204      	movs	r2, #4
 800b0a2:	409a      	lsls	r2, r3
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ac:	f043 0204 	orr.w	r2, r3, #4
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0b8:	2210      	movs	r2, #16
 800b0ba:	409a      	lsls	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4013      	ands	r3, r2
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d043      	beq.n	800b14c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0308 	and.w	r3, r3, #8
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d03c      	beq.n	800b14c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0d6:	2210      	movs	r2, #16
 800b0d8:	409a      	lsls	r2, r3
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d018      	beq.n	800b11e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d108      	bne.n	800b10c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d024      	beq.n	800b14c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
 800b10a:	e01f      	b.n	800b14c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b110:	2b00      	cmp	r3, #0
 800b112:	d01b      	beq.n	800b14c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	4798      	blx	r3
 800b11c:	e016      	b.n	800b14c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d107      	bne.n	800b13c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 0208 	bic.w	r2, r2, #8
 800b13a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b150:	2220      	movs	r2, #32
 800b152:	409a      	lsls	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4013      	ands	r3, r2
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f000 808f 	beq.w	800b27c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0310 	and.w	r3, r3, #16
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 8087 	beq.w	800b27c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b172:	2220      	movs	r2, #32
 800b174:	409a      	lsls	r2, r3
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b05      	cmp	r3, #5
 800b184:	d136      	bne.n	800b1f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0216 	bic.w	r2, r2, #22
 800b194:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	695a      	ldr	r2, [r3, #20]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d103      	bne.n	800b1b6 <HAL_DMA_IRQHandler+0x1da>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d007      	beq.n	800b1c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f022 0208 	bic.w	r2, r2, #8
 800b1c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ca:	223f      	movs	r2, #63	; 0x3f
 800b1cc:	409a      	lsls	r2, r3
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d07e      	beq.n	800b2e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	4798      	blx	r3
        }
        return;
 800b1f2:	e079      	b.n	800b2e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d01d      	beq.n	800b23e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10d      	bne.n	800b22c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b214:	2b00      	cmp	r3, #0
 800b216:	d031      	beq.n	800b27c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	4798      	blx	r3
 800b220:	e02c      	b.n	800b27c <HAL_DMA_IRQHandler+0x2a0>
 800b222:	bf00      	nop
 800b224:	2000028c 	.word	0x2000028c
 800b228:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d023      	beq.n	800b27c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
 800b23c:	e01e      	b.n	800b27c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10f      	bne.n	800b26c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f022 0210 	bic.w	r2, r2, #16
 800b25a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b270:	2b00      	cmp	r3, #0
 800b272:	d003      	beq.n	800b27c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b280:	2b00      	cmp	r3, #0
 800b282:	d032      	beq.n	800b2ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d022      	beq.n	800b2d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2205      	movs	r2, #5
 800b294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f022 0201 	bic.w	r2, r2, #1
 800b2a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	60bb      	str	r3, [r7, #8]
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d307      	bcc.n	800b2c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f2      	bne.n	800b2a8 <HAL_DMA_IRQHandler+0x2cc>
 800b2c2:	e000      	b.n	800b2c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b2c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d005      	beq.n	800b2ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
 800b2e6:	e000      	b.n	800b2ea <HAL_DMA_IRQHandler+0x30e>
        return;
 800b2e8:	bf00      	nop
    }
  }
}
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b30c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	2b40      	cmp	r3, #64	; 0x40
 800b31c:	d108      	bne.n	800b330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b32e:	e007      	b.n	800b340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	60da      	str	r2, [r3, #12]
}
 800b340:	bf00      	nop
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	3b10      	subs	r3, #16
 800b35c:	4a14      	ldr	r2, [pc, #80]	; (800b3b0 <DMA_CalcBaseAndBitshift+0x64>)
 800b35e:	fba2 2303 	umull	r2, r3, r2, r3
 800b362:	091b      	lsrs	r3, r3, #4
 800b364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b366:	4a13      	ldr	r2, [pc, #76]	; (800b3b4 <DMA_CalcBaseAndBitshift+0x68>)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	4413      	add	r3, r2
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b03      	cmp	r3, #3
 800b378:	d909      	bls.n	800b38e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b382:	f023 0303 	bic.w	r3, r3, #3
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	659a      	str	r2, [r3, #88]	; 0x58
 800b38c:	e007      	b.n	800b39e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b396:	f023 0303 	bic.w	r3, r3, #3
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	aaaaaaab 	.word	0xaaaaaaab
 800b3b4:	08012424 	.word	0x08012424

0800b3b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d11f      	bne.n	800b412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d856      	bhi.n	800b486 <DMA_CheckFifoParam+0xce>
 800b3d8:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <DMA_CheckFifoParam+0x28>)
 800b3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3de:	bf00      	nop
 800b3e0:	0800b3f1 	.word	0x0800b3f1
 800b3e4:	0800b403 	.word	0x0800b403
 800b3e8:	0800b3f1 	.word	0x0800b3f1
 800b3ec:	0800b487 	.word	0x0800b487
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d046      	beq.n	800b48a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b400:	e043      	b.n	800b48a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b40a:	d140      	bne.n	800b48e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b410:	e03d      	b.n	800b48e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b41a:	d121      	bne.n	800b460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d837      	bhi.n	800b492 <DMA_CheckFifoParam+0xda>
 800b422:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <DMA_CheckFifoParam+0x70>)
 800b424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b428:	0800b439 	.word	0x0800b439
 800b42c:	0800b43f 	.word	0x0800b43f
 800b430:	0800b439 	.word	0x0800b439
 800b434:	0800b451 	.word	0x0800b451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	73fb      	strb	r3, [r7, #15]
      break;
 800b43c:	e030      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b446:	2b00      	cmp	r3, #0
 800b448:	d025      	beq.n	800b496 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b44e:	e022      	b.n	800b496 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b458:	d11f      	bne.n	800b49a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b45e:	e01c      	b.n	800b49a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b02      	cmp	r3, #2
 800b464:	d903      	bls.n	800b46e <DMA_CheckFifoParam+0xb6>
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b03      	cmp	r3, #3
 800b46a:	d003      	beq.n	800b474 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b46c:	e018      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	73fb      	strb	r3, [r7, #15]
      break;
 800b472:	e015      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00e      	beq.n	800b49e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	73fb      	strb	r3, [r7, #15]
      break;
 800b484:	e00b      	b.n	800b49e <DMA_CheckFifoParam+0xe6>
      break;
 800b486:	bf00      	nop
 800b488:	e00a      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
      break;
 800b48a:	bf00      	nop
 800b48c:	e008      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
      break;
 800b48e:	bf00      	nop
 800b490:	e006      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
      break;
 800b492:	bf00      	nop
 800b494:	e004      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
      break;
 800b496:	bf00      	nop
 800b498:	e002      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800b49a:	bf00      	nop
 800b49c:	e000      	b.n	800b4a0 <DMA_CheckFifoParam+0xe8>
      break;
 800b49e:	bf00      	nop
    }
  } 
  
  return status; 
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop

0800b4b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b089      	sub	sp, #36	; 0x24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
 800b4ca:	e16b      	b.n	800b7a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	4013      	ands	r3, r2
 800b4de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	f040 815a 	bne.w	800b79e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d005      	beq.n	800b502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d130      	bne.n	800b564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	005b      	lsls	r3, r3, #1
 800b50c:	2203      	movs	r2, #3
 800b50e:	fa02 f303 	lsl.w	r3, r2, r3
 800b512:	43db      	mvns	r3, r3
 800b514:	69ba      	ldr	r2, [r7, #24]
 800b516:	4013      	ands	r3, r2
 800b518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	68da      	ldr	r2, [r3, #12]
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	005b      	lsls	r3, r3, #1
 800b522:	fa02 f303 	lsl.w	r3, r2, r3
 800b526:	69ba      	ldr	r2, [r7, #24]
 800b528:	4313      	orrs	r3, r2
 800b52a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b538:	2201      	movs	r2, #1
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	fa02 f303 	lsl.w	r3, r2, r3
 800b540:	43db      	mvns	r3, r3
 800b542:	69ba      	ldr	r2, [r7, #24]
 800b544:	4013      	ands	r3, r2
 800b546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	091b      	lsrs	r3, r3, #4
 800b54e:	f003 0201 	and.w	r2, r3, #1
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	fa02 f303 	lsl.w	r3, r2, r3
 800b558:	69ba      	ldr	r2, [r7, #24]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	f003 0303 	and.w	r3, r3, #3
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d017      	beq.n	800b5a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	2203      	movs	r2, #3
 800b57c:	fa02 f303 	lsl.w	r3, r2, r3
 800b580:	43db      	mvns	r3, r3
 800b582:	69ba      	ldr	r2, [r7, #24]
 800b584:	4013      	ands	r3, r2
 800b586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	689a      	ldr	r2, [r3, #8]
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	005b      	lsls	r3, r3, #1
 800b590:	fa02 f303 	lsl.w	r3, r2, r3
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	4313      	orrs	r3, r2
 800b598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f003 0303 	and.w	r3, r3, #3
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d123      	bne.n	800b5f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	08da      	lsrs	r2, r3, #3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3208      	adds	r2, #8
 800b5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	f003 0307 	and.w	r3, r3, #7
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	220f      	movs	r2, #15
 800b5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	69ba      	ldr	r2, [r7, #24]
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	691a      	ldr	r2, [r3, #16]
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	f003 0307 	and.w	r3, r3, #7
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	08da      	lsrs	r2, r3, #3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3208      	adds	r2, #8
 800b5ee:	69b9      	ldr	r1, [r7, #24]
 800b5f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	2203      	movs	r2, #3
 800b600:	fa02 f303 	lsl.w	r3, r2, r3
 800b604:	43db      	mvns	r3, r3
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	4013      	ands	r3, r2
 800b60a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	f003 0203 	and.w	r2, r3, #3
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	fa02 f303 	lsl.w	r3, r2, r3
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	4313      	orrs	r3, r2
 800b620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	69ba      	ldr	r2, [r7, #24]
 800b626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 80b4 	beq.w	800b79e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b636:	2300      	movs	r3, #0
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	4b60      	ldr	r3, [pc, #384]	; (800b7bc <HAL_GPIO_Init+0x30c>)
 800b63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b63e:	4a5f      	ldr	r2, [pc, #380]	; (800b7bc <HAL_GPIO_Init+0x30c>)
 800b640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b644:	6453      	str	r3, [r2, #68]	; 0x44
 800b646:	4b5d      	ldr	r3, [pc, #372]	; (800b7bc <HAL_GPIO_Init+0x30c>)
 800b648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b64a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b652:	4a5b      	ldr	r2, [pc, #364]	; (800b7c0 <HAL_GPIO_Init+0x310>)
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	089b      	lsrs	r3, r3, #2
 800b658:	3302      	adds	r3, #2
 800b65a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b65e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	f003 0303 	and.w	r3, r3, #3
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	220f      	movs	r2, #15
 800b66a:	fa02 f303 	lsl.w	r3, r2, r3
 800b66e:	43db      	mvns	r3, r3
 800b670:	69ba      	ldr	r2, [r7, #24]
 800b672:	4013      	ands	r3, r2
 800b674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a52      	ldr	r2, [pc, #328]	; (800b7c4 <HAL_GPIO_Init+0x314>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d02b      	beq.n	800b6d6 <HAL_GPIO_Init+0x226>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a51      	ldr	r2, [pc, #324]	; (800b7c8 <HAL_GPIO_Init+0x318>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d025      	beq.n	800b6d2 <HAL_GPIO_Init+0x222>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a50      	ldr	r2, [pc, #320]	; (800b7cc <HAL_GPIO_Init+0x31c>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d01f      	beq.n	800b6ce <HAL_GPIO_Init+0x21e>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a4f      	ldr	r2, [pc, #316]	; (800b7d0 <HAL_GPIO_Init+0x320>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d019      	beq.n	800b6ca <HAL_GPIO_Init+0x21a>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a4e      	ldr	r2, [pc, #312]	; (800b7d4 <HAL_GPIO_Init+0x324>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d013      	beq.n	800b6c6 <HAL_GPIO_Init+0x216>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a4d      	ldr	r2, [pc, #308]	; (800b7d8 <HAL_GPIO_Init+0x328>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d00d      	beq.n	800b6c2 <HAL_GPIO_Init+0x212>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a4c      	ldr	r2, [pc, #304]	; (800b7dc <HAL_GPIO_Init+0x32c>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d007      	beq.n	800b6be <HAL_GPIO_Init+0x20e>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a4b      	ldr	r2, [pc, #300]	; (800b7e0 <HAL_GPIO_Init+0x330>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d101      	bne.n	800b6ba <HAL_GPIO_Init+0x20a>
 800b6b6:	2307      	movs	r3, #7
 800b6b8:	e00e      	b.n	800b6d8 <HAL_GPIO_Init+0x228>
 800b6ba:	2308      	movs	r3, #8
 800b6bc:	e00c      	b.n	800b6d8 <HAL_GPIO_Init+0x228>
 800b6be:	2306      	movs	r3, #6
 800b6c0:	e00a      	b.n	800b6d8 <HAL_GPIO_Init+0x228>
 800b6c2:	2305      	movs	r3, #5
 800b6c4:	e008      	b.n	800b6d8 <HAL_GPIO_Init+0x228>
 800b6c6:	2304      	movs	r3, #4
 800b6c8:	e006      	b.n	800b6d8 <HAL_GPIO_Init+0x228>
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e004      	b.n	800b6d8 <HAL_GPIO_Init+0x228>
 800b6ce:	2302      	movs	r3, #2
 800b6d0:	e002      	b.n	800b6d8 <HAL_GPIO_Init+0x228>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e000      	b.n	800b6d8 <HAL_GPIO_Init+0x228>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	69fa      	ldr	r2, [r7, #28]
 800b6da:	f002 0203 	and.w	r2, r2, #3
 800b6de:	0092      	lsls	r2, r2, #2
 800b6e0:	4093      	lsls	r3, r2
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b6e8:	4935      	ldr	r1, [pc, #212]	; (800b7c0 <HAL_GPIO_Init+0x310>)
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	089b      	lsrs	r3, r3, #2
 800b6ee:	3302      	adds	r3, #2
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b6f6:	4b3b      	ldr	r3, [pc, #236]	; (800b7e4 <HAL_GPIO_Init+0x334>)
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	43db      	mvns	r3, r3
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	4013      	ands	r3, r2
 800b704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b71a:	4a32      	ldr	r2, [pc, #200]	; (800b7e4 <HAL_GPIO_Init+0x334>)
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b720:	4b30      	ldr	r3, [pc, #192]	; (800b7e4 <HAL_GPIO_Init+0x334>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	43db      	mvns	r3, r3
 800b72a:	69ba      	ldr	r2, [r7, #24]
 800b72c:	4013      	ands	r3, r2
 800b72e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b73c:	69ba      	ldr	r2, [r7, #24]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	4313      	orrs	r3, r2
 800b742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b744:	4a27      	ldr	r2, [pc, #156]	; (800b7e4 <HAL_GPIO_Init+0x334>)
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b74a:	4b26      	ldr	r3, [pc, #152]	; (800b7e4 <HAL_GPIO_Init+0x334>)
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	43db      	mvns	r3, r3
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	4013      	ands	r3, r2
 800b758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b76e:	4a1d      	ldr	r2, [pc, #116]	; (800b7e4 <HAL_GPIO_Init+0x334>)
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b774:	4b1b      	ldr	r3, [pc, #108]	; (800b7e4 <HAL_GPIO_Init+0x334>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	43db      	mvns	r3, r3
 800b77e:	69ba      	ldr	r2, [r7, #24]
 800b780:	4013      	ands	r3, r2
 800b782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	4313      	orrs	r3, r2
 800b796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b798:	4a12      	ldr	r2, [pc, #72]	; (800b7e4 <HAL_GPIO_Init+0x334>)
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b0f      	cmp	r3, #15
 800b7a8:	f67f ae90 	bls.w	800b4cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	3724      	adds	r7, #36	; 0x24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	40023800 	.word	0x40023800
 800b7c0:	40013800 	.word	0x40013800
 800b7c4:	40020000 	.word	0x40020000
 800b7c8:	40020400 	.word	0x40020400
 800b7cc:	40020800 	.word	0x40020800
 800b7d0:	40020c00 	.word	0x40020c00
 800b7d4:	40021000 	.word	0x40021000
 800b7d8:	40021400 	.word	0x40021400
 800b7dc:	40021800 	.word	0x40021800
 800b7e0:	40021c00 	.word	0x40021c00
 800b7e4:	40013c00 	.word	0x40013c00

0800b7e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691a      	ldr	r2, [r3, #16]
 800b7f8:	887b      	ldrh	r3, [r7, #2]
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b800:	2301      	movs	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]
 800b804:	e001      	b.n	800b80a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3714      	adds	r7, #20
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	807b      	strh	r3, [r7, #2]
 800b824:	4613      	mov	r3, r2
 800b826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b828:	787b      	ldrb	r3, [r7, #1]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b82e:	887a      	ldrh	r2, [r7, #2]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b834:	e003      	b.n	800b83e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b836:	887b      	ldrh	r3, [r7, #2]
 800b838:	041a      	lsls	r2, r3, #16
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	619a      	str	r2, [r3, #24]
}
 800b83e:	bf00      	nop
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
	...

0800b84c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e12b      	b.n	800bab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d106      	bne.n	800b878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7f6 fbb4 	bl	8001fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2224      	movs	r2, #36	; 0x24
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f022 0201 	bic.w	r2, r2, #1
 800b88e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b89e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b8b0:	f001 fd16 	bl	800d2e0 <HAL_RCC_GetPCLK1Freq>
 800b8b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	4a81      	ldr	r2, [pc, #516]	; (800bac0 <HAL_I2C_Init+0x274>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d807      	bhi.n	800b8d0 <HAL_I2C_Init+0x84>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	4a80      	ldr	r2, [pc, #512]	; (800bac4 <HAL_I2C_Init+0x278>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	bf94      	ite	ls
 800b8c8:	2301      	movls	r3, #1
 800b8ca:	2300      	movhi	r3, #0
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	e006      	b.n	800b8de <HAL_I2C_Init+0x92>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4a7d      	ldr	r2, [pc, #500]	; (800bac8 <HAL_I2C_Init+0x27c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	bf94      	ite	ls
 800b8d8:	2301      	movls	r3, #1
 800b8da:	2300      	movhi	r3, #0
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e0e7      	b.n	800bab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	4a78      	ldr	r2, [pc, #480]	; (800bacc <HAL_I2C_Init+0x280>)
 800b8ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ee:	0c9b      	lsrs	r3, r3, #18
 800b8f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	430a      	orrs	r2, r1
 800b904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	4a6a      	ldr	r2, [pc, #424]	; (800bac0 <HAL_I2C_Init+0x274>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d802      	bhi.n	800b920 <HAL_I2C_Init+0xd4>
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	3301      	adds	r3, #1
 800b91e:	e009      	b.n	800b934 <HAL_I2C_Init+0xe8>
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b926:	fb02 f303 	mul.w	r3, r2, r3
 800b92a:	4a69      	ldr	r2, [pc, #420]	; (800bad0 <HAL_I2C_Init+0x284>)
 800b92c:	fba2 2303 	umull	r2, r3, r2, r3
 800b930:	099b      	lsrs	r3, r3, #6
 800b932:	3301      	adds	r3, #1
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	6812      	ldr	r2, [r2, #0]
 800b938:	430b      	orrs	r3, r1
 800b93a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	69db      	ldr	r3, [r3, #28]
 800b942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	495c      	ldr	r1, [pc, #368]	; (800bac0 <HAL_I2C_Init+0x274>)
 800b950:	428b      	cmp	r3, r1
 800b952:	d819      	bhi.n	800b988 <HAL_I2C_Init+0x13c>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	1e59      	subs	r1, r3, #1
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b962:	1c59      	adds	r1, r3, #1
 800b964:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b968:	400b      	ands	r3, r1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <HAL_I2C_Init+0x138>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	1e59      	subs	r1, r3, #1
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	005b      	lsls	r3, r3, #1
 800b978:	fbb1 f3f3 	udiv	r3, r1, r3
 800b97c:	3301      	adds	r3, #1
 800b97e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b982:	e051      	b.n	800ba28 <HAL_I2C_Init+0x1dc>
 800b984:	2304      	movs	r3, #4
 800b986:	e04f      	b.n	800ba28 <HAL_I2C_Init+0x1dc>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d111      	bne.n	800b9b4 <HAL_I2C_Init+0x168>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	1e58      	subs	r0, r3, #1
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6859      	ldr	r1, [r3, #4]
 800b998:	460b      	mov	r3, r1
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	440b      	add	r3, r1
 800b99e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bf0c      	ite	eq
 800b9ac:	2301      	moveq	r3, #1
 800b9ae:	2300      	movne	r3, #0
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	e012      	b.n	800b9da <HAL_I2C_Init+0x18e>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	1e58      	subs	r0, r3, #1
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6859      	ldr	r1, [r3, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	440b      	add	r3, r1
 800b9c2:	0099      	lsls	r1, r3, #2
 800b9c4:	440b      	add	r3, r1
 800b9c6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bf0c      	ite	eq
 800b9d4:	2301      	moveq	r3, #1
 800b9d6:	2300      	movne	r3, #0
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <HAL_I2C_Init+0x196>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e022      	b.n	800ba28 <HAL_I2C_Init+0x1dc>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10e      	bne.n	800ba08 <HAL_I2C_Init+0x1bc>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	1e58      	subs	r0, r3, #1
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6859      	ldr	r1, [r3, #4]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	440b      	add	r3, r1
 800b9f8:	fbb0 f3f3 	udiv	r3, r0, r3
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba06:	e00f      	b.n	800ba28 <HAL_I2C_Init+0x1dc>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	1e58      	subs	r0, r3, #1
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6859      	ldr	r1, [r3, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	440b      	add	r3, r1
 800ba16:	0099      	lsls	r1, r3, #2
 800ba18:	440b      	add	r3, r1
 800ba1a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba1e:	3301      	adds	r3, #1
 800ba20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba28:	6879      	ldr	r1, [r7, #4]
 800ba2a:	6809      	ldr	r1, [r1, #0]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	69da      	ldr	r2, [r3, #28]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a1b      	ldr	r3, [r3, #32]
 800ba42:	431a      	orrs	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	430a      	orrs	r2, r1
 800ba4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ba56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6911      	ldr	r1, [r2, #16]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	68d2      	ldr	r2, [r2, #12]
 800ba62:	4311      	orrs	r1, r2
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	6812      	ldr	r2, [r2, #0]
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	695a      	ldr	r2, [r3, #20]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f042 0201 	orr.w	r2, r2, #1
 800ba96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	000186a0 	.word	0x000186a0
 800bac4:	001e847f 	.word	0x001e847f
 800bac8:	003d08ff 	.word	0x003d08ff
 800bacc:	431bde83 	.word	0x431bde83
 800bad0:	10624dd3 	.word	0x10624dd3

0800bad4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af02      	add	r7, sp, #8
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	4608      	mov	r0, r1
 800bade:	4611      	mov	r1, r2
 800bae0:	461a      	mov	r2, r3
 800bae2:	4603      	mov	r3, r0
 800bae4:	817b      	strh	r3, [r7, #10]
 800bae6:	460b      	mov	r3, r1
 800bae8:	813b      	strh	r3, [r7, #8]
 800baea:	4613      	mov	r3, r2
 800baec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800baee:	f7fe fae7 	bl	800a0c0 <HAL_GetTick>
 800baf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	2b20      	cmp	r3, #32
 800bafe:	f040 80d9 	bne.w	800bcb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	2319      	movs	r3, #25
 800bb08:	2201      	movs	r2, #1
 800bb0a:	496d      	ldr	r1, [pc, #436]	; (800bcc0 <HAL_I2C_Mem_Write+0x1ec>)
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 fc7f 	bl	800c410 <I2C_WaitOnFlagUntilTimeout>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e0cc      	b.n	800bcb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d101      	bne.n	800bb2a <HAL_I2C_Mem_Write+0x56>
 800bb26:	2302      	movs	r3, #2
 800bb28:	e0c5      	b.n	800bcb6 <HAL_I2C_Mem_Write+0x1e2>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d007      	beq.n	800bb50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f042 0201 	orr.w	r2, r2, #1
 800bb4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2221      	movs	r2, #33	; 0x21
 800bb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2240      	movs	r2, #64	; 0x40
 800bb6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6a3a      	ldr	r2, [r7, #32]
 800bb7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4a4d      	ldr	r2, [pc, #308]	; (800bcc4 <HAL_I2C_Mem_Write+0x1f0>)
 800bb90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb92:	88f8      	ldrh	r0, [r7, #6]
 800bb94:	893a      	ldrh	r2, [r7, #8]
 800bb96:	8979      	ldrh	r1, [r7, #10]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	4603      	mov	r3, r0
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 fab6 	bl	800c114 <I2C_RequestMemoryWrite>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d052      	beq.n	800bc54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e081      	b.n	800bcb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 fd00 	bl	800c5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00d      	beq.n	800bbde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	d107      	bne.n	800bbda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e06b      	b.n	800bcb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	781a      	ldrb	r2, [r3, #0]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	d11b      	bne.n	800bc54 <HAL_I2C_Mem_Write+0x180>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d017      	beq.n	800bc54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	781a      	ldrb	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1aa      	bne.n	800bbb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f000 fcec 	bl	800c63e <I2C_WaitOnBTFFlagUntilTimeout>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00d      	beq.n	800bc88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc70:	2b04      	cmp	r3, #4
 800bc72:	d107      	bne.n	800bc84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e016      	b.n	800bcb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e000      	b.n	800bcb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bcb4:	2302      	movs	r3, #2
  }
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3718      	adds	r7, #24
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	00100002 	.word	0x00100002
 800bcc4:	ffff0000 	.word	0xffff0000

0800bcc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08c      	sub	sp, #48	; 0x30
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	817b      	strh	r3, [r7, #10]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	813b      	strh	r3, [r7, #8]
 800bcde:	4613      	mov	r3, r2
 800bce0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bce2:	f7fe f9ed 	bl	800a0c0 <HAL_GetTick>
 800bce6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	f040 8208 	bne.w	800c106 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	2319      	movs	r3, #25
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	497b      	ldr	r1, [pc, #492]	; (800beec <HAL_I2C_Mem_Read+0x224>)
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 fb85 	bl	800c410 <I2C_WaitOnFlagUntilTimeout>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	e1fb      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d101      	bne.n	800bd1e <HAL_I2C_Mem_Read+0x56>
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	e1f4      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 0301 	and.w	r3, r3, #1
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d007      	beq.n	800bd44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f042 0201 	orr.w	r2, r2, #1
 800bd42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2222      	movs	r2, #34	; 0x22
 800bd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2240      	movs	r2, #64	; 0x40
 800bd60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bd74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4a5b      	ldr	r2, [pc, #364]	; (800bef0 <HAL_I2C_Mem_Read+0x228>)
 800bd84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd86:	88f8      	ldrh	r0, [r7, #6]
 800bd88:	893a      	ldrh	r2, [r7, #8]
 800bd8a:	8979      	ldrh	r1, [r7, #10]
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	9301      	str	r3, [sp, #4]
 800bd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	4603      	mov	r3, r0
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f000 fa52 	bl	800c240 <I2C_RequestMemoryRead>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e1b0      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d113      	bne.n	800bdd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdae:	2300      	movs	r3, #0
 800bdb0:	623b      	str	r3, [r7, #32]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	695b      	ldr	r3, [r3, #20]
 800bdb8:	623b      	str	r3, [r7, #32]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	623b      	str	r3, [r7, #32]
 800bdc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	e184      	b.n	800c0e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d11b      	bne.n	800be16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdee:	2300      	movs	r3, #0
 800bdf0:	61fb      	str	r3, [r7, #28]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	61fb      	str	r3, [r7, #28]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	e164      	b.n	800c0e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d11b      	bne.n	800be56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be3e:	2300      	movs	r3, #0
 800be40:	61bb      	str	r3, [r7, #24]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	61bb      	str	r3, [r7, #24]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	61bb      	str	r3, [r7, #24]
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	e144      	b.n	800c0e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	617b      	str	r3, [r7, #20]
 800be6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800be6c:	e138      	b.n	800c0e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be72:	2b03      	cmp	r3, #3
 800be74:	f200 80f1 	bhi.w	800c05a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d123      	bne.n	800bec8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f000 fc1b 	bl	800c6c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	e139      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	691a      	ldr	r2, [r3, #16]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	b2d2      	uxtb	r2, r2
 800bea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beb0:	3b01      	subs	r3, #1
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	3b01      	subs	r3, #1
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bec6:	e10b      	b.n	800c0e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800becc:	2b02      	cmp	r3, #2
 800bece:	d14e      	bne.n	800bf6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	2200      	movs	r2, #0
 800bed8:	4906      	ldr	r1, [pc, #24]	; (800bef4 <HAL_I2C_Mem_Read+0x22c>)
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 fa98 	bl	800c410 <I2C_WaitOnFlagUntilTimeout>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d008      	beq.n	800bef8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e10e      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
 800beea:	bf00      	nop
 800beec:	00100002 	.word	0x00100002
 800bef0:	ffff0000 	.word	0xffff0000
 800bef4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	691a      	ldr	r2, [r3, #16]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf12:	b2d2      	uxtb	r2, r2
 800bf14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf24:	3b01      	subs	r3, #1
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	3b01      	subs	r3, #1
 800bf34:	b29a      	uxth	r2, r3
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	691a      	ldr	r2, [r3, #16]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf44:	b2d2      	uxtb	r2, r2
 800bf46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf56:	3b01      	subs	r3, #1
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	3b01      	subs	r3, #1
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf6c:	e0b8      	b.n	800c0e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf74:	2200      	movs	r2, #0
 800bf76:	4966      	ldr	r1, [pc, #408]	; (800c110 <HAL_I2C_Mem_Read+0x448>)
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f000 fa49 	bl	800c410 <I2C_WaitOnFlagUntilTimeout>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	e0bf      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	691a      	ldr	r2, [r3, #16]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa2:	b2d2      	uxtb	r2, r2
 800bfa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	494f      	ldr	r1, [pc, #316]	; (800c110 <HAL_I2C_Mem_Read+0x448>)
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f000 fa1b 	bl	800c410 <I2C_WaitOnFlagUntilTimeout>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e091      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	691a      	ldr	r2, [r3, #16]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffe:	b2d2      	uxtb	r2, r2
 800c000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c006:	1c5a      	adds	r2, r3, #1
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c010:	3b01      	subs	r3, #1
 800c012:	b29a      	uxth	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	b29a      	uxth	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	691a      	ldr	r2, [r3, #16]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	b2d2      	uxtb	r2, r2
 800c032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c042:	3b01      	subs	r3, #1
 800c044:	b29a      	uxth	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c04e:	b29b      	uxth	r3, r3
 800c050:	3b01      	subs	r3, #1
 800c052:	b29a      	uxth	r2, r3
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c058:	e042      	b.n	800c0e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c05c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 fb2e 	bl	800c6c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e04c      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	691a      	ldr	r2, [r3, #16]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c078:	b2d2      	uxtb	r2, r2
 800c07a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c08a:	3b01      	subs	r3, #1
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c096:	b29b      	uxth	r3, r3
 800c098:	3b01      	subs	r3, #1
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	f003 0304 	and.w	r3, r3, #4
 800c0aa:	2b04      	cmp	r3, #4
 800c0ac:	d118      	bne.n	800c0e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	691a      	ldr	r2, [r3, #16]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	b2d2      	uxtb	r2, r2
 800c0ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c0:	1c5a      	adds	r2, r3, #1
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f47f aec2 	bne.w	800be6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	e000      	b.n	800c108 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c106:	2302      	movs	r3, #2
  }
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3728      	adds	r7, #40	; 0x28
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	00010004 	.word	0x00010004

0800c114 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af02      	add	r7, sp, #8
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	4608      	mov	r0, r1
 800c11e:	4611      	mov	r1, r2
 800c120:	461a      	mov	r2, r3
 800c122:	4603      	mov	r3, r0
 800c124:	817b      	strh	r3, [r7, #10]
 800c126:	460b      	mov	r3, r1
 800c128:	813b      	strh	r3, [r7, #8]
 800c12a:	4613      	mov	r3, r2
 800c12c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c13c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	2200      	movs	r2, #0
 800c146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 f960 	bl	800c410 <I2C_WaitOnFlagUntilTimeout>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00d      	beq.n	800c172 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c164:	d103      	bne.n	800c16e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c16c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e05f      	b.n	800c232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c172:	897b      	ldrh	r3, [r7, #10]
 800c174:	b2db      	uxtb	r3, r3
 800c176:	461a      	mov	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	6a3a      	ldr	r2, [r7, #32]
 800c186:	492d      	ldr	r1, [pc, #180]	; (800c23c <I2C_RequestMemoryWrite+0x128>)
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f000 f998 	bl	800c4be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d001      	beq.n	800c198 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	e04c      	b.n	800c232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	617b      	str	r3, [r7, #20]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	617b      	str	r3, [r7, #20]
 800c1ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b0:	6a39      	ldr	r1, [r7, #32]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 fa02 	bl	800c5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00d      	beq.n	800c1da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c2:	2b04      	cmp	r3, #4
 800c1c4:	d107      	bne.n	800c1d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e02b      	b.n	800c232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c1da:	88fb      	ldrh	r3, [r7, #6]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d105      	bne.n	800c1ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c1e0:	893b      	ldrh	r3, [r7, #8]
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	611a      	str	r2, [r3, #16]
 800c1ea:	e021      	b.n	800c230 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c1ec:	893b      	ldrh	r3, [r7, #8]
 800c1ee:	0a1b      	lsrs	r3, r3, #8
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fc:	6a39      	ldr	r1, [r7, #32]
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 f9dc 	bl	800c5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00d      	beq.n	800c226 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20e:	2b04      	cmp	r3, #4
 800c210:	d107      	bne.n	800c222 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	e005      	b.n	800c232 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c226:	893b      	ldrh	r3, [r7, #8]
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	00010002 	.word	0x00010002

0800c240 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af02      	add	r7, sp, #8
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	4608      	mov	r0, r1
 800c24a:	4611      	mov	r1, r2
 800c24c:	461a      	mov	r2, r3
 800c24e:	4603      	mov	r3, r0
 800c250:	817b      	strh	r3, [r7, #10]
 800c252:	460b      	mov	r3, r1
 800c254:	813b      	strh	r3, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c268:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	6a3b      	ldr	r3, [r7, #32]
 800c280:	2200      	movs	r2, #0
 800c282:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 f8c2 	bl	800c410 <I2C_WaitOnFlagUntilTimeout>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00d      	beq.n	800c2ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2a0:	d103      	bne.n	800c2aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c2aa:	2303      	movs	r3, #3
 800c2ac:	e0aa      	b.n	800c404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c2ae:	897b      	ldrh	r3, [r7, #10]
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c2bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c0:	6a3a      	ldr	r2, [r7, #32]
 800c2c2:	4952      	ldr	r1, [pc, #328]	; (800c40c <I2C_RequestMemoryRead+0x1cc>)
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f000 f8fa 	bl	800c4be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e097      	b.n	800c404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	617b      	str	r3, [r7, #20]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	617b      	str	r3, [r7, #20]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	617b      	str	r3, [r7, #20]
 800c2e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ec:	6a39      	ldr	r1, [r7, #32]
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 f964 	bl	800c5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00d      	beq.n	800c316 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fe:	2b04      	cmp	r3, #4
 800c300:	d107      	bne.n	800c312 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e076      	b.n	800c404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c316:	88fb      	ldrh	r3, [r7, #6]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d105      	bne.n	800c328 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c31c:	893b      	ldrh	r3, [r7, #8]
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	611a      	str	r2, [r3, #16]
 800c326:	e021      	b.n	800c36c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c328:	893b      	ldrh	r3, [r7, #8]
 800c32a:	0a1b      	lsrs	r3, r3, #8
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c338:	6a39      	ldr	r1, [r7, #32]
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f000 f93e 	bl	800c5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00d      	beq.n	800c362 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34a:	2b04      	cmp	r3, #4
 800c34c:	d107      	bne.n	800c35e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c35c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e050      	b.n	800c404 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c362:	893b      	ldrh	r3, [r7, #8]
 800c364:	b2da      	uxtb	r2, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c36e:	6a39      	ldr	r1, [r7, #32]
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f000 f923 	bl	800c5bc <I2C_WaitOnTXEFlagUntilTimeout>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00d      	beq.n	800c398 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c380:	2b04      	cmp	r3, #4
 800c382:	d107      	bne.n	800c394 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c392:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e035      	b.n	800c404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	6a3b      	ldr	r3, [r7, #32]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 f82b 	bl	800c410 <I2C_WaitOnFlagUntilTimeout>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00d      	beq.n	800c3dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ce:	d103      	bne.n	800c3d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e013      	b.n	800c404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c3dc:	897b      	ldrh	r3, [r7, #10]
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	f043 0301 	orr.w	r3, r3, #1
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	6a3a      	ldr	r2, [r7, #32]
 800c3f0:	4906      	ldr	r1, [pc, #24]	; (800c40c <I2C_RequestMemoryRead+0x1cc>)
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f000 f863 	bl	800c4be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	00010002 	.word	0x00010002

0800c410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	4613      	mov	r3, r2
 800c41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c420:	e025      	b.n	800c46e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c428:	d021      	beq.n	800c46e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c42a:	f7fd fe49 	bl	800a0c0 <HAL_GetTick>
 800c42e:	4602      	mov	r2, r0
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d302      	bcc.n	800c440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d116      	bne.n	800c46e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2220      	movs	r2, #32
 800c44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	f043 0220 	orr.w	r2, r3, #32
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e023      	b.n	800c4b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	0c1b      	lsrs	r3, r3, #16
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b01      	cmp	r3, #1
 800c476:	d10d      	bne.n	800c494 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	43da      	mvns	r2, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	4013      	ands	r3, r2
 800c484:	b29b      	uxth	r3, r3
 800c486:	2b00      	cmp	r3, #0
 800c488:	bf0c      	ite	eq
 800c48a:	2301      	moveq	r3, #1
 800c48c:	2300      	movne	r3, #0
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	461a      	mov	r2, r3
 800c492:	e00c      	b.n	800c4ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	43da      	mvns	r2, r3
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	4013      	ands	r3, r2
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	bf0c      	ite	eq
 800c4a6:	2301      	moveq	r3, #1
 800c4a8:	2300      	movne	r3, #0
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d0b6      	beq.n	800c422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	60f8      	str	r0, [r7, #12]
 800c4c6:	60b9      	str	r1, [r7, #8]
 800c4c8:	607a      	str	r2, [r7, #4]
 800c4ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c4cc:	e051      	b.n	800c572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4dc:	d123      	bne.n	800c526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c4f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2220      	movs	r2, #32
 800c502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2200      	movs	r2, #0
 800c50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c512:	f043 0204 	orr.w	r2, r3, #4
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e046      	b.n	800c5b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52c:	d021      	beq.n	800c572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c52e:	f7fd fdc7 	bl	800a0c0 <HAL_GetTick>
 800c532:	4602      	mov	r2, r0
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d302      	bcc.n	800c544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d116      	bne.n	800c572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2220      	movs	r2, #32
 800c54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55e:	f043 0220 	orr.w	r2, r3, #32
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e020      	b.n	800c5b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	0c1b      	lsrs	r3, r3, #16
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d10c      	bne.n	800c596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	43da      	mvns	r2, r3
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	4013      	ands	r3, r2
 800c588:	b29b      	uxth	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	bf14      	ite	ne
 800c58e:	2301      	movne	r3, #1
 800c590:	2300      	moveq	r3, #0
 800c592:	b2db      	uxtb	r3, r3
 800c594:	e00b      	b.n	800c5ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	43da      	mvns	r2, r3
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	bf14      	ite	ne
 800c5a8:	2301      	movne	r3, #1
 800c5aa:	2300      	moveq	r3, #0
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d18d      	bne.n	800c4ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c5c8:	e02d      	b.n	800c626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f000 f8ce 	bl	800c76c <I2C_IsAcknowledgeFailed>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e02d      	b.n	800c636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e0:	d021      	beq.n	800c626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5e2:	f7fd fd6d 	bl	800a0c0 <HAL_GetTick>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d302      	bcc.n	800c5f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d116      	bne.n	800c626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2220      	movs	r2, #32
 800c602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c612:	f043 0220 	orr.w	r2, r3, #32
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e007      	b.n	800c636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c630:	2b80      	cmp	r3, #128	; 0x80
 800c632:	d1ca      	bne.n	800c5ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	60f8      	str	r0, [r7, #12]
 800c646:	60b9      	str	r1, [r7, #8]
 800c648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c64a:	e02d      	b.n	800c6a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f000 f88d 	bl	800c76c <I2C_IsAcknowledgeFailed>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e02d      	b.n	800c6b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c662:	d021      	beq.n	800c6a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c664:	f7fd fd2c 	bl	800a0c0 <HAL_GetTick>
 800c668:	4602      	mov	r2, r0
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	429a      	cmp	r2, r3
 800c672:	d302      	bcc.n	800c67a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d116      	bne.n	800c6a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2220      	movs	r2, #32
 800c684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c694:	f043 0220 	orr.w	r2, r3, #32
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e007      	b.n	800c6b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	695b      	ldr	r3, [r3, #20]
 800c6ae:	f003 0304 	and.w	r3, r3, #4
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d1ca      	bne.n	800c64c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c6cc:	e042      	b.n	800c754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	f003 0310 	and.w	r3, r3, #16
 800c6d8:	2b10      	cmp	r3, #16
 800c6da:	d119      	bne.n	800c710 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f06f 0210 	mvn.w	r2, #16
 800c6e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c70c:	2301      	movs	r3, #1
 800c70e:	e029      	b.n	800c764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c710:	f7fd fcd6 	bl	800a0c0 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d302      	bcc.n	800c726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d116      	bne.n	800c754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2220      	movs	r2, #32
 800c730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c740:	f043 0220 	orr.w	r2, r3, #32
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	e007      	b.n	800c764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c75e:	2b40      	cmp	r3, #64	; 0x40
 800c760:	d1b5      	bne.n	800c6ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c77e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c782:	d11b      	bne.n	800c7bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c78c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2220      	movs	r2, #32
 800c798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a8:	f043 0204 	orr.w	r2, r3, #4
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e000      	b.n	800c7be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c7ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7cc:	b08f      	sub	sp, #60	; 0x3c
 800c7ce:	af0a      	add	r7, sp, #40	; 0x28
 800c7d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e10f      	b.n	800c9fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d106      	bne.n	800c7fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7fd fb86 	bl	8009f08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2203      	movs	r2, #3
 800c800:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d102      	bne.n	800c816 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f002 fa63 	bl	800ece6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	603b      	str	r3, [r7, #0]
 800c826:	687e      	ldr	r6, [r7, #4]
 800c828:	466d      	mov	r5, sp
 800c82a:	f106 0410 	add.w	r4, r6, #16
 800c82e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c836:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c83a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c83e:	1d33      	adds	r3, r6, #4
 800c840:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c842:	6838      	ldr	r0, [r7, #0]
 800c844:	f002 f9ee 	bl	800ec24 <USB_CoreInit>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d005      	beq.n	800c85a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2202      	movs	r2, #2
 800c852:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e0d0      	b.n	800c9fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2100      	movs	r1, #0
 800c860:	4618      	mov	r0, r3
 800c862:	f002 fa51 	bl	800ed08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c866:	2300      	movs	r3, #0
 800c868:	73fb      	strb	r3, [r7, #15]
 800c86a:	e04a      	b.n	800c902 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c86c:	7bfa      	ldrb	r2, [r7, #15]
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	4613      	mov	r3, r2
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	4413      	add	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	440b      	add	r3, r1
 800c87a:	333d      	adds	r3, #61	; 0x3d
 800c87c:	2201      	movs	r2, #1
 800c87e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c880:	7bfa      	ldrb	r2, [r7, #15]
 800c882:	6879      	ldr	r1, [r7, #4]
 800c884:	4613      	mov	r3, r2
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	4413      	add	r3, r2
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	440b      	add	r3, r1
 800c88e:	333c      	adds	r3, #60	; 0x3c
 800c890:	7bfa      	ldrb	r2, [r7, #15]
 800c892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c894:	7bfa      	ldrb	r2, [r7, #15]
 800c896:	7bfb      	ldrb	r3, [r7, #15]
 800c898:	b298      	uxth	r0, r3
 800c89a:	6879      	ldr	r1, [r7, #4]
 800c89c:	4613      	mov	r3, r2
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	4413      	add	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	440b      	add	r3, r1
 800c8a6:	3344      	adds	r3, #68	; 0x44
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c8ac:	7bfa      	ldrb	r2, [r7, #15]
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	00db      	lsls	r3, r3, #3
 800c8b4:	4413      	add	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	440b      	add	r3, r1
 800c8ba:	3340      	adds	r3, #64	; 0x40
 800c8bc:	2200      	movs	r2, #0
 800c8be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c8c0:	7bfa      	ldrb	r2, [r7, #15]
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	4413      	add	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	440b      	add	r3, r1
 800c8ce:	3348      	adds	r3, #72	; 0x48
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c8d4:	7bfa      	ldrb	r2, [r7, #15]
 800c8d6:	6879      	ldr	r1, [r7, #4]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	00db      	lsls	r3, r3, #3
 800c8dc:	4413      	add	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	440b      	add	r3, r1
 800c8e2:	334c      	adds	r3, #76	; 0x4c
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c8e8:	7bfa      	ldrb	r2, [r7, #15]
 800c8ea:	6879      	ldr	r1, [r7, #4]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	00db      	lsls	r3, r3, #3
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	440b      	add	r3, r1
 800c8f6:	3354      	adds	r3, #84	; 0x54
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	3301      	adds	r3, #1
 800c900:	73fb      	strb	r3, [r7, #15]
 800c902:	7bfa      	ldrb	r2, [r7, #15]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d3af      	bcc.n	800c86c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c90c:	2300      	movs	r3, #0
 800c90e:	73fb      	strb	r3, [r7, #15]
 800c910:	e044      	b.n	800c99c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c912:	7bfa      	ldrb	r2, [r7, #15]
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	4613      	mov	r3, r2
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	440b      	add	r3, r1
 800c920:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800c924:	2200      	movs	r2, #0
 800c926:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c928:	7bfa      	ldrb	r2, [r7, #15]
 800c92a:	6879      	ldr	r1, [r7, #4]
 800c92c:	4613      	mov	r3, r2
 800c92e:	00db      	lsls	r3, r3, #3
 800c930:	4413      	add	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	440b      	add	r3, r1
 800c936:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800c93a:	7bfa      	ldrb	r2, [r7, #15]
 800c93c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c93e:	7bfa      	ldrb	r2, [r7, #15]
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	4613      	mov	r3, r2
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	4413      	add	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	440b      	add	r3, r1
 800c94c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c950:	2200      	movs	r2, #0
 800c952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c954:	7bfa      	ldrb	r2, [r7, #15]
 800c956:	6879      	ldr	r1, [r7, #4]
 800c958:	4613      	mov	r3, r2
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	4413      	add	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	440b      	add	r3, r1
 800c962:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c966:	2200      	movs	r2, #0
 800c968:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c96a:	7bfa      	ldrb	r2, [r7, #15]
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	4613      	mov	r3, r2
 800c970:	00db      	lsls	r3, r3, #3
 800c972:	4413      	add	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	440b      	add	r3, r1
 800c978:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c97c:	2200      	movs	r2, #0
 800c97e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c980:	7bfa      	ldrb	r2, [r7, #15]
 800c982:	6879      	ldr	r1, [r7, #4]
 800c984:	4613      	mov	r3, r2
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	4413      	add	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	440b      	add	r3, r1
 800c98e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	3301      	adds	r3, #1
 800c99a:	73fb      	strb	r3, [r7, #15]
 800c99c:	7bfa      	ldrb	r2, [r7, #15]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d3b5      	bcc.n	800c912 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	603b      	str	r3, [r7, #0]
 800c9ac:	687e      	ldr	r6, [r7, #4]
 800c9ae:	466d      	mov	r5, sp
 800c9b0:	f106 0410 	add.w	r4, r6, #16
 800c9b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c9c0:	e885 0003 	stmia.w	r5, {r0, r1}
 800c9c4:	1d33      	adds	r3, r6, #4
 800c9c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c9c8:	6838      	ldr	r0, [r7, #0]
 800c9ca:	f002 f9e9 	bl	800eda0 <USB_DevInit>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d005      	beq.n	800c9e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2202      	movs	r2, #2
 800c9d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e00d      	b.n	800c9fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f002 fbb4 	bl	800f162 <USB_DevDisconnect>

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e267      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d075      	beq.n	800cb0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ca22:	4b88      	ldr	r3, [pc, #544]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f003 030c 	and.w	r3, r3, #12
 800ca2a:	2b04      	cmp	r3, #4
 800ca2c:	d00c      	beq.n	800ca48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca2e:	4b85      	ldr	r3, [pc, #532]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ca36:	2b08      	cmp	r3, #8
 800ca38:	d112      	bne.n	800ca60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca3a:	4b82      	ldr	r3, [pc, #520]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca46:	d10b      	bne.n	800ca60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca48:	4b7e      	ldr	r3, [pc, #504]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d05b      	beq.n	800cb0c <HAL_RCC_OscConfig+0x108>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d157      	bne.n	800cb0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e242      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca68:	d106      	bne.n	800ca78 <HAL_RCC_OscConfig+0x74>
 800ca6a:	4b76      	ldr	r3, [pc, #472]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a75      	ldr	r2, [pc, #468]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e01d      	b.n	800cab4 <HAL_RCC_OscConfig+0xb0>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca80:	d10c      	bne.n	800ca9c <HAL_RCC_OscConfig+0x98>
 800ca82:	4b70      	ldr	r3, [pc, #448]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a6f      	ldr	r2, [pc, #444]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	4b6d      	ldr	r3, [pc, #436]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a6c      	ldr	r2, [pc, #432]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	e00b      	b.n	800cab4 <HAL_RCC_OscConfig+0xb0>
 800ca9c:	4b69      	ldr	r3, [pc, #420]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a68      	ldr	r2, [pc, #416]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800caa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	4b66      	ldr	r3, [pc, #408]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a65      	ldr	r2, [pc, #404]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800caae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d013      	beq.n	800cae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cabc:	f7fd fb00 	bl	800a0c0 <HAL_GetTick>
 800cac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cac2:	e008      	b.n	800cad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cac4:	f7fd fafc 	bl	800a0c0 <HAL_GetTick>
 800cac8:	4602      	mov	r2, r0
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	2b64      	cmp	r3, #100	; 0x64
 800cad0:	d901      	bls.n	800cad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cad2:	2303      	movs	r3, #3
 800cad4:	e207      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cad6:	4b5b      	ldr	r3, [pc, #364]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0f0      	beq.n	800cac4 <HAL_RCC_OscConfig+0xc0>
 800cae2:	e014      	b.n	800cb0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cae4:	f7fd faec 	bl	800a0c0 <HAL_GetTick>
 800cae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800caea:	e008      	b.n	800cafe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800caec:	f7fd fae8 	bl	800a0c0 <HAL_GetTick>
 800caf0:	4602      	mov	r2, r0
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	2b64      	cmp	r3, #100	; 0x64
 800caf8:	d901      	bls.n	800cafe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e1f3      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cafe:	4b51      	ldr	r3, [pc, #324]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f0      	bne.n	800caec <HAL_RCC_OscConfig+0xe8>
 800cb0a:	e000      	b.n	800cb0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 0302 	and.w	r3, r3, #2
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d063      	beq.n	800cbe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cb1a:	4b4a      	ldr	r3, [pc, #296]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	f003 030c 	and.w	r3, r3, #12
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00b      	beq.n	800cb3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb26:	4b47      	ldr	r3, [pc, #284]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800cb2e:	2b08      	cmp	r3, #8
 800cb30:	d11c      	bne.n	800cb6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb32:	4b44      	ldr	r3, [pc, #272]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d116      	bne.n	800cb6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb3e:	4b41      	ldr	r3, [pc, #260]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f003 0302 	and.w	r3, r3, #2
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d005      	beq.n	800cb56 <HAL_RCC_OscConfig+0x152>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d001      	beq.n	800cb56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	e1c7      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb56:	4b3b      	ldr	r3, [pc, #236]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	00db      	lsls	r3, r3, #3
 800cb64:	4937      	ldr	r1, [pc, #220]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cb66:	4313      	orrs	r3, r2
 800cb68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb6a:	e03a      	b.n	800cbe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d020      	beq.n	800cbb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb74:	4b34      	ldr	r3, [pc, #208]	; (800cc48 <HAL_RCC_OscConfig+0x244>)
 800cb76:	2201      	movs	r2, #1
 800cb78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb7a:	f7fd faa1 	bl	800a0c0 <HAL_GetTick>
 800cb7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb80:	e008      	b.n	800cb94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb82:	f7fd fa9d 	bl	800a0c0 <HAL_GetTick>
 800cb86:	4602      	mov	r2, r0
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d901      	bls.n	800cb94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cb90:	2303      	movs	r3, #3
 800cb92:	e1a8      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb94:	4b2b      	ldr	r3, [pc, #172]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0302 	and.w	r3, r3, #2
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d0f0      	beq.n	800cb82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cba0:	4b28      	ldr	r3, [pc, #160]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	4925      	ldr	r1, [pc, #148]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	600b      	str	r3, [r1, #0]
 800cbb4:	e015      	b.n	800cbe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cbb6:	4b24      	ldr	r3, [pc, #144]	; (800cc48 <HAL_RCC_OscConfig+0x244>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbbc:	f7fd fa80 	bl	800a0c0 <HAL_GetTick>
 800cbc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cbc2:	e008      	b.n	800cbd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cbc4:	f7fd fa7c 	bl	800a0c0 <HAL_GetTick>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	d901      	bls.n	800cbd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cbd2:	2303      	movs	r3, #3
 800cbd4:	e187      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cbd6:	4b1b      	ldr	r3, [pc, #108]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f003 0302 	and.w	r3, r3, #2
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1f0      	bne.n	800cbc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 0308 	and.w	r3, r3, #8
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d036      	beq.n	800cc5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d016      	beq.n	800cc24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cbf6:	4b15      	ldr	r3, [pc, #84]	; (800cc4c <HAL_RCC_OscConfig+0x248>)
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbfc:	f7fd fa60 	bl	800a0c0 <HAL_GetTick>
 800cc00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc02:	e008      	b.n	800cc16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc04:	f7fd fa5c 	bl	800a0c0 <HAL_GetTick>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d901      	bls.n	800cc16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cc12:	2303      	movs	r3, #3
 800cc14:	e167      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc16:	4b0b      	ldr	r3, [pc, #44]	; (800cc44 <HAL_RCC_OscConfig+0x240>)
 800cc18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc1a:	f003 0302 	and.w	r3, r3, #2
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d0f0      	beq.n	800cc04 <HAL_RCC_OscConfig+0x200>
 800cc22:	e01b      	b.n	800cc5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc24:	4b09      	ldr	r3, [pc, #36]	; (800cc4c <HAL_RCC_OscConfig+0x248>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc2a:	f7fd fa49 	bl	800a0c0 <HAL_GetTick>
 800cc2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc30:	e00e      	b.n	800cc50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc32:	f7fd fa45 	bl	800a0c0 <HAL_GetTick>
 800cc36:	4602      	mov	r2, r0
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d907      	bls.n	800cc50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cc40:	2303      	movs	r3, #3
 800cc42:	e150      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
 800cc44:	40023800 	.word	0x40023800
 800cc48:	42470000 	.word	0x42470000
 800cc4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc50:	4b88      	ldr	r3, [pc, #544]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cc52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc54:	f003 0302 	and.w	r3, r3, #2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1ea      	bne.n	800cc32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f003 0304 	and.w	r3, r3, #4
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f000 8097 	beq.w	800cd98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc6e:	4b81      	ldr	r3, [pc, #516]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10f      	bne.n	800cc9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	60bb      	str	r3, [r7, #8]
 800cc7e:	4b7d      	ldr	r3, [pc, #500]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc82:	4a7c      	ldr	r2, [pc, #496]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cc84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc88:	6413      	str	r3, [r2, #64]	; 0x40
 800cc8a:	4b7a      	ldr	r3, [pc, #488]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc92:	60bb      	str	r3, [r7, #8]
 800cc94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc96:	2301      	movs	r3, #1
 800cc98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc9a:	4b77      	ldr	r3, [pc, #476]	; (800ce78 <HAL_RCC_OscConfig+0x474>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d118      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cca6:	4b74      	ldr	r3, [pc, #464]	; (800ce78 <HAL_RCC_OscConfig+0x474>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a73      	ldr	r2, [pc, #460]	; (800ce78 <HAL_RCC_OscConfig+0x474>)
 800ccac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ccb2:	f7fd fa05 	bl	800a0c0 <HAL_GetTick>
 800ccb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccb8:	e008      	b.n	800cccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ccba:	f7fd fa01 	bl	800a0c0 <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d901      	bls.n	800cccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e10c      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cccc:	4b6a      	ldr	r3, [pc, #424]	; (800ce78 <HAL_RCC_OscConfig+0x474>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0f0      	beq.n	800ccba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d106      	bne.n	800ccee <HAL_RCC_OscConfig+0x2ea>
 800cce0:	4b64      	ldr	r3, [pc, #400]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce4:	4a63      	ldr	r2, [pc, #396]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cce6:	f043 0301 	orr.w	r3, r3, #1
 800ccea:	6713      	str	r3, [r2, #112]	; 0x70
 800ccec:	e01c      	b.n	800cd28 <HAL_RCC_OscConfig+0x324>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	2b05      	cmp	r3, #5
 800ccf4:	d10c      	bne.n	800cd10 <HAL_RCC_OscConfig+0x30c>
 800ccf6:	4b5f      	ldr	r3, [pc, #380]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800ccf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccfa:	4a5e      	ldr	r2, [pc, #376]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800ccfc:	f043 0304 	orr.w	r3, r3, #4
 800cd00:	6713      	str	r3, [r2, #112]	; 0x70
 800cd02:	4b5c      	ldr	r3, [pc, #368]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd06:	4a5b      	ldr	r2, [pc, #364]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd08:	f043 0301 	orr.w	r3, r3, #1
 800cd0c:	6713      	str	r3, [r2, #112]	; 0x70
 800cd0e:	e00b      	b.n	800cd28 <HAL_RCC_OscConfig+0x324>
 800cd10:	4b58      	ldr	r3, [pc, #352]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd14:	4a57      	ldr	r2, [pc, #348]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd16:	f023 0301 	bic.w	r3, r3, #1
 800cd1a:	6713      	str	r3, [r2, #112]	; 0x70
 800cd1c:	4b55      	ldr	r3, [pc, #340]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd20:	4a54      	ldr	r2, [pc, #336]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd22:	f023 0304 	bic.w	r3, r3, #4
 800cd26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d015      	beq.n	800cd5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd30:	f7fd f9c6 	bl	800a0c0 <HAL_GetTick>
 800cd34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd36:	e00a      	b.n	800cd4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd38:	f7fd f9c2 	bl	800a0c0 <HAL_GetTick>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d901      	bls.n	800cd4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	e0cb      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd4e:	4b49      	ldr	r3, [pc, #292]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd52:	f003 0302 	and.w	r3, r3, #2
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0ee      	beq.n	800cd38 <HAL_RCC_OscConfig+0x334>
 800cd5a:	e014      	b.n	800cd86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cd5c:	f7fd f9b0 	bl	800a0c0 <HAL_GetTick>
 800cd60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd62:	e00a      	b.n	800cd7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd64:	f7fd f9ac 	bl	800a0c0 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d901      	bls.n	800cd7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cd76:	2303      	movs	r3, #3
 800cd78:	e0b5      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd7a:	4b3e      	ldr	r3, [pc, #248]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7e:	f003 0302 	and.w	r3, r3, #2
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1ee      	bne.n	800cd64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d105      	bne.n	800cd98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd8c:	4b39      	ldr	r3, [pc, #228]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd90:	4a38      	ldr	r2, [pc, #224]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cd92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	699b      	ldr	r3, [r3, #24]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f000 80a1 	beq.w	800cee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cda2:	4b34      	ldr	r3, [pc, #208]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	f003 030c 	and.w	r3, r3, #12
 800cdaa:	2b08      	cmp	r3, #8
 800cdac:	d05c      	beq.n	800ce68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d141      	bne.n	800ce3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdb6:	4b31      	ldr	r3, [pc, #196]	; (800ce7c <HAL_RCC_OscConfig+0x478>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdbc:	f7fd f980 	bl	800a0c0 <HAL_GetTick>
 800cdc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdc2:	e008      	b.n	800cdd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdc4:	f7fd f97c 	bl	800a0c0 <HAL_GetTick>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d901      	bls.n	800cdd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	e087      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdd6:	4b27      	ldr	r3, [pc, #156]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1f0      	bne.n	800cdc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	69da      	ldr	r2, [r3, #28]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	431a      	orrs	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	019b      	lsls	r3, r3, #6
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf8:	085b      	lsrs	r3, r3, #1
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	041b      	lsls	r3, r3, #16
 800cdfe:	431a      	orrs	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce04:	061b      	lsls	r3, r3, #24
 800ce06:	491b      	ldr	r1, [pc, #108]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce0c:	4b1b      	ldr	r3, [pc, #108]	; (800ce7c <HAL_RCC_OscConfig+0x478>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce12:	f7fd f955 	bl	800a0c0 <HAL_GetTick>
 800ce16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce18:	e008      	b.n	800ce2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce1a:	f7fd f951 	bl	800a0c0 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d901      	bls.n	800ce2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e05c      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce2c:	4b11      	ldr	r3, [pc, #68]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d0f0      	beq.n	800ce1a <HAL_RCC_OscConfig+0x416>
 800ce38:	e054      	b.n	800cee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce3a:	4b10      	ldr	r3, [pc, #64]	; (800ce7c <HAL_RCC_OscConfig+0x478>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce40:	f7fd f93e 	bl	800a0c0 <HAL_GetTick>
 800ce44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce46:	e008      	b.n	800ce5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce48:	f7fd f93a 	bl	800a0c0 <HAL_GetTick>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d901      	bls.n	800ce5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ce56:	2303      	movs	r3, #3
 800ce58:	e045      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce5a:	4b06      	ldr	r3, [pc, #24]	; (800ce74 <HAL_RCC_OscConfig+0x470>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1f0      	bne.n	800ce48 <HAL_RCC_OscConfig+0x444>
 800ce66:	e03d      	b.n	800cee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d107      	bne.n	800ce80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e038      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
 800ce74:	40023800 	.word	0x40023800
 800ce78:	40007000 	.word	0x40007000
 800ce7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ce80:	4b1b      	ldr	r3, [pc, #108]	; (800cef0 <HAL_RCC_OscConfig+0x4ec>)
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d028      	beq.n	800cee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d121      	bne.n	800cee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d11a      	bne.n	800cee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ceb0:	4013      	ands	r3, r2
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ceb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d111      	bne.n	800cee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec6:	085b      	lsrs	r3, r3, #1
 800cec8:	3b01      	subs	r3, #1
 800ceca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cecc:	429a      	cmp	r2, r3
 800cece:	d107      	bne.n	800cee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cedc:	429a      	cmp	r2, r3
 800cede:	d001      	beq.n	800cee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cee0:	2301      	movs	r3, #1
 800cee2:	e000      	b.n	800cee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	40023800 	.word	0x40023800

0800cef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e0cc      	b.n	800d0a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cf08:	4b68      	ldr	r3, [pc, #416]	; (800d0ac <HAL_RCC_ClockConfig+0x1b8>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 0307 	and.w	r3, r3, #7
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d90c      	bls.n	800cf30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf16:	4b65      	ldr	r3, [pc, #404]	; (800d0ac <HAL_RCC_ClockConfig+0x1b8>)
 800cf18:	683a      	ldr	r2, [r7, #0]
 800cf1a:	b2d2      	uxtb	r2, r2
 800cf1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf1e:	4b63      	ldr	r3, [pc, #396]	; (800d0ac <HAL_RCC_ClockConfig+0x1b8>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f003 0307 	and.w	r3, r3, #7
 800cf26:	683a      	ldr	r2, [r7, #0]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d001      	beq.n	800cf30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e0b8      	b.n	800d0a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 0302 	and.w	r3, r3, #2
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d020      	beq.n	800cf7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f003 0304 	and.w	r3, r3, #4
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d005      	beq.n	800cf54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cf48:	4b59      	ldr	r3, [pc, #356]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	4a58      	ldr	r2, [pc, #352]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cf52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f003 0308 	and.w	r3, r3, #8
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d005      	beq.n	800cf6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cf60:	4b53      	ldr	r3, [pc, #332]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	4a52      	ldr	r2, [pc, #328]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cf6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf6c:	4b50      	ldr	r3, [pc, #320]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	494d      	ldr	r1, [pc, #308]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d044      	beq.n	800d014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d107      	bne.n	800cfa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf92:	4b47      	ldr	r3, [pc, #284]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d119      	bne.n	800cfd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e07f      	b.n	800d0a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d003      	beq.n	800cfb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d107      	bne.n	800cfc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfb2:	4b3f      	ldr	r3, [pc, #252]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d109      	bne.n	800cfd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e06f      	b.n	800d0a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cfc2:	4b3b      	ldr	r3, [pc, #236]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 0302 	and.w	r3, r3, #2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e067      	b.n	800d0a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cfd2:	4b37      	ldr	r3, [pc, #220]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	f023 0203 	bic.w	r2, r3, #3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	4934      	ldr	r1, [pc, #208]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cfe4:	f7fd f86c 	bl	800a0c0 <HAL_GetTick>
 800cfe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfea:	e00a      	b.n	800d002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cfec:	f7fd f868 	bl	800a0c0 <HAL_GetTick>
 800cff0:	4602      	mov	r2, r0
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d901      	bls.n	800d002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cffe:	2303      	movs	r3, #3
 800d000:	e04f      	b.n	800d0a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d002:	4b2b      	ldr	r3, [pc, #172]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f003 020c 	and.w	r2, r3, #12
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	429a      	cmp	r2, r3
 800d012:	d1eb      	bne.n	800cfec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d014:	4b25      	ldr	r3, [pc, #148]	; (800d0ac <HAL_RCC_ClockConfig+0x1b8>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 0307 	and.w	r3, r3, #7
 800d01c:	683a      	ldr	r2, [r7, #0]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d20c      	bcs.n	800d03c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d022:	4b22      	ldr	r3, [pc, #136]	; (800d0ac <HAL_RCC_ClockConfig+0x1b8>)
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	b2d2      	uxtb	r2, r2
 800d028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d02a:	4b20      	ldr	r3, [pc, #128]	; (800d0ac <HAL_RCC_ClockConfig+0x1b8>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 0307 	and.w	r3, r3, #7
 800d032:	683a      	ldr	r2, [r7, #0]
 800d034:	429a      	cmp	r2, r3
 800d036:	d001      	beq.n	800d03c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	e032      	b.n	800d0a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b00      	cmp	r3, #0
 800d046:	d008      	beq.n	800d05a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d048:	4b19      	ldr	r3, [pc, #100]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	4916      	ldr	r1, [pc, #88]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d056:	4313      	orrs	r3, r2
 800d058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f003 0308 	and.w	r3, r3, #8
 800d062:	2b00      	cmp	r3, #0
 800d064:	d009      	beq.n	800d07a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d066:	4b12      	ldr	r3, [pc, #72]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	490e      	ldr	r1, [pc, #56]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d076:	4313      	orrs	r3, r2
 800d078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d07a:	f000 f821 	bl	800d0c0 <HAL_RCC_GetSysClockFreq>
 800d07e:	4602      	mov	r2, r0
 800d080:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <HAL_RCC_ClockConfig+0x1bc>)
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	091b      	lsrs	r3, r3, #4
 800d086:	f003 030f 	and.w	r3, r3, #15
 800d08a:	490a      	ldr	r1, [pc, #40]	; (800d0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800d08c:	5ccb      	ldrb	r3, [r1, r3]
 800d08e:	fa22 f303 	lsr.w	r3, r2, r3
 800d092:	4a09      	ldr	r2, [pc, #36]	; (800d0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800d094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d096:	4b09      	ldr	r3, [pc, #36]	; (800d0bc <HAL_RCC_ClockConfig+0x1c8>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fc ffcc 	bl	800a038 <HAL_InitTick>

  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	40023c00 	.word	0x40023c00
 800d0b0:	40023800 	.word	0x40023800
 800d0b4:	0801240c 	.word	0x0801240c
 800d0b8:	2000028c 	.word	0x2000028c
 800d0bc:	2000032c 	.word	0x2000032c

0800d0c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0c4:	b094      	sub	sp, #80	; 0x50
 800d0c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d0d8:	4b79      	ldr	r3, [pc, #484]	; (800d2c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	f003 030c 	and.w	r3, r3, #12
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d00d      	beq.n	800d100 <HAL_RCC_GetSysClockFreq+0x40>
 800d0e4:	2b08      	cmp	r3, #8
 800d0e6:	f200 80e1 	bhi.w	800d2ac <HAL_RCC_GetSysClockFreq+0x1ec>
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d002      	beq.n	800d0f4 <HAL_RCC_GetSysClockFreq+0x34>
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d003      	beq.n	800d0fa <HAL_RCC_GetSysClockFreq+0x3a>
 800d0f2:	e0db      	b.n	800d2ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d0f4:	4b73      	ldr	r3, [pc, #460]	; (800d2c4 <HAL_RCC_GetSysClockFreq+0x204>)
 800d0f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800d0f8:	e0db      	b.n	800d2b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d0fa:	4b72      	ldr	r3, [pc, #456]	; (800d2c4 <HAL_RCC_GetSysClockFreq+0x204>)
 800d0fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d0fe:	e0d8      	b.n	800d2b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d100:	4b6f      	ldr	r3, [pc, #444]	; (800d2c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d108:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d10a:	4b6d      	ldr	r3, [pc, #436]	; (800d2c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d063      	beq.n	800d1de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d116:	4b6a      	ldr	r3, [pc, #424]	; (800d2c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	099b      	lsrs	r3, r3, #6
 800d11c:	2200      	movs	r2, #0
 800d11e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d120:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d128:	633b      	str	r3, [r7, #48]	; 0x30
 800d12a:	2300      	movs	r3, #0
 800d12c:	637b      	str	r3, [r7, #52]	; 0x34
 800d12e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d132:	4622      	mov	r2, r4
 800d134:	462b      	mov	r3, r5
 800d136:	f04f 0000 	mov.w	r0, #0
 800d13a:	f04f 0100 	mov.w	r1, #0
 800d13e:	0159      	lsls	r1, r3, #5
 800d140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d144:	0150      	lsls	r0, r2, #5
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4621      	mov	r1, r4
 800d14c:	1a51      	subs	r1, r2, r1
 800d14e:	6139      	str	r1, [r7, #16]
 800d150:	4629      	mov	r1, r5
 800d152:	eb63 0301 	sbc.w	r3, r3, r1
 800d156:	617b      	str	r3, [r7, #20]
 800d158:	f04f 0200 	mov.w	r2, #0
 800d15c:	f04f 0300 	mov.w	r3, #0
 800d160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d164:	4659      	mov	r1, fp
 800d166:	018b      	lsls	r3, r1, #6
 800d168:	4651      	mov	r1, sl
 800d16a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d16e:	4651      	mov	r1, sl
 800d170:	018a      	lsls	r2, r1, #6
 800d172:	4651      	mov	r1, sl
 800d174:	ebb2 0801 	subs.w	r8, r2, r1
 800d178:	4659      	mov	r1, fp
 800d17a:	eb63 0901 	sbc.w	r9, r3, r1
 800d17e:	f04f 0200 	mov.w	r2, #0
 800d182:	f04f 0300 	mov.w	r3, #0
 800d186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d18a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d18e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d192:	4690      	mov	r8, r2
 800d194:	4699      	mov	r9, r3
 800d196:	4623      	mov	r3, r4
 800d198:	eb18 0303 	adds.w	r3, r8, r3
 800d19c:	60bb      	str	r3, [r7, #8]
 800d19e:	462b      	mov	r3, r5
 800d1a0:	eb49 0303 	adc.w	r3, r9, r3
 800d1a4:	60fb      	str	r3, [r7, #12]
 800d1a6:	f04f 0200 	mov.w	r2, #0
 800d1aa:	f04f 0300 	mov.w	r3, #0
 800d1ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	028b      	lsls	r3, r1, #10
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d1bc:	4621      	mov	r1, r4
 800d1be:	028a      	lsls	r2, r1, #10
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d1d0:	f7f3 fd5a 	bl	8000c88 <__aeabi_uldivmod>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	4613      	mov	r3, r2
 800d1da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1dc:	e058      	b.n	800d290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d1de:	4b38      	ldr	r3, [pc, #224]	; (800d2c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	099b      	lsrs	r3, r3, #6
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d1ee:	623b      	str	r3, [r7, #32]
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
 800d1f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d1f8:	4642      	mov	r2, r8
 800d1fa:	464b      	mov	r3, r9
 800d1fc:	f04f 0000 	mov.w	r0, #0
 800d200:	f04f 0100 	mov.w	r1, #0
 800d204:	0159      	lsls	r1, r3, #5
 800d206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d20a:	0150      	lsls	r0, r2, #5
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	4641      	mov	r1, r8
 800d212:	ebb2 0a01 	subs.w	sl, r2, r1
 800d216:	4649      	mov	r1, r9
 800d218:	eb63 0b01 	sbc.w	fp, r3, r1
 800d21c:	f04f 0200 	mov.w	r2, #0
 800d220:	f04f 0300 	mov.w	r3, #0
 800d224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d22c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d230:	ebb2 040a 	subs.w	r4, r2, sl
 800d234:	eb63 050b 	sbc.w	r5, r3, fp
 800d238:	f04f 0200 	mov.w	r2, #0
 800d23c:	f04f 0300 	mov.w	r3, #0
 800d240:	00eb      	lsls	r3, r5, #3
 800d242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d246:	00e2      	lsls	r2, r4, #3
 800d248:	4614      	mov	r4, r2
 800d24a:	461d      	mov	r5, r3
 800d24c:	4643      	mov	r3, r8
 800d24e:	18e3      	adds	r3, r4, r3
 800d250:	603b      	str	r3, [r7, #0]
 800d252:	464b      	mov	r3, r9
 800d254:	eb45 0303 	adc.w	r3, r5, r3
 800d258:	607b      	str	r3, [r7, #4]
 800d25a:	f04f 0200 	mov.w	r2, #0
 800d25e:	f04f 0300 	mov.w	r3, #0
 800d262:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d266:	4629      	mov	r1, r5
 800d268:	028b      	lsls	r3, r1, #10
 800d26a:	4621      	mov	r1, r4
 800d26c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d270:	4621      	mov	r1, r4
 800d272:	028a      	lsls	r2, r1, #10
 800d274:	4610      	mov	r0, r2
 800d276:	4619      	mov	r1, r3
 800d278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d27a:	2200      	movs	r2, #0
 800d27c:	61bb      	str	r3, [r7, #24]
 800d27e:	61fa      	str	r2, [r7, #28]
 800d280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d284:	f7f3 fd00 	bl	8000c88 <__aeabi_uldivmod>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	4613      	mov	r3, r2
 800d28e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d290:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	0c1b      	lsrs	r3, r3, #16
 800d296:	f003 0303 	and.w	r3, r3, #3
 800d29a:	3301      	adds	r3, #1
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800d2a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d2aa:	e002      	b.n	800d2b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d2ac:	4b05      	ldr	r3, [pc, #20]	; (800d2c4 <HAL_RCC_GetSysClockFreq+0x204>)
 800d2ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d2b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d2b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3750      	adds	r7, #80	; 0x50
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2be:	bf00      	nop
 800d2c0:	40023800 	.word	0x40023800
 800d2c4:	00f42400 	.word	0x00f42400

0800d2c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d2cc:	4b03      	ldr	r3, [pc, #12]	; (800d2dc <HAL_RCC_GetHCLKFreq+0x14>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	2000028c 	.word	0x2000028c

0800d2e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d2e4:	f7ff fff0 	bl	800d2c8 <HAL_RCC_GetHCLKFreq>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	4b05      	ldr	r3, [pc, #20]	; (800d300 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	0a9b      	lsrs	r3, r3, #10
 800d2f0:	f003 0307 	and.w	r3, r3, #7
 800d2f4:	4903      	ldr	r1, [pc, #12]	; (800d304 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d2f6:	5ccb      	ldrb	r3, [r1, r3]
 800d2f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	40023800 	.word	0x40023800
 800d304:	0801241c 	.word	0x0801241c

0800d308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d30c:	f7ff ffdc 	bl	800d2c8 <HAL_RCC_GetHCLKFreq>
 800d310:	4602      	mov	r2, r0
 800d312:	4b05      	ldr	r3, [pc, #20]	; (800d328 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	0b5b      	lsrs	r3, r3, #13
 800d318:	f003 0307 	and.w	r3, r3, #7
 800d31c:	4903      	ldr	r1, [pc, #12]	; (800d32c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d31e:	5ccb      	ldrb	r3, [r1, r3]
 800d320:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d324:	4618      	mov	r0, r3
 800d326:	bd80      	pop	{r7, pc}
 800d328:	40023800 	.word	0x40023800
 800d32c:	0801241c 	.word	0x0801241c

0800d330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e041      	b.n	800d3c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d106      	bne.n	800d35c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7f9 fa46 	bl	80067e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2202      	movs	r2, #2
 800d360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	3304      	adds	r3, #4
 800d36c:	4619      	mov	r1, r3
 800d36e:	4610      	mov	r0, r2
 800d370:	f000 fda4 	bl	800debc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d001      	beq.n	800d3e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e04e      	b.n	800d486 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68da      	ldr	r2, [r3, #12]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f042 0201 	orr.w	r2, r2, #1
 800d3fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a23      	ldr	r2, [pc, #140]	; (800d494 <HAL_TIM_Base_Start_IT+0xc4>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d022      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0x80>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d412:	d01d      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0x80>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a1f      	ldr	r2, [pc, #124]	; (800d498 <HAL_TIM_Base_Start_IT+0xc8>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d018      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0x80>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a1e      	ldr	r2, [pc, #120]	; (800d49c <HAL_TIM_Base_Start_IT+0xcc>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d013      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0x80>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a1c      	ldr	r2, [pc, #112]	; (800d4a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d00e      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0x80>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a1b      	ldr	r2, [pc, #108]	; (800d4a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d009      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0x80>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a19      	ldr	r2, [pc, #100]	; (800d4a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d004      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0x80>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a18      	ldr	r2, [pc, #96]	; (800d4ac <HAL_TIM_Base_Start_IT+0xdc>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d111      	bne.n	800d474 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f003 0307 	and.w	r3, r3, #7
 800d45a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b06      	cmp	r3, #6
 800d460:	d010      	beq.n	800d484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f042 0201 	orr.w	r2, r2, #1
 800d470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d472:	e007      	b.n	800d484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f042 0201 	orr.w	r2, r2, #1
 800d482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	40010000 	.word	0x40010000
 800d498:	40000400 	.word	0x40000400
 800d49c:	40000800 	.word	0x40000800
 800d4a0:	40000c00 	.word	0x40000c00
 800d4a4:	40010400 	.word	0x40010400
 800d4a8:	40014000 	.word	0x40014000
 800d4ac:	40001800 	.word	0x40001800

0800d4b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e041      	b.n	800d546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d106      	bne.n	800d4dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7f9 fa5e 	bl	8006998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2202      	movs	r2, #2
 800d4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	4610      	mov	r0, r2
 800d4f0:	f000 fce4 	bl	800debc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2201      	movs	r2, #1
 800d538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3708      	adds	r7, #8
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
	...

0800d550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d109      	bne.n	800d574 <HAL_TIM_PWM_Start+0x24>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d566:	b2db      	uxtb	r3, r3
 800d568:	2b01      	cmp	r3, #1
 800d56a:	bf14      	ite	ne
 800d56c:	2301      	movne	r3, #1
 800d56e:	2300      	moveq	r3, #0
 800d570:	b2db      	uxtb	r3, r3
 800d572:	e022      	b.n	800d5ba <HAL_TIM_PWM_Start+0x6a>
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	2b04      	cmp	r3, #4
 800d578:	d109      	bne.n	800d58e <HAL_TIM_PWM_Start+0x3e>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b01      	cmp	r3, #1
 800d584:	bf14      	ite	ne
 800d586:	2301      	movne	r3, #1
 800d588:	2300      	moveq	r3, #0
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	e015      	b.n	800d5ba <HAL_TIM_PWM_Start+0x6a>
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	2b08      	cmp	r3, #8
 800d592:	d109      	bne.n	800d5a8 <HAL_TIM_PWM_Start+0x58>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	bf14      	ite	ne
 800d5a0:	2301      	movne	r3, #1
 800d5a2:	2300      	moveq	r3, #0
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	e008      	b.n	800d5ba <HAL_TIM_PWM_Start+0x6a>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e07c      	b.n	800d6bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d104      	bne.n	800d5d2 <HAL_TIM_PWM_Start+0x82>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5d0:	e013      	b.n	800d5fa <HAL_TIM_PWM_Start+0xaa>
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2b04      	cmp	r3, #4
 800d5d6:	d104      	bne.n	800d5e2 <HAL_TIM_PWM_Start+0x92>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2202      	movs	r2, #2
 800d5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5e0:	e00b      	b.n	800d5fa <HAL_TIM_PWM_Start+0xaa>
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d104      	bne.n	800d5f2 <HAL_TIM_PWM_Start+0xa2>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2202      	movs	r2, #2
 800d5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5f0:	e003      	b.n	800d5fa <HAL_TIM_PWM_Start+0xaa>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2201      	movs	r2, #1
 800d600:	6839      	ldr	r1, [r7, #0]
 800d602:	4618      	mov	r0, r3
 800d604:	f000 ff44 	bl	800e490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a2d      	ldr	r2, [pc, #180]	; (800d6c4 <HAL_TIM_PWM_Start+0x174>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d004      	beq.n	800d61c <HAL_TIM_PWM_Start+0xcc>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a2c      	ldr	r2, [pc, #176]	; (800d6c8 <HAL_TIM_PWM_Start+0x178>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d101      	bne.n	800d620 <HAL_TIM_PWM_Start+0xd0>
 800d61c:	2301      	movs	r3, #1
 800d61e:	e000      	b.n	800d622 <HAL_TIM_PWM_Start+0xd2>
 800d620:	2300      	movs	r3, #0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d007      	beq.n	800d636 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a22      	ldr	r2, [pc, #136]	; (800d6c4 <HAL_TIM_PWM_Start+0x174>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d022      	beq.n	800d686 <HAL_TIM_PWM_Start+0x136>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d648:	d01d      	beq.n	800d686 <HAL_TIM_PWM_Start+0x136>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a1f      	ldr	r2, [pc, #124]	; (800d6cc <HAL_TIM_PWM_Start+0x17c>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d018      	beq.n	800d686 <HAL_TIM_PWM_Start+0x136>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a1d      	ldr	r2, [pc, #116]	; (800d6d0 <HAL_TIM_PWM_Start+0x180>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d013      	beq.n	800d686 <HAL_TIM_PWM_Start+0x136>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a1c      	ldr	r2, [pc, #112]	; (800d6d4 <HAL_TIM_PWM_Start+0x184>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d00e      	beq.n	800d686 <HAL_TIM_PWM_Start+0x136>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a16      	ldr	r2, [pc, #88]	; (800d6c8 <HAL_TIM_PWM_Start+0x178>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d009      	beq.n	800d686 <HAL_TIM_PWM_Start+0x136>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a18      	ldr	r2, [pc, #96]	; (800d6d8 <HAL_TIM_PWM_Start+0x188>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d004      	beq.n	800d686 <HAL_TIM_PWM_Start+0x136>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a16      	ldr	r2, [pc, #88]	; (800d6dc <HAL_TIM_PWM_Start+0x18c>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d111      	bne.n	800d6aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f003 0307 	and.w	r3, r3, #7
 800d690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2b06      	cmp	r3, #6
 800d696:	d010      	beq.n	800d6ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f042 0201 	orr.w	r2, r2, #1
 800d6a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6a8:	e007      	b.n	800d6ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f042 0201 	orr.w	r2, r2, #1
 800d6b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	40010000 	.word	0x40010000
 800d6c8:	40010400 	.word	0x40010400
 800d6cc:	40000400 	.word	0x40000400
 800d6d0:	40000800 	.word	0x40000800
 800d6d4:	40000c00 	.word	0x40000c00
 800d6d8:	40014000 	.word	0x40014000
 800d6dc:	40001800 	.word	0x40001800

0800d6e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e097      	b.n	800d824 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d106      	bne.n	800d70e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7f9 f8ab 	bl	8006864 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2202      	movs	r2, #2
 800d712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	6812      	ldr	r2, [r2, #0]
 800d720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d724:	f023 0307 	bic.w	r3, r3, #7
 800d728:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	3304      	adds	r3, #4
 800d732:	4619      	mov	r1, r3
 800d734:	4610      	mov	r0, r2
 800d736:	f000 fbc1 	bl	800debc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	699b      	ldr	r3, [r3, #24]
 800d748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	697a      	ldr	r2, [r7, #20]
 800d758:	4313      	orrs	r3, r2
 800d75a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d762:	f023 0303 	bic.w	r3, r3, #3
 800d766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	689a      	ldr	r2, [r3, #8]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	699b      	ldr	r3, [r3, #24]
 800d770:	021b      	lsls	r3, r3, #8
 800d772:	4313      	orrs	r3, r2
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	4313      	orrs	r3, r2
 800d778:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d780:	f023 030c 	bic.w	r3, r3, #12
 800d784:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d78c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	68da      	ldr	r2, [r3, #12]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	021b      	lsls	r3, r3, #8
 800d79c:	4313      	orrs	r3, r2
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	011a      	lsls	r2, r3, #4
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	031b      	lsls	r3, r3, #12
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	693a      	ldr	r2, [r7, #16]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d7be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d7c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	695b      	ldr	r3, [r3, #20]
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	693a      	ldr	r2, [r7, #16]
 800d7e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2201      	movs	r2, #1
 800d81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3718      	adds	r7, #24
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d83c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d844:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d84c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d854:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d110      	bne.n	800d87e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d102      	bne.n	800d868 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d862:	7b7b      	ldrb	r3, [r7, #13]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d001      	beq.n	800d86c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	e069      	b.n	800d940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2202      	movs	r2, #2
 800d870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2202      	movs	r2, #2
 800d878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d87c:	e031      	b.n	800d8e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	2b04      	cmp	r3, #4
 800d882:	d110      	bne.n	800d8a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d884:	7bbb      	ldrb	r3, [r7, #14]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d102      	bne.n	800d890 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d88a:	7b3b      	ldrb	r3, [r7, #12]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d001      	beq.n	800d894 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d890:	2301      	movs	r3, #1
 800d892:	e055      	b.n	800d940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2202      	movs	r2, #2
 800d898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8a4:	e01d      	b.n	800d8e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d108      	bne.n	800d8be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d8ac:	7bbb      	ldrb	r3, [r7, #14]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d105      	bne.n	800d8be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d8b2:	7b7b      	ldrb	r3, [r7, #13]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d102      	bne.n	800d8be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d8b8:	7b3b      	ldrb	r3, [r7, #12]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d001      	beq.n	800d8c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e03e      	b.n	800d940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2202      	movs	r2, #2
 800d8c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2202      	movs	r2, #2
 800d8ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2202      	movs	r2, #2
 800d8d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2202      	movs	r2, #2
 800d8de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d003      	beq.n	800d8f0 <HAL_TIM_Encoder_Start+0xc4>
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	2b04      	cmp	r3, #4
 800d8ec:	d008      	beq.n	800d900 <HAL_TIM_Encoder_Start+0xd4>
 800d8ee:	e00f      	b.n	800d910 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fdc9 	bl	800e490 <TIM_CCxChannelCmd>
      break;
 800d8fe:	e016      	b.n	800d92e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2201      	movs	r2, #1
 800d906:	2104      	movs	r1, #4
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 fdc1 	bl	800e490 <TIM_CCxChannelCmd>
      break;
 800d90e:	e00e      	b.n	800d92e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2201      	movs	r2, #1
 800d916:	2100      	movs	r1, #0
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 fdb9 	bl	800e490 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2201      	movs	r2, #1
 800d924:	2104      	movs	r1, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f000 fdb2 	bl	800e490 <TIM_CCxChannelCmd>
      break;
 800d92c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f042 0201 	orr.w	r2, r2, #1
 800d93c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	f003 0302 	and.w	r3, r3, #2
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d122      	bne.n	800d9a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	f003 0302 	and.w	r3, r3, #2
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d11b      	bne.n	800d9a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f06f 0202 	mvn.w	r2, #2
 800d974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2201      	movs	r2, #1
 800d97a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	f003 0303 	and.w	r3, r3, #3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d003      	beq.n	800d992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 fa77 	bl	800de7e <HAL_TIM_IC_CaptureCallback>
 800d990:	e005      	b.n	800d99e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 fa69 	bl	800de6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fa7a 	bl	800de92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	691b      	ldr	r3, [r3, #16]
 800d9aa:	f003 0304 	and.w	r3, r3, #4
 800d9ae:	2b04      	cmp	r3, #4
 800d9b0:	d122      	bne.n	800d9f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	f003 0304 	and.w	r3, r3, #4
 800d9bc:	2b04      	cmp	r3, #4
 800d9be:	d11b      	bne.n	800d9f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f06f 0204 	mvn.w	r2, #4
 800d9c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2202      	movs	r2, #2
 800d9ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	699b      	ldr	r3, [r3, #24]
 800d9d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d003      	beq.n	800d9e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fa4d 	bl	800de7e <HAL_TIM_IC_CaptureCallback>
 800d9e4:	e005      	b.n	800d9f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa3f 	bl	800de6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fa50 	bl	800de92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	691b      	ldr	r3, [r3, #16]
 800d9fe:	f003 0308 	and.w	r3, r3, #8
 800da02:	2b08      	cmp	r3, #8
 800da04:	d122      	bne.n	800da4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	f003 0308 	and.w	r3, r3, #8
 800da10:	2b08      	cmp	r3, #8
 800da12:	d11b      	bne.n	800da4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f06f 0208 	mvn.w	r2, #8
 800da1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2204      	movs	r2, #4
 800da22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	f003 0303 	and.w	r3, r3, #3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d003      	beq.n	800da3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 fa23 	bl	800de7e <HAL_TIM_IC_CaptureCallback>
 800da38:	e005      	b.n	800da46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fa15 	bl	800de6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 fa26 	bl	800de92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	f003 0310 	and.w	r3, r3, #16
 800da56:	2b10      	cmp	r3, #16
 800da58:	d122      	bne.n	800daa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	f003 0310 	and.w	r3, r3, #16
 800da64:	2b10      	cmp	r3, #16
 800da66:	d11b      	bne.n	800daa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f06f 0210 	mvn.w	r2, #16
 800da70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2208      	movs	r2, #8
 800da76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da82:	2b00      	cmp	r3, #0
 800da84:	d003      	beq.n	800da8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 f9f9 	bl	800de7e <HAL_TIM_IC_CaptureCallback>
 800da8c:	e005      	b.n	800da9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 f9eb 	bl	800de6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 f9fc 	bl	800de92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	f003 0301 	and.w	r3, r3, #1
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d10e      	bne.n	800dacc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	f003 0301 	and.w	r3, r3, #1
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d107      	bne.n	800dacc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f06f 0201 	mvn.w	r2, #1
 800dac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7f4 fbe0 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	691b      	ldr	r3, [r3, #16]
 800dad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad6:	2b80      	cmp	r3, #128	; 0x80
 800dad8:	d10e      	bne.n	800daf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae4:	2b80      	cmp	r3, #128	; 0x80
 800dae6:	d107      	bne.n	800daf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800daf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fdca 	bl	800e68c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db02:	2b40      	cmp	r3, #64	; 0x40
 800db04:	d10e      	bne.n	800db24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db10:	2b40      	cmp	r3, #64	; 0x40
 800db12:	d107      	bne.n	800db24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 f9c1 	bl	800dea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	691b      	ldr	r3, [r3, #16]
 800db2a:	f003 0320 	and.w	r3, r3, #32
 800db2e:	2b20      	cmp	r3, #32
 800db30:	d10e      	bne.n	800db50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	f003 0320 	and.w	r3, r3, #32
 800db3c:	2b20      	cmp	r3, #32
 800db3e:	d107      	bne.n	800db50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f06f 0220 	mvn.w	r2, #32
 800db48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 fd94 	bl	800e678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d101      	bne.n	800db76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db72:	2302      	movs	r3, #2
 800db74:	e0ae      	b.n	800dcd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2201      	movs	r2, #1
 800db7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b0c      	cmp	r3, #12
 800db82:	f200 809f 	bhi.w	800dcc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800db86:	a201      	add	r2, pc, #4	; (adr r2, 800db8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8c:	0800dbc1 	.word	0x0800dbc1
 800db90:	0800dcc5 	.word	0x0800dcc5
 800db94:	0800dcc5 	.word	0x0800dcc5
 800db98:	0800dcc5 	.word	0x0800dcc5
 800db9c:	0800dc01 	.word	0x0800dc01
 800dba0:	0800dcc5 	.word	0x0800dcc5
 800dba4:	0800dcc5 	.word	0x0800dcc5
 800dba8:	0800dcc5 	.word	0x0800dcc5
 800dbac:	0800dc43 	.word	0x0800dc43
 800dbb0:	0800dcc5 	.word	0x0800dcc5
 800dbb4:	0800dcc5 	.word	0x0800dcc5
 800dbb8:	0800dcc5 	.word	0x0800dcc5
 800dbbc:	0800dc83 	.word	0x0800dc83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68b9      	ldr	r1, [r7, #8]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 fa18 	bl	800dffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	699a      	ldr	r2, [r3, #24]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f042 0208 	orr.w	r2, r2, #8
 800dbda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f022 0204 	bic.w	r2, r2, #4
 800dbea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6999      	ldr	r1, [r3, #24]
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	691a      	ldr	r2, [r3, #16]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	430a      	orrs	r2, r1
 800dbfc:	619a      	str	r2, [r3, #24]
      break;
 800dbfe:	e064      	b.n	800dcca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	68b9      	ldr	r1, [r7, #8]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fa68 	bl	800e0dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	699a      	ldr	r2, [r3, #24]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	699a      	ldr	r2, [r3, #24]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6999      	ldr	r1, [r3, #24]
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	021a      	lsls	r2, r3, #8
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	430a      	orrs	r2, r1
 800dc3e:	619a      	str	r2, [r3, #24]
      break;
 800dc40:	e043      	b.n	800dcca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68b9      	ldr	r1, [r7, #8]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 fabd 	bl	800e1c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	69da      	ldr	r2, [r3, #28]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f042 0208 	orr.w	r2, r2, #8
 800dc5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	69da      	ldr	r2, [r3, #28]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f022 0204 	bic.w	r2, r2, #4
 800dc6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	69d9      	ldr	r1, [r3, #28]
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	691a      	ldr	r2, [r3, #16]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	430a      	orrs	r2, r1
 800dc7e:	61da      	str	r2, [r3, #28]
      break;
 800dc80:	e023      	b.n	800dcca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68b9      	ldr	r1, [r7, #8]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 fb11 	bl	800e2b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	69da      	ldr	r2, [r3, #28]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	69da      	ldr	r2, [r3, #28]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dcac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	69d9      	ldr	r1, [r3, #28]
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	021a      	lsls	r2, r3, #8
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	430a      	orrs	r2, r1
 800dcc0:	61da      	str	r2, [r3, #28]
      break;
 800dcc2:	e002      	b.n	800dcca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	75fb      	strb	r3, [r7, #23]
      break;
 800dcc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d101      	bne.n	800dcf8 <HAL_TIM_ConfigClockSource+0x1c>
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	e0b4      	b.n	800de62 <HAL_TIM_ConfigClockSource+0x186>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2202      	movs	r2, #2
 800dd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dd16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd30:	d03e      	beq.n	800ddb0 <HAL_TIM_ConfigClockSource+0xd4>
 800dd32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd36:	f200 8087 	bhi.w	800de48 <HAL_TIM_ConfigClockSource+0x16c>
 800dd3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd3e:	f000 8086 	beq.w	800de4e <HAL_TIM_ConfigClockSource+0x172>
 800dd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd46:	d87f      	bhi.n	800de48 <HAL_TIM_ConfigClockSource+0x16c>
 800dd48:	2b70      	cmp	r3, #112	; 0x70
 800dd4a:	d01a      	beq.n	800dd82 <HAL_TIM_ConfigClockSource+0xa6>
 800dd4c:	2b70      	cmp	r3, #112	; 0x70
 800dd4e:	d87b      	bhi.n	800de48 <HAL_TIM_ConfigClockSource+0x16c>
 800dd50:	2b60      	cmp	r3, #96	; 0x60
 800dd52:	d050      	beq.n	800ddf6 <HAL_TIM_ConfigClockSource+0x11a>
 800dd54:	2b60      	cmp	r3, #96	; 0x60
 800dd56:	d877      	bhi.n	800de48 <HAL_TIM_ConfigClockSource+0x16c>
 800dd58:	2b50      	cmp	r3, #80	; 0x50
 800dd5a:	d03c      	beq.n	800ddd6 <HAL_TIM_ConfigClockSource+0xfa>
 800dd5c:	2b50      	cmp	r3, #80	; 0x50
 800dd5e:	d873      	bhi.n	800de48 <HAL_TIM_ConfigClockSource+0x16c>
 800dd60:	2b40      	cmp	r3, #64	; 0x40
 800dd62:	d058      	beq.n	800de16 <HAL_TIM_ConfigClockSource+0x13a>
 800dd64:	2b40      	cmp	r3, #64	; 0x40
 800dd66:	d86f      	bhi.n	800de48 <HAL_TIM_ConfigClockSource+0x16c>
 800dd68:	2b30      	cmp	r3, #48	; 0x30
 800dd6a:	d064      	beq.n	800de36 <HAL_TIM_ConfigClockSource+0x15a>
 800dd6c:	2b30      	cmp	r3, #48	; 0x30
 800dd6e:	d86b      	bhi.n	800de48 <HAL_TIM_ConfigClockSource+0x16c>
 800dd70:	2b20      	cmp	r3, #32
 800dd72:	d060      	beq.n	800de36 <HAL_TIM_ConfigClockSource+0x15a>
 800dd74:	2b20      	cmp	r3, #32
 800dd76:	d867      	bhi.n	800de48 <HAL_TIM_ConfigClockSource+0x16c>
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d05c      	beq.n	800de36 <HAL_TIM_ConfigClockSource+0x15a>
 800dd7c:	2b10      	cmp	r3, #16
 800dd7e:	d05a      	beq.n	800de36 <HAL_TIM_ConfigClockSource+0x15a>
 800dd80:	e062      	b.n	800de48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6818      	ldr	r0, [r3, #0]
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	6899      	ldr	r1, [r3, #8]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	685a      	ldr	r2, [r3, #4]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	f000 fb5d 	bl	800e450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dda4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	609a      	str	r2, [r3, #8]
      break;
 800ddae:	e04f      	b.n	800de50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6818      	ldr	r0, [r3, #0]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	6899      	ldr	r1, [r3, #8]
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	685a      	ldr	r2, [r3, #4]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	f000 fb46 	bl	800e450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	689a      	ldr	r2, [r3, #8]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ddd2:	609a      	str	r2, [r3, #8]
      break;
 800ddd4:	e03c      	b.n	800de50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6818      	ldr	r0, [r3, #0]
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	6859      	ldr	r1, [r3, #4]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	461a      	mov	r2, r3
 800dde4:	f000 faba 	bl	800e35c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2150      	movs	r1, #80	; 0x50
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 fb13 	bl	800e41a <TIM_ITRx_SetConfig>
      break;
 800ddf4:	e02c      	b.n	800de50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6818      	ldr	r0, [r3, #0]
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	6859      	ldr	r1, [r3, #4]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	461a      	mov	r2, r3
 800de04:	f000 fad9 	bl	800e3ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2160      	movs	r1, #96	; 0x60
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 fb03 	bl	800e41a <TIM_ITRx_SetConfig>
      break;
 800de14:	e01c      	b.n	800de50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6818      	ldr	r0, [r3, #0]
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	6859      	ldr	r1, [r3, #4]
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	461a      	mov	r2, r3
 800de24:	f000 fa9a 	bl	800e35c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2140      	movs	r1, #64	; 0x40
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 faf3 	bl	800e41a <TIM_ITRx_SetConfig>
      break;
 800de34:	e00c      	b.n	800de50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4619      	mov	r1, r3
 800de40:	4610      	mov	r0, r2
 800de42:	f000 faea 	bl	800e41a <TIM_ITRx_SetConfig>
      break;
 800de46:	e003      	b.n	800de50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	73fb      	strb	r3, [r7, #15]
      break;
 800de4c:	e000      	b.n	800de50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800de4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800de60:	7bfb      	ldrb	r3, [r7, #15]
}
 800de62:	4618      	mov	r0, r3
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de6a:	b480      	push	{r7}
 800de6c:	b083      	sub	sp, #12
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de72:	bf00      	nop
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de7e:	b480      	push	{r7}
 800de80:	b083      	sub	sp, #12
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de86:	bf00      	nop
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de92:	b480      	push	{r7}
 800de94:	b083      	sub	sp, #12
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de9a:	bf00      	nop
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dea6:	b480      	push	{r7}
 800dea8:	b083      	sub	sp, #12
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800deae:	bf00      	nop
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
	...

0800debc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a40      	ldr	r2, [pc, #256]	; (800dfd0 <TIM_Base_SetConfig+0x114>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d013      	beq.n	800defc <TIM_Base_SetConfig+0x40>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800deda:	d00f      	beq.n	800defc <TIM_Base_SetConfig+0x40>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a3d      	ldr	r2, [pc, #244]	; (800dfd4 <TIM_Base_SetConfig+0x118>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d00b      	beq.n	800defc <TIM_Base_SetConfig+0x40>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a3c      	ldr	r2, [pc, #240]	; (800dfd8 <TIM_Base_SetConfig+0x11c>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d007      	beq.n	800defc <TIM_Base_SetConfig+0x40>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a3b      	ldr	r2, [pc, #236]	; (800dfdc <TIM_Base_SetConfig+0x120>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d003      	beq.n	800defc <TIM_Base_SetConfig+0x40>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a3a      	ldr	r2, [pc, #232]	; (800dfe0 <TIM_Base_SetConfig+0x124>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d108      	bne.n	800df0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	4313      	orrs	r3, r2
 800df0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4a2f      	ldr	r2, [pc, #188]	; (800dfd0 <TIM_Base_SetConfig+0x114>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d02b      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df1c:	d027      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4a2c      	ldr	r2, [pc, #176]	; (800dfd4 <TIM_Base_SetConfig+0x118>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d023      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a2b      	ldr	r2, [pc, #172]	; (800dfd8 <TIM_Base_SetConfig+0x11c>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d01f      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a2a      	ldr	r2, [pc, #168]	; (800dfdc <TIM_Base_SetConfig+0x120>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d01b      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4a29      	ldr	r2, [pc, #164]	; (800dfe0 <TIM_Base_SetConfig+0x124>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d017      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4a28      	ldr	r2, [pc, #160]	; (800dfe4 <TIM_Base_SetConfig+0x128>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d013      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4a27      	ldr	r2, [pc, #156]	; (800dfe8 <TIM_Base_SetConfig+0x12c>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d00f      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4a26      	ldr	r2, [pc, #152]	; (800dfec <TIM_Base_SetConfig+0x130>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d00b      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4a25      	ldr	r2, [pc, #148]	; (800dff0 <TIM_Base_SetConfig+0x134>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d007      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	4a24      	ldr	r2, [pc, #144]	; (800dff4 <TIM_Base_SetConfig+0x138>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d003      	beq.n	800df6e <TIM_Base_SetConfig+0xb2>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a23      	ldr	r2, [pc, #140]	; (800dff8 <TIM_Base_SetConfig+0x13c>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d108      	bne.n	800df80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	4313      	orrs	r3, r2
 800df7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	695b      	ldr	r3, [r3, #20]
 800df8a:	4313      	orrs	r3, r2
 800df8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	689a      	ldr	r2, [r3, #8]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a0a      	ldr	r2, [pc, #40]	; (800dfd0 <TIM_Base_SetConfig+0x114>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d003      	beq.n	800dfb4 <TIM_Base_SetConfig+0xf8>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	4a0c      	ldr	r2, [pc, #48]	; (800dfe0 <TIM_Base_SetConfig+0x124>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d103      	bne.n	800dfbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	691a      	ldr	r2, [r3, #16]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	615a      	str	r2, [r3, #20]
}
 800dfc2:	bf00      	nop
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	40010000 	.word	0x40010000
 800dfd4:	40000400 	.word	0x40000400
 800dfd8:	40000800 	.word	0x40000800
 800dfdc:	40000c00 	.word	0x40000c00
 800dfe0:	40010400 	.word	0x40010400
 800dfe4:	40014000 	.word	0x40014000
 800dfe8:	40014400 	.word	0x40014400
 800dfec:	40014800 	.word	0x40014800
 800dff0:	40001800 	.word	0x40001800
 800dff4:	40001c00 	.word	0x40001c00
 800dff8:	40002000 	.word	0x40002000

0800dffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b087      	sub	sp, #28
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6a1b      	ldr	r3, [r3, #32]
 800e00a:	f023 0201 	bic.w	r2, r3, #1
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	699b      	ldr	r3, [r3, #24]
 800e022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e02a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f023 0303 	bic.w	r3, r3, #3
 800e032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	4313      	orrs	r3, r2
 800e03c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f023 0302 	bic.w	r3, r3, #2
 800e044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	697a      	ldr	r2, [r7, #20]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a20      	ldr	r2, [pc, #128]	; (800e0d4 <TIM_OC1_SetConfig+0xd8>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d003      	beq.n	800e060 <TIM_OC1_SetConfig+0x64>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a1f      	ldr	r2, [pc, #124]	; (800e0d8 <TIM_OC1_SetConfig+0xdc>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d10c      	bne.n	800e07a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	f023 0308 	bic.w	r3, r3, #8
 800e066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	4313      	orrs	r3, r2
 800e070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f023 0304 	bic.w	r3, r3, #4
 800e078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4a15      	ldr	r2, [pc, #84]	; (800e0d4 <TIM_OC1_SetConfig+0xd8>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d003      	beq.n	800e08a <TIM_OC1_SetConfig+0x8e>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4a14      	ldr	r2, [pc, #80]	; (800e0d8 <TIM_OC1_SetConfig+0xdc>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d111      	bne.n	800e0ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	695b      	ldr	r3, [r3, #20]
 800e09e:	693a      	ldr	r2, [r7, #16]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	693a      	ldr	r2, [r7, #16]
 800e0b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	685a      	ldr	r2, [r3, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	621a      	str	r2, [r3, #32]
}
 800e0c8:	bf00      	nop
 800e0ca:	371c      	adds	r7, #28
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	40010000 	.word	0x40010000
 800e0d8:	40010400 	.word	0x40010400

0800e0dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b087      	sub	sp, #28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6a1b      	ldr	r3, [r3, #32]
 800e0ea:	f023 0210 	bic.w	r2, r3, #16
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a1b      	ldr	r3, [r3, #32]
 800e0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	021b      	lsls	r3, r3, #8
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	f023 0320 	bic.w	r3, r3, #32
 800e126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	011b      	lsls	r3, r3, #4
 800e12e:	697a      	ldr	r2, [r7, #20]
 800e130:	4313      	orrs	r3, r2
 800e132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a22      	ldr	r2, [pc, #136]	; (800e1c0 <TIM_OC2_SetConfig+0xe4>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d003      	beq.n	800e144 <TIM_OC2_SetConfig+0x68>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a21      	ldr	r2, [pc, #132]	; (800e1c4 <TIM_OC2_SetConfig+0xe8>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d10d      	bne.n	800e160 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e14a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	011b      	lsls	r3, r3, #4
 800e152:	697a      	ldr	r2, [r7, #20]
 800e154:	4313      	orrs	r3, r2
 800e156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e15e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4a17      	ldr	r2, [pc, #92]	; (800e1c0 <TIM_OC2_SetConfig+0xe4>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d003      	beq.n	800e170 <TIM_OC2_SetConfig+0x94>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4a16      	ldr	r2, [pc, #88]	; (800e1c4 <TIM_OC2_SetConfig+0xe8>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d113      	bne.n	800e198 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e17e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	693a      	ldr	r2, [r7, #16]
 800e188:	4313      	orrs	r3, r2
 800e18a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	4313      	orrs	r3, r2
 800e196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	693a      	ldr	r2, [r7, #16]
 800e19c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	685a      	ldr	r2, [r3, #4]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	697a      	ldr	r2, [r7, #20]
 800e1b0:	621a      	str	r2, [r3, #32]
}
 800e1b2:	bf00      	nop
 800e1b4:	371c      	adds	r7, #28
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	40010000 	.word	0x40010000
 800e1c4:	40010400 	.word	0x40010400

0800e1c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b087      	sub	sp, #28
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6a1b      	ldr	r3, [r3, #32]
 800e1d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a1b      	ldr	r3, [r3, #32]
 800e1e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f023 0303 	bic.w	r3, r3, #3
 800e1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	4313      	orrs	r3, r2
 800e208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	021b      	lsls	r3, r3, #8
 800e218:	697a      	ldr	r2, [r7, #20]
 800e21a:	4313      	orrs	r3, r2
 800e21c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4a21      	ldr	r2, [pc, #132]	; (800e2a8 <TIM_OC3_SetConfig+0xe0>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d003      	beq.n	800e22e <TIM_OC3_SetConfig+0x66>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a20      	ldr	r2, [pc, #128]	; (800e2ac <TIM_OC3_SetConfig+0xe4>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d10d      	bne.n	800e24a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	021b      	lsls	r3, r3, #8
 800e23c:	697a      	ldr	r2, [r7, #20]
 800e23e:	4313      	orrs	r3, r2
 800e240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a16      	ldr	r2, [pc, #88]	; (800e2a8 <TIM_OC3_SetConfig+0xe0>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d003      	beq.n	800e25a <TIM_OC3_SetConfig+0x92>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4a15      	ldr	r2, [pc, #84]	; (800e2ac <TIM_OC3_SetConfig+0xe4>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d113      	bne.n	800e282 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	695b      	ldr	r3, [r3, #20]
 800e26e:	011b      	lsls	r3, r3, #4
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	4313      	orrs	r3, r2
 800e274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	011b      	lsls	r3, r3, #4
 800e27c:	693a      	ldr	r2, [r7, #16]
 800e27e:	4313      	orrs	r3, r2
 800e280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	693a      	ldr	r2, [r7, #16]
 800e286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	68fa      	ldr	r2, [r7, #12]
 800e28c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	685a      	ldr	r2, [r3, #4]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	621a      	str	r2, [r3, #32]
}
 800e29c:	bf00      	nop
 800e29e:	371c      	adds	r7, #28
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr
 800e2a8:	40010000 	.word	0x40010000
 800e2ac:	40010400 	.word	0x40010400

0800e2b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b087      	sub	sp, #28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a1b      	ldr	r3, [r3, #32]
 800e2ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	69db      	ldr	r3, [r3, #28]
 800e2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	021b      	lsls	r3, r3, #8
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e2fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	031b      	lsls	r3, r3, #12
 800e302:	693a      	ldr	r2, [r7, #16]
 800e304:	4313      	orrs	r3, r2
 800e306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4a12      	ldr	r2, [pc, #72]	; (800e354 <TIM_OC4_SetConfig+0xa4>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d003      	beq.n	800e318 <TIM_OC4_SetConfig+0x68>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a11      	ldr	r2, [pc, #68]	; (800e358 <TIM_OC4_SetConfig+0xa8>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d109      	bne.n	800e32c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e31e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	695b      	ldr	r3, [r3, #20]
 800e324:	019b      	lsls	r3, r3, #6
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	4313      	orrs	r3, r2
 800e32a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	697a      	ldr	r2, [r7, #20]
 800e330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	685a      	ldr	r2, [r3, #4]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	621a      	str	r2, [r3, #32]
}
 800e346:	bf00      	nop
 800e348:	371c      	adds	r7, #28
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	40010000 	.word	0x40010000
 800e358:	40010400 	.word	0x40010400

0800e35c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b087      	sub	sp, #28
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6a1b      	ldr	r3, [r3, #32]
 800e36c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6a1b      	ldr	r3, [r3, #32]
 800e372:	f023 0201 	bic.w	r2, r3, #1
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	699b      	ldr	r3, [r3, #24]
 800e37e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	011b      	lsls	r3, r3, #4
 800e38c:	693a      	ldr	r2, [r7, #16]
 800e38e:	4313      	orrs	r3, r2
 800e390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	f023 030a 	bic.w	r3, r3, #10
 800e398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	693a      	ldr	r2, [r7, #16]
 800e3a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	697a      	ldr	r2, [r7, #20]
 800e3ac:	621a      	str	r2, [r3, #32]
}
 800e3ae:	bf00      	nop
 800e3b0:	371c      	adds	r7, #28
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3ba:	b480      	push	{r7}
 800e3bc:	b087      	sub	sp, #28
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6a1b      	ldr	r3, [r3, #32]
 800e3ca:	f023 0210 	bic.w	r2, r3, #16
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6a1b      	ldr	r3, [r3, #32]
 800e3dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	031b      	lsls	r3, r3, #12
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e3f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	011b      	lsls	r3, r3, #4
 800e3fc:	693a      	ldr	r2, [r7, #16]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	697a      	ldr	r2, [r7, #20]
 800e406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	693a      	ldr	r2, [r7, #16]
 800e40c:	621a      	str	r2, [r3, #32]
}
 800e40e:	bf00      	nop
 800e410:	371c      	adds	r7, #28
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e41a:	b480      	push	{r7}
 800e41c:	b085      	sub	sp, #20
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	4313      	orrs	r3, r2
 800e438:	f043 0307 	orr.w	r3, r3, #7
 800e43c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	609a      	str	r2, [r3, #8]
}
 800e444:	bf00      	nop
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e450:	b480      	push	{r7}
 800e452:	b087      	sub	sp, #28
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e46a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	021a      	lsls	r2, r3, #8
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	431a      	orrs	r2, r3
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	4313      	orrs	r3, r2
 800e478:	697a      	ldr	r2, [r7, #20]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	697a      	ldr	r2, [r7, #20]
 800e482:	609a      	str	r2, [r3, #8]
}
 800e484:	bf00      	nop
 800e486:	371c      	adds	r7, #28
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e490:	b480      	push	{r7}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f003 031f 	and.w	r3, r3, #31
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6a1a      	ldr	r2, [r3, #32]
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	43db      	mvns	r3, r3
 800e4b2:	401a      	ands	r2, r3
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6a1a      	ldr	r2, [r3, #32]
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	f003 031f 	and.w	r3, r3, #31
 800e4c2:	6879      	ldr	r1, [r7, #4]
 800e4c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e4c8:	431a      	orrs	r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	621a      	str	r2, [r3, #32]
}
 800e4ce:	bf00      	nop
 800e4d0:	371c      	adds	r7, #28
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
	...

0800e4dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d101      	bne.n	800e4f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e05a      	b.n	800e5aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2202      	movs	r2, #2
 800e500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e51a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	4313      	orrs	r3, r2
 800e524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4a21      	ldr	r2, [pc, #132]	; (800e5b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d022      	beq.n	800e57e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e540:	d01d      	beq.n	800e57e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a1d      	ldr	r2, [pc, #116]	; (800e5bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d018      	beq.n	800e57e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a1b      	ldr	r2, [pc, #108]	; (800e5c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d013      	beq.n	800e57e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a1a      	ldr	r2, [pc, #104]	; (800e5c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d00e      	beq.n	800e57e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a18      	ldr	r2, [pc, #96]	; (800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d009      	beq.n	800e57e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a17      	ldr	r2, [pc, #92]	; (800e5cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d004      	beq.n	800e57e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a15      	ldr	r2, [pc, #84]	; (800e5d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d10c      	bne.n	800e598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	4313      	orrs	r3, r2
 800e58e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5a8:	2300      	movs	r3, #0
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3714      	adds	r7, #20
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	40010000 	.word	0x40010000
 800e5bc:	40000400 	.word	0x40000400
 800e5c0:	40000800 	.word	0x40000800
 800e5c4:	40000c00 	.word	0x40000c00
 800e5c8:	40010400 	.word	0x40010400
 800e5cc:	40014000 	.word	0x40014000
 800e5d0:	40001800 	.word	0x40001800

0800e5d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d101      	bne.n	800e5f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	e03d      	b.n	800e66c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	4313      	orrs	r3, r2
 800e604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	4313      	orrs	r3, r2
 800e612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	4313      	orrs	r3, r2
 800e620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4313      	orrs	r3, r2
 800e62e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	4313      	orrs	r3, r2
 800e63c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	695b      	ldr	r3, [r3, #20]
 800e648:	4313      	orrs	r3, r2
 800e64a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	69db      	ldr	r3, [r3, #28]
 800e656:	4313      	orrs	r3, r2
 800e658:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e680:	bf00      	nop
 800e682:	370c      	adds	r7, #12
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e694:	bf00      	nop
 800e696:	370c      	adds	r7, #12
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr

0800e6a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d101      	bne.n	800e6b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e03f      	b.n	800e732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d106      	bne.n	800e6cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7fb fba8 	bl	8009e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2224      	movs	r2, #36	; 0x24
 800e6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	68da      	ldr	r2, [r3, #12]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e6e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 f829 	bl	800e73c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	691a      	ldr	r2, [r3, #16]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e6f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	695a      	ldr	r2, [r3, #20]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	68da      	ldr	r2, [r3, #12]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2220      	movs	r2, #32
 800e724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2220      	movs	r2, #32
 800e72c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
	...

0800e73c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e73c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e740:	b0c0      	sub	sp, #256	; 0x100
 800e742:	af00      	add	r7, sp, #0
 800e744:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	691b      	ldr	r3, [r3, #16]
 800e750:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e758:	68d9      	ldr	r1, [r3, #12]
 800e75a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	ea40 0301 	orr.w	r3, r0, r1
 800e764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e76a:	689a      	ldr	r2, [r3, #8]
 800e76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	431a      	orrs	r2, r3
 800e774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e778:	695b      	ldr	r3, [r3, #20]
 800e77a:	431a      	orrs	r2, r3
 800e77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e780:	69db      	ldr	r3, [r3, #28]
 800e782:	4313      	orrs	r3, r2
 800e784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e794:	f021 010c 	bic.w	r1, r1, #12
 800e798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e7a2:	430b      	orrs	r3, r1
 800e7a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	695b      	ldr	r3, [r3, #20]
 800e7ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e7b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7b6:	6999      	ldr	r1, [r3, #24]
 800e7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	ea40 0301 	orr.w	r3, r0, r1
 800e7c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	4b8f      	ldr	r3, [pc, #572]	; (800ea08 <UART_SetConfig+0x2cc>)
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d005      	beq.n	800e7dc <UART_SetConfig+0xa0>
 800e7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	4b8d      	ldr	r3, [pc, #564]	; (800ea0c <UART_SetConfig+0x2d0>)
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d104      	bne.n	800e7e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e7dc:	f7fe fd94 	bl	800d308 <HAL_RCC_GetPCLK2Freq>
 800e7e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e7e4:	e003      	b.n	800e7ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e7e6:	f7fe fd7b 	bl	800d2e0 <HAL_RCC_GetPCLK1Freq>
 800e7ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e7ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7f2:	69db      	ldr	r3, [r3, #28]
 800e7f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7f8:	f040 810c 	bne.w	800ea14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e7fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e800:	2200      	movs	r2, #0
 800e802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e806:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e80a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e80e:	4622      	mov	r2, r4
 800e810:	462b      	mov	r3, r5
 800e812:	1891      	adds	r1, r2, r2
 800e814:	65b9      	str	r1, [r7, #88]	; 0x58
 800e816:	415b      	adcs	r3, r3
 800e818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e81a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e81e:	4621      	mov	r1, r4
 800e820:	eb12 0801 	adds.w	r8, r2, r1
 800e824:	4629      	mov	r1, r5
 800e826:	eb43 0901 	adc.w	r9, r3, r1
 800e82a:	f04f 0200 	mov.w	r2, #0
 800e82e:	f04f 0300 	mov.w	r3, #0
 800e832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e83a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e83e:	4690      	mov	r8, r2
 800e840:	4699      	mov	r9, r3
 800e842:	4623      	mov	r3, r4
 800e844:	eb18 0303 	adds.w	r3, r8, r3
 800e848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e84c:	462b      	mov	r3, r5
 800e84e:	eb49 0303 	adc.w	r3, r9, r3
 800e852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e862:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e86a:	460b      	mov	r3, r1
 800e86c:	18db      	adds	r3, r3, r3
 800e86e:	653b      	str	r3, [r7, #80]	; 0x50
 800e870:	4613      	mov	r3, r2
 800e872:	eb42 0303 	adc.w	r3, r2, r3
 800e876:	657b      	str	r3, [r7, #84]	; 0x54
 800e878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e87c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e880:	f7f2 fa02 	bl	8000c88 <__aeabi_uldivmod>
 800e884:	4602      	mov	r2, r0
 800e886:	460b      	mov	r3, r1
 800e888:	4b61      	ldr	r3, [pc, #388]	; (800ea10 <UART_SetConfig+0x2d4>)
 800e88a:	fba3 2302 	umull	r2, r3, r3, r2
 800e88e:	095b      	lsrs	r3, r3, #5
 800e890:	011c      	lsls	r4, r3, #4
 800e892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e896:	2200      	movs	r2, #0
 800e898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e89c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e8a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e8a4:	4642      	mov	r2, r8
 800e8a6:	464b      	mov	r3, r9
 800e8a8:	1891      	adds	r1, r2, r2
 800e8aa:	64b9      	str	r1, [r7, #72]	; 0x48
 800e8ac:	415b      	adcs	r3, r3
 800e8ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e8b4:	4641      	mov	r1, r8
 800e8b6:	eb12 0a01 	adds.w	sl, r2, r1
 800e8ba:	4649      	mov	r1, r9
 800e8bc:	eb43 0b01 	adc.w	fp, r3, r1
 800e8c0:	f04f 0200 	mov.w	r2, #0
 800e8c4:	f04f 0300 	mov.w	r3, #0
 800e8c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e8cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e8d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e8d4:	4692      	mov	sl, r2
 800e8d6:	469b      	mov	fp, r3
 800e8d8:	4643      	mov	r3, r8
 800e8da:	eb1a 0303 	adds.w	r3, sl, r3
 800e8de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e8e2:	464b      	mov	r3, r9
 800e8e4:	eb4b 0303 	adc.w	r3, fp, r3
 800e8e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e8f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e8fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e900:	460b      	mov	r3, r1
 800e902:	18db      	adds	r3, r3, r3
 800e904:	643b      	str	r3, [r7, #64]	; 0x40
 800e906:	4613      	mov	r3, r2
 800e908:	eb42 0303 	adc.w	r3, r2, r3
 800e90c:	647b      	str	r3, [r7, #68]	; 0x44
 800e90e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e916:	f7f2 f9b7 	bl	8000c88 <__aeabi_uldivmod>
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	4611      	mov	r1, r2
 800e920:	4b3b      	ldr	r3, [pc, #236]	; (800ea10 <UART_SetConfig+0x2d4>)
 800e922:	fba3 2301 	umull	r2, r3, r3, r1
 800e926:	095b      	lsrs	r3, r3, #5
 800e928:	2264      	movs	r2, #100	; 0x64
 800e92a:	fb02 f303 	mul.w	r3, r2, r3
 800e92e:	1acb      	subs	r3, r1, r3
 800e930:	00db      	lsls	r3, r3, #3
 800e932:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e936:	4b36      	ldr	r3, [pc, #216]	; (800ea10 <UART_SetConfig+0x2d4>)
 800e938:	fba3 2302 	umull	r2, r3, r3, r2
 800e93c:	095b      	lsrs	r3, r3, #5
 800e93e:	005b      	lsls	r3, r3, #1
 800e940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e944:	441c      	add	r4, r3
 800e946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e94a:	2200      	movs	r2, #0
 800e94c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e950:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e958:	4642      	mov	r2, r8
 800e95a:	464b      	mov	r3, r9
 800e95c:	1891      	adds	r1, r2, r2
 800e95e:	63b9      	str	r1, [r7, #56]	; 0x38
 800e960:	415b      	adcs	r3, r3
 800e962:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e968:	4641      	mov	r1, r8
 800e96a:	1851      	adds	r1, r2, r1
 800e96c:	6339      	str	r1, [r7, #48]	; 0x30
 800e96e:	4649      	mov	r1, r9
 800e970:	414b      	adcs	r3, r1
 800e972:	637b      	str	r3, [r7, #52]	; 0x34
 800e974:	f04f 0200 	mov.w	r2, #0
 800e978:	f04f 0300 	mov.w	r3, #0
 800e97c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e980:	4659      	mov	r1, fp
 800e982:	00cb      	lsls	r3, r1, #3
 800e984:	4651      	mov	r1, sl
 800e986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e98a:	4651      	mov	r1, sl
 800e98c:	00ca      	lsls	r2, r1, #3
 800e98e:	4610      	mov	r0, r2
 800e990:	4619      	mov	r1, r3
 800e992:	4603      	mov	r3, r0
 800e994:	4642      	mov	r2, r8
 800e996:	189b      	adds	r3, r3, r2
 800e998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e99c:	464b      	mov	r3, r9
 800e99e:	460a      	mov	r2, r1
 800e9a0:	eb42 0303 	adc.w	r3, r2, r3
 800e9a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e9b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e9b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e9bc:	460b      	mov	r3, r1
 800e9be:	18db      	adds	r3, r3, r3
 800e9c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	eb42 0303 	adc.w	r3, r2, r3
 800e9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e9ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e9d2:	f7f2 f959 	bl	8000c88 <__aeabi_uldivmod>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	460b      	mov	r3, r1
 800e9da:	4b0d      	ldr	r3, [pc, #52]	; (800ea10 <UART_SetConfig+0x2d4>)
 800e9dc:	fba3 1302 	umull	r1, r3, r3, r2
 800e9e0:	095b      	lsrs	r3, r3, #5
 800e9e2:	2164      	movs	r1, #100	; 0x64
 800e9e4:	fb01 f303 	mul.w	r3, r1, r3
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	00db      	lsls	r3, r3, #3
 800e9ec:	3332      	adds	r3, #50	; 0x32
 800e9ee:	4a08      	ldr	r2, [pc, #32]	; (800ea10 <UART_SetConfig+0x2d4>)
 800e9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9f4:	095b      	lsrs	r3, r3, #5
 800e9f6:	f003 0207 	and.w	r2, r3, #7
 800e9fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4422      	add	r2, r4
 800ea02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ea04:	e106      	b.n	800ec14 <UART_SetConfig+0x4d8>
 800ea06:	bf00      	nop
 800ea08:	40011000 	.word	0x40011000
 800ea0c:	40011400 	.word	0x40011400
 800ea10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ea14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ea1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ea22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ea26:	4642      	mov	r2, r8
 800ea28:	464b      	mov	r3, r9
 800ea2a:	1891      	adds	r1, r2, r2
 800ea2c:	6239      	str	r1, [r7, #32]
 800ea2e:	415b      	adcs	r3, r3
 800ea30:	627b      	str	r3, [r7, #36]	; 0x24
 800ea32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea36:	4641      	mov	r1, r8
 800ea38:	1854      	adds	r4, r2, r1
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	eb43 0501 	adc.w	r5, r3, r1
 800ea40:	f04f 0200 	mov.w	r2, #0
 800ea44:	f04f 0300 	mov.w	r3, #0
 800ea48:	00eb      	lsls	r3, r5, #3
 800ea4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ea4e:	00e2      	lsls	r2, r4, #3
 800ea50:	4614      	mov	r4, r2
 800ea52:	461d      	mov	r5, r3
 800ea54:	4643      	mov	r3, r8
 800ea56:	18e3      	adds	r3, r4, r3
 800ea58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ea5c:	464b      	mov	r3, r9
 800ea5e:	eb45 0303 	adc.w	r3, r5, r3
 800ea62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ea66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ea72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ea76:	f04f 0200 	mov.w	r2, #0
 800ea7a:	f04f 0300 	mov.w	r3, #0
 800ea7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ea82:	4629      	mov	r1, r5
 800ea84:	008b      	lsls	r3, r1, #2
 800ea86:	4621      	mov	r1, r4
 800ea88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ea8c:	4621      	mov	r1, r4
 800ea8e:	008a      	lsls	r2, r1, #2
 800ea90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ea94:	f7f2 f8f8 	bl	8000c88 <__aeabi_uldivmod>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4b60      	ldr	r3, [pc, #384]	; (800ec20 <UART_SetConfig+0x4e4>)
 800ea9e:	fba3 2302 	umull	r2, r3, r3, r2
 800eaa2:	095b      	lsrs	r3, r3, #5
 800eaa4:	011c      	lsls	r4, r3, #4
 800eaa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800eab0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800eab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800eab8:	4642      	mov	r2, r8
 800eaba:	464b      	mov	r3, r9
 800eabc:	1891      	adds	r1, r2, r2
 800eabe:	61b9      	str	r1, [r7, #24]
 800eac0:	415b      	adcs	r3, r3
 800eac2:	61fb      	str	r3, [r7, #28]
 800eac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eac8:	4641      	mov	r1, r8
 800eaca:	1851      	adds	r1, r2, r1
 800eacc:	6139      	str	r1, [r7, #16]
 800eace:	4649      	mov	r1, r9
 800ead0:	414b      	adcs	r3, r1
 800ead2:	617b      	str	r3, [r7, #20]
 800ead4:	f04f 0200 	mov.w	r2, #0
 800ead8:	f04f 0300 	mov.w	r3, #0
 800eadc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800eae0:	4659      	mov	r1, fp
 800eae2:	00cb      	lsls	r3, r1, #3
 800eae4:	4651      	mov	r1, sl
 800eae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800eaea:	4651      	mov	r1, sl
 800eaec:	00ca      	lsls	r2, r1, #3
 800eaee:	4610      	mov	r0, r2
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	4642      	mov	r2, r8
 800eaf6:	189b      	adds	r3, r3, r2
 800eaf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eafc:	464b      	mov	r3, r9
 800eafe:	460a      	mov	r2, r1
 800eb00:	eb42 0303 	adc.w	r3, r2, r3
 800eb04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eb08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	67bb      	str	r3, [r7, #120]	; 0x78
 800eb12:	67fa      	str	r2, [r7, #124]	; 0x7c
 800eb14:	f04f 0200 	mov.w	r2, #0
 800eb18:	f04f 0300 	mov.w	r3, #0
 800eb1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800eb20:	4649      	mov	r1, r9
 800eb22:	008b      	lsls	r3, r1, #2
 800eb24:	4641      	mov	r1, r8
 800eb26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800eb2a:	4641      	mov	r1, r8
 800eb2c:	008a      	lsls	r2, r1, #2
 800eb2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800eb32:	f7f2 f8a9 	bl	8000c88 <__aeabi_uldivmod>
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	4b38      	ldr	r3, [pc, #224]	; (800ec20 <UART_SetConfig+0x4e4>)
 800eb3e:	fba3 2301 	umull	r2, r3, r3, r1
 800eb42:	095b      	lsrs	r3, r3, #5
 800eb44:	2264      	movs	r2, #100	; 0x64
 800eb46:	fb02 f303 	mul.w	r3, r2, r3
 800eb4a:	1acb      	subs	r3, r1, r3
 800eb4c:	011b      	lsls	r3, r3, #4
 800eb4e:	3332      	adds	r3, #50	; 0x32
 800eb50:	4a33      	ldr	r2, [pc, #204]	; (800ec20 <UART_SetConfig+0x4e4>)
 800eb52:	fba2 2303 	umull	r2, r3, r2, r3
 800eb56:	095b      	lsrs	r3, r3, #5
 800eb58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb5c:	441c      	add	r4, r3
 800eb5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eb62:	2200      	movs	r2, #0
 800eb64:	673b      	str	r3, [r7, #112]	; 0x70
 800eb66:	677a      	str	r2, [r7, #116]	; 0x74
 800eb68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800eb6c:	4642      	mov	r2, r8
 800eb6e:	464b      	mov	r3, r9
 800eb70:	1891      	adds	r1, r2, r2
 800eb72:	60b9      	str	r1, [r7, #8]
 800eb74:	415b      	adcs	r3, r3
 800eb76:	60fb      	str	r3, [r7, #12]
 800eb78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eb7c:	4641      	mov	r1, r8
 800eb7e:	1851      	adds	r1, r2, r1
 800eb80:	6039      	str	r1, [r7, #0]
 800eb82:	4649      	mov	r1, r9
 800eb84:	414b      	adcs	r3, r1
 800eb86:	607b      	str	r3, [r7, #4]
 800eb88:	f04f 0200 	mov.w	r2, #0
 800eb8c:	f04f 0300 	mov.w	r3, #0
 800eb90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800eb94:	4659      	mov	r1, fp
 800eb96:	00cb      	lsls	r3, r1, #3
 800eb98:	4651      	mov	r1, sl
 800eb9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800eb9e:	4651      	mov	r1, sl
 800eba0:	00ca      	lsls	r2, r1, #3
 800eba2:	4610      	mov	r0, r2
 800eba4:	4619      	mov	r1, r3
 800eba6:	4603      	mov	r3, r0
 800eba8:	4642      	mov	r2, r8
 800ebaa:	189b      	adds	r3, r3, r2
 800ebac:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebae:	464b      	mov	r3, r9
 800ebb0:	460a      	mov	r2, r1
 800ebb2:	eb42 0303 	adc.w	r3, r2, r3
 800ebb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ebb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	663b      	str	r3, [r7, #96]	; 0x60
 800ebc2:	667a      	str	r2, [r7, #100]	; 0x64
 800ebc4:	f04f 0200 	mov.w	r2, #0
 800ebc8:	f04f 0300 	mov.w	r3, #0
 800ebcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ebd0:	4649      	mov	r1, r9
 800ebd2:	008b      	lsls	r3, r1, #2
 800ebd4:	4641      	mov	r1, r8
 800ebd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ebda:	4641      	mov	r1, r8
 800ebdc:	008a      	lsls	r2, r1, #2
 800ebde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ebe2:	f7f2 f851 	bl	8000c88 <__aeabi_uldivmod>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	460b      	mov	r3, r1
 800ebea:	4b0d      	ldr	r3, [pc, #52]	; (800ec20 <UART_SetConfig+0x4e4>)
 800ebec:	fba3 1302 	umull	r1, r3, r3, r2
 800ebf0:	095b      	lsrs	r3, r3, #5
 800ebf2:	2164      	movs	r1, #100	; 0x64
 800ebf4:	fb01 f303 	mul.w	r3, r1, r3
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	011b      	lsls	r3, r3, #4
 800ebfc:	3332      	adds	r3, #50	; 0x32
 800ebfe:	4a08      	ldr	r2, [pc, #32]	; (800ec20 <UART_SetConfig+0x4e4>)
 800ec00:	fba2 2303 	umull	r2, r3, r2, r3
 800ec04:	095b      	lsrs	r3, r3, #5
 800ec06:	f003 020f 	and.w	r2, r3, #15
 800ec0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4422      	add	r2, r4
 800ec12:	609a      	str	r2, [r3, #8]
}
 800ec14:	bf00      	nop
 800ec16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec20:	51eb851f 	.word	0x51eb851f

0800ec24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ec24:	b084      	sub	sp, #16
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b084      	sub	sp, #16
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	f107 001c 	add.w	r0, r7, #28
 800ec32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d122      	bne.n	800ec82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ec50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ec64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d105      	bne.n	800ec76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 faa2 	bl	800f1c0 <USB_CoreReset>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	73fb      	strb	r3, [r7, #15]
 800ec80:	e01a      	b.n	800ecb8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 fa96 	bl	800f1c0 <USB_CoreReset>
 800ec94:	4603      	mov	r3, r0
 800ec96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ec98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d106      	bne.n	800ecac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	639a      	str	r2, [r3, #56]	; 0x38
 800ecaa:	e005      	b.n	800ecb8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ecb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d10b      	bne.n	800ecd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	f043 0206 	orr.w	r2, r3, #6
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	f043 0220 	orr.w	r2, r3, #32
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ecd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ece2:	b004      	add	sp, #16
 800ece4:	4770      	bx	lr

0800ece6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ece6:	b480      	push	{r7}
 800ece8:	b083      	sub	sp, #12
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	f023 0201 	bic.w	r2, r3, #1
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	460b      	mov	r3, r1
 800ed12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ed14:	2300      	movs	r3, #0
 800ed16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ed24:	78fb      	ldrb	r3, [r7, #3]
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d115      	bne.n	800ed56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ed36:	2001      	movs	r0, #1
 800ed38:	f7fb f9ce 	bl	800a0d8 <HAL_Delay>
      ms++;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fa2e 	bl	800f1a4 <USB_GetMode>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d01e      	beq.n	800ed8c <USB_SetCurrentMode+0x84>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2b31      	cmp	r3, #49	; 0x31
 800ed52:	d9f0      	bls.n	800ed36 <USB_SetCurrentMode+0x2e>
 800ed54:	e01a      	b.n	800ed8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ed56:	78fb      	ldrb	r3, [r7, #3]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d115      	bne.n	800ed88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ed68:	2001      	movs	r0, #1
 800ed6a:	f7fb f9b5 	bl	800a0d8 <HAL_Delay>
      ms++;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3301      	adds	r3, #1
 800ed72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 fa15 	bl	800f1a4 <USB_GetMode>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d005      	beq.n	800ed8c <USB_SetCurrentMode+0x84>
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2b31      	cmp	r3, #49	; 0x31
 800ed84:	d9f0      	bls.n	800ed68 <USB_SetCurrentMode+0x60>
 800ed86:	e001      	b.n	800ed8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e005      	b.n	800ed98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b32      	cmp	r3, #50	; 0x32
 800ed90:	d101      	bne.n	800ed96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	e000      	b.n	800ed98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eda0:	b084      	sub	sp, #16
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b086      	sub	sp, #24
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
 800edaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800edae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800edb2:	2300      	movs	r3, #0
 800edb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800edba:	2300      	movs	r3, #0
 800edbc:	613b      	str	r3, [r7, #16]
 800edbe:	e009      	b.n	800edd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	3340      	adds	r3, #64	; 0x40
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	4413      	add	r3, r2
 800edca:	2200      	movs	r2, #0
 800edcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	3301      	adds	r3, #1
 800edd2:	613b      	str	r3, [r7, #16]
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	2b0e      	cmp	r3, #14
 800edd8:	d9f2      	bls.n	800edc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800edda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d11c      	bne.n	800ee1a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edee:	f043 0302 	orr.w	r3, r3, #2
 800edf2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee04:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	639a      	str	r2, [r3, #56]	; 0x38
 800ee18:	e00b      	b.n	800ee32 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee38:	461a      	mov	r2, r3
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee44:	4619      	mov	r1, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	680b      	ldr	r3, [r1, #0]
 800ee50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d10c      	bne.n	800ee72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ee58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d104      	bne.n	800ee68 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ee5e:	2100      	movs	r1, #0
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 f965 	bl	800f130 <USB_SetDevSpeed>
 800ee66:	e008      	b.n	800ee7a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ee68:	2101      	movs	r1, #1
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f960 	bl	800f130 <USB_SetDevSpeed>
 800ee70:	e003      	b.n	800ee7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ee72:	2103      	movs	r1, #3
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 f95b 	bl	800f130 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ee7a:	2110      	movs	r1, #16
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 f8f3 	bl	800f068 <USB_FlushTxFifo>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 f91f 	bl	800f0d0 <USB_FlushRxFifo>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d001      	beq.n	800ee9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eea2:	461a      	mov	r2, r3
 800eea4:	2300      	movs	r3, #0
 800eea6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeae:	461a      	mov	r2, r3
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeba:	461a      	mov	r2, r3
 800eebc:	2300      	movs	r3, #0
 800eebe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eec0:	2300      	movs	r3, #0
 800eec2:	613b      	str	r3, [r7, #16]
 800eec4:	e043      	b.n	800ef4e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	015a      	lsls	r2, r3, #5
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	4413      	add	r3, r2
 800eece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eedc:	d118      	bne.n	800ef10 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d10a      	bne.n	800eefa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	015a      	lsls	r2, r3, #5
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eef0:	461a      	mov	r2, r3
 800eef2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	e013      	b.n	800ef22 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	015a      	lsls	r2, r3, #5
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	4413      	add	r3, r2
 800ef02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef06:	461a      	mov	r2, r3
 800ef08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef0c:	6013      	str	r3, [r2, #0]
 800ef0e:	e008      	b.n	800ef22 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	015a      	lsls	r2, r3, #5
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	4413      	add	r3, r2
 800ef18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	2300      	movs	r3, #0
 800ef20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	015a      	lsls	r2, r3, #5
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	4413      	add	r3, r2
 800ef2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef2e:	461a      	mov	r2, r3
 800ef30:	2300      	movs	r3, #0
 800ef32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	015a      	lsls	r2, r3, #5
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef40:	461a      	mov	r2, r3
 800ef42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ef46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	613b      	str	r3, [r7, #16]
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	693a      	ldr	r2, [r7, #16]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d3b7      	bcc.n	800eec6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef56:	2300      	movs	r3, #0
 800ef58:	613b      	str	r3, [r7, #16]
 800ef5a:	e043      	b.n	800efe4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef72:	d118      	bne.n	800efa6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10a      	bne.n	800ef90 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	015a      	lsls	r2, r3, #5
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	4413      	add	r3, r2
 800ef82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef86:	461a      	mov	r2, r3
 800ef88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef8c:	6013      	str	r3, [r2, #0]
 800ef8e:	e013      	b.n	800efb8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800efa2:	6013      	str	r3, [r2, #0]
 800efa4:	e008      	b.n	800efb8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	015a      	lsls	r2, r3, #5
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	4413      	add	r3, r2
 800efae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efb2:	461a      	mov	r2, r3
 800efb4:	2300      	movs	r3, #0
 800efb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	015a      	lsls	r2, r3, #5
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	4413      	add	r3, r2
 800efc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc4:	461a      	mov	r2, r3
 800efc6:	2300      	movs	r3, #0
 800efc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	015a      	lsls	r2, r3, #5
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	4413      	add	r3, r2
 800efd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efd6:	461a      	mov	r2, r3
 800efd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800efdc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	3301      	adds	r3, #1
 800efe2:	613b      	str	r3, [r7, #16]
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	693a      	ldr	r2, [r7, #16]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d3b7      	bcc.n	800ef5c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800effa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800effe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f00c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f010:	2b00      	cmp	r3, #0
 800f012:	d105      	bne.n	800f020 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	f043 0210 	orr.w	r2, r3, #16
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	699a      	ldr	r2, [r3, #24]
 800f024:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <USB_DevInit+0x2c4>)
 800f026:	4313      	orrs	r3, r2
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d005      	beq.n	800f03e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	699b      	ldr	r3, [r3, #24]
 800f036:	f043 0208 	orr.w	r2, r3, #8
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f040:	2b01      	cmp	r3, #1
 800f042:	d107      	bne.n	800f054 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	699b      	ldr	r3, [r3, #24]
 800f048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f04c:	f043 0304 	orr.w	r3, r3, #4
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f054:	7dfb      	ldrb	r3, [r7, #23]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f060:	b004      	add	sp, #16
 800f062:	4770      	bx	lr
 800f064:	803c3800 	.word	0x803c3800

0800f068 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f072:	2300      	movs	r3, #0
 800f074:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	3301      	adds	r3, #1
 800f07a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	4a13      	ldr	r2, [pc, #76]	; (800f0cc <USB_FlushTxFifo+0x64>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d901      	bls.n	800f088 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f084:	2303      	movs	r3, #3
 800f086:	e01b      	b.n	800f0c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	daf2      	bge.n	800f076 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f090:	2300      	movs	r3, #0
 800f092:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	019b      	lsls	r3, r3, #6
 800f098:	f043 0220 	orr.w	r2, r3, #32
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	4a08      	ldr	r2, [pc, #32]	; (800f0cc <USB_FlushTxFifo+0x64>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d901      	bls.n	800f0b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f0ae:	2303      	movs	r3, #3
 800f0b0:	e006      	b.n	800f0c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	f003 0320 	and.w	r3, r3, #32
 800f0ba:	2b20      	cmp	r3, #32
 800f0bc:	d0f0      	beq.n	800f0a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	00030d40 	.word	0x00030d40

0800f0d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	4a11      	ldr	r2, [pc, #68]	; (800f12c <USB_FlushRxFifo+0x5c>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d901      	bls.n	800f0ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	e018      	b.n	800f120 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	daf2      	bge.n	800f0dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2210      	movs	r2, #16
 800f0fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	3301      	adds	r3, #1
 800f104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	4a08      	ldr	r2, [pc, #32]	; (800f12c <USB_FlushRxFifo+0x5c>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d901      	bls.n	800f112 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f10e:	2303      	movs	r3, #3
 800f110:	e006      	b.n	800f120 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	f003 0310 	and.w	r3, r3, #16
 800f11a:	2b10      	cmp	r3, #16
 800f11c:	d0f0      	beq.n	800f100 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3714      	adds	r7, #20
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	00030d40 	.word	0x00030d40

0800f130 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	460b      	mov	r3, r1
 800f13a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	78fb      	ldrb	r3, [r7, #3]
 800f14a:	68f9      	ldr	r1, [r7, #12]
 800f14c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f150:	4313      	orrs	r3, r2
 800f152:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3714      	adds	r7, #20
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f162:	b480      	push	{r7}
 800f164:	b085      	sub	sp, #20
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f17c:	f023 0303 	bic.w	r3, r3, #3
 800f180:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f190:	f043 0302 	orr.w	r3, r3, #2
 800f194:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f196:	2300      	movs	r3, #0
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3714      	adds	r7, #20
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	695b      	ldr	r3, [r3, #20]
 800f1b0:	f003 0301 	and.w	r3, r3, #1
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	4a13      	ldr	r2, [pc, #76]	; (800f224 <USB_CoreReset+0x64>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d901      	bls.n	800f1de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f1da:	2303      	movs	r3, #3
 800f1dc:	e01b      	b.n	800f216 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	daf2      	bge.n	800f1cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	f043 0201 	orr.w	r2, r3, #1
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	4a09      	ldr	r2, [pc, #36]	; (800f224 <USB_CoreReset+0x64>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d901      	bls.n	800f208 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f204:	2303      	movs	r3, #3
 800f206:	e006      	b.n	800f216 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	691b      	ldr	r3, [r3, #16]
 800f20c:	f003 0301 	and.w	r3, r3, #1
 800f210:	2b01      	cmp	r3, #1
 800f212:	d0f0      	beq.n	800f1f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800f214:	2300      	movs	r3, #0
}
 800f216:	4618      	mov	r0, r3
 800f218:	3714      	adds	r7, #20
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	00030d40 	.word	0x00030d40

0800f228 <malloc>:
 800f228:	4b02      	ldr	r3, [pc, #8]	; (800f234 <malloc+0xc>)
 800f22a:	4601      	mov	r1, r0
 800f22c:	6818      	ldr	r0, [r3, #0]
 800f22e:	f000 b82b 	b.w	800f288 <_malloc_r>
 800f232:	bf00      	nop
 800f234:	2000038c 	.word	0x2000038c

0800f238 <free>:
 800f238:	4b02      	ldr	r3, [pc, #8]	; (800f244 <free+0xc>)
 800f23a:	4601      	mov	r1, r0
 800f23c:	6818      	ldr	r0, [r3, #0]
 800f23e:	f001 bd41 	b.w	8010cc4 <_free_r>
 800f242:	bf00      	nop
 800f244:	2000038c 	.word	0x2000038c

0800f248 <sbrk_aligned>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	4e0e      	ldr	r6, [pc, #56]	; (800f284 <sbrk_aligned+0x3c>)
 800f24c:	460c      	mov	r4, r1
 800f24e:	6831      	ldr	r1, [r6, #0]
 800f250:	4605      	mov	r5, r0
 800f252:	b911      	cbnz	r1, 800f25a <sbrk_aligned+0x12>
 800f254:	f000 fe5e 	bl	800ff14 <_sbrk_r>
 800f258:	6030      	str	r0, [r6, #0]
 800f25a:	4621      	mov	r1, r4
 800f25c:	4628      	mov	r0, r5
 800f25e:	f000 fe59 	bl	800ff14 <_sbrk_r>
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	d00a      	beq.n	800f27c <sbrk_aligned+0x34>
 800f266:	1cc4      	adds	r4, r0, #3
 800f268:	f024 0403 	bic.w	r4, r4, #3
 800f26c:	42a0      	cmp	r0, r4
 800f26e:	d007      	beq.n	800f280 <sbrk_aligned+0x38>
 800f270:	1a21      	subs	r1, r4, r0
 800f272:	4628      	mov	r0, r5
 800f274:	f000 fe4e 	bl	800ff14 <_sbrk_r>
 800f278:	3001      	adds	r0, #1
 800f27a:	d101      	bne.n	800f280 <sbrk_aligned+0x38>
 800f27c:	f04f 34ff 	mov.w	r4, #4294967295
 800f280:	4620      	mov	r0, r4
 800f282:	bd70      	pop	{r4, r5, r6, pc}
 800f284:	20001720 	.word	0x20001720

0800f288 <_malloc_r>:
 800f288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f28c:	1ccd      	adds	r5, r1, #3
 800f28e:	f025 0503 	bic.w	r5, r5, #3
 800f292:	3508      	adds	r5, #8
 800f294:	2d0c      	cmp	r5, #12
 800f296:	bf38      	it	cc
 800f298:	250c      	movcc	r5, #12
 800f29a:	2d00      	cmp	r5, #0
 800f29c:	4607      	mov	r7, r0
 800f29e:	db01      	blt.n	800f2a4 <_malloc_r+0x1c>
 800f2a0:	42a9      	cmp	r1, r5
 800f2a2:	d905      	bls.n	800f2b0 <_malloc_r+0x28>
 800f2a4:	230c      	movs	r3, #12
 800f2a6:	603b      	str	r3, [r7, #0]
 800f2a8:	2600      	movs	r6, #0
 800f2aa:	4630      	mov	r0, r6
 800f2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f384 <_malloc_r+0xfc>
 800f2b4:	f000 f868 	bl	800f388 <__malloc_lock>
 800f2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800f2bc:	461c      	mov	r4, r3
 800f2be:	bb5c      	cbnz	r4, 800f318 <_malloc_r+0x90>
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	4638      	mov	r0, r7
 800f2c4:	f7ff ffc0 	bl	800f248 <sbrk_aligned>
 800f2c8:	1c43      	adds	r3, r0, #1
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	d155      	bne.n	800f37a <_malloc_r+0xf2>
 800f2ce:	f8d8 4000 	ldr.w	r4, [r8]
 800f2d2:	4626      	mov	r6, r4
 800f2d4:	2e00      	cmp	r6, #0
 800f2d6:	d145      	bne.n	800f364 <_malloc_r+0xdc>
 800f2d8:	2c00      	cmp	r4, #0
 800f2da:	d048      	beq.n	800f36e <_malloc_r+0xe6>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4638      	mov	r0, r7
 800f2e2:	eb04 0903 	add.w	r9, r4, r3
 800f2e6:	f000 fe15 	bl	800ff14 <_sbrk_r>
 800f2ea:	4581      	cmp	r9, r0
 800f2ec:	d13f      	bne.n	800f36e <_malloc_r+0xe6>
 800f2ee:	6821      	ldr	r1, [r4, #0]
 800f2f0:	1a6d      	subs	r5, r5, r1
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	4638      	mov	r0, r7
 800f2f6:	f7ff ffa7 	bl	800f248 <sbrk_aligned>
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	d037      	beq.n	800f36e <_malloc_r+0xe6>
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	442b      	add	r3, r5
 800f302:	6023      	str	r3, [r4, #0]
 800f304:	f8d8 3000 	ldr.w	r3, [r8]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d038      	beq.n	800f37e <_malloc_r+0xf6>
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	42a2      	cmp	r2, r4
 800f310:	d12b      	bne.n	800f36a <_malloc_r+0xe2>
 800f312:	2200      	movs	r2, #0
 800f314:	605a      	str	r2, [r3, #4]
 800f316:	e00f      	b.n	800f338 <_malloc_r+0xb0>
 800f318:	6822      	ldr	r2, [r4, #0]
 800f31a:	1b52      	subs	r2, r2, r5
 800f31c:	d41f      	bmi.n	800f35e <_malloc_r+0xd6>
 800f31e:	2a0b      	cmp	r2, #11
 800f320:	d917      	bls.n	800f352 <_malloc_r+0xca>
 800f322:	1961      	adds	r1, r4, r5
 800f324:	42a3      	cmp	r3, r4
 800f326:	6025      	str	r5, [r4, #0]
 800f328:	bf18      	it	ne
 800f32a:	6059      	strne	r1, [r3, #4]
 800f32c:	6863      	ldr	r3, [r4, #4]
 800f32e:	bf08      	it	eq
 800f330:	f8c8 1000 	streq.w	r1, [r8]
 800f334:	5162      	str	r2, [r4, r5]
 800f336:	604b      	str	r3, [r1, #4]
 800f338:	4638      	mov	r0, r7
 800f33a:	f104 060b 	add.w	r6, r4, #11
 800f33e:	f000 f829 	bl	800f394 <__malloc_unlock>
 800f342:	f026 0607 	bic.w	r6, r6, #7
 800f346:	1d23      	adds	r3, r4, #4
 800f348:	1af2      	subs	r2, r6, r3
 800f34a:	d0ae      	beq.n	800f2aa <_malloc_r+0x22>
 800f34c:	1b9b      	subs	r3, r3, r6
 800f34e:	50a3      	str	r3, [r4, r2]
 800f350:	e7ab      	b.n	800f2aa <_malloc_r+0x22>
 800f352:	42a3      	cmp	r3, r4
 800f354:	6862      	ldr	r2, [r4, #4]
 800f356:	d1dd      	bne.n	800f314 <_malloc_r+0x8c>
 800f358:	f8c8 2000 	str.w	r2, [r8]
 800f35c:	e7ec      	b.n	800f338 <_malloc_r+0xb0>
 800f35e:	4623      	mov	r3, r4
 800f360:	6864      	ldr	r4, [r4, #4]
 800f362:	e7ac      	b.n	800f2be <_malloc_r+0x36>
 800f364:	4634      	mov	r4, r6
 800f366:	6876      	ldr	r6, [r6, #4]
 800f368:	e7b4      	b.n	800f2d4 <_malloc_r+0x4c>
 800f36a:	4613      	mov	r3, r2
 800f36c:	e7cc      	b.n	800f308 <_malloc_r+0x80>
 800f36e:	230c      	movs	r3, #12
 800f370:	603b      	str	r3, [r7, #0]
 800f372:	4638      	mov	r0, r7
 800f374:	f000 f80e 	bl	800f394 <__malloc_unlock>
 800f378:	e797      	b.n	800f2aa <_malloc_r+0x22>
 800f37a:	6025      	str	r5, [r4, #0]
 800f37c:	e7dc      	b.n	800f338 <_malloc_r+0xb0>
 800f37e:	605b      	str	r3, [r3, #4]
 800f380:	deff      	udf	#255	; 0xff
 800f382:	bf00      	nop
 800f384:	2000171c 	.word	0x2000171c

0800f388 <__malloc_lock>:
 800f388:	4801      	ldr	r0, [pc, #4]	; (800f390 <__malloc_lock+0x8>)
 800f38a:	f000 be0f 	b.w	800ffac <__retarget_lock_acquire_recursive>
 800f38e:	bf00      	nop
 800f390:	20001864 	.word	0x20001864

0800f394 <__malloc_unlock>:
 800f394:	4801      	ldr	r0, [pc, #4]	; (800f39c <__malloc_unlock+0x8>)
 800f396:	f000 be0a 	b.w	800ffae <__retarget_lock_release_recursive>
 800f39a:	bf00      	nop
 800f39c:	20001864 	.word	0x20001864

0800f3a0 <__cvt>:
 800f3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a4:	ec55 4b10 	vmov	r4, r5, d0
 800f3a8:	2d00      	cmp	r5, #0
 800f3aa:	460e      	mov	r6, r1
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	462b      	mov	r3, r5
 800f3b0:	bfbb      	ittet	lt
 800f3b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3b6:	461d      	movlt	r5, r3
 800f3b8:	2300      	movge	r3, #0
 800f3ba:	232d      	movlt	r3, #45	; 0x2d
 800f3bc:	700b      	strb	r3, [r1, #0]
 800f3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f3c4:	4691      	mov	r9, r2
 800f3c6:	f023 0820 	bic.w	r8, r3, #32
 800f3ca:	bfbc      	itt	lt
 800f3cc:	4622      	movlt	r2, r4
 800f3ce:	4614      	movlt	r4, r2
 800f3d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f3d4:	d005      	beq.n	800f3e2 <__cvt+0x42>
 800f3d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f3da:	d100      	bne.n	800f3de <__cvt+0x3e>
 800f3dc:	3601      	adds	r6, #1
 800f3de:	2102      	movs	r1, #2
 800f3e0:	e000      	b.n	800f3e4 <__cvt+0x44>
 800f3e2:	2103      	movs	r1, #3
 800f3e4:	ab03      	add	r3, sp, #12
 800f3e6:	9301      	str	r3, [sp, #4]
 800f3e8:	ab02      	add	r3, sp, #8
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	ec45 4b10 	vmov	d0, r4, r5
 800f3f0:	4653      	mov	r3, sl
 800f3f2:	4632      	mov	r2, r6
 800f3f4:	f000 fe74 	bl	80100e0 <_dtoa_r>
 800f3f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f3fc:	4607      	mov	r7, r0
 800f3fe:	d102      	bne.n	800f406 <__cvt+0x66>
 800f400:	f019 0f01 	tst.w	r9, #1
 800f404:	d022      	beq.n	800f44c <__cvt+0xac>
 800f406:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f40a:	eb07 0906 	add.w	r9, r7, r6
 800f40e:	d110      	bne.n	800f432 <__cvt+0x92>
 800f410:	783b      	ldrb	r3, [r7, #0]
 800f412:	2b30      	cmp	r3, #48	; 0x30
 800f414:	d10a      	bne.n	800f42c <__cvt+0x8c>
 800f416:	2200      	movs	r2, #0
 800f418:	2300      	movs	r3, #0
 800f41a:	4620      	mov	r0, r4
 800f41c:	4629      	mov	r1, r5
 800f41e:	f7f1 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800f422:	b918      	cbnz	r0, 800f42c <__cvt+0x8c>
 800f424:	f1c6 0601 	rsb	r6, r6, #1
 800f428:	f8ca 6000 	str.w	r6, [sl]
 800f42c:	f8da 3000 	ldr.w	r3, [sl]
 800f430:	4499      	add	r9, r3
 800f432:	2200      	movs	r2, #0
 800f434:	2300      	movs	r3, #0
 800f436:	4620      	mov	r0, r4
 800f438:	4629      	mov	r1, r5
 800f43a:	f7f1 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800f43e:	b108      	cbz	r0, 800f444 <__cvt+0xa4>
 800f440:	f8cd 900c 	str.w	r9, [sp, #12]
 800f444:	2230      	movs	r2, #48	; 0x30
 800f446:	9b03      	ldr	r3, [sp, #12]
 800f448:	454b      	cmp	r3, r9
 800f44a:	d307      	bcc.n	800f45c <__cvt+0xbc>
 800f44c:	9b03      	ldr	r3, [sp, #12]
 800f44e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f450:	1bdb      	subs	r3, r3, r7
 800f452:	4638      	mov	r0, r7
 800f454:	6013      	str	r3, [r2, #0]
 800f456:	b004      	add	sp, #16
 800f458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f45c:	1c59      	adds	r1, r3, #1
 800f45e:	9103      	str	r1, [sp, #12]
 800f460:	701a      	strb	r2, [r3, #0]
 800f462:	e7f0      	b.n	800f446 <__cvt+0xa6>

0800f464 <__exponent>:
 800f464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f466:	4603      	mov	r3, r0
 800f468:	2900      	cmp	r1, #0
 800f46a:	bfb8      	it	lt
 800f46c:	4249      	neglt	r1, r1
 800f46e:	f803 2b02 	strb.w	r2, [r3], #2
 800f472:	bfb4      	ite	lt
 800f474:	222d      	movlt	r2, #45	; 0x2d
 800f476:	222b      	movge	r2, #43	; 0x2b
 800f478:	2909      	cmp	r1, #9
 800f47a:	7042      	strb	r2, [r0, #1]
 800f47c:	dd2a      	ble.n	800f4d4 <__exponent+0x70>
 800f47e:	f10d 0207 	add.w	r2, sp, #7
 800f482:	4617      	mov	r7, r2
 800f484:	260a      	movs	r6, #10
 800f486:	4694      	mov	ip, r2
 800f488:	fb91 f5f6 	sdiv	r5, r1, r6
 800f48c:	fb06 1415 	mls	r4, r6, r5, r1
 800f490:	3430      	adds	r4, #48	; 0x30
 800f492:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f496:	460c      	mov	r4, r1
 800f498:	2c63      	cmp	r4, #99	; 0x63
 800f49a:	f102 32ff 	add.w	r2, r2, #4294967295
 800f49e:	4629      	mov	r1, r5
 800f4a0:	dcf1      	bgt.n	800f486 <__exponent+0x22>
 800f4a2:	3130      	adds	r1, #48	; 0x30
 800f4a4:	f1ac 0402 	sub.w	r4, ip, #2
 800f4a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f4ac:	1c41      	adds	r1, r0, #1
 800f4ae:	4622      	mov	r2, r4
 800f4b0:	42ba      	cmp	r2, r7
 800f4b2:	d30a      	bcc.n	800f4ca <__exponent+0x66>
 800f4b4:	f10d 0209 	add.w	r2, sp, #9
 800f4b8:	eba2 020c 	sub.w	r2, r2, ip
 800f4bc:	42bc      	cmp	r4, r7
 800f4be:	bf88      	it	hi
 800f4c0:	2200      	movhi	r2, #0
 800f4c2:	4413      	add	r3, r2
 800f4c4:	1a18      	subs	r0, r3, r0
 800f4c6:	b003      	add	sp, #12
 800f4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f4ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f4d2:	e7ed      	b.n	800f4b0 <__exponent+0x4c>
 800f4d4:	2330      	movs	r3, #48	; 0x30
 800f4d6:	3130      	adds	r1, #48	; 0x30
 800f4d8:	7083      	strb	r3, [r0, #2]
 800f4da:	70c1      	strb	r1, [r0, #3]
 800f4dc:	1d03      	adds	r3, r0, #4
 800f4de:	e7f1      	b.n	800f4c4 <__exponent+0x60>

0800f4e0 <_printf_float>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	ed2d 8b02 	vpush	{d8}
 800f4e8:	b08d      	sub	sp, #52	; 0x34
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f4f0:	4616      	mov	r6, r2
 800f4f2:	461f      	mov	r7, r3
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	f000 fcd5 	bl	800fea4 <_localeconv_r>
 800f4fa:	f8d0 a000 	ldr.w	sl, [r0]
 800f4fe:	4650      	mov	r0, sl
 800f500:	f7f0 feb6 	bl	8000270 <strlen>
 800f504:	2300      	movs	r3, #0
 800f506:	930a      	str	r3, [sp, #40]	; 0x28
 800f508:	6823      	ldr	r3, [r4, #0]
 800f50a:	9305      	str	r3, [sp, #20]
 800f50c:	f8d8 3000 	ldr.w	r3, [r8]
 800f510:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f514:	3307      	adds	r3, #7
 800f516:	f023 0307 	bic.w	r3, r3, #7
 800f51a:	f103 0208 	add.w	r2, r3, #8
 800f51e:	f8c8 2000 	str.w	r2, [r8]
 800f522:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f52a:	9307      	str	r3, [sp, #28]
 800f52c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f530:	ee08 0a10 	vmov	s16, r0
 800f534:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f53c:	4b9e      	ldr	r3, [pc, #632]	; (800f7b8 <_printf_float+0x2d8>)
 800f53e:	f04f 32ff 	mov.w	r2, #4294967295
 800f542:	f7f1 faf3 	bl	8000b2c <__aeabi_dcmpun>
 800f546:	bb88      	cbnz	r0, 800f5ac <_printf_float+0xcc>
 800f548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f54c:	4b9a      	ldr	r3, [pc, #616]	; (800f7b8 <_printf_float+0x2d8>)
 800f54e:	f04f 32ff 	mov.w	r2, #4294967295
 800f552:	f7f1 facd 	bl	8000af0 <__aeabi_dcmple>
 800f556:	bb48      	cbnz	r0, 800f5ac <_printf_float+0xcc>
 800f558:	2200      	movs	r2, #0
 800f55a:	2300      	movs	r3, #0
 800f55c:	4640      	mov	r0, r8
 800f55e:	4649      	mov	r1, r9
 800f560:	f7f1 fabc 	bl	8000adc <__aeabi_dcmplt>
 800f564:	b110      	cbz	r0, 800f56c <_printf_float+0x8c>
 800f566:	232d      	movs	r3, #45	; 0x2d
 800f568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f56c:	4a93      	ldr	r2, [pc, #588]	; (800f7bc <_printf_float+0x2dc>)
 800f56e:	4b94      	ldr	r3, [pc, #592]	; (800f7c0 <_printf_float+0x2e0>)
 800f570:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f574:	bf94      	ite	ls
 800f576:	4690      	movls	r8, r2
 800f578:	4698      	movhi	r8, r3
 800f57a:	2303      	movs	r3, #3
 800f57c:	6123      	str	r3, [r4, #16]
 800f57e:	9b05      	ldr	r3, [sp, #20]
 800f580:	f023 0304 	bic.w	r3, r3, #4
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	f04f 0900 	mov.w	r9, #0
 800f58a:	9700      	str	r7, [sp, #0]
 800f58c:	4633      	mov	r3, r6
 800f58e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f590:	4621      	mov	r1, r4
 800f592:	4628      	mov	r0, r5
 800f594:	f000 f9da 	bl	800f94c <_printf_common>
 800f598:	3001      	adds	r0, #1
 800f59a:	f040 8090 	bne.w	800f6be <_printf_float+0x1de>
 800f59e:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a2:	b00d      	add	sp, #52	; 0x34
 800f5a4:	ecbd 8b02 	vpop	{d8}
 800f5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ac:	4642      	mov	r2, r8
 800f5ae:	464b      	mov	r3, r9
 800f5b0:	4640      	mov	r0, r8
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	f7f1 faba 	bl	8000b2c <__aeabi_dcmpun>
 800f5b8:	b140      	cbz	r0, 800f5cc <_printf_float+0xec>
 800f5ba:	464b      	mov	r3, r9
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	bfbc      	itt	lt
 800f5c0:	232d      	movlt	r3, #45	; 0x2d
 800f5c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f5c6:	4a7f      	ldr	r2, [pc, #508]	; (800f7c4 <_printf_float+0x2e4>)
 800f5c8:	4b7f      	ldr	r3, [pc, #508]	; (800f7c8 <_printf_float+0x2e8>)
 800f5ca:	e7d1      	b.n	800f570 <_printf_float+0x90>
 800f5cc:	6863      	ldr	r3, [r4, #4]
 800f5ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f5d2:	9206      	str	r2, [sp, #24]
 800f5d4:	1c5a      	adds	r2, r3, #1
 800f5d6:	d13f      	bne.n	800f658 <_printf_float+0x178>
 800f5d8:	2306      	movs	r3, #6
 800f5da:	6063      	str	r3, [r4, #4]
 800f5dc:	9b05      	ldr	r3, [sp, #20]
 800f5de:	6861      	ldr	r1, [r4, #4]
 800f5e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	9303      	str	r3, [sp, #12]
 800f5e8:	ab0a      	add	r3, sp, #40	; 0x28
 800f5ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f5ee:	ab09      	add	r3, sp, #36	; 0x24
 800f5f0:	ec49 8b10 	vmov	d0, r8, r9
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	6022      	str	r2, [r4, #0]
 800f5f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	f7ff fecf 	bl	800f3a0 <__cvt>
 800f602:	9b06      	ldr	r3, [sp, #24]
 800f604:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f606:	2b47      	cmp	r3, #71	; 0x47
 800f608:	4680      	mov	r8, r0
 800f60a:	d108      	bne.n	800f61e <_printf_float+0x13e>
 800f60c:	1cc8      	adds	r0, r1, #3
 800f60e:	db02      	blt.n	800f616 <_printf_float+0x136>
 800f610:	6863      	ldr	r3, [r4, #4]
 800f612:	4299      	cmp	r1, r3
 800f614:	dd41      	ble.n	800f69a <_printf_float+0x1ba>
 800f616:	f1ab 0302 	sub.w	r3, fp, #2
 800f61a:	fa5f fb83 	uxtb.w	fp, r3
 800f61e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f622:	d820      	bhi.n	800f666 <_printf_float+0x186>
 800f624:	3901      	subs	r1, #1
 800f626:	465a      	mov	r2, fp
 800f628:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f62c:	9109      	str	r1, [sp, #36]	; 0x24
 800f62e:	f7ff ff19 	bl	800f464 <__exponent>
 800f632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f634:	1813      	adds	r3, r2, r0
 800f636:	2a01      	cmp	r2, #1
 800f638:	4681      	mov	r9, r0
 800f63a:	6123      	str	r3, [r4, #16]
 800f63c:	dc02      	bgt.n	800f644 <_printf_float+0x164>
 800f63e:	6822      	ldr	r2, [r4, #0]
 800f640:	07d2      	lsls	r2, r2, #31
 800f642:	d501      	bpl.n	800f648 <_printf_float+0x168>
 800f644:	3301      	adds	r3, #1
 800f646:	6123      	str	r3, [r4, #16]
 800f648:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d09c      	beq.n	800f58a <_printf_float+0xaa>
 800f650:	232d      	movs	r3, #45	; 0x2d
 800f652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f656:	e798      	b.n	800f58a <_printf_float+0xaa>
 800f658:	9a06      	ldr	r2, [sp, #24]
 800f65a:	2a47      	cmp	r2, #71	; 0x47
 800f65c:	d1be      	bne.n	800f5dc <_printf_float+0xfc>
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1bc      	bne.n	800f5dc <_printf_float+0xfc>
 800f662:	2301      	movs	r3, #1
 800f664:	e7b9      	b.n	800f5da <_printf_float+0xfa>
 800f666:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f66a:	d118      	bne.n	800f69e <_printf_float+0x1be>
 800f66c:	2900      	cmp	r1, #0
 800f66e:	6863      	ldr	r3, [r4, #4]
 800f670:	dd0b      	ble.n	800f68a <_printf_float+0x1aa>
 800f672:	6121      	str	r1, [r4, #16]
 800f674:	b913      	cbnz	r3, 800f67c <_printf_float+0x19c>
 800f676:	6822      	ldr	r2, [r4, #0]
 800f678:	07d0      	lsls	r0, r2, #31
 800f67a:	d502      	bpl.n	800f682 <_printf_float+0x1a2>
 800f67c:	3301      	adds	r3, #1
 800f67e:	440b      	add	r3, r1
 800f680:	6123      	str	r3, [r4, #16]
 800f682:	65a1      	str	r1, [r4, #88]	; 0x58
 800f684:	f04f 0900 	mov.w	r9, #0
 800f688:	e7de      	b.n	800f648 <_printf_float+0x168>
 800f68a:	b913      	cbnz	r3, 800f692 <_printf_float+0x1b2>
 800f68c:	6822      	ldr	r2, [r4, #0]
 800f68e:	07d2      	lsls	r2, r2, #31
 800f690:	d501      	bpl.n	800f696 <_printf_float+0x1b6>
 800f692:	3302      	adds	r3, #2
 800f694:	e7f4      	b.n	800f680 <_printf_float+0x1a0>
 800f696:	2301      	movs	r3, #1
 800f698:	e7f2      	b.n	800f680 <_printf_float+0x1a0>
 800f69a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6a0:	4299      	cmp	r1, r3
 800f6a2:	db05      	blt.n	800f6b0 <_printf_float+0x1d0>
 800f6a4:	6823      	ldr	r3, [r4, #0]
 800f6a6:	6121      	str	r1, [r4, #16]
 800f6a8:	07d8      	lsls	r0, r3, #31
 800f6aa:	d5ea      	bpl.n	800f682 <_printf_float+0x1a2>
 800f6ac:	1c4b      	adds	r3, r1, #1
 800f6ae:	e7e7      	b.n	800f680 <_printf_float+0x1a0>
 800f6b0:	2900      	cmp	r1, #0
 800f6b2:	bfd4      	ite	le
 800f6b4:	f1c1 0202 	rsble	r2, r1, #2
 800f6b8:	2201      	movgt	r2, #1
 800f6ba:	4413      	add	r3, r2
 800f6bc:	e7e0      	b.n	800f680 <_printf_float+0x1a0>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	055a      	lsls	r2, r3, #21
 800f6c2:	d407      	bmi.n	800f6d4 <_printf_float+0x1f4>
 800f6c4:	6923      	ldr	r3, [r4, #16]
 800f6c6:	4642      	mov	r2, r8
 800f6c8:	4631      	mov	r1, r6
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	47b8      	blx	r7
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	d12c      	bne.n	800f72c <_printf_float+0x24c>
 800f6d2:	e764      	b.n	800f59e <_printf_float+0xbe>
 800f6d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6d8:	f240 80e0 	bls.w	800f89c <_printf_float+0x3bc>
 800f6dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f7f1 f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d034      	beq.n	800f756 <_printf_float+0x276>
 800f6ec:	4a37      	ldr	r2, [pc, #220]	; (800f7cc <_printf_float+0x2ec>)
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	4631      	mov	r1, r6
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	47b8      	blx	r7
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	f43f af51 	beq.w	800f59e <_printf_float+0xbe>
 800f6fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f700:	429a      	cmp	r2, r3
 800f702:	db02      	blt.n	800f70a <_printf_float+0x22a>
 800f704:	6823      	ldr	r3, [r4, #0]
 800f706:	07d8      	lsls	r0, r3, #31
 800f708:	d510      	bpl.n	800f72c <_printf_float+0x24c>
 800f70a:	ee18 3a10 	vmov	r3, s16
 800f70e:	4652      	mov	r2, sl
 800f710:	4631      	mov	r1, r6
 800f712:	4628      	mov	r0, r5
 800f714:	47b8      	blx	r7
 800f716:	3001      	adds	r0, #1
 800f718:	f43f af41 	beq.w	800f59e <_printf_float+0xbe>
 800f71c:	f04f 0800 	mov.w	r8, #0
 800f720:	f104 091a 	add.w	r9, r4, #26
 800f724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f726:	3b01      	subs	r3, #1
 800f728:	4543      	cmp	r3, r8
 800f72a:	dc09      	bgt.n	800f740 <_printf_float+0x260>
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	079b      	lsls	r3, r3, #30
 800f730:	f100 8107 	bmi.w	800f942 <_printf_float+0x462>
 800f734:	68e0      	ldr	r0, [r4, #12]
 800f736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f738:	4298      	cmp	r0, r3
 800f73a:	bfb8      	it	lt
 800f73c:	4618      	movlt	r0, r3
 800f73e:	e730      	b.n	800f5a2 <_printf_float+0xc2>
 800f740:	2301      	movs	r3, #1
 800f742:	464a      	mov	r2, r9
 800f744:	4631      	mov	r1, r6
 800f746:	4628      	mov	r0, r5
 800f748:	47b8      	blx	r7
 800f74a:	3001      	adds	r0, #1
 800f74c:	f43f af27 	beq.w	800f59e <_printf_float+0xbe>
 800f750:	f108 0801 	add.w	r8, r8, #1
 800f754:	e7e6      	b.n	800f724 <_printf_float+0x244>
 800f756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f758:	2b00      	cmp	r3, #0
 800f75a:	dc39      	bgt.n	800f7d0 <_printf_float+0x2f0>
 800f75c:	4a1b      	ldr	r2, [pc, #108]	; (800f7cc <_printf_float+0x2ec>)
 800f75e:	2301      	movs	r3, #1
 800f760:	4631      	mov	r1, r6
 800f762:	4628      	mov	r0, r5
 800f764:	47b8      	blx	r7
 800f766:	3001      	adds	r0, #1
 800f768:	f43f af19 	beq.w	800f59e <_printf_float+0xbe>
 800f76c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f770:	4313      	orrs	r3, r2
 800f772:	d102      	bne.n	800f77a <_printf_float+0x29a>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	07d9      	lsls	r1, r3, #31
 800f778:	d5d8      	bpl.n	800f72c <_printf_float+0x24c>
 800f77a:	ee18 3a10 	vmov	r3, s16
 800f77e:	4652      	mov	r2, sl
 800f780:	4631      	mov	r1, r6
 800f782:	4628      	mov	r0, r5
 800f784:	47b8      	blx	r7
 800f786:	3001      	adds	r0, #1
 800f788:	f43f af09 	beq.w	800f59e <_printf_float+0xbe>
 800f78c:	f04f 0900 	mov.w	r9, #0
 800f790:	f104 0a1a 	add.w	sl, r4, #26
 800f794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f796:	425b      	negs	r3, r3
 800f798:	454b      	cmp	r3, r9
 800f79a:	dc01      	bgt.n	800f7a0 <_printf_float+0x2c0>
 800f79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f79e:	e792      	b.n	800f6c6 <_printf_float+0x1e6>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	4652      	mov	r2, sl
 800f7a4:	4631      	mov	r1, r6
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	47b8      	blx	r7
 800f7aa:	3001      	adds	r0, #1
 800f7ac:	f43f aef7 	beq.w	800f59e <_printf_float+0xbe>
 800f7b0:	f109 0901 	add.w	r9, r9, #1
 800f7b4:	e7ee      	b.n	800f794 <_printf_float+0x2b4>
 800f7b6:	bf00      	nop
 800f7b8:	7fefffff 	.word	0x7fefffff
 800f7bc:	0801242c 	.word	0x0801242c
 800f7c0:	08012430 	.word	0x08012430
 800f7c4:	08012434 	.word	0x08012434
 800f7c8:	08012438 	.word	0x08012438
 800f7cc:	0801243c 	.word	0x0801243c
 800f7d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	bfa8      	it	ge
 800f7d8:	461a      	movge	r2, r3
 800f7da:	2a00      	cmp	r2, #0
 800f7dc:	4691      	mov	r9, r2
 800f7de:	dc37      	bgt.n	800f850 <_printf_float+0x370>
 800f7e0:	f04f 0b00 	mov.w	fp, #0
 800f7e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7e8:	f104 021a 	add.w	r2, r4, #26
 800f7ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7ee:	9305      	str	r3, [sp, #20]
 800f7f0:	eba3 0309 	sub.w	r3, r3, r9
 800f7f4:	455b      	cmp	r3, fp
 800f7f6:	dc33      	bgt.n	800f860 <_printf_float+0x380>
 800f7f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	db3b      	blt.n	800f878 <_printf_float+0x398>
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	07da      	lsls	r2, r3, #31
 800f804:	d438      	bmi.n	800f878 <_printf_float+0x398>
 800f806:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f80a:	eba2 0903 	sub.w	r9, r2, r3
 800f80e:	9b05      	ldr	r3, [sp, #20]
 800f810:	1ad2      	subs	r2, r2, r3
 800f812:	4591      	cmp	r9, r2
 800f814:	bfa8      	it	ge
 800f816:	4691      	movge	r9, r2
 800f818:	f1b9 0f00 	cmp.w	r9, #0
 800f81c:	dc35      	bgt.n	800f88a <_printf_float+0x3aa>
 800f81e:	f04f 0800 	mov.w	r8, #0
 800f822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f826:	f104 0a1a 	add.w	sl, r4, #26
 800f82a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f82e:	1a9b      	subs	r3, r3, r2
 800f830:	eba3 0309 	sub.w	r3, r3, r9
 800f834:	4543      	cmp	r3, r8
 800f836:	f77f af79 	ble.w	800f72c <_printf_float+0x24c>
 800f83a:	2301      	movs	r3, #1
 800f83c:	4652      	mov	r2, sl
 800f83e:	4631      	mov	r1, r6
 800f840:	4628      	mov	r0, r5
 800f842:	47b8      	blx	r7
 800f844:	3001      	adds	r0, #1
 800f846:	f43f aeaa 	beq.w	800f59e <_printf_float+0xbe>
 800f84a:	f108 0801 	add.w	r8, r8, #1
 800f84e:	e7ec      	b.n	800f82a <_printf_float+0x34a>
 800f850:	4613      	mov	r3, r2
 800f852:	4631      	mov	r1, r6
 800f854:	4642      	mov	r2, r8
 800f856:	4628      	mov	r0, r5
 800f858:	47b8      	blx	r7
 800f85a:	3001      	adds	r0, #1
 800f85c:	d1c0      	bne.n	800f7e0 <_printf_float+0x300>
 800f85e:	e69e      	b.n	800f59e <_printf_float+0xbe>
 800f860:	2301      	movs	r3, #1
 800f862:	4631      	mov	r1, r6
 800f864:	4628      	mov	r0, r5
 800f866:	9205      	str	r2, [sp, #20]
 800f868:	47b8      	blx	r7
 800f86a:	3001      	adds	r0, #1
 800f86c:	f43f ae97 	beq.w	800f59e <_printf_float+0xbe>
 800f870:	9a05      	ldr	r2, [sp, #20]
 800f872:	f10b 0b01 	add.w	fp, fp, #1
 800f876:	e7b9      	b.n	800f7ec <_printf_float+0x30c>
 800f878:	ee18 3a10 	vmov	r3, s16
 800f87c:	4652      	mov	r2, sl
 800f87e:	4631      	mov	r1, r6
 800f880:	4628      	mov	r0, r5
 800f882:	47b8      	blx	r7
 800f884:	3001      	adds	r0, #1
 800f886:	d1be      	bne.n	800f806 <_printf_float+0x326>
 800f888:	e689      	b.n	800f59e <_printf_float+0xbe>
 800f88a:	9a05      	ldr	r2, [sp, #20]
 800f88c:	464b      	mov	r3, r9
 800f88e:	4442      	add	r2, r8
 800f890:	4631      	mov	r1, r6
 800f892:	4628      	mov	r0, r5
 800f894:	47b8      	blx	r7
 800f896:	3001      	adds	r0, #1
 800f898:	d1c1      	bne.n	800f81e <_printf_float+0x33e>
 800f89a:	e680      	b.n	800f59e <_printf_float+0xbe>
 800f89c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f89e:	2a01      	cmp	r2, #1
 800f8a0:	dc01      	bgt.n	800f8a6 <_printf_float+0x3c6>
 800f8a2:	07db      	lsls	r3, r3, #31
 800f8a4:	d53a      	bpl.n	800f91c <_printf_float+0x43c>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4642      	mov	r2, r8
 800f8aa:	4631      	mov	r1, r6
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	47b8      	blx	r7
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	f43f ae74 	beq.w	800f59e <_printf_float+0xbe>
 800f8b6:	ee18 3a10 	vmov	r3, s16
 800f8ba:	4652      	mov	r2, sl
 800f8bc:	4631      	mov	r1, r6
 800f8be:	4628      	mov	r0, r5
 800f8c0:	47b8      	blx	r7
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	f43f ae6b 	beq.w	800f59e <_printf_float+0xbe>
 800f8c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f8d4:	f7f1 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8d8:	b9d8      	cbnz	r0, 800f912 <_printf_float+0x432>
 800f8da:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f8de:	f108 0201 	add.w	r2, r8, #1
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b8      	blx	r7
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d10e      	bne.n	800f90a <_printf_float+0x42a>
 800f8ec:	e657      	b.n	800f59e <_printf_float+0xbe>
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	4652      	mov	r2, sl
 800f8f2:	4631      	mov	r1, r6
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b8      	blx	r7
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	f43f ae50 	beq.w	800f59e <_printf_float+0xbe>
 800f8fe:	f108 0801 	add.w	r8, r8, #1
 800f902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f904:	3b01      	subs	r3, #1
 800f906:	4543      	cmp	r3, r8
 800f908:	dcf1      	bgt.n	800f8ee <_printf_float+0x40e>
 800f90a:	464b      	mov	r3, r9
 800f90c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f910:	e6da      	b.n	800f6c8 <_printf_float+0x1e8>
 800f912:	f04f 0800 	mov.w	r8, #0
 800f916:	f104 0a1a 	add.w	sl, r4, #26
 800f91a:	e7f2      	b.n	800f902 <_printf_float+0x422>
 800f91c:	2301      	movs	r3, #1
 800f91e:	4642      	mov	r2, r8
 800f920:	e7df      	b.n	800f8e2 <_printf_float+0x402>
 800f922:	2301      	movs	r3, #1
 800f924:	464a      	mov	r2, r9
 800f926:	4631      	mov	r1, r6
 800f928:	4628      	mov	r0, r5
 800f92a:	47b8      	blx	r7
 800f92c:	3001      	adds	r0, #1
 800f92e:	f43f ae36 	beq.w	800f59e <_printf_float+0xbe>
 800f932:	f108 0801 	add.w	r8, r8, #1
 800f936:	68e3      	ldr	r3, [r4, #12]
 800f938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f93a:	1a5b      	subs	r3, r3, r1
 800f93c:	4543      	cmp	r3, r8
 800f93e:	dcf0      	bgt.n	800f922 <_printf_float+0x442>
 800f940:	e6f8      	b.n	800f734 <_printf_float+0x254>
 800f942:	f04f 0800 	mov.w	r8, #0
 800f946:	f104 0919 	add.w	r9, r4, #25
 800f94a:	e7f4      	b.n	800f936 <_printf_float+0x456>

0800f94c <_printf_common>:
 800f94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f950:	4616      	mov	r6, r2
 800f952:	4699      	mov	r9, r3
 800f954:	688a      	ldr	r2, [r1, #8]
 800f956:	690b      	ldr	r3, [r1, #16]
 800f958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f95c:	4293      	cmp	r3, r2
 800f95e:	bfb8      	it	lt
 800f960:	4613      	movlt	r3, r2
 800f962:	6033      	str	r3, [r6, #0]
 800f964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f968:	4607      	mov	r7, r0
 800f96a:	460c      	mov	r4, r1
 800f96c:	b10a      	cbz	r2, 800f972 <_printf_common+0x26>
 800f96e:	3301      	adds	r3, #1
 800f970:	6033      	str	r3, [r6, #0]
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	0699      	lsls	r1, r3, #26
 800f976:	bf42      	ittt	mi
 800f978:	6833      	ldrmi	r3, [r6, #0]
 800f97a:	3302      	addmi	r3, #2
 800f97c:	6033      	strmi	r3, [r6, #0]
 800f97e:	6825      	ldr	r5, [r4, #0]
 800f980:	f015 0506 	ands.w	r5, r5, #6
 800f984:	d106      	bne.n	800f994 <_printf_common+0x48>
 800f986:	f104 0a19 	add.w	sl, r4, #25
 800f98a:	68e3      	ldr	r3, [r4, #12]
 800f98c:	6832      	ldr	r2, [r6, #0]
 800f98e:	1a9b      	subs	r3, r3, r2
 800f990:	42ab      	cmp	r3, r5
 800f992:	dc26      	bgt.n	800f9e2 <_printf_common+0x96>
 800f994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f998:	1e13      	subs	r3, r2, #0
 800f99a:	6822      	ldr	r2, [r4, #0]
 800f99c:	bf18      	it	ne
 800f99e:	2301      	movne	r3, #1
 800f9a0:	0692      	lsls	r2, r2, #26
 800f9a2:	d42b      	bmi.n	800f9fc <_printf_common+0xb0>
 800f9a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9a8:	4649      	mov	r1, r9
 800f9aa:	4638      	mov	r0, r7
 800f9ac:	47c0      	blx	r8
 800f9ae:	3001      	adds	r0, #1
 800f9b0:	d01e      	beq.n	800f9f0 <_printf_common+0xa4>
 800f9b2:	6823      	ldr	r3, [r4, #0]
 800f9b4:	6922      	ldr	r2, [r4, #16]
 800f9b6:	f003 0306 	and.w	r3, r3, #6
 800f9ba:	2b04      	cmp	r3, #4
 800f9bc:	bf02      	ittt	eq
 800f9be:	68e5      	ldreq	r5, [r4, #12]
 800f9c0:	6833      	ldreq	r3, [r6, #0]
 800f9c2:	1aed      	subeq	r5, r5, r3
 800f9c4:	68a3      	ldr	r3, [r4, #8]
 800f9c6:	bf0c      	ite	eq
 800f9c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9cc:	2500      	movne	r5, #0
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	bfc4      	itt	gt
 800f9d2:	1a9b      	subgt	r3, r3, r2
 800f9d4:	18ed      	addgt	r5, r5, r3
 800f9d6:	2600      	movs	r6, #0
 800f9d8:	341a      	adds	r4, #26
 800f9da:	42b5      	cmp	r5, r6
 800f9dc:	d11a      	bne.n	800fa14 <_printf_common+0xc8>
 800f9de:	2000      	movs	r0, #0
 800f9e0:	e008      	b.n	800f9f4 <_printf_common+0xa8>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	4652      	mov	r2, sl
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	4638      	mov	r0, r7
 800f9ea:	47c0      	blx	r8
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	d103      	bne.n	800f9f8 <_printf_common+0xac>
 800f9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9f8:	3501      	adds	r5, #1
 800f9fa:	e7c6      	b.n	800f98a <_printf_common+0x3e>
 800f9fc:	18e1      	adds	r1, r4, r3
 800f9fe:	1c5a      	adds	r2, r3, #1
 800fa00:	2030      	movs	r0, #48	; 0x30
 800fa02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa06:	4422      	add	r2, r4
 800fa08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa10:	3302      	adds	r3, #2
 800fa12:	e7c7      	b.n	800f9a4 <_printf_common+0x58>
 800fa14:	2301      	movs	r3, #1
 800fa16:	4622      	mov	r2, r4
 800fa18:	4649      	mov	r1, r9
 800fa1a:	4638      	mov	r0, r7
 800fa1c:	47c0      	blx	r8
 800fa1e:	3001      	adds	r0, #1
 800fa20:	d0e6      	beq.n	800f9f0 <_printf_common+0xa4>
 800fa22:	3601      	adds	r6, #1
 800fa24:	e7d9      	b.n	800f9da <_printf_common+0x8e>
	...

0800fa28 <_printf_i>:
 800fa28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa2c:	7e0f      	ldrb	r7, [r1, #24]
 800fa2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa30:	2f78      	cmp	r7, #120	; 0x78
 800fa32:	4691      	mov	r9, r2
 800fa34:	4680      	mov	r8, r0
 800fa36:	460c      	mov	r4, r1
 800fa38:	469a      	mov	sl, r3
 800fa3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa3e:	d807      	bhi.n	800fa50 <_printf_i+0x28>
 800fa40:	2f62      	cmp	r7, #98	; 0x62
 800fa42:	d80a      	bhi.n	800fa5a <_printf_i+0x32>
 800fa44:	2f00      	cmp	r7, #0
 800fa46:	f000 80d4 	beq.w	800fbf2 <_printf_i+0x1ca>
 800fa4a:	2f58      	cmp	r7, #88	; 0x58
 800fa4c:	f000 80c0 	beq.w	800fbd0 <_printf_i+0x1a8>
 800fa50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa58:	e03a      	b.n	800fad0 <_printf_i+0xa8>
 800fa5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa5e:	2b15      	cmp	r3, #21
 800fa60:	d8f6      	bhi.n	800fa50 <_printf_i+0x28>
 800fa62:	a101      	add	r1, pc, #4	; (adr r1, 800fa68 <_printf_i+0x40>)
 800fa64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa68:	0800fac1 	.word	0x0800fac1
 800fa6c:	0800fad5 	.word	0x0800fad5
 800fa70:	0800fa51 	.word	0x0800fa51
 800fa74:	0800fa51 	.word	0x0800fa51
 800fa78:	0800fa51 	.word	0x0800fa51
 800fa7c:	0800fa51 	.word	0x0800fa51
 800fa80:	0800fad5 	.word	0x0800fad5
 800fa84:	0800fa51 	.word	0x0800fa51
 800fa88:	0800fa51 	.word	0x0800fa51
 800fa8c:	0800fa51 	.word	0x0800fa51
 800fa90:	0800fa51 	.word	0x0800fa51
 800fa94:	0800fbd9 	.word	0x0800fbd9
 800fa98:	0800fb01 	.word	0x0800fb01
 800fa9c:	0800fb93 	.word	0x0800fb93
 800faa0:	0800fa51 	.word	0x0800fa51
 800faa4:	0800fa51 	.word	0x0800fa51
 800faa8:	0800fbfb 	.word	0x0800fbfb
 800faac:	0800fa51 	.word	0x0800fa51
 800fab0:	0800fb01 	.word	0x0800fb01
 800fab4:	0800fa51 	.word	0x0800fa51
 800fab8:	0800fa51 	.word	0x0800fa51
 800fabc:	0800fb9b 	.word	0x0800fb9b
 800fac0:	682b      	ldr	r3, [r5, #0]
 800fac2:	1d1a      	adds	r2, r3, #4
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	602a      	str	r2, [r5, #0]
 800fac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800facc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fad0:	2301      	movs	r3, #1
 800fad2:	e09f      	b.n	800fc14 <_printf_i+0x1ec>
 800fad4:	6820      	ldr	r0, [r4, #0]
 800fad6:	682b      	ldr	r3, [r5, #0]
 800fad8:	0607      	lsls	r7, r0, #24
 800fada:	f103 0104 	add.w	r1, r3, #4
 800fade:	6029      	str	r1, [r5, #0]
 800fae0:	d501      	bpl.n	800fae6 <_printf_i+0xbe>
 800fae2:	681e      	ldr	r6, [r3, #0]
 800fae4:	e003      	b.n	800faee <_printf_i+0xc6>
 800fae6:	0646      	lsls	r6, r0, #25
 800fae8:	d5fb      	bpl.n	800fae2 <_printf_i+0xba>
 800faea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800faee:	2e00      	cmp	r6, #0
 800faf0:	da03      	bge.n	800fafa <_printf_i+0xd2>
 800faf2:	232d      	movs	r3, #45	; 0x2d
 800faf4:	4276      	negs	r6, r6
 800faf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fafa:	485a      	ldr	r0, [pc, #360]	; (800fc64 <_printf_i+0x23c>)
 800fafc:	230a      	movs	r3, #10
 800fafe:	e012      	b.n	800fb26 <_printf_i+0xfe>
 800fb00:	682b      	ldr	r3, [r5, #0]
 800fb02:	6820      	ldr	r0, [r4, #0]
 800fb04:	1d19      	adds	r1, r3, #4
 800fb06:	6029      	str	r1, [r5, #0]
 800fb08:	0605      	lsls	r5, r0, #24
 800fb0a:	d501      	bpl.n	800fb10 <_printf_i+0xe8>
 800fb0c:	681e      	ldr	r6, [r3, #0]
 800fb0e:	e002      	b.n	800fb16 <_printf_i+0xee>
 800fb10:	0641      	lsls	r1, r0, #25
 800fb12:	d5fb      	bpl.n	800fb0c <_printf_i+0xe4>
 800fb14:	881e      	ldrh	r6, [r3, #0]
 800fb16:	4853      	ldr	r0, [pc, #332]	; (800fc64 <_printf_i+0x23c>)
 800fb18:	2f6f      	cmp	r7, #111	; 0x6f
 800fb1a:	bf0c      	ite	eq
 800fb1c:	2308      	moveq	r3, #8
 800fb1e:	230a      	movne	r3, #10
 800fb20:	2100      	movs	r1, #0
 800fb22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb26:	6865      	ldr	r5, [r4, #4]
 800fb28:	60a5      	str	r5, [r4, #8]
 800fb2a:	2d00      	cmp	r5, #0
 800fb2c:	bfa2      	ittt	ge
 800fb2e:	6821      	ldrge	r1, [r4, #0]
 800fb30:	f021 0104 	bicge.w	r1, r1, #4
 800fb34:	6021      	strge	r1, [r4, #0]
 800fb36:	b90e      	cbnz	r6, 800fb3c <_printf_i+0x114>
 800fb38:	2d00      	cmp	r5, #0
 800fb3a:	d04b      	beq.n	800fbd4 <_printf_i+0x1ac>
 800fb3c:	4615      	mov	r5, r2
 800fb3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb42:	fb03 6711 	mls	r7, r3, r1, r6
 800fb46:	5dc7      	ldrb	r7, [r0, r7]
 800fb48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb4c:	4637      	mov	r7, r6
 800fb4e:	42bb      	cmp	r3, r7
 800fb50:	460e      	mov	r6, r1
 800fb52:	d9f4      	bls.n	800fb3e <_printf_i+0x116>
 800fb54:	2b08      	cmp	r3, #8
 800fb56:	d10b      	bne.n	800fb70 <_printf_i+0x148>
 800fb58:	6823      	ldr	r3, [r4, #0]
 800fb5a:	07de      	lsls	r6, r3, #31
 800fb5c:	d508      	bpl.n	800fb70 <_printf_i+0x148>
 800fb5e:	6923      	ldr	r3, [r4, #16]
 800fb60:	6861      	ldr	r1, [r4, #4]
 800fb62:	4299      	cmp	r1, r3
 800fb64:	bfde      	ittt	le
 800fb66:	2330      	movle	r3, #48	; 0x30
 800fb68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb70:	1b52      	subs	r2, r2, r5
 800fb72:	6122      	str	r2, [r4, #16]
 800fb74:	f8cd a000 	str.w	sl, [sp]
 800fb78:	464b      	mov	r3, r9
 800fb7a:	aa03      	add	r2, sp, #12
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	4640      	mov	r0, r8
 800fb80:	f7ff fee4 	bl	800f94c <_printf_common>
 800fb84:	3001      	adds	r0, #1
 800fb86:	d14a      	bne.n	800fc1e <_printf_i+0x1f6>
 800fb88:	f04f 30ff 	mov.w	r0, #4294967295
 800fb8c:	b004      	add	sp, #16
 800fb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb92:	6823      	ldr	r3, [r4, #0]
 800fb94:	f043 0320 	orr.w	r3, r3, #32
 800fb98:	6023      	str	r3, [r4, #0]
 800fb9a:	4833      	ldr	r0, [pc, #204]	; (800fc68 <_printf_i+0x240>)
 800fb9c:	2778      	movs	r7, #120	; 0x78
 800fb9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	6829      	ldr	r1, [r5, #0]
 800fba6:	061f      	lsls	r7, r3, #24
 800fba8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbac:	d402      	bmi.n	800fbb4 <_printf_i+0x18c>
 800fbae:	065f      	lsls	r7, r3, #25
 800fbb0:	bf48      	it	mi
 800fbb2:	b2b6      	uxthmi	r6, r6
 800fbb4:	07df      	lsls	r7, r3, #31
 800fbb6:	bf48      	it	mi
 800fbb8:	f043 0320 	orrmi.w	r3, r3, #32
 800fbbc:	6029      	str	r1, [r5, #0]
 800fbbe:	bf48      	it	mi
 800fbc0:	6023      	strmi	r3, [r4, #0]
 800fbc2:	b91e      	cbnz	r6, 800fbcc <_printf_i+0x1a4>
 800fbc4:	6823      	ldr	r3, [r4, #0]
 800fbc6:	f023 0320 	bic.w	r3, r3, #32
 800fbca:	6023      	str	r3, [r4, #0]
 800fbcc:	2310      	movs	r3, #16
 800fbce:	e7a7      	b.n	800fb20 <_printf_i+0xf8>
 800fbd0:	4824      	ldr	r0, [pc, #144]	; (800fc64 <_printf_i+0x23c>)
 800fbd2:	e7e4      	b.n	800fb9e <_printf_i+0x176>
 800fbd4:	4615      	mov	r5, r2
 800fbd6:	e7bd      	b.n	800fb54 <_printf_i+0x12c>
 800fbd8:	682b      	ldr	r3, [r5, #0]
 800fbda:	6826      	ldr	r6, [r4, #0]
 800fbdc:	6961      	ldr	r1, [r4, #20]
 800fbde:	1d18      	adds	r0, r3, #4
 800fbe0:	6028      	str	r0, [r5, #0]
 800fbe2:	0635      	lsls	r5, r6, #24
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	d501      	bpl.n	800fbec <_printf_i+0x1c4>
 800fbe8:	6019      	str	r1, [r3, #0]
 800fbea:	e002      	b.n	800fbf2 <_printf_i+0x1ca>
 800fbec:	0670      	lsls	r0, r6, #25
 800fbee:	d5fb      	bpl.n	800fbe8 <_printf_i+0x1c0>
 800fbf0:	8019      	strh	r1, [r3, #0]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	6123      	str	r3, [r4, #16]
 800fbf6:	4615      	mov	r5, r2
 800fbf8:	e7bc      	b.n	800fb74 <_printf_i+0x14c>
 800fbfa:	682b      	ldr	r3, [r5, #0]
 800fbfc:	1d1a      	adds	r2, r3, #4
 800fbfe:	602a      	str	r2, [r5, #0]
 800fc00:	681d      	ldr	r5, [r3, #0]
 800fc02:	6862      	ldr	r2, [r4, #4]
 800fc04:	2100      	movs	r1, #0
 800fc06:	4628      	mov	r0, r5
 800fc08:	f7f0 fae2 	bl	80001d0 <memchr>
 800fc0c:	b108      	cbz	r0, 800fc12 <_printf_i+0x1ea>
 800fc0e:	1b40      	subs	r0, r0, r5
 800fc10:	6060      	str	r0, [r4, #4]
 800fc12:	6863      	ldr	r3, [r4, #4]
 800fc14:	6123      	str	r3, [r4, #16]
 800fc16:	2300      	movs	r3, #0
 800fc18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc1c:	e7aa      	b.n	800fb74 <_printf_i+0x14c>
 800fc1e:	6923      	ldr	r3, [r4, #16]
 800fc20:	462a      	mov	r2, r5
 800fc22:	4649      	mov	r1, r9
 800fc24:	4640      	mov	r0, r8
 800fc26:	47d0      	blx	sl
 800fc28:	3001      	adds	r0, #1
 800fc2a:	d0ad      	beq.n	800fb88 <_printf_i+0x160>
 800fc2c:	6823      	ldr	r3, [r4, #0]
 800fc2e:	079b      	lsls	r3, r3, #30
 800fc30:	d413      	bmi.n	800fc5a <_printf_i+0x232>
 800fc32:	68e0      	ldr	r0, [r4, #12]
 800fc34:	9b03      	ldr	r3, [sp, #12]
 800fc36:	4298      	cmp	r0, r3
 800fc38:	bfb8      	it	lt
 800fc3a:	4618      	movlt	r0, r3
 800fc3c:	e7a6      	b.n	800fb8c <_printf_i+0x164>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4632      	mov	r2, r6
 800fc42:	4649      	mov	r1, r9
 800fc44:	4640      	mov	r0, r8
 800fc46:	47d0      	blx	sl
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d09d      	beq.n	800fb88 <_printf_i+0x160>
 800fc4c:	3501      	adds	r5, #1
 800fc4e:	68e3      	ldr	r3, [r4, #12]
 800fc50:	9903      	ldr	r1, [sp, #12]
 800fc52:	1a5b      	subs	r3, r3, r1
 800fc54:	42ab      	cmp	r3, r5
 800fc56:	dcf2      	bgt.n	800fc3e <_printf_i+0x216>
 800fc58:	e7eb      	b.n	800fc32 <_printf_i+0x20a>
 800fc5a:	2500      	movs	r5, #0
 800fc5c:	f104 0619 	add.w	r6, r4, #25
 800fc60:	e7f5      	b.n	800fc4e <_printf_i+0x226>
 800fc62:	bf00      	nop
 800fc64:	0801243e 	.word	0x0801243e
 800fc68:	0801244f 	.word	0x0801244f

0800fc6c <std>:
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	b510      	push	{r4, lr}
 800fc70:	4604      	mov	r4, r0
 800fc72:	e9c0 3300 	strd	r3, r3, [r0]
 800fc76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc7a:	6083      	str	r3, [r0, #8]
 800fc7c:	8181      	strh	r1, [r0, #12]
 800fc7e:	6643      	str	r3, [r0, #100]	; 0x64
 800fc80:	81c2      	strh	r2, [r0, #14]
 800fc82:	6183      	str	r3, [r0, #24]
 800fc84:	4619      	mov	r1, r3
 800fc86:	2208      	movs	r2, #8
 800fc88:	305c      	adds	r0, #92	; 0x5c
 800fc8a:	f000 f902 	bl	800fe92 <memset>
 800fc8e:	4b05      	ldr	r3, [pc, #20]	; (800fca4 <std+0x38>)
 800fc90:	6263      	str	r3, [r4, #36]	; 0x24
 800fc92:	4b05      	ldr	r3, [pc, #20]	; (800fca8 <std+0x3c>)
 800fc94:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc96:	4b05      	ldr	r3, [pc, #20]	; (800fcac <std+0x40>)
 800fc98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc9a:	4b05      	ldr	r3, [pc, #20]	; (800fcb0 <std+0x44>)
 800fc9c:	6224      	str	r4, [r4, #32]
 800fc9e:	6323      	str	r3, [r4, #48]	; 0x30
 800fca0:	bd10      	pop	{r4, pc}
 800fca2:	bf00      	nop
 800fca4:	0800fe0d 	.word	0x0800fe0d
 800fca8:	0800fe2f 	.word	0x0800fe2f
 800fcac:	0800fe67 	.word	0x0800fe67
 800fcb0:	0800fe8b 	.word	0x0800fe8b

0800fcb4 <stdio_exit_handler>:
 800fcb4:	4a02      	ldr	r2, [pc, #8]	; (800fcc0 <stdio_exit_handler+0xc>)
 800fcb6:	4903      	ldr	r1, [pc, #12]	; (800fcc4 <stdio_exit_handler+0x10>)
 800fcb8:	4803      	ldr	r0, [pc, #12]	; (800fcc8 <stdio_exit_handler+0x14>)
 800fcba:	f000 b869 	b.w	800fd90 <_fwalk_sglue>
 800fcbe:	bf00      	nop
 800fcc0:	20000334 	.word	0x20000334
 800fcc4:	08011811 	.word	0x08011811
 800fcc8:	20000340 	.word	0x20000340

0800fccc <cleanup_stdio>:
 800fccc:	6841      	ldr	r1, [r0, #4]
 800fcce:	4b0c      	ldr	r3, [pc, #48]	; (800fd00 <cleanup_stdio+0x34>)
 800fcd0:	4299      	cmp	r1, r3
 800fcd2:	b510      	push	{r4, lr}
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	d001      	beq.n	800fcdc <cleanup_stdio+0x10>
 800fcd8:	f001 fd9a 	bl	8011810 <_fflush_r>
 800fcdc:	68a1      	ldr	r1, [r4, #8]
 800fcde:	4b09      	ldr	r3, [pc, #36]	; (800fd04 <cleanup_stdio+0x38>)
 800fce0:	4299      	cmp	r1, r3
 800fce2:	d002      	beq.n	800fcea <cleanup_stdio+0x1e>
 800fce4:	4620      	mov	r0, r4
 800fce6:	f001 fd93 	bl	8011810 <_fflush_r>
 800fcea:	68e1      	ldr	r1, [r4, #12]
 800fcec:	4b06      	ldr	r3, [pc, #24]	; (800fd08 <cleanup_stdio+0x3c>)
 800fcee:	4299      	cmp	r1, r3
 800fcf0:	d004      	beq.n	800fcfc <cleanup_stdio+0x30>
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcf8:	f001 bd8a 	b.w	8011810 <_fflush_r>
 800fcfc:	bd10      	pop	{r4, pc}
 800fcfe:	bf00      	nop
 800fd00:	20001724 	.word	0x20001724
 800fd04:	2000178c 	.word	0x2000178c
 800fd08:	200017f4 	.word	0x200017f4

0800fd0c <global_stdio_init.part.0>:
 800fd0c:	b510      	push	{r4, lr}
 800fd0e:	4b0b      	ldr	r3, [pc, #44]	; (800fd3c <global_stdio_init.part.0+0x30>)
 800fd10:	4c0b      	ldr	r4, [pc, #44]	; (800fd40 <global_stdio_init.part.0+0x34>)
 800fd12:	4a0c      	ldr	r2, [pc, #48]	; (800fd44 <global_stdio_init.part.0+0x38>)
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	4620      	mov	r0, r4
 800fd18:	2200      	movs	r2, #0
 800fd1a:	2104      	movs	r1, #4
 800fd1c:	f7ff ffa6 	bl	800fc6c <std>
 800fd20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fd24:	2201      	movs	r2, #1
 800fd26:	2109      	movs	r1, #9
 800fd28:	f7ff ffa0 	bl	800fc6c <std>
 800fd2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fd30:	2202      	movs	r2, #2
 800fd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd36:	2112      	movs	r1, #18
 800fd38:	f7ff bf98 	b.w	800fc6c <std>
 800fd3c:	2000185c 	.word	0x2000185c
 800fd40:	20001724 	.word	0x20001724
 800fd44:	0800fcb5 	.word	0x0800fcb5

0800fd48 <__sfp_lock_acquire>:
 800fd48:	4801      	ldr	r0, [pc, #4]	; (800fd50 <__sfp_lock_acquire+0x8>)
 800fd4a:	f000 b92f 	b.w	800ffac <__retarget_lock_acquire_recursive>
 800fd4e:	bf00      	nop
 800fd50:	20001865 	.word	0x20001865

0800fd54 <__sfp_lock_release>:
 800fd54:	4801      	ldr	r0, [pc, #4]	; (800fd5c <__sfp_lock_release+0x8>)
 800fd56:	f000 b92a 	b.w	800ffae <__retarget_lock_release_recursive>
 800fd5a:	bf00      	nop
 800fd5c:	20001865 	.word	0x20001865

0800fd60 <__sinit>:
 800fd60:	b510      	push	{r4, lr}
 800fd62:	4604      	mov	r4, r0
 800fd64:	f7ff fff0 	bl	800fd48 <__sfp_lock_acquire>
 800fd68:	6a23      	ldr	r3, [r4, #32]
 800fd6a:	b11b      	cbz	r3, 800fd74 <__sinit+0x14>
 800fd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd70:	f7ff bff0 	b.w	800fd54 <__sfp_lock_release>
 800fd74:	4b04      	ldr	r3, [pc, #16]	; (800fd88 <__sinit+0x28>)
 800fd76:	6223      	str	r3, [r4, #32]
 800fd78:	4b04      	ldr	r3, [pc, #16]	; (800fd8c <__sinit+0x2c>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1f5      	bne.n	800fd6c <__sinit+0xc>
 800fd80:	f7ff ffc4 	bl	800fd0c <global_stdio_init.part.0>
 800fd84:	e7f2      	b.n	800fd6c <__sinit+0xc>
 800fd86:	bf00      	nop
 800fd88:	0800fccd 	.word	0x0800fccd
 800fd8c:	2000185c 	.word	0x2000185c

0800fd90 <_fwalk_sglue>:
 800fd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd94:	4607      	mov	r7, r0
 800fd96:	4688      	mov	r8, r1
 800fd98:	4614      	mov	r4, r2
 800fd9a:	2600      	movs	r6, #0
 800fd9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fda0:	f1b9 0901 	subs.w	r9, r9, #1
 800fda4:	d505      	bpl.n	800fdb2 <_fwalk_sglue+0x22>
 800fda6:	6824      	ldr	r4, [r4, #0]
 800fda8:	2c00      	cmp	r4, #0
 800fdaa:	d1f7      	bne.n	800fd9c <_fwalk_sglue+0xc>
 800fdac:	4630      	mov	r0, r6
 800fdae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdb2:	89ab      	ldrh	r3, [r5, #12]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d907      	bls.n	800fdc8 <_fwalk_sglue+0x38>
 800fdb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	d003      	beq.n	800fdc8 <_fwalk_sglue+0x38>
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4638      	mov	r0, r7
 800fdc4:	47c0      	blx	r8
 800fdc6:	4306      	orrs	r6, r0
 800fdc8:	3568      	adds	r5, #104	; 0x68
 800fdca:	e7e9      	b.n	800fda0 <_fwalk_sglue+0x10>

0800fdcc <siprintf>:
 800fdcc:	b40e      	push	{r1, r2, r3}
 800fdce:	b500      	push	{lr}
 800fdd0:	b09c      	sub	sp, #112	; 0x70
 800fdd2:	ab1d      	add	r3, sp, #116	; 0x74
 800fdd4:	9002      	str	r0, [sp, #8]
 800fdd6:	9006      	str	r0, [sp, #24]
 800fdd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fddc:	4809      	ldr	r0, [pc, #36]	; (800fe04 <siprintf+0x38>)
 800fdde:	9107      	str	r1, [sp, #28]
 800fde0:	9104      	str	r1, [sp, #16]
 800fde2:	4909      	ldr	r1, [pc, #36]	; (800fe08 <siprintf+0x3c>)
 800fde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fde8:	9105      	str	r1, [sp, #20]
 800fdea:	6800      	ldr	r0, [r0, #0]
 800fdec:	9301      	str	r3, [sp, #4]
 800fdee:	a902      	add	r1, sp, #8
 800fdf0:	f001 fb8a 	bl	8011508 <_svfiprintf_r>
 800fdf4:	9b02      	ldr	r3, [sp, #8]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	701a      	strb	r2, [r3, #0]
 800fdfa:	b01c      	add	sp, #112	; 0x70
 800fdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe00:	b003      	add	sp, #12
 800fe02:	4770      	bx	lr
 800fe04:	2000038c 	.word	0x2000038c
 800fe08:	ffff0208 	.word	0xffff0208

0800fe0c <__sread>:
 800fe0c:	b510      	push	{r4, lr}
 800fe0e:	460c      	mov	r4, r1
 800fe10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe14:	f000 f86c 	bl	800fef0 <_read_r>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	bfab      	itete	ge
 800fe1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe1e:	89a3      	ldrhlt	r3, [r4, #12]
 800fe20:	181b      	addge	r3, r3, r0
 800fe22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe26:	bfac      	ite	ge
 800fe28:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe2a:	81a3      	strhlt	r3, [r4, #12]
 800fe2c:	bd10      	pop	{r4, pc}

0800fe2e <__swrite>:
 800fe2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe32:	461f      	mov	r7, r3
 800fe34:	898b      	ldrh	r3, [r1, #12]
 800fe36:	05db      	lsls	r3, r3, #23
 800fe38:	4605      	mov	r5, r0
 800fe3a:	460c      	mov	r4, r1
 800fe3c:	4616      	mov	r6, r2
 800fe3e:	d505      	bpl.n	800fe4c <__swrite+0x1e>
 800fe40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe44:	2302      	movs	r3, #2
 800fe46:	2200      	movs	r2, #0
 800fe48:	f000 f840 	bl	800fecc <_lseek_r>
 800fe4c:	89a3      	ldrh	r3, [r4, #12]
 800fe4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe56:	81a3      	strh	r3, [r4, #12]
 800fe58:	4632      	mov	r2, r6
 800fe5a:	463b      	mov	r3, r7
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe62:	f000 b867 	b.w	800ff34 <_write_r>

0800fe66 <__sseek>:
 800fe66:	b510      	push	{r4, lr}
 800fe68:	460c      	mov	r4, r1
 800fe6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe6e:	f000 f82d 	bl	800fecc <_lseek_r>
 800fe72:	1c43      	adds	r3, r0, #1
 800fe74:	89a3      	ldrh	r3, [r4, #12]
 800fe76:	bf15      	itete	ne
 800fe78:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fe82:	81a3      	strheq	r3, [r4, #12]
 800fe84:	bf18      	it	ne
 800fe86:	81a3      	strhne	r3, [r4, #12]
 800fe88:	bd10      	pop	{r4, pc}

0800fe8a <__sclose>:
 800fe8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe8e:	f000 b80d 	b.w	800feac <_close_r>

0800fe92 <memset>:
 800fe92:	4402      	add	r2, r0
 800fe94:	4603      	mov	r3, r0
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d100      	bne.n	800fe9c <memset+0xa>
 800fe9a:	4770      	bx	lr
 800fe9c:	f803 1b01 	strb.w	r1, [r3], #1
 800fea0:	e7f9      	b.n	800fe96 <memset+0x4>
	...

0800fea4 <_localeconv_r>:
 800fea4:	4800      	ldr	r0, [pc, #0]	; (800fea8 <_localeconv_r+0x4>)
 800fea6:	4770      	bx	lr
 800fea8:	20000480 	.word	0x20000480

0800feac <_close_r>:
 800feac:	b538      	push	{r3, r4, r5, lr}
 800feae:	4d06      	ldr	r5, [pc, #24]	; (800fec8 <_close_r+0x1c>)
 800feb0:	2300      	movs	r3, #0
 800feb2:	4604      	mov	r4, r0
 800feb4:	4608      	mov	r0, r1
 800feb6:	602b      	str	r3, [r5, #0]
 800feb8:	f7f6 fa0a 	bl	80062d0 <_close>
 800febc:	1c43      	adds	r3, r0, #1
 800febe:	d102      	bne.n	800fec6 <_close_r+0x1a>
 800fec0:	682b      	ldr	r3, [r5, #0]
 800fec2:	b103      	cbz	r3, 800fec6 <_close_r+0x1a>
 800fec4:	6023      	str	r3, [r4, #0]
 800fec6:	bd38      	pop	{r3, r4, r5, pc}
 800fec8:	20001860 	.word	0x20001860

0800fecc <_lseek_r>:
 800fecc:	b538      	push	{r3, r4, r5, lr}
 800fece:	4d07      	ldr	r5, [pc, #28]	; (800feec <_lseek_r+0x20>)
 800fed0:	4604      	mov	r4, r0
 800fed2:	4608      	mov	r0, r1
 800fed4:	4611      	mov	r1, r2
 800fed6:	2200      	movs	r2, #0
 800fed8:	602a      	str	r2, [r5, #0]
 800feda:	461a      	mov	r2, r3
 800fedc:	f7f6 fa1f 	bl	800631e <_lseek>
 800fee0:	1c43      	adds	r3, r0, #1
 800fee2:	d102      	bne.n	800feea <_lseek_r+0x1e>
 800fee4:	682b      	ldr	r3, [r5, #0]
 800fee6:	b103      	cbz	r3, 800feea <_lseek_r+0x1e>
 800fee8:	6023      	str	r3, [r4, #0]
 800feea:	bd38      	pop	{r3, r4, r5, pc}
 800feec:	20001860 	.word	0x20001860

0800fef0 <_read_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4d07      	ldr	r5, [pc, #28]	; (800ff10 <_read_r+0x20>)
 800fef4:	4604      	mov	r4, r0
 800fef6:	4608      	mov	r0, r1
 800fef8:	4611      	mov	r1, r2
 800fefa:	2200      	movs	r2, #0
 800fefc:	602a      	str	r2, [r5, #0]
 800fefe:	461a      	mov	r2, r3
 800ff00:	f7f6 f9ad 	bl	800625e <_read>
 800ff04:	1c43      	adds	r3, r0, #1
 800ff06:	d102      	bne.n	800ff0e <_read_r+0x1e>
 800ff08:	682b      	ldr	r3, [r5, #0]
 800ff0a:	b103      	cbz	r3, 800ff0e <_read_r+0x1e>
 800ff0c:	6023      	str	r3, [r4, #0]
 800ff0e:	bd38      	pop	{r3, r4, r5, pc}
 800ff10:	20001860 	.word	0x20001860

0800ff14 <_sbrk_r>:
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4d06      	ldr	r5, [pc, #24]	; (800ff30 <_sbrk_r+0x1c>)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	4608      	mov	r0, r1
 800ff1e:	602b      	str	r3, [r5, #0]
 800ff20:	f7f6 fa0a 	bl	8006338 <_sbrk>
 800ff24:	1c43      	adds	r3, r0, #1
 800ff26:	d102      	bne.n	800ff2e <_sbrk_r+0x1a>
 800ff28:	682b      	ldr	r3, [r5, #0]
 800ff2a:	b103      	cbz	r3, 800ff2e <_sbrk_r+0x1a>
 800ff2c:	6023      	str	r3, [r4, #0]
 800ff2e:	bd38      	pop	{r3, r4, r5, pc}
 800ff30:	20001860 	.word	0x20001860

0800ff34 <_write_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	4d07      	ldr	r5, [pc, #28]	; (800ff54 <_write_r+0x20>)
 800ff38:	4604      	mov	r4, r0
 800ff3a:	4608      	mov	r0, r1
 800ff3c:	4611      	mov	r1, r2
 800ff3e:	2200      	movs	r2, #0
 800ff40:	602a      	str	r2, [r5, #0]
 800ff42:	461a      	mov	r2, r3
 800ff44:	f7f6 f9a8 	bl	8006298 <_write>
 800ff48:	1c43      	adds	r3, r0, #1
 800ff4a:	d102      	bne.n	800ff52 <_write_r+0x1e>
 800ff4c:	682b      	ldr	r3, [r5, #0]
 800ff4e:	b103      	cbz	r3, 800ff52 <_write_r+0x1e>
 800ff50:	6023      	str	r3, [r4, #0]
 800ff52:	bd38      	pop	{r3, r4, r5, pc}
 800ff54:	20001860 	.word	0x20001860

0800ff58 <__errno>:
 800ff58:	4b01      	ldr	r3, [pc, #4]	; (800ff60 <__errno+0x8>)
 800ff5a:	6818      	ldr	r0, [r3, #0]
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	2000038c 	.word	0x2000038c

0800ff64 <__libc_init_array>:
 800ff64:	b570      	push	{r4, r5, r6, lr}
 800ff66:	4d0d      	ldr	r5, [pc, #52]	; (800ff9c <__libc_init_array+0x38>)
 800ff68:	4c0d      	ldr	r4, [pc, #52]	; (800ffa0 <__libc_init_array+0x3c>)
 800ff6a:	1b64      	subs	r4, r4, r5
 800ff6c:	10a4      	asrs	r4, r4, #2
 800ff6e:	2600      	movs	r6, #0
 800ff70:	42a6      	cmp	r6, r4
 800ff72:	d109      	bne.n	800ff88 <__libc_init_array+0x24>
 800ff74:	4d0b      	ldr	r5, [pc, #44]	; (800ffa4 <__libc_init_array+0x40>)
 800ff76:	4c0c      	ldr	r4, [pc, #48]	; (800ffa8 <__libc_init_array+0x44>)
 800ff78:	f001 ffd0 	bl	8011f1c <_init>
 800ff7c:	1b64      	subs	r4, r4, r5
 800ff7e:	10a4      	asrs	r4, r4, #2
 800ff80:	2600      	movs	r6, #0
 800ff82:	42a6      	cmp	r6, r4
 800ff84:	d105      	bne.n	800ff92 <__libc_init_array+0x2e>
 800ff86:	bd70      	pop	{r4, r5, r6, pc}
 800ff88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff8c:	4798      	blx	r3
 800ff8e:	3601      	adds	r6, #1
 800ff90:	e7ee      	b.n	800ff70 <__libc_init_array+0xc>
 800ff92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff96:	4798      	blx	r3
 800ff98:	3601      	adds	r6, #1
 800ff9a:	e7f2      	b.n	800ff82 <__libc_init_array+0x1e>
 800ff9c:	080127a4 	.word	0x080127a4
 800ffa0:	080127a4 	.word	0x080127a4
 800ffa4:	080127a4 	.word	0x080127a4
 800ffa8:	080127a8 	.word	0x080127a8

0800ffac <__retarget_lock_acquire_recursive>:
 800ffac:	4770      	bx	lr

0800ffae <__retarget_lock_release_recursive>:
 800ffae:	4770      	bx	lr

0800ffb0 <memcpy>:
 800ffb0:	440a      	add	r2, r1
 800ffb2:	4291      	cmp	r1, r2
 800ffb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ffb8:	d100      	bne.n	800ffbc <memcpy+0xc>
 800ffba:	4770      	bx	lr
 800ffbc:	b510      	push	{r4, lr}
 800ffbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffc6:	4291      	cmp	r1, r2
 800ffc8:	d1f9      	bne.n	800ffbe <memcpy+0xe>
 800ffca:	bd10      	pop	{r4, pc}

0800ffcc <quorem>:
 800ffcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd0:	6903      	ldr	r3, [r0, #16]
 800ffd2:	690c      	ldr	r4, [r1, #16]
 800ffd4:	42a3      	cmp	r3, r4
 800ffd6:	4607      	mov	r7, r0
 800ffd8:	db7e      	blt.n	80100d8 <quorem+0x10c>
 800ffda:	3c01      	subs	r4, #1
 800ffdc:	f101 0814 	add.w	r8, r1, #20
 800ffe0:	f100 0514 	add.w	r5, r0, #20
 800ffe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ffee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fff2:	3301      	adds	r3, #1
 800fff4:	429a      	cmp	r2, r3
 800fff6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fffa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fffe:	fbb2 f6f3 	udiv	r6, r2, r3
 8010002:	d331      	bcc.n	8010068 <quorem+0x9c>
 8010004:	f04f 0e00 	mov.w	lr, #0
 8010008:	4640      	mov	r0, r8
 801000a:	46ac      	mov	ip, r5
 801000c:	46f2      	mov	sl, lr
 801000e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010012:	b293      	uxth	r3, r2
 8010014:	fb06 e303 	mla	r3, r6, r3, lr
 8010018:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801001c:	0c1a      	lsrs	r2, r3, #16
 801001e:	b29b      	uxth	r3, r3
 8010020:	ebaa 0303 	sub.w	r3, sl, r3
 8010024:	f8dc a000 	ldr.w	sl, [ip]
 8010028:	fa13 f38a 	uxtah	r3, r3, sl
 801002c:	fb06 220e 	mla	r2, r6, lr, r2
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	9b00      	ldr	r3, [sp, #0]
 8010034:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010038:	b292      	uxth	r2, r2
 801003a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801003e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010042:	f8bd 3000 	ldrh.w	r3, [sp]
 8010046:	4581      	cmp	r9, r0
 8010048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801004c:	f84c 3b04 	str.w	r3, [ip], #4
 8010050:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010054:	d2db      	bcs.n	801000e <quorem+0x42>
 8010056:	f855 300b 	ldr.w	r3, [r5, fp]
 801005a:	b92b      	cbnz	r3, 8010068 <quorem+0x9c>
 801005c:	9b01      	ldr	r3, [sp, #4]
 801005e:	3b04      	subs	r3, #4
 8010060:	429d      	cmp	r5, r3
 8010062:	461a      	mov	r2, r3
 8010064:	d32c      	bcc.n	80100c0 <quorem+0xf4>
 8010066:	613c      	str	r4, [r7, #16]
 8010068:	4638      	mov	r0, r7
 801006a:	f001 f8f3 	bl	8011254 <__mcmp>
 801006e:	2800      	cmp	r0, #0
 8010070:	db22      	blt.n	80100b8 <quorem+0xec>
 8010072:	3601      	adds	r6, #1
 8010074:	4629      	mov	r1, r5
 8010076:	2000      	movs	r0, #0
 8010078:	f858 2b04 	ldr.w	r2, [r8], #4
 801007c:	f8d1 c000 	ldr.w	ip, [r1]
 8010080:	b293      	uxth	r3, r2
 8010082:	1ac3      	subs	r3, r0, r3
 8010084:	0c12      	lsrs	r2, r2, #16
 8010086:	fa13 f38c 	uxtah	r3, r3, ip
 801008a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801008e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010092:	b29b      	uxth	r3, r3
 8010094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010098:	45c1      	cmp	r9, r8
 801009a:	f841 3b04 	str.w	r3, [r1], #4
 801009e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80100a2:	d2e9      	bcs.n	8010078 <quorem+0xac>
 80100a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100ac:	b922      	cbnz	r2, 80100b8 <quorem+0xec>
 80100ae:	3b04      	subs	r3, #4
 80100b0:	429d      	cmp	r5, r3
 80100b2:	461a      	mov	r2, r3
 80100b4:	d30a      	bcc.n	80100cc <quorem+0x100>
 80100b6:	613c      	str	r4, [r7, #16]
 80100b8:	4630      	mov	r0, r6
 80100ba:	b003      	add	sp, #12
 80100bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c0:	6812      	ldr	r2, [r2, #0]
 80100c2:	3b04      	subs	r3, #4
 80100c4:	2a00      	cmp	r2, #0
 80100c6:	d1ce      	bne.n	8010066 <quorem+0x9a>
 80100c8:	3c01      	subs	r4, #1
 80100ca:	e7c9      	b.n	8010060 <quorem+0x94>
 80100cc:	6812      	ldr	r2, [r2, #0]
 80100ce:	3b04      	subs	r3, #4
 80100d0:	2a00      	cmp	r2, #0
 80100d2:	d1f0      	bne.n	80100b6 <quorem+0xea>
 80100d4:	3c01      	subs	r4, #1
 80100d6:	e7eb      	b.n	80100b0 <quorem+0xe4>
 80100d8:	2000      	movs	r0, #0
 80100da:	e7ee      	b.n	80100ba <quorem+0xee>
 80100dc:	0000      	movs	r0, r0
	...

080100e0 <_dtoa_r>:
 80100e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e4:	ed2d 8b04 	vpush	{d8-d9}
 80100e8:	69c5      	ldr	r5, [r0, #28]
 80100ea:	b093      	sub	sp, #76	; 0x4c
 80100ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80100f0:	ec57 6b10 	vmov	r6, r7, d0
 80100f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80100f8:	9107      	str	r1, [sp, #28]
 80100fa:	4604      	mov	r4, r0
 80100fc:	920a      	str	r2, [sp, #40]	; 0x28
 80100fe:	930d      	str	r3, [sp, #52]	; 0x34
 8010100:	b975      	cbnz	r5, 8010120 <_dtoa_r+0x40>
 8010102:	2010      	movs	r0, #16
 8010104:	f7ff f890 	bl	800f228 <malloc>
 8010108:	4602      	mov	r2, r0
 801010a:	61e0      	str	r0, [r4, #28]
 801010c:	b920      	cbnz	r0, 8010118 <_dtoa_r+0x38>
 801010e:	4bae      	ldr	r3, [pc, #696]	; (80103c8 <_dtoa_r+0x2e8>)
 8010110:	21ef      	movs	r1, #239	; 0xef
 8010112:	48ae      	ldr	r0, [pc, #696]	; (80103cc <_dtoa_r+0x2ec>)
 8010114:	f001 fbbe 	bl	8011894 <__assert_func>
 8010118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801011c:	6005      	str	r5, [r0, #0]
 801011e:	60c5      	str	r5, [r0, #12]
 8010120:	69e3      	ldr	r3, [r4, #28]
 8010122:	6819      	ldr	r1, [r3, #0]
 8010124:	b151      	cbz	r1, 801013c <_dtoa_r+0x5c>
 8010126:	685a      	ldr	r2, [r3, #4]
 8010128:	604a      	str	r2, [r1, #4]
 801012a:	2301      	movs	r3, #1
 801012c:	4093      	lsls	r3, r2
 801012e:	608b      	str	r3, [r1, #8]
 8010130:	4620      	mov	r0, r4
 8010132:	f000 fe53 	bl	8010ddc <_Bfree>
 8010136:	69e3      	ldr	r3, [r4, #28]
 8010138:	2200      	movs	r2, #0
 801013a:	601a      	str	r2, [r3, #0]
 801013c:	1e3b      	subs	r3, r7, #0
 801013e:	bfbb      	ittet	lt
 8010140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010144:	9303      	strlt	r3, [sp, #12]
 8010146:	2300      	movge	r3, #0
 8010148:	2201      	movlt	r2, #1
 801014a:	bfac      	ite	ge
 801014c:	f8c8 3000 	strge.w	r3, [r8]
 8010150:	f8c8 2000 	strlt.w	r2, [r8]
 8010154:	4b9e      	ldr	r3, [pc, #632]	; (80103d0 <_dtoa_r+0x2f0>)
 8010156:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801015a:	ea33 0308 	bics.w	r3, r3, r8
 801015e:	d11b      	bne.n	8010198 <_dtoa_r+0xb8>
 8010160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010162:	f242 730f 	movw	r3, #9999	; 0x270f
 8010166:	6013      	str	r3, [r2, #0]
 8010168:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801016c:	4333      	orrs	r3, r6
 801016e:	f000 8593 	beq.w	8010c98 <_dtoa_r+0xbb8>
 8010172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010174:	b963      	cbnz	r3, 8010190 <_dtoa_r+0xb0>
 8010176:	4b97      	ldr	r3, [pc, #604]	; (80103d4 <_dtoa_r+0x2f4>)
 8010178:	e027      	b.n	80101ca <_dtoa_r+0xea>
 801017a:	4b97      	ldr	r3, [pc, #604]	; (80103d8 <_dtoa_r+0x2f8>)
 801017c:	9300      	str	r3, [sp, #0]
 801017e:	3308      	adds	r3, #8
 8010180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010182:	6013      	str	r3, [r2, #0]
 8010184:	9800      	ldr	r0, [sp, #0]
 8010186:	b013      	add	sp, #76	; 0x4c
 8010188:	ecbd 8b04 	vpop	{d8-d9}
 801018c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010190:	4b90      	ldr	r3, [pc, #576]	; (80103d4 <_dtoa_r+0x2f4>)
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	3303      	adds	r3, #3
 8010196:	e7f3      	b.n	8010180 <_dtoa_r+0xa0>
 8010198:	ed9d 7b02 	vldr	d7, [sp, #8]
 801019c:	2200      	movs	r2, #0
 801019e:	ec51 0b17 	vmov	r0, r1, d7
 80101a2:	eeb0 8a47 	vmov.f32	s16, s14
 80101a6:	eef0 8a67 	vmov.f32	s17, s15
 80101aa:	2300      	movs	r3, #0
 80101ac:	f7f0 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80101b0:	4681      	mov	r9, r0
 80101b2:	b160      	cbz	r0, 80101ce <_dtoa_r+0xee>
 80101b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101b6:	2301      	movs	r3, #1
 80101b8:	6013      	str	r3, [r2, #0]
 80101ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f000 8568 	beq.w	8010c92 <_dtoa_r+0xbb2>
 80101c2:	4b86      	ldr	r3, [pc, #536]	; (80103dc <_dtoa_r+0x2fc>)
 80101c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80101c6:	6013      	str	r3, [r2, #0]
 80101c8:	3b01      	subs	r3, #1
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	e7da      	b.n	8010184 <_dtoa_r+0xa4>
 80101ce:	aa10      	add	r2, sp, #64	; 0x40
 80101d0:	a911      	add	r1, sp, #68	; 0x44
 80101d2:	4620      	mov	r0, r4
 80101d4:	eeb0 0a48 	vmov.f32	s0, s16
 80101d8:	eef0 0a68 	vmov.f32	s1, s17
 80101dc:	f001 f8e0 	bl	80113a0 <__d2b>
 80101e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80101e4:	4682      	mov	sl, r0
 80101e6:	2d00      	cmp	r5, #0
 80101e8:	d07f      	beq.n	80102ea <_dtoa_r+0x20a>
 80101ea:	ee18 3a90 	vmov	r3, s17
 80101ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80101f6:	ec51 0b18 	vmov	r0, r1, d8
 80101fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80101fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010202:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010206:	4619      	mov	r1, r3
 8010208:	2200      	movs	r2, #0
 801020a:	4b75      	ldr	r3, [pc, #468]	; (80103e0 <_dtoa_r+0x300>)
 801020c:	f7f0 f83c 	bl	8000288 <__aeabi_dsub>
 8010210:	a367      	add	r3, pc, #412	; (adr r3, 80103b0 <_dtoa_r+0x2d0>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	f7f0 f9ef 	bl	80005f8 <__aeabi_dmul>
 801021a:	a367      	add	r3, pc, #412	; (adr r3, 80103b8 <_dtoa_r+0x2d8>)
 801021c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010220:	f7f0 f834 	bl	800028c <__adddf3>
 8010224:	4606      	mov	r6, r0
 8010226:	4628      	mov	r0, r5
 8010228:	460f      	mov	r7, r1
 801022a:	f7f0 f97b 	bl	8000524 <__aeabi_i2d>
 801022e:	a364      	add	r3, pc, #400	; (adr r3, 80103c0 <_dtoa_r+0x2e0>)
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	f7f0 f9e0 	bl	80005f8 <__aeabi_dmul>
 8010238:	4602      	mov	r2, r0
 801023a:	460b      	mov	r3, r1
 801023c:	4630      	mov	r0, r6
 801023e:	4639      	mov	r1, r7
 8010240:	f7f0 f824 	bl	800028c <__adddf3>
 8010244:	4606      	mov	r6, r0
 8010246:	460f      	mov	r7, r1
 8010248:	f7f0 fc86 	bl	8000b58 <__aeabi_d2iz>
 801024c:	2200      	movs	r2, #0
 801024e:	4683      	mov	fp, r0
 8010250:	2300      	movs	r3, #0
 8010252:	4630      	mov	r0, r6
 8010254:	4639      	mov	r1, r7
 8010256:	f7f0 fc41 	bl	8000adc <__aeabi_dcmplt>
 801025a:	b148      	cbz	r0, 8010270 <_dtoa_r+0x190>
 801025c:	4658      	mov	r0, fp
 801025e:	f7f0 f961 	bl	8000524 <__aeabi_i2d>
 8010262:	4632      	mov	r2, r6
 8010264:	463b      	mov	r3, r7
 8010266:	f7f0 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801026a:	b908      	cbnz	r0, 8010270 <_dtoa_r+0x190>
 801026c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010270:	f1bb 0f16 	cmp.w	fp, #22
 8010274:	d857      	bhi.n	8010326 <_dtoa_r+0x246>
 8010276:	4b5b      	ldr	r3, [pc, #364]	; (80103e4 <_dtoa_r+0x304>)
 8010278:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801027c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010280:	ec51 0b18 	vmov	r0, r1, d8
 8010284:	f7f0 fc2a 	bl	8000adc <__aeabi_dcmplt>
 8010288:	2800      	cmp	r0, #0
 801028a:	d04e      	beq.n	801032a <_dtoa_r+0x24a>
 801028c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010290:	2300      	movs	r3, #0
 8010292:	930c      	str	r3, [sp, #48]	; 0x30
 8010294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010296:	1b5b      	subs	r3, r3, r5
 8010298:	1e5a      	subs	r2, r3, #1
 801029a:	bf45      	ittet	mi
 801029c:	f1c3 0301 	rsbmi	r3, r3, #1
 80102a0:	9305      	strmi	r3, [sp, #20]
 80102a2:	2300      	movpl	r3, #0
 80102a4:	2300      	movmi	r3, #0
 80102a6:	9206      	str	r2, [sp, #24]
 80102a8:	bf54      	ite	pl
 80102aa:	9305      	strpl	r3, [sp, #20]
 80102ac:	9306      	strmi	r3, [sp, #24]
 80102ae:	f1bb 0f00 	cmp.w	fp, #0
 80102b2:	db3c      	blt.n	801032e <_dtoa_r+0x24e>
 80102b4:	9b06      	ldr	r3, [sp, #24]
 80102b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80102ba:	445b      	add	r3, fp
 80102bc:	9306      	str	r3, [sp, #24]
 80102be:	2300      	movs	r3, #0
 80102c0:	9308      	str	r3, [sp, #32]
 80102c2:	9b07      	ldr	r3, [sp, #28]
 80102c4:	2b09      	cmp	r3, #9
 80102c6:	d868      	bhi.n	801039a <_dtoa_r+0x2ba>
 80102c8:	2b05      	cmp	r3, #5
 80102ca:	bfc4      	itt	gt
 80102cc:	3b04      	subgt	r3, #4
 80102ce:	9307      	strgt	r3, [sp, #28]
 80102d0:	9b07      	ldr	r3, [sp, #28]
 80102d2:	f1a3 0302 	sub.w	r3, r3, #2
 80102d6:	bfcc      	ite	gt
 80102d8:	2500      	movgt	r5, #0
 80102da:	2501      	movle	r5, #1
 80102dc:	2b03      	cmp	r3, #3
 80102de:	f200 8085 	bhi.w	80103ec <_dtoa_r+0x30c>
 80102e2:	e8df f003 	tbb	[pc, r3]
 80102e6:	3b2e      	.short	0x3b2e
 80102e8:	5839      	.short	0x5839
 80102ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80102ee:	441d      	add	r5, r3
 80102f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80102f4:	2b20      	cmp	r3, #32
 80102f6:	bfc1      	itttt	gt
 80102f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80102fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8010300:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010304:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010308:	bfd6      	itet	le
 801030a:	f1c3 0320 	rsble	r3, r3, #32
 801030e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010312:	fa06 f003 	lslle.w	r0, r6, r3
 8010316:	f7f0 f8f5 	bl	8000504 <__aeabi_ui2d>
 801031a:	2201      	movs	r2, #1
 801031c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010320:	3d01      	subs	r5, #1
 8010322:	920e      	str	r2, [sp, #56]	; 0x38
 8010324:	e76f      	b.n	8010206 <_dtoa_r+0x126>
 8010326:	2301      	movs	r3, #1
 8010328:	e7b3      	b.n	8010292 <_dtoa_r+0x1b2>
 801032a:	900c      	str	r0, [sp, #48]	; 0x30
 801032c:	e7b2      	b.n	8010294 <_dtoa_r+0x1b4>
 801032e:	9b05      	ldr	r3, [sp, #20]
 8010330:	eba3 030b 	sub.w	r3, r3, fp
 8010334:	9305      	str	r3, [sp, #20]
 8010336:	f1cb 0300 	rsb	r3, fp, #0
 801033a:	9308      	str	r3, [sp, #32]
 801033c:	2300      	movs	r3, #0
 801033e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010340:	e7bf      	b.n	80102c2 <_dtoa_r+0x1e2>
 8010342:	2300      	movs	r3, #0
 8010344:	9309      	str	r3, [sp, #36]	; 0x24
 8010346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010348:	2b00      	cmp	r3, #0
 801034a:	dc52      	bgt.n	80103f2 <_dtoa_r+0x312>
 801034c:	2301      	movs	r3, #1
 801034e:	9301      	str	r3, [sp, #4]
 8010350:	9304      	str	r3, [sp, #16]
 8010352:	461a      	mov	r2, r3
 8010354:	920a      	str	r2, [sp, #40]	; 0x28
 8010356:	e00b      	b.n	8010370 <_dtoa_r+0x290>
 8010358:	2301      	movs	r3, #1
 801035a:	e7f3      	b.n	8010344 <_dtoa_r+0x264>
 801035c:	2300      	movs	r3, #0
 801035e:	9309      	str	r3, [sp, #36]	; 0x24
 8010360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010362:	445b      	add	r3, fp
 8010364:	9301      	str	r3, [sp, #4]
 8010366:	3301      	adds	r3, #1
 8010368:	2b01      	cmp	r3, #1
 801036a:	9304      	str	r3, [sp, #16]
 801036c:	bfb8      	it	lt
 801036e:	2301      	movlt	r3, #1
 8010370:	69e0      	ldr	r0, [r4, #28]
 8010372:	2100      	movs	r1, #0
 8010374:	2204      	movs	r2, #4
 8010376:	f102 0614 	add.w	r6, r2, #20
 801037a:	429e      	cmp	r6, r3
 801037c:	d93d      	bls.n	80103fa <_dtoa_r+0x31a>
 801037e:	6041      	str	r1, [r0, #4]
 8010380:	4620      	mov	r0, r4
 8010382:	f000 fceb 	bl	8010d5c <_Balloc>
 8010386:	9000      	str	r0, [sp, #0]
 8010388:	2800      	cmp	r0, #0
 801038a:	d139      	bne.n	8010400 <_dtoa_r+0x320>
 801038c:	4b16      	ldr	r3, [pc, #88]	; (80103e8 <_dtoa_r+0x308>)
 801038e:	4602      	mov	r2, r0
 8010390:	f240 11af 	movw	r1, #431	; 0x1af
 8010394:	e6bd      	b.n	8010112 <_dtoa_r+0x32>
 8010396:	2301      	movs	r3, #1
 8010398:	e7e1      	b.n	801035e <_dtoa_r+0x27e>
 801039a:	2501      	movs	r5, #1
 801039c:	2300      	movs	r3, #0
 801039e:	9307      	str	r3, [sp, #28]
 80103a0:	9509      	str	r5, [sp, #36]	; 0x24
 80103a2:	f04f 33ff 	mov.w	r3, #4294967295
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	9304      	str	r3, [sp, #16]
 80103aa:	2200      	movs	r2, #0
 80103ac:	2312      	movs	r3, #18
 80103ae:	e7d1      	b.n	8010354 <_dtoa_r+0x274>
 80103b0:	636f4361 	.word	0x636f4361
 80103b4:	3fd287a7 	.word	0x3fd287a7
 80103b8:	8b60c8b3 	.word	0x8b60c8b3
 80103bc:	3fc68a28 	.word	0x3fc68a28
 80103c0:	509f79fb 	.word	0x509f79fb
 80103c4:	3fd34413 	.word	0x3fd34413
 80103c8:	0801246d 	.word	0x0801246d
 80103cc:	08012484 	.word	0x08012484
 80103d0:	7ff00000 	.word	0x7ff00000
 80103d4:	08012469 	.word	0x08012469
 80103d8:	08012460 	.word	0x08012460
 80103dc:	0801243d 	.word	0x0801243d
 80103e0:	3ff80000 	.word	0x3ff80000
 80103e4:	08012570 	.word	0x08012570
 80103e8:	080124dc 	.word	0x080124dc
 80103ec:	2301      	movs	r3, #1
 80103ee:	9309      	str	r3, [sp, #36]	; 0x24
 80103f0:	e7d7      	b.n	80103a2 <_dtoa_r+0x2c2>
 80103f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103f4:	9301      	str	r3, [sp, #4]
 80103f6:	9304      	str	r3, [sp, #16]
 80103f8:	e7ba      	b.n	8010370 <_dtoa_r+0x290>
 80103fa:	3101      	adds	r1, #1
 80103fc:	0052      	lsls	r2, r2, #1
 80103fe:	e7ba      	b.n	8010376 <_dtoa_r+0x296>
 8010400:	69e3      	ldr	r3, [r4, #28]
 8010402:	9a00      	ldr	r2, [sp, #0]
 8010404:	601a      	str	r2, [r3, #0]
 8010406:	9b04      	ldr	r3, [sp, #16]
 8010408:	2b0e      	cmp	r3, #14
 801040a:	f200 80a8 	bhi.w	801055e <_dtoa_r+0x47e>
 801040e:	2d00      	cmp	r5, #0
 8010410:	f000 80a5 	beq.w	801055e <_dtoa_r+0x47e>
 8010414:	f1bb 0f00 	cmp.w	fp, #0
 8010418:	dd38      	ble.n	801048c <_dtoa_r+0x3ac>
 801041a:	4bc0      	ldr	r3, [pc, #768]	; (801071c <_dtoa_r+0x63c>)
 801041c:	f00b 020f 	and.w	r2, fp, #15
 8010420:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010424:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010428:	e9d3 6700 	ldrd	r6, r7, [r3]
 801042c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010430:	d019      	beq.n	8010466 <_dtoa_r+0x386>
 8010432:	4bbb      	ldr	r3, [pc, #748]	; (8010720 <_dtoa_r+0x640>)
 8010434:	ec51 0b18 	vmov	r0, r1, d8
 8010438:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801043c:	f7f0 fa06 	bl	800084c <__aeabi_ddiv>
 8010440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010444:	f008 080f 	and.w	r8, r8, #15
 8010448:	2503      	movs	r5, #3
 801044a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010720 <_dtoa_r+0x640>
 801044e:	f1b8 0f00 	cmp.w	r8, #0
 8010452:	d10a      	bne.n	801046a <_dtoa_r+0x38a>
 8010454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010458:	4632      	mov	r2, r6
 801045a:	463b      	mov	r3, r7
 801045c:	f7f0 f9f6 	bl	800084c <__aeabi_ddiv>
 8010460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010464:	e02b      	b.n	80104be <_dtoa_r+0x3de>
 8010466:	2502      	movs	r5, #2
 8010468:	e7ef      	b.n	801044a <_dtoa_r+0x36a>
 801046a:	f018 0f01 	tst.w	r8, #1
 801046e:	d008      	beq.n	8010482 <_dtoa_r+0x3a2>
 8010470:	4630      	mov	r0, r6
 8010472:	4639      	mov	r1, r7
 8010474:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010478:	f7f0 f8be 	bl	80005f8 <__aeabi_dmul>
 801047c:	3501      	adds	r5, #1
 801047e:	4606      	mov	r6, r0
 8010480:	460f      	mov	r7, r1
 8010482:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010486:	f109 0908 	add.w	r9, r9, #8
 801048a:	e7e0      	b.n	801044e <_dtoa_r+0x36e>
 801048c:	f000 809f 	beq.w	80105ce <_dtoa_r+0x4ee>
 8010490:	f1cb 0600 	rsb	r6, fp, #0
 8010494:	4ba1      	ldr	r3, [pc, #644]	; (801071c <_dtoa_r+0x63c>)
 8010496:	4fa2      	ldr	r7, [pc, #648]	; (8010720 <_dtoa_r+0x640>)
 8010498:	f006 020f 	and.w	r2, r6, #15
 801049c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a4:	ec51 0b18 	vmov	r0, r1, d8
 80104a8:	f7f0 f8a6 	bl	80005f8 <__aeabi_dmul>
 80104ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104b0:	1136      	asrs	r6, r6, #4
 80104b2:	2300      	movs	r3, #0
 80104b4:	2502      	movs	r5, #2
 80104b6:	2e00      	cmp	r6, #0
 80104b8:	d17e      	bne.n	80105b8 <_dtoa_r+0x4d8>
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d1d0      	bne.n	8010460 <_dtoa_r+0x380>
 80104be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 8084 	beq.w	80105d2 <_dtoa_r+0x4f2>
 80104ca:	4b96      	ldr	r3, [pc, #600]	; (8010724 <_dtoa_r+0x644>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	4640      	mov	r0, r8
 80104d0:	4649      	mov	r1, r9
 80104d2:	f7f0 fb03 	bl	8000adc <__aeabi_dcmplt>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d07b      	beq.n	80105d2 <_dtoa_r+0x4f2>
 80104da:	9b04      	ldr	r3, [sp, #16]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d078      	beq.n	80105d2 <_dtoa_r+0x4f2>
 80104e0:	9b01      	ldr	r3, [sp, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	dd39      	ble.n	801055a <_dtoa_r+0x47a>
 80104e6:	4b90      	ldr	r3, [pc, #576]	; (8010728 <_dtoa_r+0x648>)
 80104e8:	2200      	movs	r2, #0
 80104ea:	4640      	mov	r0, r8
 80104ec:	4649      	mov	r1, r9
 80104ee:	f7f0 f883 	bl	80005f8 <__aeabi_dmul>
 80104f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104f6:	9e01      	ldr	r6, [sp, #4]
 80104f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80104fc:	3501      	adds	r5, #1
 80104fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010502:	4628      	mov	r0, r5
 8010504:	f7f0 f80e 	bl	8000524 <__aeabi_i2d>
 8010508:	4642      	mov	r2, r8
 801050a:	464b      	mov	r3, r9
 801050c:	f7f0 f874 	bl	80005f8 <__aeabi_dmul>
 8010510:	4b86      	ldr	r3, [pc, #536]	; (801072c <_dtoa_r+0x64c>)
 8010512:	2200      	movs	r2, #0
 8010514:	f7ef feba 	bl	800028c <__adddf3>
 8010518:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801051c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010520:	9303      	str	r3, [sp, #12]
 8010522:	2e00      	cmp	r6, #0
 8010524:	d158      	bne.n	80105d8 <_dtoa_r+0x4f8>
 8010526:	4b82      	ldr	r3, [pc, #520]	; (8010730 <_dtoa_r+0x650>)
 8010528:	2200      	movs	r2, #0
 801052a:	4640      	mov	r0, r8
 801052c:	4649      	mov	r1, r9
 801052e:	f7ef feab 	bl	8000288 <__aeabi_dsub>
 8010532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010536:	4680      	mov	r8, r0
 8010538:	4689      	mov	r9, r1
 801053a:	f7f0 faed 	bl	8000b18 <__aeabi_dcmpgt>
 801053e:	2800      	cmp	r0, #0
 8010540:	f040 8296 	bne.w	8010a70 <_dtoa_r+0x990>
 8010544:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010548:	4640      	mov	r0, r8
 801054a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801054e:	4649      	mov	r1, r9
 8010550:	f7f0 fac4 	bl	8000adc <__aeabi_dcmplt>
 8010554:	2800      	cmp	r0, #0
 8010556:	f040 8289 	bne.w	8010a6c <_dtoa_r+0x98c>
 801055a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801055e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010560:	2b00      	cmp	r3, #0
 8010562:	f2c0 814e 	blt.w	8010802 <_dtoa_r+0x722>
 8010566:	f1bb 0f0e 	cmp.w	fp, #14
 801056a:	f300 814a 	bgt.w	8010802 <_dtoa_r+0x722>
 801056e:	4b6b      	ldr	r3, [pc, #428]	; (801071c <_dtoa_r+0x63c>)
 8010570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801057a:	2b00      	cmp	r3, #0
 801057c:	f280 80dc 	bge.w	8010738 <_dtoa_r+0x658>
 8010580:	9b04      	ldr	r3, [sp, #16]
 8010582:	2b00      	cmp	r3, #0
 8010584:	f300 80d8 	bgt.w	8010738 <_dtoa_r+0x658>
 8010588:	f040 826f 	bne.w	8010a6a <_dtoa_r+0x98a>
 801058c:	4b68      	ldr	r3, [pc, #416]	; (8010730 <_dtoa_r+0x650>)
 801058e:	2200      	movs	r2, #0
 8010590:	4640      	mov	r0, r8
 8010592:	4649      	mov	r1, r9
 8010594:	f7f0 f830 	bl	80005f8 <__aeabi_dmul>
 8010598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801059c:	f7f0 fab2 	bl	8000b04 <__aeabi_dcmpge>
 80105a0:	9e04      	ldr	r6, [sp, #16]
 80105a2:	4637      	mov	r7, r6
 80105a4:	2800      	cmp	r0, #0
 80105a6:	f040 8245 	bne.w	8010a34 <_dtoa_r+0x954>
 80105aa:	9d00      	ldr	r5, [sp, #0]
 80105ac:	2331      	movs	r3, #49	; 0x31
 80105ae:	f805 3b01 	strb.w	r3, [r5], #1
 80105b2:	f10b 0b01 	add.w	fp, fp, #1
 80105b6:	e241      	b.n	8010a3c <_dtoa_r+0x95c>
 80105b8:	07f2      	lsls	r2, r6, #31
 80105ba:	d505      	bpl.n	80105c8 <_dtoa_r+0x4e8>
 80105bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105c0:	f7f0 f81a 	bl	80005f8 <__aeabi_dmul>
 80105c4:	3501      	adds	r5, #1
 80105c6:	2301      	movs	r3, #1
 80105c8:	1076      	asrs	r6, r6, #1
 80105ca:	3708      	adds	r7, #8
 80105cc:	e773      	b.n	80104b6 <_dtoa_r+0x3d6>
 80105ce:	2502      	movs	r5, #2
 80105d0:	e775      	b.n	80104be <_dtoa_r+0x3de>
 80105d2:	9e04      	ldr	r6, [sp, #16]
 80105d4:	465f      	mov	r7, fp
 80105d6:	e792      	b.n	80104fe <_dtoa_r+0x41e>
 80105d8:	9900      	ldr	r1, [sp, #0]
 80105da:	4b50      	ldr	r3, [pc, #320]	; (801071c <_dtoa_r+0x63c>)
 80105dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105e0:	4431      	add	r1, r6
 80105e2:	9102      	str	r1, [sp, #8]
 80105e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105e6:	eeb0 9a47 	vmov.f32	s18, s14
 80105ea:	eef0 9a67 	vmov.f32	s19, s15
 80105ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80105f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105f6:	2900      	cmp	r1, #0
 80105f8:	d044      	beq.n	8010684 <_dtoa_r+0x5a4>
 80105fa:	494e      	ldr	r1, [pc, #312]	; (8010734 <_dtoa_r+0x654>)
 80105fc:	2000      	movs	r0, #0
 80105fe:	f7f0 f925 	bl	800084c <__aeabi_ddiv>
 8010602:	ec53 2b19 	vmov	r2, r3, d9
 8010606:	f7ef fe3f 	bl	8000288 <__aeabi_dsub>
 801060a:	9d00      	ldr	r5, [sp, #0]
 801060c:	ec41 0b19 	vmov	d9, r0, r1
 8010610:	4649      	mov	r1, r9
 8010612:	4640      	mov	r0, r8
 8010614:	f7f0 faa0 	bl	8000b58 <__aeabi_d2iz>
 8010618:	4606      	mov	r6, r0
 801061a:	f7ef ff83 	bl	8000524 <__aeabi_i2d>
 801061e:	4602      	mov	r2, r0
 8010620:	460b      	mov	r3, r1
 8010622:	4640      	mov	r0, r8
 8010624:	4649      	mov	r1, r9
 8010626:	f7ef fe2f 	bl	8000288 <__aeabi_dsub>
 801062a:	3630      	adds	r6, #48	; 0x30
 801062c:	f805 6b01 	strb.w	r6, [r5], #1
 8010630:	ec53 2b19 	vmov	r2, r3, d9
 8010634:	4680      	mov	r8, r0
 8010636:	4689      	mov	r9, r1
 8010638:	f7f0 fa50 	bl	8000adc <__aeabi_dcmplt>
 801063c:	2800      	cmp	r0, #0
 801063e:	d164      	bne.n	801070a <_dtoa_r+0x62a>
 8010640:	4642      	mov	r2, r8
 8010642:	464b      	mov	r3, r9
 8010644:	4937      	ldr	r1, [pc, #220]	; (8010724 <_dtoa_r+0x644>)
 8010646:	2000      	movs	r0, #0
 8010648:	f7ef fe1e 	bl	8000288 <__aeabi_dsub>
 801064c:	ec53 2b19 	vmov	r2, r3, d9
 8010650:	f7f0 fa44 	bl	8000adc <__aeabi_dcmplt>
 8010654:	2800      	cmp	r0, #0
 8010656:	f040 80b6 	bne.w	80107c6 <_dtoa_r+0x6e6>
 801065a:	9b02      	ldr	r3, [sp, #8]
 801065c:	429d      	cmp	r5, r3
 801065e:	f43f af7c 	beq.w	801055a <_dtoa_r+0x47a>
 8010662:	4b31      	ldr	r3, [pc, #196]	; (8010728 <_dtoa_r+0x648>)
 8010664:	ec51 0b19 	vmov	r0, r1, d9
 8010668:	2200      	movs	r2, #0
 801066a:	f7ef ffc5 	bl	80005f8 <__aeabi_dmul>
 801066e:	4b2e      	ldr	r3, [pc, #184]	; (8010728 <_dtoa_r+0x648>)
 8010670:	ec41 0b19 	vmov	d9, r0, r1
 8010674:	2200      	movs	r2, #0
 8010676:	4640      	mov	r0, r8
 8010678:	4649      	mov	r1, r9
 801067a:	f7ef ffbd 	bl	80005f8 <__aeabi_dmul>
 801067e:	4680      	mov	r8, r0
 8010680:	4689      	mov	r9, r1
 8010682:	e7c5      	b.n	8010610 <_dtoa_r+0x530>
 8010684:	ec51 0b17 	vmov	r0, r1, d7
 8010688:	f7ef ffb6 	bl	80005f8 <__aeabi_dmul>
 801068c:	9b02      	ldr	r3, [sp, #8]
 801068e:	9d00      	ldr	r5, [sp, #0]
 8010690:	930f      	str	r3, [sp, #60]	; 0x3c
 8010692:	ec41 0b19 	vmov	d9, r0, r1
 8010696:	4649      	mov	r1, r9
 8010698:	4640      	mov	r0, r8
 801069a:	f7f0 fa5d 	bl	8000b58 <__aeabi_d2iz>
 801069e:	4606      	mov	r6, r0
 80106a0:	f7ef ff40 	bl	8000524 <__aeabi_i2d>
 80106a4:	3630      	adds	r6, #48	; 0x30
 80106a6:	4602      	mov	r2, r0
 80106a8:	460b      	mov	r3, r1
 80106aa:	4640      	mov	r0, r8
 80106ac:	4649      	mov	r1, r9
 80106ae:	f7ef fdeb 	bl	8000288 <__aeabi_dsub>
 80106b2:	f805 6b01 	strb.w	r6, [r5], #1
 80106b6:	9b02      	ldr	r3, [sp, #8]
 80106b8:	429d      	cmp	r5, r3
 80106ba:	4680      	mov	r8, r0
 80106bc:	4689      	mov	r9, r1
 80106be:	f04f 0200 	mov.w	r2, #0
 80106c2:	d124      	bne.n	801070e <_dtoa_r+0x62e>
 80106c4:	4b1b      	ldr	r3, [pc, #108]	; (8010734 <_dtoa_r+0x654>)
 80106c6:	ec51 0b19 	vmov	r0, r1, d9
 80106ca:	f7ef fddf 	bl	800028c <__adddf3>
 80106ce:	4602      	mov	r2, r0
 80106d0:	460b      	mov	r3, r1
 80106d2:	4640      	mov	r0, r8
 80106d4:	4649      	mov	r1, r9
 80106d6:	f7f0 fa1f 	bl	8000b18 <__aeabi_dcmpgt>
 80106da:	2800      	cmp	r0, #0
 80106dc:	d173      	bne.n	80107c6 <_dtoa_r+0x6e6>
 80106de:	ec53 2b19 	vmov	r2, r3, d9
 80106e2:	4914      	ldr	r1, [pc, #80]	; (8010734 <_dtoa_r+0x654>)
 80106e4:	2000      	movs	r0, #0
 80106e6:	f7ef fdcf 	bl	8000288 <__aeabi_dsub>
 80106ea:	4602      	mov	r2, r0
 80106ec:	460b      	mov	r3, r1
 80106ee:	4640      	mov	r0, r8
 80106f0:	4649      	mov	r1, r9
 80106f2:	f7f0 f9f3 	bl	8000adc <__aeabi_dcmplt>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	f43f af2f 	beq.w	801055a <_dtoa_r+0x47a>
 80106fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80106fe:	1e6b      	subs	r3, r5, #1
 8010700:	930f      	str	r3, [sp, #60]	; 0x3c
 8010702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010706:	2b30      	cmp	r3, #48	; 0x30
 8010708:	d0f8      	beq.n	80106fc <_dtoa_r+0x61c>
 801070a:	46bb      	mov	fp, r7
 801070c:	e04a      	b.n	80107a4 <_dtoa_r+0x6c4>
 801070e:	4b06      	ldr	r3, [pc, #24]	; (8010728 <_dtoa_r+0x648>)
 8010710:	f7ef ff72 	bl	80005f8 <__aeabi_dmul>
 8010714:	4680      	mov	r8, r0
 8010716:	4689      	mov	r9, r1
 8010718:	e7bd      	b.n	8010696 <_dtoa_r+0x5b6>
 801071a:	bf00      	nop
 801071c:	08012570 	.word	0x08012570
 8010720:	08012548 	.word	0x08012548
 8010724:	3ff00000 	.word	0x3ff00000
 8010728:	40240000 	.word	0x40240000
 801072c:	401c0000 	.word	0x401c0000
 8010730:	40140000 	.word	0x40140000
 8010734:	3fe00000 	.word	0x3fe00000
 8010738:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801073c:	9d00      	ldr	r5, [sp, #0]
 801073e:	4642      	mov	r2, r8
 8010740:	464b      	mov	r3, r9
 8010742:	4630      	mov	r0, r6
 8010744:	4639      	mov	r1, r7
 8010746:	f7f0 f881 	bl	800084c <__aeabi_ddiv>
 801074a:	f7f0 fa05 	bl	8000b58 <__aeabi_d2iz>
 801074e:	9001      	str	r0, [sp, #4]
 8010750:	f7ef fee8 	bl	8000524 <__aeabi_i2d>
 8010754:	4642      	mov	r2, r8
 8010756:	464b      	mov	r3, r9
 8010758:	f7ef ff4e 	bl	80005f8 <__aeabi_dmul>
 801075c:	4602      	mov	r2, r0
 801075e:	460b      	mov	r3, r1
 8010760:	4630      	mov	r0, r6
 8010762:	4639      	mov	r1, r7
 8010764:	f7ef fd90 	bl	8000288 <__aeabi_dsub>
 8010768:	9e01      	ldr	r6, [sp, #4]
 801076a:	9f04      	ldr	r7, [sp, #16]
 801076c:	3630      	adds	r6, #48	; 0x30
 801076e:	f805 6b01 	strb.w	r6, [r5], #1
 8010772:	9e00      	ldr	r6, [sp, #0]
 8010774:	1bae      	subs	r6, r5, r6
 8010776:	42b7      	cmp	r7, r6
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	d134      	bne.n	80107e8 <_dtoa_r+0x708>
 801077e:	f7ef fd85 	bl	800028c <__adddf3>
 8010782:	4642      	mov	r2, r8
 8010784:	464b      	mov	r3, r9
 8010786:	4606      	mov	r6, r0
 8010788:	460f      	mov	r7, r1
 801078a:	f7f0 f9c5 	bl	8000b18 <__aeabi_dcmpgt>
 801078e:	b9c8      	cbnz	r0, 80107c4 <_dtoa_r+0x6e4>
 8010790:	4642      	mov	r2, r8
 8010792:	464b      	mov	r3, r9
 8010794:	4630      	mov	r0, r6
 8010796:	4639      	mov	r1, r7
 8010798:	f7f0 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 801079c:	b110      	cbz	r0, 80107a4 <_dtoa_r+0x6c4>
 801079e:	9b01      	ldr	r3, [sp, #4]
 80107a0:	07db      	lsls	r3, r3, #31
 80107a2:	d40f      	bmi.n	80107c4 <_dtoa_r+0x6e4>
 80107a4:	4651      	mov	r1, sl
 80107a6:	4620      	mov	r0, r4
 80107a8:	f000 fb18 	bl	8010ddc <_Bfree>
 80107ac:	2300      	movs	r3, #0
 80107ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107b0:	702b      	strb	r3, [r5, #0]
 80107b2:	f10b 0301 	add.w	r3, fp, #1
 80107b6:	6013      	str	r3, [r2, #0]
 80107b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f43f ace2 	beq.w	8010184 <_dtoa_r+0xa4>
 80107c0:	601d      	str	r5, [r3, #0]
 80107c2:	e4df      	b.n	8010184 <_dtoa_r+0xa4>
 80107c4:	465f      	mov	r7, fp
 80107c6:	462b      	mov	r3, r5
 80107c8:	461d      	mov	r5, r3
 80107ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107ce:	2a39      	cmp	r2, #57	; 0x39
 80107d0:	d106      	bne.n	80107e0 <_dtoa_r+0x700>
 80107d2:	9a00      	ldr	r2, [sp, #0]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d1f7      	bne.n	80107c8 <_dtoa_r+0x6e8>
 80107d8:	9900      	ldr	r1, [sp, #0]
 80107da:	2230      	movs	r2, #48	; 0x30
 80107dc:	3701      	adds	r7, #1
 80107de:	700a      	strb	r2, [r1, #0]
 80107e0:	781a      	ldrb	r2, [r3, #0]
 80107e2:	3201      	adds	r2, #1
 80107e4:	701a      	strb	r2, [r3, #0]
 80107e6:	e790      	b.n	801070a <_dtoa_r+0x62a>
 80107e8:	4ba3      	ldr	r3, [pc, #652]	; (8010a78 <_dtoa_r+0x998>)
 80107ea:	2200      	movs	r2, #0
 80107ec:	f7ef ff04 	bl	80005f8 <__aeabi_dmul>
 80107f0:	2200      	movs	r2, #0
 80107f2:	2300      	movs	r3, #0
 80107f4:	4606      	mov	r6, r0
 80107f6:	460f      	mov	r7, r1
 80107f8:	f7f0 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d09e      	beq.n	801073e <_dtoa_r+0x65e>
 8010800:	e7d0      	b.n	80107a4 <_dtoa_r+0x6c4>
 8010802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010804:	2a00      	cmp	r2, #0
 8010806:	f000 80ca 	beq.w	801099e <_dtoa_r+0x8be>
 801080a:	9a07      	ldr	r2, [sp, #28]
 801080c:	2a01      	cmp	r2, #1
 801080e:	f300 80ad 	bgt.w	801096c <_dtoa_r+0x88c>
 8010812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010814:	2a00      	cmp	r2, #0
 8010816:	f000 80a5 	beq.w	8010964 <_dtoa_r+0x884>
 801081a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801081e:	9e08      	ldr	r6, [sp, #32]
 8010820:	9d05      	ldr	r5, [sp, #20]
 8010822:	9a05      	ldr	r2, [sp, #20]
 8010824:	441a      	add	r2, r3
 8010826:	9205      	str	r2, [sp, #20]
 8010828:	9a06      	ldr	r2, [sp, #24]
 801082a:	2101      	movs	r1, #1
 801082c:	441a      	add	r2, r3
 801082e:	4620      	mov	r0, r4
 8010830:	9206      	str	r2, [sp, #24]
 8010832:	f000 fb89 	bl	8010f48 <__i2b>
 8010836:	4607      	mov	r7, r0
 8010838:	b165      	cbz	r5, 8010854 <_dtoa_r+0x774>
 801083a:	9b06      	ldr	r3, [sp, #24]
 801083c:	2b00      	cmp	r3, #0
 801083e:	dd09      	ble.n	8010854 <_dtoa_r+0x774>
 8010840:	42ab      	cmp	r3, r5
 8010842:	9a05      	ldr	r2, [sp, #20]
 8010844:	bfa8      	it	ge
 8010846:	462b      	movge	r3, r5
 8010848:	1ad2      	subs	r2, r2, r3
 801084a:	9205      	str	r2, [sp, #20]
 801084c:	9a06      	ldr	r2, [sp, #24]
 801084e:	1aed      	subs	r5, r5, r3
 8010850:	1ad3      	subs	r3, r2, r3
 8010852:	9306      	str	r3, [sp, #24]
 8010854:	9b08      	ldr	r3, [sp, #32]
 8010856:	b1f3      	cbz	r3, 8010896 <_dtoa_r+0x7b6>
 8010858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801085a:	2b00      	cmp	r3, #0
 801085c:	f000 80a3 	beq.w	80109a6 <_dtoa_r+0x8c6>
 8010860:	2e00      	cmp	r6, #0
 8010862:	dd10      	ble.n	8010886 <_dtoa_r+0x7a6>
 8010864:	4639      	mov	r1, r7
 8010866:	4632      	mov	r2, r6
 8010868:	4620      	mov	r0, r4
 801086a:	f000 fc2d 	bl	80110c8 <__pow5mult>
 801086e:	4652      	mov	r2, sl
 8010870:	4601      	mov	r1, r0
 8010872:	4607      	mov	r7, r0
 8010874:	4620      	mov	r0, r4
 8010876:	f000 fb7d 	bl	8010f74 <__multiply>
 801087a:	4651      	mov	r1, sl
 801087c:	4680      	mov	r8, r0
 801087e:	4620      	mov	r0, r4
 8010880:	f000 faac 	bl	8010ddc <_Bfree>
 8010884:	46c2      	mov	sl, r8
 8010886:	9b08      	ldr	r3, [sp, #32]
 8010888:	1b9a      	subs	r2, r3, r6
 801088a:	d004      	beq.n	8010896 <_dtoa_r+0x7b6>
 801088c:	4651      	mov	r1, sl
 801088e:	4620      	mov	r0, r4
 8010890:	f000 fc1a 	bl	80110c8 <__pow5mult>
 8010894:	4682      	mov	sl, r0
 8010896:	2101      	movs	r1, #1
 8010898:	4620      	mov	r0, r4
 801089a:	f000 fb55 	bl	8010f48 <__i2b>
 801089e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	4606      	mov	r6, r0
 80108a4:	f340 8081 	ble.w	80109aa <_dtoa_r+0x8ca>
 80108a8:	461a      	mov	r2, r3
 80108aa:	4601      	mov	r1, r0
 80108ac:	4620      	mov	r0, r4
 80108ae:	f000 fc0b 	bl	80110c8 <__pow5mult>
 80108b2:	9b07      	ldr	r3, [sp, #28]
 80108b4:	2b01      	cmp	r3, #1
 80108b6:	4606      	mov	r6, r0
 80108b8:	dd7a      	ble.n	80109b0 <_dtoa_r+0x8d0>
 80108ba:	f04f 0800 	mov.w	r8, #0
 80108be:	6933      	ldr	r3, [r6, #16]
 80108c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80108c4:	6918      	ldr	r0, [r3, #16]
 80108c6:	f000 faf1 	bl	8010eac <__hi0bits>
 80108ca:	f1c0 0020 	rsb	r0, r0, #32
 80108ce:	9b06      	ldr	r3, [sp, #24]
 80108d0:	4418      	add	r0, r3
 80108d2:	f010 001f 	ands.w	r0, r0, #31
 80108d6:	f000 8094 	beq.w	8010a02 <_dtoa_r+0x922>
 80108da:	f1c0 0320 	rsb	r3, r0, #32
 80108de:	2b04      	cmp	r3, #4
 80108e0:	f340 8085 	ble.w	80109ee <_dtoa_r+0x90e>
 80108e4:	9b05      	ldr	r3, [sp, #20]
 80108e6:	f1c0 001c 	rsb	r0, r0, #28
 80108ea:	4403      	add	r3, r0
 80108ec:	9305      	str	r3, [sp, #20]
 80108ee:	9b06      	ldr	r3, [sp, #24]
 80108f0:	4403      	add	r3, r0
 80108f2:	4405      	add	r5, r0
 80108f4:	9306      	str	r3, [sp, #24]
 80108f6:	9b05      	ldr	r3, [sp, #20]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	dd05      	ble.n	8010908 <_dtoa_r+0x828>
 80108fc:	4651      	mov	r1, sl
 80108fe:	461a      	mov	r2, r3
 8010900:	4620      	mov	r0, r4
 8010902:	f000 fc3b 	bl	801117c <__lshift>
 8010906:	4682      	mov	sl, r0
 8010908:	9b06      	ldr	r3, [sp, #24]
 801090a:	2b00      	cmp	r3, #0
 801090c:	dd05      	ble.n	801091a <_dtoa_r+0x83a>
 801090e:	4631      	mov	r1, r6
 8010910:	461a      	mov	r2, r3
 8010912:	4620      	mov	r0, r4
 8010914:	f000 fc32 	bl	801117c <__lshift>
 8010918:	4606      	mov	r6, r0
 801091a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801091c:	2b00      	cmp	r3, #0
 801091e:	d072      	beq.n	8010a06 <_dtoa_r+0x926>
 8010920:	4631      	mov	r1, r6
 8010922:	4650      	mov	r0, sl
 8010924:	f000 fc96 	bl	8011254 <__mcmp>
 8010928:	2800      	cmp	r0, #0
 801092a:	da6c      	bge.n	8010a06 <_dtoa_r+0x926>
 801092c:	2300      	movs	r3, #0
 801092e:	4651      	mov	r1, sl
 8010930:	220a      	movs	r2, #10
 8010932:	4620      	mov	r0, r4
 8010934:	f000 fa74 	bl	8010e20 <__multadd>
 8010938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801093a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801093e:	4682      	mov	sl, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 81b0 	beq.w	8010ca6 <_dtoa_r+0xbc6>
 8010946:	2300      	movs	r3, #0
 8010948:	4639      	mov	r1, r7
 801094a:	220a      	movs	r2, #10
 801094c:	4620      	mov	r0, r4
 801094e:	f000 fa67 	bl	8010e20 <__multadd>
 8010952:	9b01      	ldr	r3, [sp, #4]
 8010954:	2b00      	cmp	r3, #0
 8010956:	4607      	mov	r7, r0
 8010958:	f300 8096 	bgt.w	8010a88 <_dtoa_r+0x9a8>
 801095c:	9b07      	ldr	r3, [sp, #28]
 801095e:	2b02      	cmp	r3, #2
 8010960:	dc59      	bgt.n	8010a16 <_dtoa_r+0x936>
 8010962:	e091      	b.n	8010a88 <_dtoa_r+0x9a8>
 8010964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801096a:	e758      	b.n	801081e <_dtoa_r+0x73e>
 801096c:	9b04      	ldr	r3, [sp, #16]
 801096e:	1e5e      	subs	r6, r3, #1
 8010970:	9b08      	ldr	r3, [sp, #32]
 8010972:	42b3      	cmp	r3, r6
 8010974:	bfbf      	itttt	lt
 8010976:	9b08      	ldrlt	r3, [sp, #32]
 8010978:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801097a:	9608      	strlt	r6, [sp, #32]
 801097c:	1af3      	sublt	r3, r6, r3
 801097e:	bfb4      	ite	lt
 8010980:	18d2      	addlt	r2, r2, r3
 8010982:	1b9e      	subge	r6, r3, r6
 8010984:	9b04      	ldr	r3, [sp, #16]
 8010986:	bfbc      	itt	lt
 8010988:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801098a:	2600      	movlt	r6, #0
 801098c:	2b00      	cmp	r3, #0
 801098e:	bfb7      	itett	lt
 8010990:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010994:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010998:	1a9d      	sublt	r5, r3, r2
 801099a:	2300      	movlt	r3, #0
 801099c:	e741      	b.n	8010822 <_dtoa_r+0x742>
 801099e:	9e08      	ldr	r6, [sp, #32]
 80109a0:	9d05      	ldr	r5, [sp, #20]
 80109a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80109a4:	e748      	b.n	8010838 <_dtoa_r+0x758>
 80109a6:	9a08      	ldr	r2, [sp, #32]
 80109a8:	e770      	b.n	801088c <_dtoa_r+0x7ac>
 80109aa:	9b07      	ldr	r3, [sp, #28]
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	dc19      	bgt.n	80109e4 <_dtoa_r+0x904>
 80109b0:	9b02      	ldr	r3, [sp, #8]
 80109b2:	b9bb      	cbnz	r3, 80109e4 <_dtoa_r+0x904>
 80109b4:	9b03      	ldr	r3, [sp, #12]
 80109b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109ba:	b99b      	cbnz	r3, 80109e4 <_dtoa_r+0x904>
 80109bc:	9b03      	ldr	r3, [sp, #12]
 80109be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109c2:	0d1b      	lsrs	r3, r3, #20
 80109c4:	051b      	lsls	r3, r3, #20
 80109c6:	b183      	cbz	r3, 80109ea <_dtoa_r+0x90a>
 80109c8:	9b05      	ldr	r3, [sp, #20]
 80109ca:	3301      	adds	r3, #1
 80109cc:	9305      	str	r3, [sp, #20]
 80109ce:	9b06      	ldr	r3, [sp, #24]
 80109d0:	3301      	adds	r3, #1
 80109d2:	9306      	str	r3, [sp, #24]
 80109d4:	f04f 0801 	mov.w	r8, #1
 80109d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f47f af6f 	bne.w	80108be <_dtoa_r+0x7de>
 80109e0:	2001      	movs	r0, #1
 80109e2:	e774      	b.n	80108ce <_dtoa_r+0x7ee>
 80109e4:	f04f 0800 	mov.w	r8, #0
 80109e8:	e7f6      	b.n	80109d8 <_dtoa_r+0x8f8>
 80109ea:	4698      	mov	r8, r3
 80109ec:	e7f4      	b.n	80109d8 <_dtoa_r+0x8f8>
 80109ee:	d082      	beq.n	80108f6 <_dtoa_r+0x816>
 80109f0:	9a05      	ldr	r2, [sp, #20]
 80109f2:	331c      	adds	r3, #28
 80109f4:	441a      	add	r2, r3
 80109f6:	9205      	str	r2, [sp, #20]
 80109f8:	9a06      	ldr	r2, [sp, #24]
 80109fa:	441a      	add	r2, r3
 80109fc:	441d      	add	r5, r3
 80109fe:	9206      	str	r2, [sp, #24]
 8010a00:	e779      	b.n	80108f6 <_dtoa_r+0x816>
 8010a02:	4603      	mov	r3, r0
 8010a04:	e7f4      	b.n	80109f0 <_dtoa_r+0x910>
 8010a06:	9b04      	ldr	r3, [sp, #16]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	dc37      	bgt.n	8010a7c <_dtoa_r+0x99c>
 8010a0c:	9b07      	ldr	r3, [sp, #28]
 8010a0e:	2b02      	cmp	r3, #2
 8010a10:	dd34      	ble.n	8010a7c <_dtoa_r+0x99c>
 8010a12:	9b04      	ldr	r3, [sp, #16]
 8010a14:	9301      	str	r3, [sp, #4]
 8010a16:	9b01      	ldr	r3, [sp, #4]
 8010a18:	b963      	cbnz	r3, 8010a34 <_dtoa_r+0x954>
 8010a1a:	4631      	mov	r1, r6
 8010a1c:	2205      	movs	r2, #5
 8010a1e:	4620      	mov	r0, r4
 8010a20:	f000 f9fe 	bl	8010e20 <__multadd>
 8010a24:	4601      	mov	r1, r0
 8010a26:	4606      	mov	r6, r0
 8010a28:	4650      	mov	r0, sl
 8010a2a:	f000 fc13 	bl	8011254 <__mcmp>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	f73f adbb 	bgt.w	80105aa <_dtoa_r+0x4ca>
 8010a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a36:	9d00      	ldr	r5, [sp, #0]
 8010a38:	ea6f 0b03 	mvn.w	fp, r3
 8010a3c:	f04f 0800 	mov.w	r8, #0
 8010a40:	4631      	mov	r1, r6
 8010a42:	4620      	mov	r0, r4
 8010a44:	f000 f9ca 	bl	8010ddc <_Bfree>
 8010a48:	2f00      	cmp	r7, #0
 8010a4a:	f43f aeab 	beq.w	80107a4 <_dtoa_r+0x6c4>
 8010a4e:	f1b8 0f00 	cmp.w	r8, #0
 8010a52:	d005      	beq.n	8010a60 <_dtoa_r+0x980>
 8010a54:	45b8      	cmp	r8, r7
 8010a56:	d003      	beq.n	8010a60 <_dtoa_r+0x980>
 8010a58:	4641      	mov	r1, r8
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f000 f9be 	bl	8010ddc <_Bfree>
 8010a60:	4639      	mov	r1, r7
 8010a62:	4620      	mov	r0, r4
 8010a64:	f000 f9ba 	bl	8010ddc <_Bfree>
 8010a68:	e69c      	b.n	80107a4 <_dtoa_r+0x6c4>
 8010a6a:	2600      	movs	r6, #0
 8010a6c:	4637      	mov	r7, r6
 8010a6e:	e7e1      	b.n	8010a34 <_dtoa_r+0x954>
 8010a70:	46bb      	mov	fp, r7
 8010a72:	4637      	mov	r7, r6
 8010a74:	e599      	b.n	80105aa <_dtoa_r+0x4ca>
 8010a76:	bf00      	nop
 8010a78:	40240000 	.word	0x40240000
 8010a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	f000 80c8 	beq.w	8010c14 <_dtoa_r+0xb34>
 8010a84:	9b04      	ldr	r3, [sp, #16]
 8010a86:	9301      	str	r3, [sp, #4]
 8010a88:	2d00      	cmp	r5, #0
 8010a8a:	dd05      	ble.n	8010a98 <_dtoa_r+0x9b8>
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	462a      	mov	r2, r5
 8010a90:	4620      	mov	r0, r4
 8010a92:	f000 fb73 	bl	801117c <__lshift>
 8010a96:	4607      	mov	r7, r0
 8010a98:	f1b8 0f00 	cmp.w	r8, #0
 8010a9c:	d05b      	beq.n	8010b56 <_dtoa_r+0xa76>
 8010a9e:	6879      	ldr	r1, [r7, #4]
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f000 f95b 	bl	8010d5c <_Balloc>
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	b928      	cbnz	r0, 8010ab6 <_dtoa_r+0x9d6>
 8010aaa:	4b83      	ldr	r3, [pc, #524]	; (8010cb8 <_dtoa_r+0xbd8>)
 8010aac:	4602      	mov	r2, r0
 8010aae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010ab2:	f7ff bb2e 	b.w	8010112 <_dtoa_r+0x32>
 8010ab6:	693a      	ldr	r2, [r7, #16]
 8010ab8:	3202      	adds	r2, #2
 8010aba:	0092      	lsls	r2, r2, #2
 8010abc:	f107 010c 	add.w	r1, r7, #12
 8010ac0:	300c      	adds	r0, #12
 8010ac2:	f7ff fa75 	bl	800ffb0 <memcpy>
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	4629      	mov	r1, r5
 8010aca:	4620      	mov	r0, r4
 8010acc:	f000 fb56 	bl	801117c <__lshift>
 8010ad0:	9b00      	ldr	r3, [sp, #0]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	9304      	str	r3, [sp, #16]
 8010ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ada:	4413      	add	r3, r2
 8010adc:	9308      	str	r3, [sp, #32]
 8010ade:	9b02      	ldr	r3, [sp, #8]
 8010ae0:	f003 0301 	and.w	r3, r3, #1
 8010ae4:	46b8      	mov	r8, r7
 8010ae6:	9306      	str	r3, [sp, #24]
 8010ae8:	4607      	mov	r7, r0
 8010aea:	9b04      	ldr	r3, [sp, #16]
 8010aec:	4631      	mov	r1, r6
 8010aee:	3b01      	subs	r3, #1
 8010af0:	4650      	mov	r0, sl
 8010af2:	9301      	str	r3, [sp, #4]
 8010af4:	f7ff fa6a 	bl	800ffcc <quorem>
 8010af8:	4641      	mov	r1, r8
 8010afa:	9002      	str	r0, [sp, #8]
 8010afc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010b00:	4650      	mov	r0, sl
 8010b02:	f000 fba7 	bl	8011254 <__mcmp>
 8010b06:	463a      	mov	r2, r7
 8010b08:	9005      	str	r0, [sp, #20]
 8010b0a:	4631      	mov	r1, r6
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f000 fbbd 	bl	801128c <__mdiff>
 8010b12:	68c2      	ldr	r2, [r0, #12]
 8010b14:	4605      	mov	r5, r0
 8010b16:	bb02      	cbnz	r2, 8010b5a <_dtoa_r+0xa7a>
 8010b18:	4601      	mov	r1, r0
 8010b1a:	4650      	mov	r0, sl
 8010b1c:	f000 fb9a 	bl	8011254 <__mcmp>
 8010b20:	4602      	mov	r2, r0
 8010b22:	4629      	mov	r1, r5
 8010b24:	4620      	mov	r0, r4
 8010b26:	9209      	str	r2, [sp, #36]	; 0x24
 8010b28:	f000 f958 	bl	8010ddc <_Bfree>
 8010b2c:	9b07      	ldr	r3, [sp, #28]
 8010b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b30:	9d04      	ldr	r5, [sp, #16]
 8010b32:	ea43 0102 	orr.w	r1, r3, r2
 8010b36:	9b06      	ldr	r3, [sp, #24]
 8010b38:	4319      	orrs	r1, r3
 8010b3a:	d110      	bne.n	8010b5e <_dtoa_r+0xa7e>
 8010b3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010b40:	d029      	beq.n	8010b96 <_dtoa_r+0xab6>
 8010b42:	9b05      	ldr	r3, [sp, #20]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	dd02      	ble.n	8010b4e <_dtoa_r+0xa6e>
 8010b48:	9b02      	ldr	r3, [sp, #8]
 8010b4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010b4e:	9b01      	ldr	r3, [sp, #4]
 8010b50:	f883 9000 	strb.w	r9, [r3]
 8010b54:	e774      	b.n	8010a40 <_dtoa_r+0x960>
 8010b56:	4638      	mov	r0, r7
 8010b58:	e7ba      	b.n	8010ad0 <_dtoa_r+0x9f0>
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	e7e1      	b.n	8010b22 <_dtoa_r+0xa42>
 8010b5e:	9b05      	ldr	r3, [sp, #20]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	db04      	blt.n	8010b6e <_dtoa_r+0xa8e>
 8010b64:	9907      	ldr	r1, [sp, #28]
 8010b66:	430b      	orrs	r3, r1
 8010b68:	9906      	ldr	r1, [sp, #24]
 8010b6a:	430b      	orrs	r3, r1
 8010b6c:	d120      	bne.n	8010bb0 <_dtoa_r+0xad0>
 8010b6e:	2a00      	cmp	r2, #0
 8010b70:	dded      	ble.n	8010b4e <_dtoa_r+0xa6e>
 8010b72:	4651      	mov	r1, sl
 8010b74:	2201      	movs	r2, #1
 8010b76:	4620      	mov	r0, r4
 8010b78:	f000 fb00 	bl	801117c <__lshift>
 8010b7c:	4631      	mov	r1, r6
 8010b7e:	4682      	mov	sl, r0
 8010b80:	f000 fb68 	bl	8011254 <__mcmp>
 8010b84:	2800      	cmp	r0, #0
 8010b86:	dc03      	bgt.n	8010b90 <_dtoa_r+0xab0>
 8010b88:	d1e1      	bne.n	8010b4e <_dtoa_r+0xa6e>
 8010b8a:	f019 0f01 	tst.w	r9, #1
 8010b8e:	d0de      	beq.n	8010b4e <_dtoa_r+0xa6e>
 8010b90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010b94:	d1d8      	bne.n	8010b48 <_dtoa_r+0xa68>
 8010b96:	9a01      	ldr	r2, [sp, #4]
 8010b98:	2339      	movs	r3, #57	; 0x39
 8010b9a:	7013      	strb	r3, [r2, #0]
 8010b9c:	462b      	mov	r3, r5
 8010b9e:	461d      	mov	r5, r3
 8010ba0:	3b01      	subs	r3, #1
 8010ba2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010ba6:	2a39      	cmp	r2, #57	; 0x39
 8010ba8:	d06c      	beq.n	8010c84 <_dtoa_r+0xba4>
 8010baa:	3201      	adds	r2, #1
 8010bac:	701a      	strb	r2, [r3, #0]
 8010bae:	e747      	b.n	8010a40 <_dtoa_r+0x960>
 8010bb0:	2a00      	cmp	r2, #0
 8010bb2:	dd07      	ble.n	8010bc4 <_dtoa_r+0xae4>
 8010bb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010bb8:	d0ed      	beq.n	8010b96 <_dtoa_r+0xab6>
 8010bba:	9a01      	ldr	r2, [sp, #4]
 8010bbc:	f109 0301 	add.w	r3, r9, #1
 8010bc0:	7013      	strb	r3, [r2, #0]
 8010bc2:	e73d      	b.n	8010a40 <_dtoa_r+0x960>
 8010bc4:	9b04      	ldr	r3, [sp, #16]
 8010bc6:	9a08      	ldr	r2, [sp, #32]
 8010bc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d043      	beq.n	8010c58 <_dtoa_r+0xb78>
 8010bd0:	4651      	mov	r1, sl
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	220a      	movs	r2, #10
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f000 f922 	bl	8010e20 <__multadd>
 8010bdc:	45b8      	cmp	r8, r7
 8010bde:	4682      	mov	sl, r0
 8010be0:	f04f 0300 	mov.w	r3, #0
 8010be4:	f04f 020a 	mov.w	r2, #10
 8010be8:	4641      	mov	r1, r8
 8010bea:	4620      	mov	r0, r4
 8010bec:	d107      	bne.n	8010bfe <_dtoa_r+0xb1e>
 8010bee:	f000 f917 	bl	8010e20 <__multadd>
 8010bf2:	4680      	mov	r8, r0
 8010bf4:	4607      	mov	r7, r0
 8010bf6:	9b04      	ldr	r3, [sp, #16]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	9304      	str	r3, [sp, #16]
 8010bfc:	e775      	b.n	8010aea <_dtoa_r+0xa0a>
 8010bfe:	f000 f90f 	bl	8010e20 <__multadd>
 8010c02:	4639      	mov	r1, r7
 8010c04:	4680      	mov	r8, r0
 8010c06:	2300      	movs	r3, #0
 8010c08:	220a      	movs	r2, #10
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	f000 f908 	bl	8010e20 <__multadd>
 8010c10:	4607      	mov	r7, r0
 8010c12:	e7f0      	b.n	8010bf6 <_dtoa_r+0xb16>
 8010c14:	9b04      	ldr	r3, [sp, #16]
 8010c16:	9301      	str	r3, [sp, #4]
 8010c18:	9d00      	ldr	r5, [sp, #0]
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	4650      	mov	r0, sl
 8010c1e:	f7ff f9d5 	bl	800ffcc <quorem>
 8010c22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010c26:	9b00      	ldr	r3, [sp, #0]
 8010c28:	f805 9b01 	strb.w	r9, [r5], #1
 8010c2c:	1aea      	subs	r2, r5, r3
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	4293      	cmp	r3, r2
 8010c32:	dd07      	ble.n	8010c44 <_dtoa_r+0xb64>
 8010c34:	4651      	mov	r1, sl
 8010c36:	2300      	movs	r3, #0
 8010c38:	220a      	movs	r2, #10
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 f8f0 	bl	8010e20 <__multadd>
 8010c40:	4682      	mov	sl, r0
 8010c42:	e7ea      	b.n	8010c1a <_dtoa_r+0xb3a>
 8010c44:	9b01      	ldr	r3, [sp, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	bfc8      	it	gt
 8010c4a:	461d      	movgt	r5, r3
 8010c4c:	9b00      	ldr	r3, [sp, #0]
 8010c4e:	bfd8      	it	le
 8010c50:	2501      	movle	r5, #1
 8010c52:	441d      	add	r5, r3
 8010c54:	f04f 0800 	mov.w	r8, #0
 8010c58:	4651      	mov	r1, sl
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	f000 fa8d 	bl	801117c <__lshift>
 8010c62:	4631      	mov	r1, r6
 8010c64:	4682      	mov	sl, r0
 8010c66:	f000 faf5 	bl	8011254 <__mcmp>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	dc96      	bgt.n	8010b9c <_dtoa_r+0xabc>
 8010c6e:	d102      	bne.n	8010c76 <_dtoa_r+0xb96>
 8010c70:	f019 0f01 	tst.w	r9, #1
 8010c74:	d192      	bne.n	8010b9c <_dtoa_r+0xabc>
 8010c76:	462b      	mov	r3, r5
 8010c78:	461d      	mov	r5, r3
 8010c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c7e:	2a30      	cmp	r2, #48	; 0x30
 8010c80:	d0fa      	beq.n	8010c78 <_dtoa_r+0xb98>
 8010c82:	e6dd      	b.n	8010a40 <_dtoa_r+0x960>
 8010c84:	9a00      	ldr	r2, [sp, #0]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d189      	bne.n	8010b9e <_dtoa_r+0xabe>
 8010c8a:	f10b 0b01 	add.w	fp, fp, #1
 8010c8e:	2331      	movs	r3, #49	; 0x31
 8010c90:	e796      	b.n	8010bc0 <_dtoa_r+0xae0>
 8010c92:	4b0a      	ldr	r3, [pc, #40]	; (8010cbc <_dtoa_r+0xbdc>)
 8010c94:	f7ff ba99 	b.w	80101ca <_dtoa_r+0xea>
 8010c98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f47f aa6d 	bne.w	801017a <_dtoa_r+0x9a>
 8010ca0:	4b07      	ldr	r3, [pc, #28]	; (8010cc0 <_dtoa_r+0xbe0>)
 8010ca2:	f7ff ba92 	b.w	80101ca <_dtoa_r+0xea>
 8010ca6:	9b01      	ldr	r3, [sp, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dcb5      	bgt.n	8010c18 <_dtoa_r+0xb38>
 8010cac:	9b07      	ldr	r3, [sp, #28]
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	f73f aeb1 	bgt.w	8010a16 <_dtoa_r+0x936>
 8010cb4:	e7b0      	b.n	8010c18 <_dtoa_r+0xb38>
 8010cb6:	bf00      	nop
 8010cb8:	080124dc 	.word	0x080124dc
 8010cbc:	0801243c 	.word	0x0801243c
 8010cc0:	08012460 	.word	0x08012460

08010cc4 <_free_r>:
 8010cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010cc6:	2900      	cmp	r1, #0
 8010cc8:	d044      	beq.n	8010d54 <_free_r+0x90>
 8010cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cce:	9001      	str	r0, [sp, #4]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8010cd6:	bfb8      	it	lt
 8010cd8:	18e4      	addlt	r4, r4, r3
 8010cda:	f7fe fb55 	bl	800f388 <__malloc_lock>
 8010cde:	4a1e      	ldr	r2, [pc, #120]	; (8010d58 <_free_r+0x94>)
 8010ce0:	9801      	ldr	r0, [sp, #4]
 8010ce2:	6813      	ldr	r3, [r2, #0]
 8010ce4:	b933      	cbnz	r3, 8010cf4 <_free_r+0x30>
 8010ce6:	6063      	str	r3, [r4, #4]
 8010ce8:	6014      	str	r4, [r2, #0]
 8010cea:	b003      	add	sp, #12
 8010cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cf0:	f7fe bb50 	b.w	800f394 <__malloc_unlock>
 8010cf4:	42a3      	cmp	r3, r4
 8010cf6:	d908      	bls.n	8010d0a <_free_r+0x46>
 8010cf8:	6825      	ldr	r5, [r4, #0]
 8010cfa:	1961      	adds	r1, r4, r5
 8010cfc:	428b      	cmp	r3, r1
 8010cfe:	bf01      	itttt	eq
 8010d00:	6819      	ldreq	r1, [r3, #0]
 8010d02:	685b      	ldreq	r3, [r3, #4]
 8010d04:	1949      	addeq	r1, r1, r5
 8010d06:	6021      	streq	r1, [r4, #0]
 8010d08:	e7ed      	b.n	8010ce6 <_free_r+0x22>
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	b10b      	cbz	r3, 8010d14 <_free_r+0x50>
 8010d10:	42a3      	cmp	r3, r4
 8010d12:	d9fa      	bls.n	8010d0a <_free_r+0x46>
 8010d14:	6811      	ldr	r1, [r2, #0]
 8010d16:	1855      	adds	r5, r2, r1
 8010d18:	42a5      	cmp	r5, r4
 8010d1a:	d10b      	bne.n	8010d34 <_free_r+0x70>
 8010d1c:	6824      	ldr	r4, [r4, #0]
 8010d1e:	4421      	add	r1, r4
 8010d20:	1854      	adds	r4, r2, r1
 8010d22:	42a3      	cmp	r3, r4
 8010d24:	6011      	str	r1, [r2, #0]
 8010d26:	d1e0      	bne.n	8010cea <_free_r+0x26>
 8010d28:	681c      	ldr	r4, [r3, #0]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	6053      	str	r3, [r2, #4]
 8010d2e:	440c      	add	r4, r1
 8010d30:	6014      	str	r4, [r2, #0]
 8010d32:	e7da      	b.n	8010cea <_free_r+0x26>
 8010d34:	d902      	bls.n	8010d3c <_free_r+0x78>
 8010d36:	230c      	movs	r3, #12
 8010d38:	6003      	str	r3, [r0, #0]
 8010d3a:	e7d6      	b.n	8010cea <_free_r+0x26>
 8010d3c:	6825      	ldr	r5, [r4, #0]
 8010d3e:	1961      	adds	r1, r4, r5
 8010d40:	428b      	cmp	r3, r1
 8010d42:	bf04      	itt	eq
 8010d44:	6819      	ldreq	r1, [r3, #0]
 8010d46:	685b      	ldreq	r3, [r3, #4]
 8010d48:	6063      	str	r3, [r4, #4]
 8010d4a:	bf04      	itt	eq
 8010d4c:	1949      	addeq	r1, r1, r5
 8010d4e:	6021      	streq	r1, [r4, #0]
 8010d50:	6054      	str	r4, [r2, #4]
 8010d52:	e7ca      	b.n	8010cea <_free_r+0x26>
 8010d54:	b003      	add	sp, #12
 8010d56:	bd30      	pop	{r4, r5, pc}
 8010d58:	2000171c 	.word	0x2000171c

08010d5c <_Balloc>:
 8010d5c:	b570      	push	{r4, r5, r6, lr}
 8010d5e:	69c6      	ldr	r6, [r0, #28]
 8010d60:	4604      	mov	r4, r0
 8010d62:	460d      	mov	r5, r1
 8010d64:	b976      	cbnz	r6, 8010d84 <_Balloc+0x28>
 8010d66:	2010      	movs	r0, #16
 8010d68:	f7fe fa5e 	bl	800f228 <malloc>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	61e0      	str	r0, [r4, #28]
 8010d70:	b920      	cbnz	r0, 8010d7c <_Balloc+0x20>
 8010d72:	4b18      	ldr	r3, [pc, #96]	; (8010dd4 <_Balloc+0x78>)
 8010d74:	4818      	ldr	r0, [pc, #96]	; (8010dd8 <_Balloc+0x7c>)
 8010d76:	216b      	movs	r1, #107	; 0x6b
 8010d78:	f000 fd8c 	bl	8011894 <__assert_func>
 8010d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d80:	6006      	str	r6, [r0, #0]
 8010d82:	60c6      	str	r6, [r0, #12]
 8010d84:	69e6      	ldr	r6, [r4, #28]
 8010d86:	68f3      	ldr	r3, [r6, #12]
 8010d88:	b183      	cbz	r3, 8010dac <_Balloc+0x50>
 8010d8a:	69e3      	ldr	r3, [r4, #28]
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d92:	b9b8      	cbnz	r0, 8010dc4 <_Balloc+0x68>
 8010d94:	2101      	movs	r1, #1
 8010d96:	fa01 f605 	lsl.w	r6, r1, r5
 8010d9a:	1d72      	adds	r2, r6, #5
 8010d9c:	0092      	lsls	r2, r2, #2
 8010d9e:	4620      	mov	r0, r4
 8010da0:	f000 fd96 	bl	80118d0 <_calloc_r>
 8010da4:	b160      	cbz	r0, 8010dc0 <_Balloc+0x64>
 8010da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010daa:	e00e      	b.n	8010dca <_Balloc+0x6e>
 8010dac:	2221      	movs	r2, #33	; 0x21
 8010dae:	2104      	movs	r1, #4
 8010db0:	4620      	mov	r0, r4
 8010db2:	f000 fd8d 	bl	80118d0 <_calloc_r>
 8010db6:	69e3      	ldr	r3, [r4, #28]
 8010db8:	60f0      	str	r0, [r6, #12]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d1e4      	bne.n	8010d8a <_Balloc+0x2e>
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	bd70      	pop	{r4, r5, r6, pc}
 8010dc4:	6802      	ldr	r2, [r0, #0]
 8010dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010dca:	2300      	movs	r3, #0
 8010dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010dd0:	e7f7      	b.n	8010dc2 <_Balloc+0x66>
 8010dd2:	bf00      	nop
 8010dd4:	0801246d 	.word	0x0801246d
 8010dd8:	080124ed 	.word	0x080124ed

08010ddc <_Bfree>:
 8010ddc:	b570      	push	{r4, r5, r6, lr}
 8010dde:	69c6      	ldr	r6, [r0, #28]
 8010de0:	4605      	mov	r5, r0
 8010de2:	460c      	mov	r4, r1
 8010de4:	b976      	cbnz	r6, 8010e04 <_Bfree+0x28>
 8010de6:	2010      	movs	r0, #16
 8010de8:	f7fe fa1e 	bl	800f228 <malloc>
 8010dec:	4602      	mov	r2, r0
 8010dee:	61e8      	str	r0, [r5, #28]
 8010df0:	b920      	cbnz	r0, 8010dfc <_Bfree+0x20>
 8010df2:	4b09      	ldr	r3, [pc, #36]	; (8010e18 <_Bfree+0x3c>)
 8010df4:	4809      	ldr	r0, [pc, #36]	; (8010e1c <_Bfree+0x40>)
 8010df6:	218f      	movs	r1, #143	; 0x8f
 8010df8:	f000 fd4c 	bl	8011894 <__assert_func>
 8010dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e00:	6006      	str	r6, [r0, #0]
 8010e02:	60c6      	str	r6, [r0, #12]
 8010e04:	b13c      	cbz	r4, 8010e16 <_Bfree+0x3a>
 8010e06:	69eb      	ldr	r3, [r5, #28]
 8010e08:	6862      	ldr	r2, [r4, #4]
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e10:	6021      	str	r1, [r4, #0]
 8010e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e16:	bd70      	pop	{r4, r5, r6, pc}
 8010e18:	0801246d 	.word	0x0801246d
 8010e1c:	080124ed 	.word	0x080124ed

08010e20 <__multadd>:
 8010e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e24:	690d      	ldr	r5, [r1, #16]
 8010e26:	4607      	mov	r7, r0
 8010e28:	460c      	mov	r4, r1
 8010e2a:	461e      	mov	r6, r3
 8010e2c:	f101 0c14 	add.w	ip, r1, #20
 8010e30:	2000      	movs	r0, #0
 8010e32:	f8dc 3000 	ldr.w	r3, [ip]
 8010e36:	b299      	uxth	r1, r3
 8010e38:	fb02 6101 	mla	r1, r2, r1, r6
 8010e3c:	0c1e      	lsrs	r6, r3, #16
 8010e3e:	0c0b      	lsrs	r3, r1, #16
 8010e40:	fb02 3306 	mla	r3, r2, r6, r3
 8010e44:	b289      	uxth	r1, r1
 8010e46:	3001      	adds	r0, #1
 8010e48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e4c:	4285      	cmp	r5, r0
 8010e4e:	f84c 1b04 	str.w	r1, [ip], #4
 8010e52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e56:	dcec      	bgt.n	8010e32 <__multadd+0x12>
 8010e58:	b30e      	cbz	r6, 8010e9e <__multadd+0x7e>
 8010e5a:	68a3      	ldr	r3, [r4, #8]
 8010e5c:	42ab      	cmp	r3, r5
 8010e5e:	dc19      	bgt.n	8010e94 <__multadd+0x74>
 8010e60:	6861      	ldr	r1, [r4, #4]
 8010e62:	4638      	mov	r0, r7
 8010e64:	3101      	adds	r1, #1
 8010e66:	f7ff ff79 	bl	8010d5c <_Balloc>
 8010e6a:	4680      	mov	r8, r0
 8010e6c:	b928      	cbnz	r0, 8010e7a <__multadd+0x5a>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	4b0c      	ldr	r3, [pc, #48]	; (8010ea4 <__multadd+0x84>)
 8010e72:	480d      	ldr	r0, [pc, #52]	; (8010ea8 <__multadd+0x88>)
 8010e74:	21ba      	movs	r1, #186	; 0xba
 8010e76:	f000 fd0d 	bl	8011894 <__assert_func>
 8010e7a:	6922      	ldr	r2, [r4, #16]
 8010e7c:	3202      	adds	r2, #2
 8010e7e:	f104 010c 	add.w	r1, r4, #12
 8010e82:	0092      	lsls	r2, r2, #2
 8010e84:	300c      	adds	r0, #12
 8010e86:	f7ff f893 	bl	800ffb0 <memcpy>
 8010e8a:	4621      	mov	r1, r4
 8010e8c:	4638      	mov	r0, r7
 8010e8e:	f7ff ffa5 	bl	8010ddc <_Bfree>
 8010e92:	4644      	mov	r4, r8
 8010e94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e98:	3501      	adds	r5, #1
 8010e9a:	615e      	str	r6, [r3, #20]
 8010e9c:	6125      	str	r5, [r4, #16]
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea4:	080124dc 	.word	0x080124dc
 8010ea8:	080124ed 	.word	0x080124ed

08010eac <__hi0bits>:
 8010eac:	0c03      	lsrs	r3, r0, #16
 8010eae:	041b      	lsls	r3, r3, #16
 8010eb0:	b9d3      	cbnz	r3, 8010ee8 <__hi0bits+0x3c>
 8010eb2:	0400      	lsls	r0, r0, #16
 8010eb4:	2310      	movs	r3, #16
 8010eb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010eba:	bf04      	itt	eq
 8010ebc:	0200      	lsleq	r0, r0, #8
 8010ebe:	3308      	addeq	r3, #8
 8010ec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010ec4:	bf04      	itt	eq
 8010ec6:	0100      	lsleq	r0, r0, #4
 8010ec8:	3304      	addeq	r3, #4
 8010eca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ece:	bf04      	itt	eq
 8010ed0:	0080      	lsleq	r0, r0, #2
 8010ed2:	3302      	addeq	r3, #2
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	db05      	blt.n	8010ee4 <__hi0bits+0x38>
 8010ed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010edc:	f103 0301 	add.w	r3, r3, #1
 8010ee0:	bf08      	it	eq
 8010ee2:	2320      	moveq	r3, #32
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	4770      	bx	lr
 8010ee8:	2300      	movs	r3, #0
 8010eea:	e7e4      	b.n	8010eb6 <__hi0bits+0xa>

08010eec <__lo0bits>:
 8010eec:	6803      	ldr	r3, [r0, #0]
 8010eee:	f013 0207 	ands.w	r2, r3, #7
 8010ef2:	d00c      	beq.n	8010f0e <__lo0bits+0x22>
 8010ef4:	07d9      	lsls	r1, r3, #31
 8010ef6:	d422      	bmi.n	8010f3e <__lo0bits+0x52>
 8010ef8:	079a      	lsls	r2, r3, #30
 8010efa:	bf49      	itett	mi
 8010efc:	085b      	lsrmi	r3, r3, #1
 8010efe:	089b      	lsrpl	r3, r3, #2
 8010f00:	6003      	strmi	r3, [r0, #0]
 8010f02:	2201      	movmi	r2, #1
 8010f04:	bf5c      	itt	pl
 8010f06:	6003      	strpl	r3, [r0, #0]
 8010f08:	2202      	movpl	r2, #2
 8010f0a:	4610      	mov	r0, r2
 8010f0c:	4770      	bx	lr
 8010f0e:	b299      	uxth	r1, r3
 8010f10:	b909      	cbnz	r1, 8010f16 <__lo0bits+0x2a>
 8010f12:	0c1b      	lsrs	r3, r3, #16
 8010f14:	2210      	movs	r2, #16
 8010f16:	b2d9      	uxtb	r1, r3
 8010f18:	b909      	cbnz	r1, 8010f1e <__lo0bits+0x32>
 8010f1a:	3208      	adds	r2, #8
 8010f1c:	0a1b      	lsrs	r3, r3, #8
 8010f1e:	0719      	lsls	r1, r3, #28
 8010f20:	bf04      	itt	eq
 8010f22:	091b      	lsreq	r3, r3, #4
 8010f24:	3204      	addeq	r2, #4
 8010f26:	0799      	lsls	r1, r3, #30
 8010f28:	bf04      	itt	eq
 8010f2a:	089b      	lsreq	r3, r3, #2
 8010f2c:	3202      	addeq	r2, #2
 8010f2e:	07d9      	lsls	r1, r3, #31
 8010f30:	d403      	bmi.n	8010f3a <__lo0bits+0x4e>
 8010f32:	085b      	lsrs	r3, r3, #1
 8010f34:	f102 0201 	add.w	r2, r2, #1
 8010f38:	d003      	beq.n	8010f42 <__lo0bits+0x56>
 8010f3a:	6003      	str	r3, [r0, #0]
 8010f3c:	e7e5      	b.n	8010f0a <__lo0bits+0x1e>
 8010f3e:	2200      	movs	r2, #0
 8010f40:	e7e3      	b.n	8010f0a <__lo0bits+0x1e>
 8010f42:	2220      	movs	r2, #32
 8010f44:	e7e1      	b.n	8010f0a <__lo0bits+0x1e>
	...

08010f48 <__i2b>:
 8010f48:	b510      	push	{r4, lr}
 8010f4a:	460c      	mov	r4, r1
 8010f4c:	2101      	movs	r1, #1
 8010f4e:	f7ff ff05 	bl	8010d5c <_Balloc>
 8010f52:	4602      	mov	r2, r0
 8010f54:	b928      	cbnz	r0, 8010f62 <__i2b+0x1a>
 8010f56:	4b05      	ldr	r3, [pc, #20]	; (8010f6c <__i2b+0x24>)
 8010f58:	4805      	ldr	r0, [pc, #20]	; (8010f70 <__i2b+0x28>)
 8010f5a:	f240 1145 	movw	r1, #325	; 0x145
 8010f5e:	f000 fc99 	bl	8011894 <__assert_func>
 8010f62:	2301      	movs	r3, #1
 8010f64:	6144      	str	r4, [r0, #20]
 8010f66:	6103      	str	r3, [r0, #16]
 8010f68:	bd10      	pop	{r4, pc}
 8010f6a:	bf00      	nop
 8010f6c:	080124dc 	.word	0x080124dc
 8010f70:	080124ed 	.word	0x080124ed

08010f74 <__multiply>:
 8010f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f78:	4691      	mov	r9, r2
 8010f7a:	690a      	ldr	r2, [r1, #16]
 8010f7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	bfb8      	it	lt
 8010f84:	460b      	movlt	r3, r1
 8010f86:	460c      	mov	r4, r1
 8010f88:	bfbc      	itt	lt
 8010f8a:	464c      	movlt	r4, r9
 8010f8c:	4699      	movlt	r9, r3
 8010f8e:	6927      	ldr	r7, [r4, #16]
 8010f90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010f94:	68a3      	ldr	r3, [r4, #8]
 8010f96:	6861      	ldr	r1, [r4, #4]
 8010f98:	eb07 060a 	add.w	r6, r7, sl
 8010f9c:	42b3      	cmp	r3, r6
 8010f9e:	b085      	sub	sp, #20
 8010fa0:	bfb8      	it	lt
 8010fa2:	3101      	addlt	r1, #1
 8010fa4:	f7ff feda 	bl	8010d5c <_Balloc>
 8010fa8:	b930      	cbnz	r0, 8010fb8 <__multiply+0x44>
 8010faa:	4602      	mov	r2, r0
 8010fac:	4b44      	ldr	r3, [pc, #272]	; (80110c0 <__multiply+0x14c>)
 8010fae:	4845      	ldr	r0, [pc, #276]	; (80110c4 <__multiply+0x150>)
 8010fb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010fb4:	f000 fc6e 	bl	8011894 <__assert_func>
 8010fb8:	f100 0514 	add.w	r5, r0, #20
 8010fbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fc0:	462b      	mov	r3, r5
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	4543      	cmp	r3, r8
 8010fc6:	d321      	bcc.n	801100c <__multiply+0x98>
 8010fc8:	f104 0314 	add.w	r3, r4, #20
 8010fcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010fd0:	f109 0314 	add.w	r3, r9, #20
 8010fd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010fd8:	9202      	str	r2, [sp, #8]
 8010fda:	1b3a      	subs	r2, r7, r4
 8010fdc:	3a15      	subs	r2, #21
 8010fde:	f022 0203 	bic.w	r2, r2, #3
 8010fe2:	3204      	adds	r2, #4
 8010fe4:	f104 0115 	add.w	r1, r4, #21
 8010fe8:	428f      	cmp	r7, r1
 8010fea:	bf38      	it	cc
 8010fec:	2204      	movcc	r2, #4
 8010fee:	9201      	str	r2, [sp, #4]
 8010ff0:	9a02      	ldr	r2, [sp, #8]
 8010ff2:	9303      	str	r3, [sp, #12]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d80c      	bhi.n	8011012 <__multiply+0x9e>
 8010ff8:	2e00      	cmp	r6, #0
 8010ffa:	dd03      	ble.n	8011004 <__multiply+0x90>
 8010ffc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011000:	2b00      	cmp	r3, #0
 8011002:	d05b      	beq.n	80110bc <__multiply+0x148>
 8011004:	6106      	str	r6, [r0, #16]
 8011006:	b005      	add	sp, #20
 8011008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801100c:	f843 2b04 	str.w	r2, [r3], #4
 8011010:	e7d8      	b.n	8010fc4 <__multiply+0x50>
 8011012:	f8b3 a000 	ldrh.w	sl, [r3]
 8011016:	f1ba 0f00 	cmp.w	sl, #0
 801101a:	d024      	beq.n	8011066 <__multiply+0xf2>
 801101c:	f104 0e14 	add.w	lr, r4, #20
 8011020:	46a9      	mov	r9, r5
 8011022:	f04f 0c00 	mov.w	ip, #0
 8011026:	f85e 2b04 	ldr.w	r2, [lr], #4
 801102a:	f8d9 1000 	ldr.w	r1, [r9]
 801102e:	fa1f fb82 	uxth.w	fp, r2
 8011032:	b289      	uxth	r1, r1
 8011034:	fb0a 110b 	mla	r1, sl, fp, r1
 8011038:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801103c:	f8d9 2000 	ldr.w	r2, [r9]
 8011040:	4461      	add	r1, ip
 8011042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011046:	fb0a c20b 	mla	r2, sl, fp, ip
 801104a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801104e:	b289      	uxth	r1, r1
 8011050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011054:	4577      	cmp	r7, lr
 8011056:	f849 1b04 	str.w	r1, [r9], #4
 801105a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801105e:	d8e2      	bhi.n	8011026 <__multiply+0xb2>
 8011060:	9a01      	ldr	r2, [sp, #4]
 8011062:	f845 c002 	str.w	ip, [r5, r2]
 8011066:	9a03      	ldr	r2, [sp, #12]
 8011068:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801106c:	3304      	adds	r3, #4
 801106e:	f1b9 0f00 	cmp.w	r9, #0
 8011072:	d021      	beq.n	80110b8 <__multiply+0x144>
 8011074:	6829      	ldr	r1, [r5, #0]
 8011076:	f104 0c14 	add.w	ip, r4, #20
 801107a:	46ae      	mov	lr, r5
 801107c:	f04f 0a00 	mov.w	sl, #0
 8011080:	f8bc b000 	ldrh.w	fp, [ip]
 8011084:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011088:	fb09 220b 	mla	r2, r9, fp, r2
 801108c:	4452      	add	r2, sl
 801108e:	b289      	uxth	r1, r1
 8011090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011094:	f84e 1b04 	str.w	r1, [lr], #4
 8011098:	f85c 1b04 	ldr.w	r1, [ip], #4
 801109c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80110a0:	f8be 1000 	ldrh.w	r1, [lr]
 80110a4:	fb09 110a 	mla	r1, r9, sl, r1
 80110a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80110ac:	4567      	cmp	r7, ip
 80110ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80110b2:	d8e5      	bhi.n	8011080 <__multiply+0x10c>
 80110b4:	9a01      	ldr	r2, [sp, #4]
 80110b6:	50a9      	str	r1, [r5, r2]
 80110b8:	3504      	adds	r5, #4
 80110ba:	e799      	b.n	8010ff0 <__multiply+0x7c>
 80110bc:	3e01      	subs	r6, #1
 80110be:	e79b      	b.n	8010ff8 <__multiply+0x84>
 80110c0:	080124dc 	.word	0x080124dc
 80110c4:	080124ed 	.word	0x080124ed

080110c8 <__pow5mult>:
 80110c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110cc:	4615      	mov	r5, r2
 80110ce:	f012 0203 	ands.w	r2, r2, #3
 80110d2:	4606      	mov	r6, r0
 80110d4:	460f      	mov	r7, r1
 80110d6:	d007      	beq.n	80110e8 <__pow5mult+0x20>
 80110d8:	4c25      	ldr	r4, [pc, #148]	; (8011170 <__pow5mult+0xa8>)
 80110da:	3a01      	subs	r2, #1
 80110dc:	2300      	movs	r3, #0
 80110de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110e2:	f7ff fe9d 	bl	8010e20 <__multadd>
 80110e6:	4607      	mov	r7, r0
 80110e8:	10ad      	asrs	r5, r5, #2
 80110ea:	d03d      	beq.n	8011168 <__pow5mult+0xa0>
 80110ec:	69f4      	ldr	r4, [r6, #28]
 80110ee:	b97c      	cbnz	r4, 8011110 <__pow5mult+0x48>
 80110f0:	2010      	movs	r0, #16
 80110f2:	f7fe f899 	bl	800f228 <malloc>
 80110f6:	4602      	mov	r2, r0
 80110f8:	61f0      	str	r0, [r6, #28]
 80110fa:	b928      	cbnz	r0, 8011108 <__pow5mult+0x40>
 80110fc:	4b1d      	ldr	r3, [pc, #116]	; (8011174 <__pow5mult+0xac>)
 80110fe:	481e      	ldr	r0, [pc, #120]	; (8011178 <__pow5mult+0xb0>)
 8011100:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011104:	f000 fbc6 	bl	8011894 <__assert_func>
 8011108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801110c:	6004      	str	r4, [r0, #0]
 801110e:	60c4      	str	r4, [r0, #12]
 8011110:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011118:	b94c      	cbnz	r4, 801112e <__pow5mult+0x66>
 801111a:	f240 2171 	movw	r1, #625	; 0x271
 801111e:	4630      	mov	r0, r6
 8011120:	f7ff ff12 	bl	8010f48 <__i2b>
 8011124:	2300      	movs	r3, #0
 8011126:	f8c8 0008 	str.w	r0, [r8, #8]
 801112a:	4604      	mov	r4, r0
 801112c:	6003      	str	r3, [r0, #0]
 801112e:	f04f 0900 	mov.w	r9, #0
 8011132:	07eb      	lsls	r3, r5, #31
 8011134:	d50a      	bpl.n	801114c <__pow5mult+0x84>
 8011136:	4639      	mov	r1, r7
 8011138:	4622      	mov	r2, r4
 801113a:	4630      	mov	r0, r6
 801113c:	f7ff ff1a 	bl	8010f74 <__multiply>
 8011140:	4639      	mov	r1, r7
 8011142:	4680      	mov	r8, r0
 8011144:	4630      	mov	r0, r6
 8011146:	f7ff fe49 	bl	8010ddc <_Bfree>
 801114a:	4647      	mov	r7, r8
 801114c:	106d      	asrs	r5, r5, #1
 801114e:	d00b      	beq.n	8011168 <__pow5mult+0xa0>
 8011150:	6820      	ldr	r0, [r4, #0]
 8011152:	b938      	cbnz	r0, 8011164 <__pow5mult+0x9c>
 8011154:	4622      	mov	r2, r4
 8011156:	4621      	mov	r1, r4
 8011158:	4630      	mov	r0, r6
 801115a:	f7ff ff0b 	bl	8010f74 <__multiply>
 801115e:	6020      	str	r0, [r4, #0]
 8011160:	f8c0 9000 	str.w	r9, [r0]
 8011164:	4604      	mov	r4, r0
 8011166:	e7e4      	b.n	8011132 <__pow5mult+0x6a>
 8011168:	4638      	mov	r0, r7
 801116a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801116e:	bf00      	nop
 8011170:	08012638 	.word	0x08012638
 8011174:	0801246d 	.word	0x0801246d
 8011178:	080124ed 	.word	0x080124ed

0801117c <__lshift>:
 801117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011180:	460c      	mov	r4, r1
 8011182:	6849      	ldr	r1, [r1, #4]
 8011184:	6923      	ldr	r3, [r4, #16]
 8011186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801118a:	68a3      	ldr	r3, [r4, #8]
 801118c:	4607      	mov	r7, r0
 801118e:	4691      	mov	r9, r2
 8011190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011194:	f108 0601 	add.w	r6, r8, #1
 8011198:	42b3      	cmp	r3, r6
 801119a:	db0b      	blt.n	80111b4 <__lshift+0x38>
 801119c:	4638      	mov	r0, r7
 801119e:	f7ff fddd 	bl	8010d5c <_Balloc>
 80111a2:	4605      	mov	r5, r0
 80111a4:	b948      	cbnz	r0, 80111ba <__lshift+0x3e>
 80111a6:	4602      	mov	r2, r0
 80111a8:	4b28      	ldr	r3, [pc, #160]	; (801124c <__lshift+0xd0>)
 80111aa:	4829      	ldr	r0, [pc, #164]	; (8011250 <__lshift+0xd4>)
 80111ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80111b0:	f000 fb70 	bl	8011894 <__assert_func>
 80111b4:	3101      	adds	r1, #1
 80111b6:	005b      	lsls	r3, r3, #1
 80111b8:	e7ee      	b.n	8011198 <__lshift+0x1c>
 80111ba:	2300      	movs	r3, #0
 80111bc:	f100 0114 	add.w	r1, r0, #20
 80111c0:	f100 0210 	add.w	r2, r0, #16
 80111c4:	4618      	mov	r0, r3
 80111c6:	4553      	cmp	r3, sl
 80111c8:	db33      	blt.n	8011232 <__lshift+0xb6>
 80111ca:	6920      	ldr	r0, [r4, #16]
 80111cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111d0:	f104 0314 	add.w	r3, r4, #20
 80111d4:	f019 091f 	ands.w	r9, r9, #31
 80111d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111e0:	d02b      	beq.n	801123a <__lshift+0xbe>
 80111e2:	f1c9 0e20 	rsb	lr, r9, #32
 80111e6:	468a      	mov	sl, r1
 80111e8:	2200      	movs	r2, #0
 80111ea:	6818      	ldr	r0, [r3, #0]
 80111ec:	fa00 f009 	lsl.w	r0, r0, r9
 80111f0:	4310      	orrs	r0, r2
 80111f2:	f84a 0b04 	str.w	r0, [sl], #4
 80111f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80111fa:	459c      	cmp	ip, r3
 80111fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8011200:	d8f3      	bhi.n	80111ea <__lshift+0x6e>
 8011202:	ebac 0304 	sub.w	r3, ip, r4
 8011206:	3b15      	subs	r3, #21
 8011208:	f023 0303 	bic.w	r3, r3, #3
 801120c:	3304      	adds	r3, #4
 801120e:	f104 0015 	add.w	r0, r4, #21
 8011212:	4584      	cmp	ip, r0
 8011214:	bf38      	it	cc
 8011216:	2304      	movcc	r3, #4
 8011218:	50ca      	str	r2, [r1, r3]
 801121a:	b10a      	cbz	r2, 8011220 <__lshift+0xa4>
 801121c:	f108 0602 	add.w	r6, r8, #2
 8011220:	3e01      	subs	r6, #1
 8011222:	4638      	mov	r0, r7
 8011224:	612e      	str	r6, [r5, #16]
 8011226:	4621      	mov	r1, r4
 8011228:	f7ff fdd8 	bl	8010ddc <_Bfree>
 801122c:	4628      	mov	r0, r5
 801122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011232:	f842 0f04 	str.w	r0, [r2, #4]!
 8011236:	3301      	adds	r3, #1
 8011238:	e7c5      	b.n	80111c6 <__lshift+0x4a>
 801123a:	3904      	subs	r1, #4
 801123c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011240:	f841 2f04 	str.w	r2, [r1, #4]!
 8011244:	459c      	cmp	ip, r3
 8011246:	d8f9      	bhi.n	801123c <__lshift+0xc0>
 8011248:	e7ea      	b.n	8011220 <__lshift+0xa4>
 801124a:	bf00      	nop
 801124c:	080124dc 	.word	0x080124dc
 8011250:	080124ed 	.word	0x080124ed

08011254 <__mcmp>:
 8011254:	b530      	push	{r4, r5, lr}
 8011256:	6902      	ldr	r2, [r0, #16]
 8011258:	690c      	ldr	r4, [r1, #16]
 801125a:	1b12      	subs	r2, r2, r4
 801125c:	d10e      	bne.n	801127c <__mcmp+0x28>
 801125e:	f100 0314 	add.w	r3, r0, #20
 8011262:	3114      	adds	r1, #20
 8011264:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801126c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011270:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011274:	42a5      	cmp	r5, r4
 8011276:	d003      	beq.n	8011280 <__mcmp+0x2c>
 8011278:	d305      	bcc.n	8011286 <__mcmp+0x32>
 801127a:	2201      	movs	r2, #1
 801127c:	4610      	mov	r0, r2
 801127e:	bd30      	pop	{r4, r5, pc}
 8011280:	4283      	cmp	r3, r0
 8011282:	d3f3      	bcc.n	801126c <__mcmp+0x18>
 8011284:	e7fa      	b.n	801127c <__mcmp+0x28>
 8011286:	f04f 32ff 	mov.w	r2, #4294967295
 801128a:	e7f7      	b.n	801127c <__mcmp+0x28>

0801128c <__mdiff>:
 801128c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011290:	460c      	mov	r4, r1
 8011292:	4606      	mov	r6, r0
 8011294:	4611      	mov	r1, r2
 8011296:	4620      	mov	r0, r4
 8011298:	4690      	mov	r8, r2
 801129a:	f7ff ffdb 	bl	8011254 <__mcmp>
 801129e:	1e05      	subs	r5, r0, #0
 80112a0:	d110      	bne.n	80112c4 <__mdiff+0x38>
 80112a2:	4629      	mov	r1, r5
 80112a4:	4630      	mov	r0, r6
 80112a6:	f7ff fd59 	bl	8010d5c <_Balloc>
 80112aa:	b930      	cbnz	r0, 80112ba <__mdiff+0x2e>
 80112ac:	4b3a      	ldr	r3, [pc, #232]	; (8011398 <__mdiff+0x10c>)
 80112ae:	4602      	mov	r2, r0
 80112b0:	f240 2137 	movw	r1, #567	; 0x237
 80112b4:	4839      	ldr	r0, [pc, #228]	; (801139c <__mdiff+0x110>)
 80112b6:	f000 faed 	bl	8011894 <__assert_func>
 80112ba:	2301      	movs	r3, #1
 80112bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c4:	bfa4      	itt	ge
 80112c6:	4643      	movge	r3, r8
 80112c8:	46a0      	movge	r8, r4
 80112ca:	4630      	mov	r0, r6
 80112cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80112d0:	bfa6      	itte	ge
 80112d2:	461c      	movge	r4, r3
 80112d4:	2500      	movge	r5, #0
 80112d6:	2501      	movlt	r5, #1
 80112d8:	f7ff fd40 	bl	8010d5c <_Balloc>
 80112dc:	b920      	cbnz	r0, 80112e8 <__mdiff+0x5c>
 80112de:	4b2e      	ldr	r3, [pc, #184]	; (8011398 <__mdiff+0x10c>)
 80112e0:	4602      	mov	r2, r0
 80112e2:	f240 2145 	movw	r1, #581	; 0x245
 80112e6:	e7e5      	b.n	80112b4 <__mdiff+0x28>
 80112e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80112ec:	6926      	ldr	r6, [r4, #16]
 80112ee:	60c5      	str	r5, [r0, #12]
 80112f0:	f104 0914 	add.w	r9, r4, #20
 80112f4:	f108 0514 	add.w	r5, r8, #20
 80112f8:	f100 0e14 	add.w	lr, r0, #20
 80112fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011300:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011304:	f108 0210 	add.w	r2, r8, #16
 8011308:	46f2      	mov	sl, lr
 801130a:	2100      	movs	r1, #0
 801130c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011310:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011314:	fa11 f88b 	uxtah	r8, r1, fp
 8011318:	b299      	uxth	r1, r3
 801131a:	0c1b      	lsrs	r3, r3, #16
 801131c:	eba8 0801 	sub.w	r8, r8, r1
 8011320:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011324:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011328:	fa1f f888 	uxth.w	r8, r8
 801132c:	1419      	asrs	r1, r3, #16
 801132e:	454e      	cmp	r6, r9
 8011330:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011334:	f84a 3b04 	str.w	r3, [sl], #4
 8011338:	d8e8      	bhi.n	801130c <__mdiff+0x80>
 801133a:	1b33      	subs	r3, r6, r4
 801133c:	3b15      	subs	r3, #21
 801133e:	f023 0303 	bic.w	r3, r3, #3
 8011342:	3304      	adds	r3, #4
 8011344:	3415      	adds	r4, #21
 8011346:	42a6      	cmp	r6, r4
 8011348:	bf38      	it	cc
 801134a:	2304      	movcc	r3, #4
 801134c:	441d      	add	r5, r3
 801134e:	4473      	add	r3, lr
 8011350:	469e      	mov	lr, r3
 8011352:	462e      	mov	r6, r5
 8011354:	4566      	cmp	r6, ip
 8011356:	d30e      	bcc.n	8011376 <__mdiff+0xea>
 8011358:	f10c 0203 	add.w	r2, ip, #3
 801135c:	1b52      	subs	r2, r2, r5
 801135e:	f022 0203 	bic.w	r2, r2, #3
 8011362:	3d03      	subs	r5, #3
 8011364:	45ac      	cmp	ip, r5
 8011366:	bf38      	it	cc
 8011368:	2200      	movcc	r2, #0
 801136a:	4413      	add	r3, r2
 801136c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011370:	b17a      	cbz	r2, 8011392 <__mdiff+0x106>
 8011372:	6107      	str	r7, [r0, #16]
 8011374:	e7a4      	b.n	80112c0 <__mdiff+0x34>
 8011376:	f856 8b04 	ldr.w	r8, [r6], #4
 801137a:	fa11 f288 	uxtah	r2, r1, r8
 801137e:	1414      	asrs	r4, r2, #16
 8011380:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011384:	b292      	uxth	r2, r2
 8011386:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801138a:	f84e 2b04 	str.w	r2, [lr], #4
 801138e:	1421      	asrs	r1, r4, #16
 8011390:	e7e0      	b.n	8011354 <__mdiff+0xc8>
 8011392:	3f01      	subs	r7, #1
 8011394:	e7ea      	b.n	801136c <__mdiff+0xe0>
 8011396:	bf00      	nop
 8011398:	080124dc 	.word	0x080124dc
 801139c:	080124ed 	.word	0x080124ed

080113a0 <__d2b>:
 80113a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80113a4:	460f      	mov	r7, r1
 80113a6:	2101      	movs	r1, #1
 80113a8:	ec59 8b10 	vmov	r8, r9, d0
 80113ac:	4616      	mov	r6, r2
 80113ae:	f7ff fcd5 	bl	8010d5c <_Balloc>
 80113b2:	4604      	mov	r4, r0
 80113b4:	b930      	cbnz	r0, 80113c4 <__d2b+0x24>
 80113b6:	4602      	mov	r2, r0
 80113b8:	4b24      	ldr	r3, [pc, #144]	; (801144c <__d2b+0xac>)
 80113ba:	4825      	ldr	r0, [pc, #148]	; (8011450 <__d2b+0xb0>)
 80113bc:	f240 310f 	movw	r1, #783	; 0x30f
 80113c0:	f000 fa68 	bl	8011894 <__assert_func>
 80113c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80113c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80113cc:	bb2d      	cbnz	r5, 801141a <__d2b+0x7a>
 80113ce:	9301      	str	r3, [sp, #4]
 80113d0:	f1b8 0300 	subs.w	r3, r8, #0
 80113d4:	d026      	beq.n	8011424 <__d2b+0x84>
 80113d6:	4668      	mov	r0, sp
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	f7ff fd87 	bl	8010eec <__lo0bits>
 80113de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80113e2:	b1e8      	cbz	r0, 8011420 <__d2b+0x80>
 80113e4:	f1c0 0320 	rsb	r3, r0, #32
 80113e8:	fa02 f303 	lsl.w	r3, r2, r3
 80113ec:	430b      	orrs	r3, r1
 80113ee:	40c2      	lsrs	r2, r0
 80113f0:	6163      	str	r3, [r4, #20]
 80113f2:	9201      	str	r2, [sp, #4]
 80113f4:	9b01      	ldr	r3, [sp, #4]
 80113f6:	61a3      	str	r3, [r4, #24]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	bf14      	ite	ne
 80113fc:	2202      	movne	r2, #2
 80113fe:	2201      	moveq	r2, #1
 8011400:	6122      	str	r2, [r4, #16]
 8011402:	b1bd      	cbz	r5, 8011434 <__d2b+0x94>
 8011404:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011408:	4405      	add	r5, r0
 801140a:	603d      	str	r5, [r7, #0]
 801140c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011410:	6030      	str	r0, [r6, #0]
 8011412:	4620      	mov	r0, r4
 8011414:	b003      	add	sp, #12
 8011416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801141a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801141e:	e7d6      	b.n	80113ce <__d2b+0x2e>
 8011420:	6161      	str	r1, [r4, #20]
 8011422:	e7e7      	b.n	80113f4 <__d2b+0x54>
 8011424:	a801      	add	r0, sp, #4
 8011426:	f7ff fd61 	bl	8010eec <__lo0bits>
 801142a:	9b01      	ldr	r3, [sp, #4]
 801142c:	6163      	str	r3, [r4, #20]
 801142e:	3020      	adds	r0, #32
 8011430:	2201      	movs	r2, #1
 8011432:	e7e5      	b.n	8011400 <__d2b+0x60>
 8011434:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011438:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801143c:	6038      	str	r0, [r7, #0]
 801143e:	6918      	ldr	r0, [r3, #16]
 8011440:	f7ff fd34 	bl	8010eac <__hi0bits>
 8011444:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011448:	e7e2      	b.n	8011410 <__d2b+0x70>
 801144a:	bf00      	nop
 801144c:	080124dc 	.word	0x080124dc
 8011450:	080124ed 	.word	0x080124ed

08011454 <__ssputs_r>:
 8011454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011458:	688e      	ldr	r6, [r1, #8]
 801145a:	461f      	mov	r7, r3
 801145c:	42be      	cmp	r6, r7
 801145e:	680b      	ldr	r3, [r1, #0]
 8011460:	4682      	mov	sl, r0
 8011462:	460c      	mov	r4, r1
 8011464:	4690      	mov	r8, r2
 8011466:	d82c      	bhi.n	80114c2 <__ssputs_r+0x6e>
 8011468:	898a      	ldrh	r2, [r1, #12]
 801146a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801146e:	d026      	beq.n	80114be <__ssputs_r+0x6a>
 8011470:	6965      	ldr	r5, [r4, #20]
 8011472:	6909      	ldr	r1, [r1, #16]
 8011474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011478:	eba3 0901 	sub.w	r9, r3, r1
 801147c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011480:	1c7b      	adds	r3, r7, #1
 8011482:	444b      	add	r3, r9
 8011484:	106d      	asrs	r5, r5, #1
 8011486:	429d      	cmp	r5, r3
 8011488:	bf38      	it	cc
 801148a:	461d      	movcc	r5, r3
 801148c:	0553      	lsls	r3, r2, #21
 801148e:	d527      	bpl.n	80114e0 <__ssputs_r+0x8c>
 8011490:	4629      	mov	r1, r5
 8011492:	f7fd fef9 	bl	800f288 <_malloc_r>
 8011496:	4606      	mov	r6, r0
 8011498:	b360      	cbz	r0, 80114f4 <__ssputs_r+0xa0>
 801149a:	6921      	ldr	r1, [r4, #16]
 801149c:	464a      	mov	r2, r9
 801149e:	f7fe fd87 	bl	800ffb0 <memcpy>
 80114a2:	89a3      	ldrh	r3, [r4, #12]
 80114a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80114a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114ac:	81a3      	strh	r3, [r4, #12]
 80114ae:	6126      	str	r6, [r4, #16]
 80114b0:	6165      	str	r5, [r4, #20]
 80114b2:	444e      	add	r6, r9
 80114b4:	eba5 0509 	sub.w	r5, r5, r9
 80114b8:	6026      	str	r6, [r4, #0]
 80114ba:	60a5      	str	r5, [r4, #8]
 80114bc:	463e      	mov	r6, r7
 80114be:	42be      	cmp	r6, r7
 80114c0:	d900      	bls.n	80114c4 <__ssputs_r+0x70>
 80114c2:	463e      	mov	r6, r7
 80114c4:	6820      	ldr	r0, [r4, #0]
 80114c6:	4632      	mov	r2, r6
 80114c8:	4641      	mov	r1, r8
 80114ca:	f000 f9c9 	bl	8011860 <memmove>
 80114ce:	68a3      	ldr	r3, [r4, #8]
 80114d0:	1b9b      	subs	r3, r3, r6
 80114d2:	60a3      	str	r3, [r4, #8]
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	4433      	add	r3, r6
 80114d8:	6023      	str	r3, [r4, #0]
 80114da:	2000      	movs	r0, #0
 80114dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114e0:	462a      	mov	r2, r5
 80114e2:	f000 fa1d 	bl	8011920 <_realloc_r>
 80114e6:	4606      	mov	r6, r0
 80114e8:	2800      	cmp	r0, #0
 80114ea:	d1e0      	bne.n	80114ae <__ssputs_r+0x5a>
 80114ec:	6921      	ldr	r1, [r4, #16]
 80114ee:	4650      	mov	r0, sl
 80114f0:	f7ff fbe8 	bl	8010cc4 <_free_r>
 80114f4:	230c      	movs	r3, #12
 80114f6:	f8ca 3000 	str.w	r3, [sl]
 80114fa:	89a3      	ldrh	r3, [r4, #12]
 80114fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011500:	81a3      	strh	r3, [r4, #12]
 8011502:	f04f 30ff 	mov.w	r0, #4294967295
 8011506:	e7e9      	b.n	80114dc <__ssputs_r+0x88>

08011508 <_svfiprintf_r>:
 8011508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801150c:	4698      	mov	r8, r3
 801150e:	898b      	ldrh	r3, [r1, #12]
 8011510:	061b      	lsls	r3, r3, #24
 8011512:	b09d      	sub	sp, #116	; 0x74
 8011514:	4607      	mov	r7, r0
 8011516:	460d      	mov	r5, r1
 8011518:	4614      	mov	r4, r2
 801151a:	d50e      	bpl.n	801153a <_svfiprintf_r+0x32>
 801151c:	690b      	ldr	r3, [r1, #16]
 801151e:	b963      	cbnz	r3, 801153a <_svfiprintf_r+0x32>
 8011520:	2140      	movs	r1, #64	; 0x40
 8011522:	f7fd feb1 	bl	800f288 <_malloc_r>
 8011526:	6028      	str	r0, [r5, #0]
 8011528:	6128      	str	r0, [r5, #16]
 801152a:	b920      	cbnz	r0, 8011536 <_svfiprintf_r+0x2e>
 801152c:	230c      	movs	r3, #12
 801152e:	603b      	str	r3, [r7, #0]
 8011530:	f04f 30ff 	mov.w	r0, #4294967295
 8011534:	e0d0      	b.n	80116d8 <_svfiprintf_r+0x1d0>
 8011536:	2340      	movs	r3, #64	; 0x40
 8011538:	616b      	str	r3, [r5, #20]
 801153a:	2300      	movs	r3, #0
 801153c:	9309      	str	r3, [sp, #36]	; 0x24
 801153e:	2320      	movs	r3, #32
 8011540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011544:	f8cd 800c 	str.w	r8, [sp, #12]
 8011548:	2330      	movs	r3, #48	; 0x30
 801154a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80116f0 <_svfiprintf_r+0x1e8>
 801154e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011552:	f04f 0901 	mov.w	r9, #1
 8011556:	4623      	mov	r3, r4
 8011558:	469a      	mov	sl, r3
 801155a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801155e:	b10a      	cbz	r2, 8011564 <_svfiprintf_r+0x5c>
 8011560:	2a25      	cmp	r2, #37	; 0x25
 8011562:	d1f9      	bne.n	8011558 <_svfiprintf_r+0x50>
 8011564:	ebba 0b04 	subs.w	fp, sl, r4
 8011568:	d00b      	beq.n	8011582 <_svfiprintf_r+0x7a>
 801156a:	465b      	mov	r3, fp
 801156c:	4622      	mov	r2, r4
 801156e:	4629      	mov	r1, r5
 8011570:	4638      	mov	r0, r7
 8011572:	f7ff ff6f 	bl	8011454 <__ssputs_r>
 8011576:	3001      	adds	r0, #1
 8011578:	f000 80a9 	beq.w	80116ce <_svfiprintf_r+0x1c6>
 801157c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801157e:	445a      	add	r2, fp
 8011580:	9209      	str	r2, [sp, #36]	; 0x24
 8011582:	f89a 3000 	ldrb.w	r3, [sl]
 8011586:	2b00      	cmp	r3, #0
 8011588:	f000 80a1 	beq.w	80116ce <_svfiprintf_r+0x1c6>
 801158c:	2300      	movs	r3, #0
 801158e:	f04f 32ff 	mov.w	r2, #4294967295
 8011592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011596:	f10a 0a01 	add.w	sl, sl, #1
 801159a:	9304      	str	r3, [sp, #16]
 801159c:	9307      	str	r3, [sp, #28]
 801159e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115a2:	931a      	str	r3, [sp, #104]	; 0x68
 80115a4:	4654      	mov	r4, sl
 80115a6:	2205      	movs	r2, #5
 80115a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115ac:	4850      	ldr	r0, [pc, #320]	; (80116f0 <_svfiprintf_r+0x1e8>)
 80115ae:	f7ee fe0f 	bl	80001d0 <memchr>
 80115b2:	9a04      	ldr	r2, [sp, #16]
 80115b4:	b9d8      	cbnz	r0, 80115ee <_svfiprintf_r+0xe6>
 80115b6:	06d0      	lsls	r0, r2, #27
 80115b8:	bf44      	itt	mi
 80115ba:	2320      	movmi	r3, #32
 80115bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115c0:	0711      	lsls	r1, r2, #28
 80115c2:	bf44      	itt	mi
 80115c4:	232b      	movmi	r3, #43	; 0x2b
 80115c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115ca:	f89a 3000 	ldrb.w	r3, [sl]
 80115ce:	2b2a      	cmp	r3, #42	; 0x2a
 80115d0:	d015      	beq.n	80115fe <_svfiprintf_r+0xf6>
 80115d2:	9a07      	ldr	r2, [sp, #28]
 80115d4:	4654      	mov	r4, sl
 80115d6:	2000      	movs	r0, #0
 80115d8:	f04f 0c0a 	mov.w	ip, #10
 80115dc:	4621      	mov	r1, r4
 80115de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115e2:	3b30      	subs	r3, #48	; 0x30
 80115e4:	2b09      	cmp	r3, #9
 80115e6:	d94d      	bls.n	8011684 <_svfiprintf_r+0x17c>
 80115e8:	b1b0      	cbz	r0, 8011618 <_svfiprintf_r+0x110>
 80115ea:	9207      	str	r2, [sp, #28]
 80115ec:	e014      	b.n	8011618 <_svfiprintf_r+0x110>
 80115ee:	eba0 0308 	sub.w	r3, r0, r8
 80115f2:	fa09 f303 	lsl.w	r3, r9, r3
 80115f6:	4313      	orrs	r3, r2
 80115f8:	9304      	str	r3, [sp, #16]
 80115fa:	46a2      	mov	sl, r4
 80115fc:	e7d2      	b.n	80115a4 <_svfiprintf_r+0x9c>
 80115fe:	9b03      	ldr	r3, [sp, #12]
 8011600:	1d19      	adds	r1, r3, #4
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	9103      	str	r1, [sp, #12]
 8011606:	2b00      	cmp	r3, #0
 8011608:	bfbb      	ittet	lt
 801160a:	425b      	neglt	r3, r3
 801160c:	f042 0202 	orrlt.w	r2, r2, #2
 8011610:	9307      	strge	r3, [sp, #28]
 8011612:	9307      	strlt	r3, [sp, #28]
 8011614:	bfb8      	it	lt
 8011616:	9204      	strlt	r2, [sp, #16]
 8011618:	7823      	ldrb	r3, [r4, #0]
 801161a:	2b2e      	cmp	r3, #46	; 0x2e
 801161c:	d10c      	bne.n	8011638 <_svfiprintf_r+0x130>
 801161e:	7863      	ldrb	r3, [r4, #1]
 8011620:	2b2a      	cmp	r3, #42	; 0x2a
 8011622:	d134      	bne.n	801168e <_svfiprintf_r+0x186>
 8011624:	9b03      	ldr	r3, [sp, #12]
 8011626:	1d1a      	adds	r2, r3, #4
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	9203      	str	r2, [sp, #12]
 801162c:	2b00      	cmp	r3, #0
 801162e:	bfb8      	it	lt
 8011630:	f04f 33ff 	movlt.w	r3, #4294967295
 8011634:	3402      	adds	r4, #2
 8011636:	9305      	str	r3, [sp, #20]
 8011638:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011700 <_svfiprintf_r+0x1f8>
 801163c:	7821      	ldrb	r1, [r4, #0]
 801163e:	2203      	movs	r2, #3
 8011640:	4650      	mov	r0, sl
 8011642:	f7ee fdc5 	bl	80001d0 <memchr>
 8011646:	b138      	cbz	r0, 8011658 <_svfiprintf_r+0x150>
 8011648:	9b04      	ldr	r3, [sp, #16]
 801164a:	eba0 000a 	sub.w	r0, r0, sl
 801164e:	2240      	movs	r2, #64	; 0x40
 8011650:	4082      	lsls	r2, r0
 8011652:	4313      	orrs	r3, r2
 8011654:	3401      	adds	r4, #1
 8011656:	9304      	str	r3, [sp, #16]
 8011658:	f814 1b01 	ldrb.w	r1, [r4], #1
 801165c:	4825      	ldr	r0, [pc, #148]	; (80116f4 <_svfiprintf_r+0x1ec>)
 801165e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011662:	2206      	movs	r2, #6
 8011664:	f7ee fdb4 	bl	80001d0 <memchr>
 8011668:	2800      	cmp	r0, #0
 801166a:	d038      	beq.n	80116de <_svfiprintf_r+0x1d6>
 801166c:	4b22      	ldr	r3, [pc, #136]	; (80116f8 <_svfiprintf_r+0x1f0>)
 801166e:	bb1b      	cbnz	r3, 80116b8 <_svfiprintf_r+0x1b0>
 8011670:	9b03      	ldr	r3, [sp, #12]
 8011672:	3307      	adds	r3, #7
 8011674:	f023 0307 	bic.w	r3, r3, #7
 8011678:	3308      	adds	r3, #8
 801167a:	9303      	str	r3, [sp, #12]
 801167c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801167e:	4433      	add	r3, r6
 8011680:	9309      	str	r3, [sp, #36]	; 0x24
 8011682:	e768      	b.n	8011556 <_svfiprintf_r+0x4e>
 8011684:	fb0c 3202 	mla	r2, ip, r2, r3
 8011688:	460c      	mov	r4, r1
 801168a:	2001      	movs	r0, #1
 801168c:	e7a6      	b.n	80115dc <_svfiprintf_r+0xd4>
 801168e:	2300      	movs	r3, #0
 8011690:	3401      	adds	r4, #1
 8011692:	9305      	str	r3, [sp, #20]
 8011694:	4619      	mov	r1, r3
 8011696:	f04f 0c0a 	mov.w	ip, #10
 801169a:	4620      	mov	r0, r4
 801169c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116a0:	3a30      	subs	r2, #48	; 0x30
 80116a2:	2a09      	cmp	r2, #9
 80116a4:	d903      	bls.n	80116ae <_svfiprintf_r+0x1a6>
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d0c6      	beq.n	8011638 <_svfiprintf_r+0x130>
 80116aa:	9105      	str	r1, [sp, #20]
 80116ac:	e7c4      	b.n	8011638 <_svfiprintf_r+0x130>
 80116ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80116b2:	4604      	mov	r4, r0
 80116b4:	2301      	movs	r3, #1
 80116b6:	e7f0      	b.n	801169a <_svfiprintf_r+0x192>
 80116b8:	ab03      	add	r3, sp, #12
 80116ba:	9300      	str	r3, [sp, #0]
 80116bc:	462a      	mov	r2, r5
 80116be:	4b0f      	ldr	r3, [pc, #60]	; (80116fc <_svfiprintf_r+0x1f4>)
 80116c0:	a904      	add	r1, sp, #16
 80116c2:	4638      	mov	r0, r7
 80116c4:	f7fd ff0c 	bl	800f4e0 <_printf_float>
 80116c8:	1c42      	adds	r2, r0, #1
 80116ca:	4606      	mov	r6, r0
 80116cc:	d1d6      	bne.n	801167c <_svfiprintf_r+0x174>
 80116ce:	89ab      	ldrh	r3, [r5, #12]
 80116d0:	065b      	lsls	r3, r3, #25
 80116d2:	f53f af2d 	bmi.w	8011530 <_svfiprintf_r+0x28>
 80116d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116d8:	b01d      	add	sp, #116	; 0x74
 80116da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116de:	ab03      	add	r3, sp, #12
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	462a      	mov	r2, r5
 80116e4:	4b05      	ldr	r3, [pc, #20]	; (80116fc <_svfiprintf_r+0x1f4>)
 80116e6:	a904      	add	r1, sp, #16
 80116e8:	4638      	mov	r0, r7
 80116ea:	f7fe f99d 	bl	800fa28 <_printf_i>
 80116ee:	e7eb      	b.n	80116c8 <_svfiprintf_r+0x1c0>
 80116f0:	08012644 	.word	0x08012644
 80116f4:	0801264e 	.word	0x0801264e
 80116f8:	0800f4e1 	.word	0x0800f4e1
 80116fc:	08011455 	.word	0x08011455
 8011700:	0801264a 	.word	0x0801264a

08011704 <__sflush_r>:
 8011704:	898a      	ldrh	r2, [r1, #12]
 8011706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801170a:	4605      	mov	r5, r0
 801170c:	0710      	lsls	r0, r2, #28
 801170e:	460c      	mov	r4, r1
 8011710:	d458      	bmi.n	80117c4 <__sflush_r+0xc0>
 8011712:	684b      	ldr	r3, [r1, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	dc05      	bgt.n	8011724 <__sflush_r+0x20>
 8011718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801171a:	2b00      	cmp	r3, #0
 801171c:	dc02      	bgt.n	8011724 <__sflush_r+0x20>
 801171e:	2000      	movs	r0, #0
 8011720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011726:	2e00      	cmp	r6, #0
 8011728:	d0f9      	beq.n	801171e <__sflush_r+0x1a>
 801172a:	2300      	movs	r3, #0
 801172c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011730:	682f      	ldr	r7, [r5, #0]
 8011732:	6a21      	ldr	r1, [r4, #32]
 8011734:	602b      	str	r3, [r5, #0]
 8011736:	d032      	beq.n	801179e <__sflush_r+0x9a>
 8011738:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801173a:	89a3      	ldrh	r3, [r4, #12]
 801173c:	075a      	lsls	r2, r3, #29
 801173e:	d505      	bpl.n	801174c <__sflush_r+0x48>
 8011740:	6863      	ldr	r3, [r4, #4]
 8011742:	1ac0      	subs	r0, r0, r3
 8011744:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011746:	b10b      	cbz	r3, 801174c <__sflush_r+0x48>
 8011748:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801174a:	1ac0      	subs	r0, r0, r3
 801174c:	2300      	movs	r3, #0
 801174e:	4602      	mov	r2, r0
 8011750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011752:	6a21      	ldr	r1, [r4, #32]
 8011754:	4628      	mov	r0, r5
 8011756:	47b0      	blx	r6
 8011758:	1c43      	adds	r3, r0, #1
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	d106      	bne.n	801176c <__sflush_r+0x68>
 801175e:	6829      	ldr	r1, [r5, #0]
 8011760:	291d      	cmp	r1, #29
 8011762:	d82b      	bhi.n	80117bc <__sflush_r+0xb8>
 8011764:	4a29      	ldr	r2, [pc, #164]	; (801180c <__sflush_r+0x108>)
 8011766:	410a      	asrs	r2, r1
 8011768:	07d6      	lsls	r6, r2, #31
 801176a:	d427      	bmi.n	80117bc <__sflush_r+0xb8>
 801176c:	2200      	movs	r2, #0
 801176e:	6062      	str	r2, [r4, #4]
 8011770:	04d9      	lsls	r1, r3, #19
 8011772:	6922      	ldr	r2, [r4, #16]
 8011774:	6022      	str	r2, [r4, #0]
 8011776:	d504      	bpl.n	8011782 <__sflush_r+0x7e>
 8011778:	1c42      	adds	r2, r0, #1
 801177a:	d101      	bne.n	8011780 <__sflush_r+0x7c>
 801177c:	682b      	ldr	r3, [r5, #0]
 801177e:	b903      	cbnz	r3, 8011782 <__sflush_r+0x7e>
 8011780:	6560      	str	r0, [r4, #84]	; 0x54
 8011782:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011784:	602f      	str	r7, [r5, #0]
 8011786:	2900      	cmp	r1, #0
 8011788:	d0c9      	beq.n	801171e <__sflush_r+0x1a>
 801178a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801178e:	4299      	cmp	r1, r3
 8011790:	d002      	beq.n	8011798 <__sflush_r+0x94>
 8011792:	4628      	mov	r0, r5
 8011794:	f7ff fa96 	bl	8010cc4 <_free_r>
 8011798:	2000      	movs	r0, #0
 801179a:	6360      	str	r0, [r4, #52]	; 0x34
 801179c:	e7c0      	b.n	8011720 <__sflush_r+0x1c>
 801179e:	2301      	movs	r3, #1
 80117a0:	4628      	mov	r0, r5
 80117a2:	47b0      	blx	r6
 80117a4:	1c41      	adds	r1, r0, #1
 80117a6:	d1c8      	bne.n	801173a <__sflush_r+0x36>
 80117a8:	682b      	ldr	r3, [r5, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d0c5      	beq.n	801173a <__sflush_r+0x36>
 80117ae:	2b1d      	cmp	r3, #29
 80117b0:	d001      	beq.n	80117b6 <__sflush_r+0xb2>
 80117b2:	2b16      	cmp	r3, #22
 80117b4:	d101      	bne.n	80117ba <__sflush_r+0xb6>
 80117b6:	602f      	str	r7, [r5, #0]
 80117b8:	e7b1      	b.n	801171e <__sflush_r+0x1a>
 80117ba:	89a3      	ldrh	r3, [r4, #12]
 80117bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117c0:	81a3      	strh	r3, [r4, #12]
 80117c2:	e7ad      	b.n	8011720 <__sflush_r+0x1c>
 80117c4:	690f      	ldr	r7, [r1, #16]
 80117c6:	2f00      	cmp	r7, #0
 80117c8:	d0a9      	beq.n	801171e <__sflush_r+0x1a>
 80117ca:	0793      	lsls	r3, r2, #30
 80117cc:	680e      	ldr	r6, [r1, #0]
 80117ce:	bf08      	it	eq
 80117d0:	694b      	ldreq	r3, [r1, #20]
 80117d2:	600f      	str	r7, [r1, #0]
 80117d4:	bf18      	it	ne
 80117d6:	2300      	movne	r3, #0
 80117d8:	eba6 0807 	sub.w	r8, r6, r7
 80117dc:	608b      	str	r3, [r1, #8]
 80117de:	f1b8 0f00 	cmp.w	r8, #0
 80117e2:	dd9c      	ble.n	801171e <__sflush_r+0x1a>
 80117e4:	6a21      	ldr	r1, [r4, #32]
 80117e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80117e8:	4643      	mov	r3, r8
 80117ea:	463a      	mov	r2, r7
 80117ec:	4628      	mov	r0, r5
 80117ee:	47b0      	blx	r6
 80117f0:	2800      	cmp	r0, #0
 80117f2:	dc06      	bgt.n	8011802 <__sflush_r+0xfe>
 80117f4:	89a3      	ldrh	r3, [r4, #12]
 80117f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117fa:	81a3      	strh	r3, [r4, #12]
 80117fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011800:	e78e      	b.n	8011720 <__sflush_r+0x1c>
 8011802:	4407      	add	r7, r0
 8011804:	eba8 0800 	sub.w	r8, r8, r0
 8011808:	e7e9      	b.n	80117de <__sflush_r+0xda>
 801180a:	bf00      	nop
 801180c:	dfbffffe 	.word	0xdfbffffe

08011810 <_fflush_r>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	690b      	ldr	r3, [r1, #16]
 8011814:	4605      	mov	r5, r0
 8011816:	460c      	mov	r4, r1
 8011818:	b913      	cbnz	r3, 8011820 <_fflush_r+0x10>
 801181a:	2500      	movs	r5, #0
 801181c:	4628      	mov	r0, r5
 801181e:	bd38      	pop	{r3, r4, r5, pc}
 8011820:	b118      	cbz	r0, 801182a <_fflush_r+0x1a>
 8011822:	6a03      	ldr	r3, [r0, #32]
 8011824:	b90b      	cbnz	r3, 801182a <_fflush_r+0x1a>
 8011826:	f7fe fa9b 	bl	800fd60 <__sinit>
 801182a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d0f3      	beq.n	801181a <_fflush_r+0xa>
 8011832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011834:	07d0      	lsls	r0, r2, #31
 8011836:	d404      	bmi.n	8011842 <_fflush_r+0x32>
 8011838:	0599      	lsls	r1, r3, #22
 801183a:	d402      	bmi.n	8011842 <_fflush_r+0x32>
 801183c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801183e:	f7fe fbb5 	bl	800ffac <__retarget_lock_acquire_recursive>
 8011842:	4628      	mov	r0, r5
 8011844:	4621      	mov	r1, r4
 8011846:	f7ff ff5d 	bl	8011704 <__sflush_r>
 801184a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801184c:	07da      	lsls	r2, r3, #31
 801184e:	4605      	mov	r5, r0
 8011850:	d4e4      	bmi.n	801181c <_fflush_r+0xc>
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	059b      	lsls	r3, r3, #22
 8011856:	d4e1      	bmi.n	801181c <_fflush_r+0xc>
 8011858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801185a:	f7fe fba8 	bl	800ffae <__retarget_lock_release_recursive>
 801185e:	e7dd      	b.n	801181c <_fflush_r+0xc>

08011860 <memmove>:
 8011860:	4288      	cmp	r0, r1
 8011862:	b510      	push	{r4, lr}
 8011864:	eb01 0402 	add.w	r4, r1, r2
 8011868:	d902      	bls.n	8011870 <memmove+0x10>
 801186a:	4284      	cmp	r4, r0
 801186c:	4623      	mov	r3, r4
 801186e:	d807      	bhi.n	8011880 <memmove+0x20>
 8011870:	1e43      	subs	r3, r0, #1
 8011872:	42a1      	cmp	r1, r4
 8011874:	d008      	beq.n	8011888 <memmove+0x28>
 8011876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801187a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801187e:	e7f8      	b.n	8011872 <memmove+0x12>
 8011880:	4402      	add	r2, r0
 8011882:	4601      	mov	r1, r0
 8011884:	428a      	cmp	r2, r1
 8011886:	d100      	bne.n	801188a <memmove+0x2a>
 8011888:	bd10      	pop	{r4, pc}
 801188a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801188e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011892:	e7f7      	b.n	8011884 <memmove+0x24>

08011894 <__assert_func>:
 8011894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011896:	4614      	mov	r4, r2
 8011898:	461a      	mov	r2, r3
 801189a:	4b09      	ldr	r3, [pc, #36]	; (80118c0 <__assert_func+0x2c>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4605      	mov	r5, r0
 80118a0:	68d8      	ldr	r0, [r3, #12]
 80118a2:	b14c      	cbz	r4, 80118b8 <__assert_func+0x24>
 80118a4:	4b07      	ldr	r3, [pc, #28]	; (80118c4 <__assert_func+0x30>)
 80118a6:	9100      	str	r1, [sp, #0]
 80118a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118ac:	4906      	ldr	r1, [pc, #24]	; (80118c8 <__assert_func+0x34>)
 80118ae:	462b      	mov	r3, r5
 80118b0:	f000 f872 	bl	8011998 <fiprintf>
 80118b4:	f000 f882 	bl	80119bc <abort>
 80118b8:	4b04      	ldr	r3, [pc, #16]	; (80118cc <__assert_func+0x38>)
 80118ba:	461c      	mov	r4, r3
 80118bc:	e7f3      	b.n	80118a6 <__assert_func+0x12>
 80118be:	bf00      	nop
 80118c0:	2000038c 	.word	0x2000038c
 80118c4:	0801265f 	.word	0x0801265f
 80118c8:	0801266c 	.word	0x0801266c
 80118cc:	0801269a 	.word	0x0801269a

080118d0 <_calloc_r>:
 80118d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118d2:	fba1 2402 	umull	r2, r4, r1, r2
 80118d6:	b94c      	cbnz	r4, 80118ec <_calloc_r+0x1c>
 80118d8:	4611      	mov	r1, r2
 80118da:	9201      	str	r2, [sp, #4]
 80118dc:	f7fd fcd4 	bl	800f288 <_malloc_r>
 80118e0:	9a01      	ldr	r2, [sp, #4]
 80118e2:	4605      	mov	r5, r0
 80118e4:	b930      	cbnz	r0, 80118f4 <_calloc_r+0x24>
 80118e6:	4628      	mov	r0, r5
 80118e8:	b003      	add	sp, #12
 80118ea:	bd30      	pop	{r4, r5, pc}
 80118ec:	220c      	movs	r2, #12
 80118ee:	6002      	str	r2, [r0, #0]
 80118f0:	2500      	movs	r5, #0
 80118f2:	e7f8      	b.n	80118e6 <_calloc_r+0x16>
 80118f4:	4621      	mov	r1, r4
 80118f6:	f7fe facc 	bl	800fe92 <memset>
 80118fa:	e7f4      	b.n	80118e6 <_calloc_r+0x16>

080118fc <__ascii_mbtowc>:
 80118fc:	b082      	sub	sp, #8
 80118fe:	b901      	cbnz	r1, 8011902 <__ascii_mbtowc+0x6>
 8011900:	a901      	add	r1, sp, #4
 8011902:	b142      	cbz	r2, 8011916 <__ascii_mbtowc+0x1a>
 8011904:	b14b      	cbz	r3, 801191a <__ascii_mbtowc+0x1e>
 8011906:	7813      	ldrb	r3, [r2, #0]
 8011908:	600b      	str	r3, [r1, #0]
 801190a:	7812      	ldrb	r2, [r2, #0]
 801190c:	1e10      	subs	r0, r2, #0
 801190e:	bf18      	it	ne
 8011910:	2001      	movne	r0, #1
 8011912:	b002      	add	sp, #8
 8011914:	4770      	bx	lr
 8011916:	4610      	mov	r0, r2
 8011918:	e7fb      	b.n	8011912 <__ascii_mbtowc+0x16>
 801191a:	f06f 0001 	mvn.w	r0, #1
 801191e:	e7f8      	b.n	8011912 <__ascii_mbtowc+0x16>

08011920 <_realloc_r>:
 8011920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011924:	4680      	mov	r8, r0
 8011926:	4614      	mov	r4, r2
 8011928:	460e      	mov	r6, r1
 801192a:	b921      	cbnz	r1, 8011936 <_realloc_r+0x16>
 801192c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011930:	4611      	mov	r1, r2
 8011932:	f7fd bca9 	b.w	800f288 <_malloc_r>
 8011936:	b92a      	cbnz	r2, 8011944 <_realloc_r+0x24>
 8011938:	f7ff f9c4 	bl	8010cc4 <_free_r>
 801193c:	4625      	mov	r5, r4
 801193e:	4628      	mov	r0, r5
 8011940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011944:	f000 f841 	bl	80119ca <_malloc_usable_size_r>
 8011948:	4284      	cmp	r4, r0
 801194a:	4607      	mov	r7, r0
 801194c:	d802      	bhi.n	8011954 <_realloc_r+0x34>
 801194e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011952:	d812      	bhi.n	801197a <_realloc_r+0x5a>
 8011954:	4621      	mov	r1, r4
 8011956:	4640      	mov	r0, r8
 8011958:	f7fd fc96 	bl	800f288 <_malloc_r>
 801195c:	4605      	mov	r5, r0
 801195e:	2800      	cmp	r0, #0
 8011960:	d0ed      	beq.n	801193e <_realloc_r+0x1e>
 8011962:	42bc      	cmp	r4, r7
 8011964:	4622      	mov	r2, r4
 8011966:	4631      	mov	r1, r6
 8011968:	bf28      	it	cs
 801196a:	463a      	movcs	r2, r7
 801196c:	f7fe fb20 	bl	800ffb0 <memcpy>
 8011970:	4631      	mov	r1, r6
 8011972:	4640      	mov	r0, r8
 8011974:	f7ff f9a6 	bl	8010cc4 <_free_r>
 8011978:	e7e1      	b.n	801193e <_realloc_r+0x1e>
 801197a:	4635      	mov	r5, r6
 801197c:	e7df      	b.n	801193e <_realloc_r+0x1e>

0801197e <__ascii_wctomb>:
 801197e:	b149      	cbz	r1, 8011994 <__ascii_wctomb+0x16>
 8011980:	2aff      	cmp	r2, #255	; 0xff
 8011982:	bf85      	ittet	hi
 8011984:	238a      	movhi	r3, #138	; 0x8a
 8011986:	6003      	strhi	r3, [r0, #0]
 8011988:	700a      	strbls	r2, [r1, #0]
 801198a:	f04f 30ff 	movhi.w	r0, #4294967295
 801198e:	bf98      	it	ls
 8011990:	2001      	movls	r0, #1
 8011992:	4770      	bx	lr
 8011994:	4608      	mov	r0, r1
 8011996:	4770      	bx	lr

08011998 <fiprintf>:
 8011998:	b40e      	push	{r1, r2, r3}
 801199a:	b503      	push	{r0, r1, lr}
 801199c:	4601      	mov	r1, r0
 801199e:	ab03      	add	r3, sp, #12
 80119a0:	4805      	ldr	r0, [pc, #20]	; (80119b8 <fiprintf+0x20>)
 80119a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80119a6:	6800      	ldr	r0, [r0, #0]
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	f000 f83f 	bl	8011a2c <_vfiprintf_r>
 80119ae:	b002      	add	sp, #8
 80119b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80119b4:	b003      	add	sp, #12
 80119b6:	4770      	bx	lr
 80119b8:	2000038c 	.word	0x2000038c

080119bc <abort>:
 80119bc:	b508      	push	{r3, lr}
 80119be:	2006      	movs	r0, #6
 80119c0:	f000 fa0c 	bl	8011ddc <raise>
 80119c4:	2001      	movs	r0, #1
 80119c6:	f7f4 fc40 	bl	800624a <_exit>

080119ca <_malloc_usable_size_r>:
 80119ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119ce:	1f18      	subs	r0, r3, #4
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	bfbc      	itt	lt
 80119d4:	580b      	ldrlt	r3, [r1, r0]
 80119d6:	18c0      	addlt	r0, r0, r3
 80119d8:	4770      	bx	lr

080119da <__sfputc_r>:
 80119da:	6893      	ldr	r3, [r2, #8]
 80119dc:	3b01      	subs	r3, #1
 80119de:	2b00      	cmp	r3, #0
 80119e0:	b410      	push	{r4}
 80119e2:	6093      	str	r3, [r2, #8]
 80119e4:	da08      	bge.n	80119f8 <__sfputc_r+0x1e>
 80119e6:	6994      	ldr	r4, [r2, #24]
 80119e8:	42a3      	cmp	r3, r4
 80119ea:	db01      	blt.n	80119f0 <__sfputc_r+0x16>
 80119ec:	290a      	cmp	r1, #10
 80119ee:	d103      	bne.n	80119f8 <__sfputc_r+0x1e>
 80119f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119f4:	f000 b934 	b.w	8011c60 <__swbuf_r>
 80119f8:	6813      	ldr	r3, [r2, #0]
 80119fa:	1c58      	adds	r0, r3, #1
 80119fc:	6010      	str	r0, [r2, #0]
 80119fe:	7019      	strb	r1, [r3, #0]
 8011a00:	4608      	mov	r0, r1
 8011a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <__sfputs_r>:
 8011a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0a:	4606      	mov	r6, r0
 8011a0c:	460f      	mov	r7, r1
 8011a0e:	4614      	mov	r4, r2
 8011a10:	18d5      	adds	r5, r2, r3
 8011a12:	42ac      	cmp	r4, r5
 8011a14:	d101      	bne.n	8011a1a <__sfputs_r+0x12>
 8011a16:	2000      	movs	r0, #0
 8011a18:	e007      	b.n	8011a2a <__sfputs_r+0x22>
 8011a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a1e:	463a      	mov	r2, r7
 8011a20:	4630      	mov	r0, r6
 8011a22:	f7ff ffda 	bl	80119da <__sfputc_r>
 8011a26:	1c43      	adds	r3, r0, #1
 8011a28:	d1f3      	bne.n	8011a12 <__sfputs_r+0xa>
 8011a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011a2c <_vfiprintf_r>:
 8011a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a30:	460d      	mov	r5, r1
 8011a32:	b09d      	sub	sp, #116	; 0x74
 8011a34:	4614      	mov	r4, r2
 8011a36:	4698      	mov	r8, r3
 8011a38:	4606      	mov	r6, r0
 8011a3a:	b118      	cbz	r0, 8011a44 <_vfiprintf_r+0x18>
 8011a3c:	6a03      	ldr	r3, [r0, #32]
 8011a3e:	b90b      	cbnz	r3, 8011a44 <_vfiprintf_r+0x18>
 8011a40:	f7fe f98e 	bl	800fd60 <__sinit>
 8011a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a46:	07d9      	lsls	r1, r3, #31
 8011a48:	d405      	bmi.n	8011a56 <_vfiprintf_r+0x2a>
 8011a4a:	89ab      	ldrh	r3, [r5, #12]
 8011a4c:	059a      	lsls	r2, r3, #22
 8011a4e:	d402      	bmi.n	8011a56 <_vfiprintf_r+0x2a>
 8011a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a52:	f7fe faab 	bl	800ffac <__retarget_lock_acquire_recursive>
 8011a56:	89ab      	ldrh	r3, [r5, #12]
 8011a58:	071b      	lsls	r3, r3, #28
 8011a5a:	d501      	bpl.n	8011a60 <_vfiprintf_r+0x34>
 8011a5c:	692b      	ldr	r3, [r5, #16]
 8011a5e:	b99b      	cbnz	r3, 8011a88 <_vfiprintf_r+0x5c>
 8011a60:	4629      	mov	r1, r5
 8011a62:	4630      	mov	r0, r6
 8011a64:	f000 f93a 	bl	8011cdc <__swsetup_r>
 8011a68:	b170      	cbz	r0, 8011a88 <_vfiprintf_r+0x5c>
 8011a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a6c:	07dc      	lsls	r4, r3, #31
 8011a6e:	d504      	bpl.n	8011a7a <_vfiprintf_r+0x4e>
 8011a70:	f04f 30ff 	mov.w	r0, #4294967295
 8011a74:	b01d      	add	sp, #116	; 0x74
 8011a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a7a:	89ab      	ldrh	r3, [r5, #12]
 8011a7c:	0598      	lsls	r0, r3, #22
 8011a7e:	d4f7      	bmi.n	8011a70 <_vfiprintf_r+0x44>
 8011a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a82:	f7fe fa94 	bl	800ffae <__retarget_lock_release_recursive>
 8011a86:	e7f3      	b.n	8011a70 <_vfiprintf_r+0x44>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a8c:	2320      	movs	r3, #32
 8011a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a96:	2330      	movs	r3, #48	; 0x30
 8011a98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011c4c <_vfiprintf_r+0x220>
 8011a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011aa0:	f04f 0901 	mov.w	r9, #1
 8011aa4:	4623      	mov	r3, r4
 8011aa6:	469a      	mov	sl, r3
 8011aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aac:	b10a      	cbz	r2, 8011ab2 <_vfiprintf_r+0x86>
 8011aae:	2a25      	cmp	r2, #37	; 0x25
 8011ab0:	d1f9      	bne.n	8011aa6 <_vfiprintf_r+0x7a>
 8011ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ab6:	d00b      	beq.n	8011ad0 <_vfiprintf_r+0xa4>
 8011ab8:	465b      	mov	r3, fp
 8011aba:	4622      	mov	r2, r4
 8011abc:	4629      	mov	r1, r5
 8011abe:	4630      	mov	r0, r6
 8011ac0:	f7ff ffa2 	bl	8011a08 <__sfputs_r>
 8011ac4:	3001      	adds	r0, #1
 8011ac6:	f000 80a9 	beq.w	8011c1c <_vfiprintf_r+0x1f0>
 8011aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011acc:	445a      	add	r2, fp
 8011ace:	9209      	str	r2, [sp, #36]	; 0x24
 8011ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f000 80a1 	beq.w	8011c1c <_vfiprintf_r+0x1f0>
 8011ada:	2300      	movs	r3, #0
 8011adc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ae4:	f10a 0a01 	add.w	sl, sl, #1
 8011ae8:	9304      	str	r3, [sp, #16]
 8011aea:	9307      	str	r3, [sp, #28]
 8011aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011af0:	931a      	str	r3, [sp, #104]	; 0x68
 8011af2:	4654      	mov	r4, sl
 8011af4:	2205      	movs	r2, #5
 8011af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011afa:	4854      	ldr	r0, [pc, #336]	; (8011c4c <_vfiprintf_r+0x220>)
 8011afc:	f7ee fb68 	bl	80001d0 <memchr>
 8011b00:	9a04      	ldr	r2, [sp, #16]
 8011b02:	b9d8      	cbnz	r0, 8011b3c <_vfiprintf_r+0x110>
 8011b04:	06d1      	lsls	r1, r2, #27
 8011b06:	bf44      	itt	mi
 8011b08:	2320      	movmi	r3, #32
 8011b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b0e:	0713      	lsls	r3, r2, #28
 8011b10:	bf44      	itt	mi
 8011b12:	232b      	movmi	r3, #43	; 0x2b
 8011b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b18:	f89a 3000 	ldrb.w	r3, [sl]
 8011b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8011b1e:	d015      	beq.n	8011b4c <_vfiprintf_r+0x120>
 8011b20:	9a07      	ldr	r2, [sp, #28]
 8011b22:	4654      	mov	r4, sl
 8011b24:	2000      	movs	r0, #0
 8011b26:	f04f 0c0a 	mov.w	ip, #10
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b30:	3b30      	subs	r3, #48	; 0x30
 8011b32:	2b09      	cmp	r3, #9
 8011b34:	d94d      	bls.n	8011bd2 <_vfiprintf_r+0x1a6>
 8011b36:	b1b0      	cbz	r0, 8011b66 <_vfiprintf_r+0x13a>
 8011b38:	9207      	str	r2, [sp, #28]
 8011b3a:	e014      	b.n	8011b66 <_vfiprintf_r+0x13a>
 8011b3c:	eba0 0308 	sub.w	r3, r0, r8
 8011b40:	fa09 f303 	lsl.w	r3, r9, r3
 8011b44:	4313      	orrs	r3, r2
 8011b46:	9304      	str	r3, [sp, #16]
 8011b48:	46a2      	mov	sl, r4
 8011b4a:	e7d2      	b.n	8011af2 <_vfiprintf_r+0xc6>
 8011b4c:	9b03      	ldr	r3, [sp, #12]
 8011b4e:	1d19      	adds	r1, r3, #4
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	9103      	str	r1, [sp, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	bfbb      	ittet	lt
 8011b58:	425b      	neglt	r3, r3
 8011b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8011b5e:	9307      	strge	r3, [sp, #28]
 8011b60:	9307      	strlt	r3, [sp, #28]
 8011b62:	bfb8      	it	lt
 8011b64:	9204      	strlt	r2, [sp, #16]
 8011b66:	7823      	ldrb	r3, [r4, #0]
 8011b68:	2b2e      	cmp	r3, #46	; 0x2e
 8011b6a:	d10c      	bne.n	8011b86 <_vfiprintf_r+0x15a>
 8011b6c:	7863      	ldrb	r3, [r4, #1]
 8011b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8011b70:	d134      	bne.n	8011bdc <_vfiprintf_r+0x1b0>
 8011b72:	9b03      	ldr	r3, [sp, #12]
 8011b74:	1d1a      	adds	r2, r3, #4
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	9203      	str	r2, [sp, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	bfb8      	it	lt
 8011b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b82:	3402      	adds	r4, #2
 8011b84:	9305      	str	r3, [sp, #20]
 8011b86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011c5c <_vfiprintf_r+0x230>
 8011b8a:	7821      	ldrb	r1, [r4, #0]
 8011b8c:	2203      	movs	r2, #3
 8011b8e:	4650      	mov	r0, sl
 8011b90:	f7ee fb1e 	bl	80001d0 <memchr>
 8011b94:	b138      	cbz	r0, 8011ba6 <_vfiprintf_r+0x17a>
 8011b96:	9b04      	ldr	r3, [sp, #16]
 8011b98:	eba0 000a 	sub.w	r0, r0, sl
 8011b9c:	2240      	movs	r2, #64	; 0x40
 8011b9e:	4082      	lsls	r2, r0
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	3401      	adds	r4, #1
 8011ba4:	9304      	str	r3, [sp, #16]
 8011ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011baa:	4829      	ldr	r0, [pc, #164]	; (8011c50 <_vfiprintf_r+0x224>)
 8011bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bb0:	2206      	movs	r2, #6
 8011bb2:	f7ee fb0d 	bl	80001d0 <memchr>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d03f      	beq.n	8011c3a <_vfiprintf_r+0x20e>
 8011bba:	4b26      	ldr	r3, [pc, #152]	; (8011c54 <_vfiprintf_r+0x228>)
 8011bbc:	bb1b      	cbnz	r3, 8011c06 <_vfiprintf_r+0x1da>
 8011bbe:	9b03      	ldr	r3, [sp, #12]
 8011bc0:	3307      	adds	r3, #7
 8011bc2:	f023 0307 	bic.w	r3, r3, #7
 8011bc6:	3308      	adds	r3, #8
 8011bc8:	9303      	str	r3, [sp, #12]
 8011bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bcc:	443b      	add	r3, r7
 8011bce:	9309      	str	r3, [sp, #36]	; 0x24
 8011bd0:	e768      	b.n	8011aa4 <_vfiprintf_r+0x78>
 8011bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bd6:	460c      	mov	r4, r1
 8011bd8:	2001      	movs	r0, #1
 8011bda:	e7a6      	b.n	8011b2a <_vfiprintf_r+0xfe>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	3401      	adds	r4, #1
 8011be0:	9305      	str	r3, [sp, #20]
 8011be2:	4619      	mov	r1, r3
 8011be4:	f04f 0c0a 	mov.w	ip, #10
 8011be8:	4620      	mov	r0, r4
 8011bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bee:	3a30      	subs	r2, #48	; 0x30
 8011bf0:	2a09      	cmp	r2, #9
 8011bf2:	d903      	bls.n	8011bfc <_vfiprintf_r+0x1d0>
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d0c6      	beq.n	8011b86 <_vfiprintf_r+0x15a>
 8011bf8:	9105      	str	r1, [sp, #20]
 8011bfa:	e7c4      	b.n	8011b86 <_vfiprintf_r+0x15a>
 8011bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c00:	4604      	mov	r4, r0
 8011c02:	2301      	movs	r3, #1
 8011c04:	e7f0      	b.n	8011be8 <_vfiprintf_r+0x1bc>
 8011c06:	ab03      	add	r3, sp, #12
 8011c08:	9300      	str	r3, [sp, #0]
 8011c0a:	462a      	mov	r2, r5
 8011c0c:	4b12      	ldr	r3, [pc, #72]	; (8011c58 <_vfiprintf_r+0x22c>)
 8011c0e:	a904      	add	r1, sp, #16
 8011c10:	4630      	mov	r0, r6
 8011c12:	f7fd fc65 	bl	800f4e0 <_printf_float>
 8011c16:	4607      	mov	r7, r0
 8011c18:	1c78      	adds	r0, r7, #1
 8011c1a:	d1d6      	bne.n	8011bca <_vfiprintf_r+0x19e>
 8011c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c1e:	07d9      	lsls	r1, r3, #31
 8011c20:	d405      	bmi.n	8011c2e <_vfiprintf_r+0x202>
 8011c22:	89ab      	ldrh	r3, [r5, #12]
 8011c24:	059a      	lsls	r2, r3, #22
 8011c26:	d402      	bmi.n	8011c2e <_vfiprintf_r+0x202>
 8011c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c2a:	f7fe f9c0 	bl	800ffae <__retarget_lock_release_recursive>
 8011c2e:	89ab      	ldrh	r3, [r5, #12]
 8011c30:	065b      	lsls	r3, r3, #25
 8011c32:	f53f af1d 	bmi.w	8011a70 <_vfiprintf_r+0x44>
 8011c36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c38:	e71c      	b.n	8011a74 <_vfiprintf_r+0x48>
 8011c3a:	ab03      	add	r3, sp, #12
 8011c3c:	9300      	str	r3, [sp, #0]
 8011c3e:	462a      	mov	r2, r5
 8011c40:	4b05      	ldr	r3, [pc, #20]	; (8011c58 <_vfiprintf_r+0x22c>)
 8011c42:	a904      	add	r1, sp, #16
 8011c44:	4630      	mov	r0, r6
 8011c46:	f7fd feef 	bl	800fa28 <_printf_i>
 8011c4a:	e7e4      	b.n	8011c16 <_vfiprintf_r+0x1ea>
 8011c4c:	08012644 	.word	0x08012644
 8011c50:	0801264e 	.word	0x0801264e
 8011c54:	0800f4e1 	.word	0x0800f4e1
 8011c58:	08011a09 	.word	0x08011a09
 8011c5c:	0801264a 	.word	0x0801264a

08011c60 <__swbuf_r>:
 8011c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c62:	460e      	mov	r6, r1
 8011c64:	4614      	mov	r4, r2
 8011c66:	4605      	mov	r5, r0
 8011c68:	b118      	cbz	r0, 8011c72 <__swbuf_r+0x12>
 8011c6a:	6a03      	ldr	r3, [r0, #32]
 8011c6c:	b90b      	cbnz	r3, 8011c72 <__swbuf_r+0x12>
 8011c6e:	f7fe f877 	bl	800fd60 <__sinit>
 8011c72:	69a3      	ldr	r3, [r4, #24]
 8011c74:	60a3      	str	r3, [r4, #8]
 8011c76:	89a3      	ldrh	r3, [r4, #12]
 8011c78:	071a      	lsls	r2, r3, #28
 8011c7a:	d525      	bpl.n	8011cc8 <__swbuf_r+0x68>
 8011c7c:	6923      	ldr	r3, [r4, #16]
 8011c7e:	b31b      	cbz	r3, 8011cc8 <__swbuf_r+0x68>
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	6922      	ldr	r2, [r4, #16]
 8011c84:	1a98      	subs	r0, r3, r2
 8011c86:	6963      	ldr	r3, [r4, #20]
 8011c88:	b2f6      	uxtb	r6, r6
 8011c8a:	4283      	cmp	r3, r0
 8011c8c:	4637      	mov	r7, r6
 8011c8e:	dc04      	bgt.n	8011c9a <__swbuf_r+0x3a>
 8011c90:	4621      	mov	r1, r4
 8011c92:	4628      	mov	r0, r5
 8011c94:	f7ff fdbc 	bl	8011810 <_fflush_r>
 8011c98:	b9e0      	cbnz	r0, 8011cd4 <__swbuf_r+0x74>
 8011c9a:	68a3      	ldr	r3, [r4, #8]
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	60a3      	str	r3, [r4, #8]
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	1c5a      	adds	r2, r3, #1
 8011ca4:	6022      	str	r2, [r4, #0]
 8011ca6:	701e      	strb	r6, [r3, #0]
 8011ca8:	6962      	ldr	r2, [r4, #20]
 8011caa:	1c43      	adds	r3, r0, #1
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d004      	beq.n	8011cba <__swbuf_r+0x5a>
 8011cb0:	89a3      	ldrh	r3, [r4, #12]
 8011cb2:	07db      	lsls	r3, r3, #31
 8011cb4:	d506      	bpl.n	8011cc4 <__swbuf_r+0x64>
 8011cb6:	2e0a      	cmp	r6, #10
 8011cb8:	d104      	bne.n	8011cc4 <__swbuf_r+0x64>
 8011cba:	4621      	mov	r1, r4
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	f7ff fda7 	bl	8011810 <_fflush_r>
 8011cc2:	b938      	cbnz	r0, 8011cd4 <__swbuf_r+0x74>
 8011cc4:	4638      	mov	r0, r7
 8011cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc8:	4621      	mov	r1, r4
 8011cca:	4628      	mov	r0, r5
 8011ccc:	f000 f806 	bl	8011cdc <__swsetup_r>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d0d5      	beq.n	8011c80 <__swbuf_r+0x20>
 8011cd4:	f04f 37ff 	mov.w	r7, #4294967295
 8011cd8:	e7f4      	b.n	8011cc4 <__swbuf_r+0x64>
	...

08011cdc <__swsetup_r>:
 8011cdc:	b538      	push	{r3, r4, r5, lr}
 8011cde:	4b2a      	ldr	r3, [pc, #168]	; (8011d88 <__swsetup_r+0xac>)
 8011ce0:	4605      	mov	r5, r0
 8011ce2:	6818      	ldr	r0, [r3, #0]
 8011ce4:	460c      	mov	r4, r1
 8011ce6:	b118      	cbz	r0, 8011cf0 <__swsetup_r+0x14>
 8011ce8:	6a03      	ldr	r3, [r0, #32]
 8011cea:	b90b      	cbnz	r3, 8011cf0 <__swsetup_r+0x14>
 8011cec:	f7fe f838 	bl	800fd60 <__sinit>
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cf6:	0718      	lsls	r0, r3, #28
 8011cf8:	d422      	bmi.n	8011d40 <__swsetup_r+0x64>
 8011cfa:	06d9      	lsls	r1, r3, #27
 8011cfc:	d407      	bmi.n	8011d0e <__swsetup_r+0x32>
 8011cfe:	2309      	movs	r3, #9
 8011d00:	602b      	str	r3, [r5, #0]
 8011d02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d06:	81a3      	strh	r3, [r4, #12]
 8011d08:	f04f 30ff 	mov.w	r0, #4294967295
 8011d0c:	e034      	b.n	8011d78 <__swsetup_r+0x9c>
 8011d0e:	0758      	lsls	r0, r3, #29
 8011d10:	d512      	bpl.n	8011d38 <__swsetup_r+0x5c>
 8011d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d14:	b141      	cbz	r1, 8011d28 <__swsetup_r+0x4c>
 8011d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d1a:	4299      	cmp	r1, r3
 8011d1c:	d002      	beq.n	8011d24 <__swsetup_r+0x48>
 8011d1e:	4628      	mov	r0, r5
 8011d20:	f7fe ffd0 	bl	8010cc4 <_free_r>
 8011d24:	2300      	movs	r3, #0
 8011d26:	6363      	str	r3, [r4, #52]	; 0x34
 8011d28:	89a3      	ldrh	r3, [r4, #12]
 8011d2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d2e:	81a3      	strh	r3, [r4, #12]
 8011d30:	2300      	movs	r3, #0
 8011d32:	6063      	str	r3, [r4, #4]
 8011d34:	6923      	ldr	r3, [r4, #16]
 8011d36:	6023      	str	r3, [r4, #0]
 8011d38:	89a3      	ldrh	r3, [r4, #12]
 8011d3a:	f043 0308 	orr.w	r3, r3, #8
 8011d3e:	81a3      	strh	r3, [r4, #12]
 8011d40:	6923      	ldr	r3, [r4, #16]
 8011d42:	b94b      	cbnz	r3, 8011d58 <__swsetup_r+0x7c>
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d4e:	d003      	beq.n	8011d58 <__swsetup_r+0x7c>
 8011d50:	4621      	mov	r1, r4
 8011d52:	4628      	mov	r0, r5
 8011d54:	f000 f884 	bl	8011e60 <__smakebuf_r>
 8011d58:	89a0      	ldrh	r0, [r4, #12]
 8011d5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d5e:	f010 0301 	ands.w	r3, r0, #1
 8011d62:	d00a      	beq.n	8011d7a <__swsetup_r+0x9e>
 8011d64:	2300      	movs	r3, #0
 8011d66:	60a3      	str	r3, [r4, #8]
 8011d68:	6963      	ldr	r3, [r4, #20]
 8011d6a:	425b      	negs	r3, r3
 8011d6c:	61a3      	str	r3, [r4, #24]
 8011d6e:	6923      	ldr	r3, [r4, #16]
 8011d70:	b943      	cbnz	r3, 8011d84 <__swsetup_r+0xa8>
 8011d72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d76:	d1c4      	bne.n	8011d02 <__swsetup_r+0x26>
 8011d78:	bd38      	pop	{r3, r4, r5, pc}
 8011d7a:	0781      	lsls	r1, r0, #30
 8011d7c:	bf58      	it	pl
 8011d7e:	6963      	ldrpl	r3, [r4, #20]
 8011d80:	60a3      	str	r3, [r4, #8]
 8011d82:	e7f4      	b.n	8011d6e <__swsetup_r+0x92>
 8011d84:	2000      	movs	r0, #0
 8011d86:	e7f7      	b.n	8011d78 <__swsetup_r+0x9c>
 8011d88:	2000038c 	.word	0x2000038c

08011d8c <_raise_r>:
 8011d8c:	291f      	cmp	r1, #31
 8011d8e:	b538      	push	{r3, r4, r5, lr}
 8011d90:	4604      	mov	r4, r0
 8011d92:	460d      	mov	r5, r1
 8011d94:	d904      	bls.n	8011da0 <_raise_r+0x14>
 8011d96:	2316      	movs	r3, #22
 8011d98:	6003      	str	r3, [r0, #0]
 8011d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d9e:	bd38      	pop	{r3, r4, r5, pc}
 8011da0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011da2:	b112      	cbz	r2, 8011daa <_raise_r+0x1e>
 8011da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011da8:	b94b      	cbnz	r3, 8011dbe <_raise_r+0x32>
 8011daa:	4620      	mov	r0, r4
 8011dac:	f000 f830 	bl	8011e10 <_getpid_r>
 8011db0:	462a      	mov	r2, r5
 8011db2:	4601      	mov	r1, r0
 8011db4:	4620      	mov	r0, r4
 8011db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dba:	f000 b817 	b.w	8011dec <_kill_r>
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d00a      	beq.n	8011dd8 <_raise_r+0x4c>
 8011dc2:	1c59      	adds	r1, r3, #1
 8011dc4:	d103      	bne.n	8011dce <_raise_r+0x42>
 8011dc6:	2316      	movs	r3, #22
 8011dc8:	6003      	str	r3, [r0, #0]
 8011dca:	2001      	movs	r0, #1
 8011dcc:	e7e7      	b.n	8011d9e <_raise_r+0x12>
 8011dce:	2400      	movs	r4, #0
 8011dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	4798      	blx	r3
 8011dd8:	2000      	movs	r0, #0
 8011dda:	e7e0      	b.n	8011d9e <_raise_r+0x12>

08011ddc <raise>:
 8011ddc:	4b02      	ldr	r3, [pc, #8]	; (8011de8 <raise+0xc>)
 8011dde:	4601      	mov	r1, r0
 8011de0:	6818      	ldr	r0, [r3, #0]
 8011de2:	f7ff bfd3 	b.w	8011d8c <_raise_r>
 8011de6:	bf00      	nop
 8011de8:	2000038c 	.word	0x2000038c

08011dec <_kill_r>:
 8011dec:	b538      	push	{r3, r4, r5, lr}
 8011dee:	4d07      	ldr	r5, [pc, #28]	; (8011e0c <_kill_r+0x20>)
 8011df0:	2300      	movs	r3, #0
 8011df2:	4604      	mov	r4, r0
 8011df4:	4608      	mov	r0, r1
 8011df6:	4611      	mov	r1, r2
 8011df8:	602b      	str	r3, [r5, #0]
 8011dfa:	f7f4 fa16 	bl	800622a <_kill>
 8011dfe:	1c43      	adds	r3, r0, #1
 8011e00:	d102      	bne.n	8011e08 <_kill_r+0x1c>
 8011e02:	682b      	ldr	r3, [r5, #0]
 8011e04:	b103      	cbz	r3, 8011e08 <_kill_r+0x1c>
 8011e06:	6023      	str	r3, [r4, #0]
 8011e08:	bd38      	pop	{r3, r4, r5, pc}
 8011e0a:	bf00      	nop
 8011e0c:	20001860 	.word	0x20001860

08011e10 <_getpid_r>:
 8011e10:	f7f4 ba03 	b.w	800621a <_getpid>

08011e14 <__swhatbuf_r>:
 8011e14:	b570      	push	{r4, r5, r6, lr}
 8011e16:	460c      	mov	r4, r1
 8011e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e1c:	2900      	cmp	r1, #0
 8011e1e:	b096      	sub	sp, #88	; 0x58
 8011e20:	4615      	mov	r5, r2
 8011e22:	461e      	mov	r6, r3
 8011e24:	da0d      	bge.n	8011e42 <__swhatbuf_r+0x2e>
 8011e26:	89a3      	ldrh	r3, [r4, #12]
 8011e28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011e2c:	f04f 0100 	mov.w	r1, #0
 8011e30:	bf0c      	ite	eq
 8011e32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011e36:	2340      	movne	r3, #64	; 0x40
 8011e38:	2000      	movs	r0, #0
 8011e3a:	6031      	str	r1, [r6, #0]
 8011e3c:	602b      	str	r3, [r5, #0]
 8011e3e:	b016      	add	sp, #88	; 0x58
 8011e40:	bd70      	pop	{r4, r5, r6, pc}
 8011e42:	466a      	mov	r2, sp
 8011e44:	f000 f848 	bl	8011ed8 <_fstat_r>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	dbec      	blt.n	8011e26 <__swhatbuf_r+0x12>
 8011e4c:	9901      	ldr	r1, [sp, #4]
 8011e4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011e52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011e56:	4259      	negs	r1, r3
 8011e58:	4159      	adcs	r1, r3
 8011e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e5e:	e7eb      	b.n	8011e38 <__swhatbuf_r+0x24>

08011e60 <__smakebuf_r>:
 8011e60:	898b      	ldrh	r3, [r1, #12]
 8011e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e64:	079d      	lsls	r5, r3, #30
 8011e66:	4606      	mov	r6, r0
 8011e68:	460c      	mov	r4, r1
 8011e6a:	d507      	bpl.n	8011e7c <__smakebuf_r+0x1c>
 8011e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e70:	6023      	str	r3, [r4, #0]
 8011e72:	6123      	str	r3, [r4, #16]
 8011e74:	2301      	movs	r3, #1
 8011e76:	6163      	str	r3, [r4, #20]
 8011e78:	b002      	add	sp, #8
 8011e7a:	bd70      	pop	{r4, r5, r6, pc}
 8011e7c:	ab01      	add	r3, sp, #4
 8011e7e:	466a      	mov	r2, sp
 8011e80:	f7ff ffc8 	bl	8011e14 <__swhatbuf_r>
 8011e84:	9900      	ldr	r1, [sp, #0]
 8011e86:	4605      	mov	r5, r0
 8011e88:	4630      	mov	r0, r6
 8011e8a:	f7fd f9fd 	bl	800f288 <_malloc_r>
 8011e8e:	b948      	cbnz	r0, 8011ea4 <__smakebuf_r+0x44>
 8011e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e94:	059a      	lsls	r2, r3, #22
 8011e96:	d4ef      	bmi.n	8011e78 <__smakebuf_r+0x18>
 8011e98:	f023 0303 	bic.w	r3, r3, #3
 8011e9c:	f043 0302 	orr.w	r3, r3, #2
 8011ea0:	81a3      	strh	r3, [r4, #12]
 8011ea2:	e7e3      	b.n	8011e6c <__smakebuf_r+0xc>
 8011ea4:	89a3      	ldrh	r3, [r4, #12]
 8011ea6:	6020      	str	r0, [r4, #0]
 8011ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eac:	81a3      	strh	r3, [r4, #12]
 8011eae:	9b00      	ldr	r3, [sp, #0]
 8011eb0:	6163      	str	r3, [r4, #20]
 8011eb2:	9b01      	ldr	r3, [sp, #4]
 8011eb4:	6120      	str	r0, [r4, #16]
 8011eb6:	b15b      	cbz	r3, 8011ed0 <__smakebuf_r+0x70>
 8011eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	f000 f81d 	bl	8011efc <_isatty_r>
 8011ec2:	b128      	cbz	r0, 8011ed0 <__smakebuf_r+0x70>
 8011ec4:	89a3      	ldrh	r3, [r4, #12]
 8011ec6:	f023 0303 	bic.w	r3, r3, #3
 8011eca:	f043 0301 	orr.w	r3, r3, #1
 8011ece:	81a3      	strh	r3, [r4, #12]
 8011ed0:	89a3      	ldrh	r3, [r4, #12]
 8011ed2:	431d      	orrs	r5, r3
 8011ed4:	81a5      	strh	r5, [r4, #12]
 8011ed6:	e7cf      	b.n	8011e78 <__smakebuf_r+0x18>

08011ed8 <_fstat_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4d07      	ldr	r5, [pc, #28]	; (8011ef8 <_fstat_r+0x20>)
 8011edc:	2300      	movs	r3, #0
 8011ede:	4604      	mov	r4, r0
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	602b      	str	r3, [r5, #0]
 8011ee6:	f7f4 f9ff 	bl	80062e8 <_fstat>
 8011eea:	1c43      	adds	r3, r0, #1
 8011eec:	d102      	bne.n	8011ef4 <_fstat_r+0x1c>
 8011eee:	682b      	ldr	r3, [r5, #0]
 8011ef0:	b103      	cbz	r3, 8011ef4 <_fstat_r+0x1c>
 8011ef2:	6023      	str	r3, [r4, #0]
 8011ef4:	bd38      	pop	{r3, r4, r5, pc}
 8011ef6:	bf00      	nop
 8011ef8:	20001860 	.word	0x20001860

08011efc <_isatty_r>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	4d06      	ldr	r5, [pc, #24]	; (8011f18 <_isatty_r+0x1c>)
 8011f00:	2300      	movs	r3, #0
 8011f02:	4604      	mov	r4, r0
 8011f04:	4608      	mov	r0, r1
 8011f06:	602b      	str	r3, [r5, #0]
 8011f08:	f7f4 f9fe 	bl	8006308 <_isatty>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d102      	bne.n	8011f16 <_isatty_r+0x1a>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	b103      	cbz	r3, 8011f16 <_isatty_r+0x1a>
 8011f14:	6023      	str	r3, [r4, #0]
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	20001860 	.word	0x20001860

08011f1c <_init>:
 8011f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1e:	bf00      	nop
 8011f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f22:	bc08      	pop	{r3}
 8011f24:	469e      	mov	lr, r3
 8011f26:	4770      	bx	lr

08011f28 <_fini>:
 8011f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f2a:	bf00      	nop
 8011f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f2e:	bc08      	pop	{r3}
 8011f30:	469e      	mov	lr, r3
 8011f32:	4770      	bx	lr
